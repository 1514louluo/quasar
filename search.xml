<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>http://quasar-framework.org/2015/10/02/Working-On-The-First-Release/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Writing a Quasar App Page]]></title>
      <url>http://quasar-framework.org/guide/writing-quasar-page.html</url>
      <content type="html"><![CDATA[<p>Make sure you read and understood the <a href="/guide/quasar-app-structure.html">structure of a Quasar App</a> first.<br>Then use the <a href="/guide/cli-commands.html#Pages">Quasar CLI</a> to build a page.<br>Also don’t forget to read more about the <a href="/guide/quasar-build-process.html">Build Process</a> to understand how pages are compiled, what files are considered an entry-point and many more.</p>
<p>Now let’s dissect how pages work.</p>
<h2 id="Javascript">Javascript</h2><p>The starting point of a page is the <em>js/script.page-name.js</em> file.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Use for Async operations (like Ajax requests) before displaying page</span><br><span class="line"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports.prepare = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Properties available:</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">  <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* When async operations are done, call this: */</span></span><br><span class="line">  <span class="keyword">this</span>.done(<span class="comment">/* Object */</span>data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span><br><span class="line">  * Compute Vue scope</span><br><span class="line">  */</span></span><br><span class="line"> <span class="built_in">module</span>.exports.scope = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">/*</span><br><span class="line">    * Common properties available:</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">   <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">   <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">   <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span><br><span class="line">    * Specific properties available:</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">this</span>.data <span class="comment">// [Anything] Result from calling this.done() from prepare() from above</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Return what is going to become the Vue scope of the page */</span></span><br><span class="line">   <span class="keyword">return</span> &#123;...&#125;;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span><br><span class="line">  * Finally everything is set to start page operations</span><br><span class="line">  */</span></span><br><span class="line"><span class="built_in">module</span>.exports.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Properties available:</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">  <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Specific properties available:</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.data <span class="comment">// [Anything] Result from calling this.done() from prepare() from above</span></span><br><span class="line">  <span class="keyword">this</span>.scope <span class="comment">// [Object] Result from calling scope() from above</span></span><br><span class="line">  <span class="keyword">this</span>.vm <span class="comment">// [Object, Vue instance] Vue-Model of page</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>Include other JS files for modularity by <em>require()</em>-ing them. Take full advantage of Webpack.<br>Read more about the <a href="/guide/quasar-build-process.html">Build Process</a> to understand.</p>
</blockquote>
<h2 id="Page_Manifest">Page Manifest</h2><p>Provide page specific configuration (in YAML format), called <em>Manifest</em> in <code>/pages/*page-name*/config.*page-name*.yml</code>.</p>
<h3 id="HTML_&amp;_CSS_Properties">HTML &amp; CSS Properties</h3><p>These get computed by default if CSS and HTML main page files exists, but they can be overridden to point to other files. The path must start with the folder where app root <em>index.html</em> file exists.<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">css: &#39;path/to/css&#39;&#10;html: &#39;path/to/html&#39;</span><br></pre></td></tr></table></figure></p>
<h3 id="Page_Routes_Properties">Page Routes Properties</h3><p>One more important property is <code>hashes</code>, which is an array of hashes for the respective page. Example:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># config.book.yml&#10;&#10;hashes:&#10;  - &#39;$&#39; # registers #/book route (because &#39;book&#39; is the name of the page)&#10;  - &#39;:chapter/:page&#39; # adds this.params.chapter &#38; this.params.page from page methods</span><br></pre></td></tr></table></figure></p>
<p>So now if we navigate to route <em>#/book/thinking/20</em>, we’ll trigger <em>book</em> page:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js/script.book.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.params.chapter <span class="comment">// is (String) 'thinking'</span></span><br><span class="line">  <span class="keyword">this</span>.params.page <span class="comment">// is (String) '20'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="Your_Own_Properties">Your Own Properties</h3><p>Any other property that you write in the page manifest will be accessible under <code>this.manifest</code> property in page methods.<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># config.book.yml&#10;&#10;myprop: &#39;my-value&#39;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js/script.book.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.manifest.myprop <span class="comment">// is 'my-value'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="HTML">HTML</h2><p>The Quasar App Pages’ HTML is a Vue instance. Read more about the <a href="/guide/quasar-build-process.html#HTML_Files">Build Process</a> to understand.</p>
<h2 id="CSS">CSS</h2><p>Notice that all CSS files have the <em>.styl</em> extension. This is because you can use  Stylus (with NIB). Read more about the <a href="/guide/quasar-build-process.html">Build Process</a> to understand.</p>
<h2 id="Assets">Assets</h2><p>Place all your page assets (images, fonts, …) inside the <code>/pages/*page-name*/assets/</code> folder.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quick Start]]></title>
      <url>http://quasar-framework.org/guide/quick-start.html</url>
      <content type="html"><![CDATA[<p>Create a project folder (in this case is called <em>q-project</em> but you can name it whatever you want):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new q-project</span><br><span class="line">$ <span class="built_in">cd</span> q-project</span><br></pre></td></tr></table></figure></p>
<p>Finally install local project dependencies:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>You’re all set now. You can start developing your application.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Build Process]]></title>
      <url>http://quasar-framework.org/guide/quasar-build-process.html</url>
      <content type="html"><![CDATA[<p>The App must be built before deployment. Read more how to build in the <a href="/guide/cli-commands.html#Build">CLI Commands</a> section.</p>
<p>Following lines will describe how everything is glued together.</p>
<h2 id="Source_Files">Source Files</h2><h3 id="Javascript_Files">Javascript Files</h3><p>Javascript files are glued together using <a href="http://webpack.github.io/docs/" target="_blank">Webpack</a>. So you can use <em>require()</em> – and <em>require.resolve()</em> – for modularity. You must adhere to the <a href="https://webpack.github.io/docs/commonjs.html" target="_blank">CommonJS2</a> format when writing <em>.js</em> files.</p>
<p>Take into consideration that the following files are taken as Webpack entry-points (take a good look at folders):</p>
<ul>
<li>/js/<em>file-name</em>.js</li>
<li>/pages/<em>page-name</em>/js/<em>file-name</em>.js</li>
</ul>
<p>So when writing a Quasar App Page script and you want to <em>require()</em> something, in the <em>/pages/page-name/js/</em> folder, make a sub-folder and place it there. Otherwise any <em>.js</em> files directly under <em>/pages/page-name/js/</em> folder are considered entry-points and will be built accordingly, which is not what you want. Same for the global <em>/js</em> folder.</p>
<h3 id="CSS_Files">CSS Files</h3><p>Notice that all CSS files are built using <a href="https://learnboost.github.io/stylus/" target="_blank">Stylus</a>, so they have the <em>.styl</em> extension. The Stylus NIB extension is also available.</p>
<p>Take into consideration that the following files are taken as Stylus entry-points (take a good look at folders):</p>
<ul>
<li>/css/<em>file-name</em>.styl</li>
<li>/pages/<em>page-name</em>/css/<em>file-name</em>.styl</li>
</ul>
<p>So when writing a Quasar App Page CSS and you want to <em>import</em> something, in the <em>/pages/page-name/css/</em> folder, make a sub-folder and place it there. Otherwise any <em>.styl</em> files directly under <em>/pages/page-name/css/</em> folder are considered entry-points and will be built accordingly, which is not what you want. Same for the global <em>/css</em> folder.</p>
<h3 id="HTML_Files">HTML Files</h3><blockquote>
<p>The Quasar App Pages’ HTML is a compiled into Vue instances, so yeah!, you can use <strong>two-way data binding</strong>.<br>Read more about the two-way data binding Vue library and how to use it <a href="http://vuejs.org" target="_blank">here</a>.</p>
</blockquote>
<p>To support code modularity inside your HTMLs you can include other HTML files/templates. Take into consideration that the following files are considered entry-points (take a good look at folders):</p>
<ul>
<li>/html/<em>file-name</em>.html</li>
<li>/pages/<em>page-name</em>/html/<em>file-name</em>.html</li>
</ul>
<p>So when writing a Quasar App Page HTML and you want to <em>include</em> something, in the <em>/pages/page-name/html/</em> folder, make a sub-folder and place it there. Otherwise any <em>.html</em> files directly under <em>/pages/page-name/html/</em> folder are considered entry-points and will be built accordingly, which is not what you want. Same for the global <em>/html</em> folder.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// view.page-name.html:</span><br><span class="line"></span><br><span class="line">@@include('./view.html')     &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">@@include('./var.html', &#123;    &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  "name": "rstoenescu",</span><br><span class="line">  "age": 12345,</span><br><span class="line">  "socials": &#123;</span><br><span class="line">    "fb": "facebook.com/include",</span><br><span class="line">    "tw": "twitter.com/include"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// view.html:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>view<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// var.html:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span>&gt;</span>@@name<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span>&gt;</span>@@age<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>@@socials.fb<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>@@socials.tw<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// ... and it gets compiled to:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>view<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span>&gt;</span>rstoenescu<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span>&gt;</span>12345<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>facebook.com/include<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>twitter.com/include<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Structure]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-structure.html</url>
      <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>This is what a new Quasar Framework App folder structure looks like. Some folders are creating after building the App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── app.css</span><br><span class="line">│   │   └── app-dependencies.css</span><br><span class="line">│   ├── html</span><br><span class="line">│   │   └── app.html</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   ├── app-dependencies.js</span><br><span class="line">│   │   └── app.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       ├── css</span><br><span class="line">│   │       │   └── style.index.css</span><br><span class="line">│   │       ├── html</span><br><span class="line">│   │       │   └── view.index.html</span><br><span class="line">│   │       └── js</span><br><span class="line">│   │           └── script.index.js</span><br><span class="line">│   ├── app.json</span><br><span class="line">│   └── index.html</span><br><span class="line">├── dist</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── app.css</span><br><span class="line">│   │   └── app-dependencies.css</span><br><span class="line">│   ├── html</span><br><span class="line">│   │   └── app.html</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   ├── app-dependencies.js</span><br><span class="line">│   │   └── app.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       ├── css</span><br><span class="line">│   │       │   └── style.index.css</span><br><span class="line">│   │       ├── html</span><br><span class="line">│   │       │   └── view.index.html</span><br><span class="line">│   │       └── js</span><br><span class="line">│   │           └── script.index.js</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── app.styl</span><br><span class="line">│   ├── html</span><br><span class="line">│   │   └── app.html</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   └── app.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       ├── css</span><br><span class="line">│   │       │   └── style.index.styl</span><br><span class="line">│   │       ├── html</span><br><span class="line">│   │       │   └── view.index.html</span><br><span class="line">│   │       ├── js</span><br><span class="line">│   │       │   └── script.index.js</span><br><span class="line">│   │       └── config.index.yml</span><br><span class="line">│   └── index.html</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── karma.conf.js</span><br><span class="line">├── package.json</span><br><span class="line">├── quasar.build.yml</span><br><span class="line">└── README.md</span><br><span class="line"></span><br><span class="line"><span class="number">31</span> directories, <span class="number">32</span> files</span><br></pre></td></tr></table></figure></p>
<p>What each is used for:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/build</td>
<td>Development build folder</td>
</tr>
<tr>
<td>/dist</td>
<td>Production build folder</td>
</tr>
<tr>
<td>/src</td>
<td>App source files; see <a href="#Source_Folder">Source Folder</a></td>
</tr>
<tr>
<td>/test</td>
<td>Test source files</td>
</tr>
<tr>
<td>/quasar.build.yml</td>
<td>YAML file used to configure App build</td>
</tr>
</tbody>
</table>
<h3 id="quasar-build-yml">quasar.build.yml</h3><p>This is the place to include your own dependencies, or configure the banner that is automatically added when building for Production, and many more.</p>
<blockquote>
<p>Note that the format must be YAML.</p>
</blockquote>
<p>Example:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">deps:&#10;  js:&#10;    - &#39;node_modules/X/js/y.js&#39;&#10;    - &#39;node_modules/W/z.js&#39;&#10;  css:&#10;    - &#39;node_modules/X/css/y.css&#39;&#10;preview:&#10;  port: 3500&#10;banner: &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="‘preview’_property">‘preview’ property</h4><p>Browser-Sync configuration. Read more <a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">here</a>. Example of default configuration which is merged with user specific one:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">preview:&#10;  port: 3000&#10;  ui:&#10;    port: 3001&#10;  open: false&#10;  reloadOnRestart: true</span><br></pre></td></tr></table></figure></p>
<h4 id="‘banner’_property">‘banner’ property</h4><p>Read more how to configure <a href="https://github.com/rstoenescu/gulp-pipes#banner" target="_blank" rel="external">here</a>. Example of configuration:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">banner:&#10;  templatePath: &#39;...&#39;&#10;  variables:&#10;    ...&#10;    ...</span><br></pre></td></tr></table></figure></p>
<h2 id="Source_Folder">Source Folder</h2><table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/src/css</td>
<td>Folder to store global/common CSS files</td>
</tr>
<tr>
<td>/src/html</td>
<td>Folder to store global/common HTML files</td>
</tr>
<tr>
<td>/src/js</td>
<td>Folder to store global/common JS files</td>
</tr>
<tr>
<td>/src/pages</td>
<td>Folder to store assets for each page</td>
</tr>
<tr>
<td>/src/index.html</td>
<td>App starting point</td>
</tr>
</tbody>
</table>
<h2 id="Pages">Pages</h2><p>An App’s central working point is the Pages it is composed of. Each page has the following structure:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong></td>
<td>Page folder</td>
</tr>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong>/assets</td>
<td>Folder to place images, fonts, … specific to the page only</td>
</tr>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong>/css</td>
<td>Folder to place CSS files specific to the page only</td>
</tr>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong>/html</td>
<td>Folder to place HTML files specific to the page only</td>
</tr>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong>/js</td>
<td>Folder to place JS files specific to the page only</td>
</tr>
<tr>
<td>/src/pages/<strong>&lt;page-name&gt;</strong>/config.<strong>&lt;page-name&gt;</strong>.yml</td>
<td>Folder to place CSS files specific to the page only</td>
</tr>
</tbody>
</table>
<p>Each page has a starting point for each type of asset:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>style.<strong>&lt;page-name&gt;</strong>.styl</td>
<td>If it exists, it will automatically be included when page is loaded.<br>When user navigates away, it is removed.</td>
</tr>
<tr>
<td>view.<strong>&lt;page-name&gt;</strong>.html</td>
<td>If it exists, it will automatically be included when page is loaded.</td>
</tr>
<tr>
<td>script.<strong>&lt;page-name&gt;</strong>.js</td>
<td><strong>[Required]</strong> Starting point of the page logic</td>
</tr>
<tr>
<td>config.<strong>&lt;page-name&gt;</strong>.yml</td>
<td><strong>[Required]</strong> YAML file with page configuration (called <em>Manifest</em>).</td>
</tr>
</tbody>
</table>
<p>Read about page manifests (<code>config.*page-name*.yml</code>) in <a href="/guide/writing-quasar-page.html#Page_Manifest">Writing a Page</a> section.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Starting Point]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-starting-point.html</url>
      <content type="html"><![CDATA[<p>Kicking off a Quasar App is done so:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.app();</span><br></pre></td></tr></table></figure></p>
<p>This call is embedded by default in <code>js/app.js</code> file which is the first script to get executed after DOM load event.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Installation]]></title>
      <url>http://quasar-framework.org/guide/installation.html</url>
      <content type="html"><![CDATA[<h2 id="Quasar_CLI">Quasar CLI</h2><p><strong>This is the recommended way</strong> by using the Quasar CLI to generate and build a Quasar App.</p>
<p>Make sure you have latest NodeJS and NPM.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g quasar-cli</span><br></pre></td></tr></table></figure></p>
<p>You are all set. Head on to <a href="quick-start.html">Quick Start</a> now.</p>
<h2 id="NPM">NPM</h2><p>If you know what you are doing and how to create the required folder structure, inside<br>your app folder:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save quasar-framework</span><br></pre></td></tr></table></figure>
<p>Compatible with CommonJS2 and AMD loaders, but works without those too.</p>
<h2 id="Bower">Bower</h2><p>If you know what you are doing and how to create the required folder structure, inside<br>your app folder:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bower install quasar-framework</span><br></pre></td></tr></table></figure>
<p>Compatible with CommonJS2 and AMD loaders, but works without those too.</p>
<h2 id="Standalone">Standalone</h2><p>If you know what you are doing and how to create the required folder structure, you can download from below:</p>
<blockquote>
<p><strong>Standalone download not yet available</strong></p>
</blockquote>
<p><a href="<%- config.root %>guide/installation.html" class="button">Development build</a> &nbsp;&nbsp;<em>With sourcemaps, log messages and debug mode</em><br><a href="<%- config.root %>guide/installation.html" class="button">Production build</a> &nbsp;&nbsp;<em>Minified, no logs</em></p>
<p>Compatible with CommonJS2 and AMD loaders, but works without those too.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p>Learn here more about Quasar Framework. How to install it, how to create an app, how to manage it, and more.</p>
<p>When you want API specifications, head on to the <a href="/api">API pages</a>.</p>
<p>Now let’s see how to install Quasar Framework: <a href="installation.html">Installation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Commit Message Format]]></title>
      <url>http://quasar-framework.org/guide/commit-message-format.html</url>
      <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>This format will help with the <em>$ quasar release</em> command when generating the automatic changelog or recommending a version.<br>Using other format breaks parts of the <em>release</em> commands.</p>
<p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>.  The header has a special<br>format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#60;type&#62;(&#60;scope&#62;): &#60;subject&#62;&#10;&#60;BLANK LINE&#62;&#10;&#60;body&#62;&#10;&#60;BLANK LINE&#62;&#10;&#60;footer&#62;</span><br></pre></td></tr></table></figure>
<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>
<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier<br>to read on GitHub as well as in various git tools.</p>
<h2 id="Revert">Revert</h2><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>
<h2 id="Type">Type</h2><p>Must be one of the following:</p>
<ul>
<li><strong>feat</strong>: A new feature</li>
<li><strong>fix</strong>: A bug fix</li>
<li><strong>docs</strong>: Documentation only changes</li>
<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing<br>semi-colons, etc)</li>
<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>
<li><strong>perf</strong>: A code change that improves performance</li>
<li><strong>test</strong>: Adding missing tests</li>
<li><strong>chore</strong>: Changes to the build process or auxiliary tools and libraries such as documentation<br>generation</li>
</ul>
<h3 id="Scope">Scope</h3><p>The scope could be anything specifying place of the commit change. For example use modules as scope name: <code>xhr</code>, <code>router</code>, <code>view</code> etc…</p>
<h3 id="Subject">Subject</h3><p>The subject contains succinct description of the change:</p>
<ul>
<li>use the imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul>
<h3 id="Body">Body</h3><p>Just as in the <strong>subject</strong>, use the imperative, present tense: “change” not “changed” nor “changes”.<br>The body should include the motivation for the change and contrast this with previous behavior.</p>
<h3 id="Footer">Footer</h3><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to<br>reference GitHub issues that this commit <strong>Closes</strong>.</p>
<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CLI Commands]]></title>
      <url>http://quasar-framework.org/guide/cli-commands.html</url>
      <content type="html"><![CDATA[<h2 id="Version">Version</h2><p>Displays version information.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar -V</span><br><span class="line">$ quasar version</span><br></pre></td></tr></table></figure></p>
<h2 id="Help">Help</h2><p>Displays list of all commands and options.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar</span><br><span class="line">$ quasar -h</span><br></pre></td></tr></table></figure></p>
<h2 id="Create_App_Folder">Create App Folder</h2><p>Initializes a project folder with everything necessary.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new [folder-name]</span><br></pre></td></tr></table></figure></p>
<h2 id="Build">Build</h2><h3 id="For_development">For development</h3><p>Generates a folder called <code>/build</code> which contains sourcemaps and everything needed to debug.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure></p>
<h3 id="For_production">For production</h3><p>Generates a folder called <code>/dist</code>. Everything is compiled, minified, …<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar dist</span><br></pre></td></tr></table></figure></p>
<h3 id="Cleaning">Cleaning</h3><p>Cleans development and production builds.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar clean</span><br></pre></td></tr></table></figure></p>
<h2 id="Monitoring_&amp;_Auto-Build">Monitoring &amp; Auto-Build</h2><p>Monitors source code files (Javascript files, CSS files, assets, …) for changes and when change is detected it auto-rebuilds.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar monitor</span><br></pre></td></tr></table></figure></p>
<h2 id="Live_Preview">Live Preview</h2><p>You can even live preview the build in your browser(s). Whenever you modify anything in the source code (Javascript files, CSS files, assets, …), it gets rebuilt and the browser(s) refreshed.</p>
<blockquote>
<p><strong>NOTE</strong>: CSS is injected into the browser(s) so the page is not required to reload, which is really cool.</p>
</blockquote>
<h2 id="Pages">Pages</h2><h3 id="Create_Page">Create Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new:page [page-name]</span><br></pre></td></tr></table></figure>
<h3 id="Rename_Page">Rename Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar rename:page [page-name]</span><br></pre></td></tr></table></figure>
<h3 id="Remove_Page">Remove Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar remove:page [page-name]</span><br></pre></td></tr></table></figure>
<h2 id="Making_a_Release">Making a Release</h2><blockquote>
<p><strong>NOTE</strong> This is not yet available.</p>
</blockquote>
<p>Versioning takes into account the Angular commit style.<br>See <a href="commit-message-format.html">Commit Message Format</a>.</p>
<h3 id="release:recommend">release:recommend</h3><p>Recommends the type of version bump, which can be: <code>patch</code>, <code>minor</code> or <code>major</code>.<br>The recommendation is based on the commit message style. See <a href="commit-message-format.html">Commit Message Format</a>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar release:recommend</span><br></pre></td></tr></table></figure></p>
<h3 id="release_&lt;type&gt;">release <em>&lt;type&gt;</em></h3><p><code>type</code> can be: prepatch, path, preminor, minor, premajor, major, prerelease<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar release minor</span><br></pre></td></tr></table></figure></p>
<p>What it does is:</p>
<ul>
<li>Bumps package version according to the <em>type</em></li>
<li>Generates changelog from GIT</li>
<li>Commits to GIT with commit message “[release] <code>VERSION</code>“</li>
<li>Generates a GIT tag named “v<code>VERSION</code>“</li>
<li>Pushes commit and tag to GIT</li>
</ul>
<h3 id="release:version_&lt;version&gt;">release:version <em>&lt;version&gt;</em></h3><p>If however you want to release a specific version, use this command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar release:version <span class="number">1.2</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Built-in Technology Stack]]></title>
      <url>http://quasar-framework.org/guide/built-in-stack.html</url>
      <content type="html"><![CDATA[<p>You can take full advantage of the following dependencies that are provided by default:</p>
<h2 id="Vue">Vue</h2><p>Two-way data binding technology. Reactive Components for Modern Web Interfaces. A <em>must-use</em>. Read more <a href="http://vuejs.org" target="_blank">here</a>.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Changing the <em>input</em> element content automatically updates <code>data.message</code> (called <em>scope</em>). Works the other way around too if you programmatically change <code>data.message</code> property. But this is just the tip of the iceberg.</p>
<h2 id="jQuery">jQuery</h2><p>No need for an introduction. Mind that you should not be required to use it though due to Vue. It is included by default just because Quasar Framework uses it under the cover.</p>
<blockquote>
<p><strong>NOTE</strong><br>A good Quasar App uses NO jQuery code and it does NOT touch DOM elements directly under any way. Vue should handle the DOM update for you through the scope.</p>
</blockquote>
<h2 id="Lodash">Lodash</h2><p>Inspired by Underscore (&amp; even has compatible API), but better. You have the global object <code>_</code> (underscore character) you can use.</p>
<p>Read more <a href="https://lodash.com/" target="_blank">here</a>.</p>
<h2 id="Fastclick">Fastclick</h2><p>FastClick is a simple, easy-to-use library for eliminating the 300ms delay between a physical tap and the firing of a click event on mobile browsers. The aim is to make your Quasar App feel less laggy and more responsive while avoiding any interference with your current logic.</p>
<p>Read more <a href="https://ftlabs.github.io/fastclick/" target="_blank">here</a>.</p>
<h2 id="Semantic_UI">Semantic UI</h2><p>Inspired by Bootstrap &amp; Foundation, but way better. Semantic is a development framework that helps create beautiful, responsive layouts using human-friendly HTML. Semantic UI treats words and classes as exchangeable concepts. Classes use syntax from natural languages like noun/modifier relationships, word order, and plurality to link concepts intuitively.</p>
<p>Read more <a href="http://semantic-ui.com/" target="_blank">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>http://quasar-framework.org/api/quasar-web-storage-api.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over Web Storage API.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a number then to retrieve it and it will still be a number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Getting_Started">Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.local.storage.item(key);</span><br><span class="line"></span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data_Types">Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods">Methods</h2><h3 id="Storing_Data">Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_Data">Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.item(key);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.all.local.storage.items();</span><br><span class="line"><span class="keyword">var</span> store = quasar.get.all.session.storage.items();</span><br></pre></td></tr></table></figure></p>
<h3 id="Iterating_through_Store">Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = quasar.get.local.storage.length();</span><br><span class="line"><span class="keyword">var</span> length = quasar.get.session.storage.length();</span><br></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.at.index(index);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.at.index(index);</span><br></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing_Data">Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.local.storage.item(key);</span><br><span class="line">quasar.remove.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.local.storage();</span><br><span class="line">quasar.clear.session.storage();</span><br></pre></td></tr></table></figure></p>
<h3 id="Is_Store_Empty?">Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.local.storage.is.empty()</span><br><span class="line">(boolean) quasar.session.storage.is.empty()</span><br></pre></td></tr></table></figure>
<h3 id="Is_Key_in_Store?">Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.local.storage.item()</span><br><span class="line">(boolean) quasar.has.session.storage.item()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Router]]></title>
      <url>http://quasar-framework.org/api/quasar-router.html</url>
      <content type="html"><![CDATA[<h2 id="Getting_Started">Getting Started</h2><p>Each route is an object defined like below:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  path: <span class="string">'#/'</span></span><br><span class="line">  before: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125; <span class="comment">// can be omitted</span></span><br><span class="line">  on: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line">  after: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125; <span class="comment">// can be omitted</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Adding a route:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Initialize router to start listening to hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router();</span><br></pre></td></tr></table></figure></p>
<h2 id="Route_Definition">Route Definition</h2><p>You can easily customize your route. A complex example below:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  path: <span class="string">'#/'</span>,</span><br><span class="line">  before: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//The [this] object is a copy of the [route] object plus:</span></span><br><span class="line">    <span class="comment">//this.params containing the hash tokens</span></span><br><span class="line">    <span class="comment">//this.state containing state ('before', 'on', 'after')</span></span><br><span class="line">    <span class="comment">//this.next containing methods to pass parameters to the next state</span></span><br><span class="line">    <span class="comment">//this.url containing the original url hash</span></span><br><span class="line">    <span class="comment">//this.query containing the query string parameters</span></span><br><span class="line">  &#125;,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...same as above...</span></span><br><span class="line">    <span class="comment">//plus `data` which contains what is sent by this.next() from before()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  after: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...same as above...</span></span><br><span class="line">    <span class="comment">//plus `data` which contains what is sent by this.next() from before() OR on()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>The path property can be a normal static hash like #/page/books or a parametrized string like #/article/:category/:date, in this case the route parameters will be completed with hash tokens.</p>
<p>For example, for <a href="">http://domain.com/#/article/science/20151010</a> you will have:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var route = &#123;&#10;  path: &#39;#/article/:category/:date&#39;,&#10;  on: function() &#123;&#10;    // this.params.category contains &#39;science&#39;&#10;    // this.params.date contains &#39;20151010&#39;&#10;  &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="Using_this-next(data)">Using <code>this.next(data)</code></h3><p>Sometimes you may need to pass in data from one route method to the next. Even do a Ajax request.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  path: <span class="string">'#/article'</span>,</span><br><span class="line">  before: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    quasar.make.a.get.request(&#123;</span><br><span class="line">      path: <span class="string">'/users.php'</span></span><br><span class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.next(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// here we have `data` from the Ajax call from before()</span></span><br><span class="line">    <span class="keyword">this</span>.next(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  after: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// here we have `data` from the Ajax call from on()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// no need to call this.next() here too</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>This is required when using multiple route methods. If this isn’t called, the next route method is NOT GOING to get called at all.</p>
</blockquote>
<h2 id="Router_Management">Router Management</h2><h3 id="Initializing_the_Router">Initializing the Router</h3><p>Router can be initialized with a config object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router(&#123;</span><br><span class="line">  <span class="comment">// can be omitted:</span></span><br><span class="line">  onRouteChange: <span class="function"><span class="keyword">function</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a route has been matched and `route` parameter is the actual route object</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// can be omitted:</span></span><br><span class="line">  onRouteNotFound: <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `array` parameter contains the hash components</span></span><br><span class="line">    <span class="comment">// Example for #/article/science array will be ['article', 'science']</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Once the router is initialized it will start listening for hash changes.</p>
<h3 id="Stopping_the_Router">Stopping the Router</h3><p>The router can be stopped so it won’t listen for hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.stop.router();</span><br></pre></td></tr></table></figure></p>
<h3 id="Checking_if_Router_is_running">Checking if Router is running</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.router.is.running();</span><br></pre></td></tr></table></figure>
<h3 id="Adding_Route">Adding Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Overwriting_a_Route">Overwriting a Route</h3><p>Sometimes you may need to overwrite a route.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.overwrite.route(&#123;...new_route_obj...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>It will look for the <code>path</code> from new_route_obj and replace the current route with this new one.</p>
<h3 id="Removing_Route">Removing Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.route(path);</span><br><span class="line">Example: quasar.remove.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_All_Routes">Retrieving All Routes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = quasar.get.all.routes();</span><br></pre></td></tr></table></figure>
<h3 id="Checking_if_Route_Exists">Checking if Route Exists</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.route(path);</span><br><span class="line">Example: quasar.has.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_Current_Route">Retrieving Current Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.current.route();</span><br></pre></td></tr></table></figure>
<h3 id="Get_Route_By_Path">Get Route By Path</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.route(path);</span><br><span class="line">Example: quasar.get.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Reloading_Current_Route">Reloading Current Route</h3><p>This will trigger the route methods once again.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.reload.current.route();</span><br></pre></td></tr></table></figure></p>
<h3 id="Navigating_to_a_Route">Navigating to a Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.navigate.to.route(path);</span><br><span class="line">Example: quasar.navigate.to.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Require]]></title>
      <url>http://quasar-framework.org/api/quasar-require.html</url>
      <content type="html"><![CDATA[<p>This feature is used to dynamically include <code>.js</code> files or inject <code>.css</code> ones.</p>
<h2 id="Require_a_Script_file">Require a Script file</h2><p>You can require a CommonJS compliant .js file directly from your application. Subsequent require() calls within the files are going to also be fetched. Besides being able to use synchronous require() calls within the browser, you can also require scripts from your node_modules/ folder.</p>
<p>Features that you can take advantage of:</p>
<ul>
<li>Synchronous <code>require()</code> in modules, but without making synchronous Ajax calls nor freezing the browser.</li>
<li><code>exports</code> and <code>module.exports</code> objects just work.</li>
<li>Works with NPM; you can include files directly from your node_modules/ folder. Just make sure that the included libraries work well with the browser.</li>
<li><code>require()</code> paths are relative to the folder of each script in place. No need to write all paths using the same base.</li>
<li>Debugging works really well as required files appear in the Scripts section, each separately, with their real name not a hash or VM string.</li>
<li>Dependencies are loaded as well. Circular dependencies are not a problem as they are handled correctly.</li>
<li>There’s no need for a build step of your scripts.</li>
<li>Required modules are cached. Subsequent calls are resolved instantly.</li>
</ul>
<h3 id="Usage">Usage</h3><p>In your modules you can use the <code>require()</code> function, <code>exports</code> and <code>module.exports</code> objects as you would in NodeJS.</p>
<p>There are multiple ways to include a script file through <code>quasar.require.script()</code>, depending on your style. The syntax is:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using Callback Fn</span></span><br><span class="line">quasar.require.script(</span><br><span class="line">  &#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn,</span><br><span class="line">  &#123;<span class="built_in">Function</span>&#125; callback(err, exports)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Promises</span></span><br><span class="line">quasar.require.script(&#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we failed...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we succeeded!</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying_Path">Specifying Path</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Requiring "module-file.js"</span></span><br><span class="line">quasar.require.script(<span class="string">"./module-file"</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// an error was encountered while loading the script file</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP code returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.status);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.statusText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use the exports object as needed</span></span><br><span class="line">    exports.method();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying_Factory_Function">Specifying Factory Function</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Requiring "./hello world.js"</span></span><br><span class="line">quasar.require.script(<span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">require</span>(<span class="string">"./hello-world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello(<span class="string">'World!'</span>));</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err.statusText);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>The first parameter of the Factory function <strong>must</strong> be named exactly <code>require</code>, otherwise no file is going to get fetched.</p>
</blockquote>
<h3 id="Managing_Cache">Managing Cache</h3><p>By default, all modules that are loaded are cached. If at some point you want to clear out the cache, proceed as follows:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.require.cache();</span><br></pre></td></tr></table></figure></p>
<h3 id="Limitations">Limitations</h3><ul>
<li>If you load from <code>node_modules/</code> folder, specify full path to the entry point file; Quasar will not read the module’s <code>package.json</code> file, and so the “main” property is ignored. Modules inside packages must be requested by their full path, e.g. <code>var _ = require(&quot;underscore/underscore&quot;);</code></li>
<li>When using the Factory function, the first formal parameter must be exactly <code>require</code> and nothing else, otherwise no files are going to get fetched.</li>
<li>No cross-domain paths can be used when within a browser. Cross-domain paths work only when app is packaged with Cordova.</li>
</ul>
<h2 id="Injecting_CSS">Injecting CSS</h2><p>Injecting CSS means inserting a stylesheet DOM element which makes the browser request your <code>.css</code> file.</p>
<p>List of features:</p>
<ul>
<li>You have two methods of injecting CSS: globally and per-page. When using “per-page” option and navigating to another page, the injected CSS will be removed. Globally injected will not get removed when navigating away.</li>
<li>CSS is cached, so subsequent calls to the same resource are resolved without fetching file again.</li>
<li>Ability to remove global or per-page injected CSS at command.</li>
</ul>
<h3 id="Usage-1">Usage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Injecting globally</span></span><br><span class="line">quasar.inject.global.css(URL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Injecting per-page</span></span><br><span class="line">quasar.inject.page.css(URL);</span><br></pre></td></tr></table></figure>
<p>Removing injected CSS:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Removing globally injected CSS</span></span><br><span class="line">quasar.clear.global.css();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removing page injected CSS</span></span><br><span class="line">quasar.clear.page.css();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Environment]]></title>
      <url>http://quasar-framework.org/api/quasar-environment.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the environment in which the code is running:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>quasar.runs.on.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>quasar.runs.on.cordova</td>
<td>boolean</td>
<td>Is the code running inside Cordova?</td>
</tr>
<tr>
<td>quasar.runs.with.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note:</strong> Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova app.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Debug Helpers]]></title>
      <url>http://quasar-framework.org/api/quasar-debug-helpers.html</url>
      <content type="html"><![CDATA[<p>The <code>quasar.debug</code> object has useful debugging methods.</p>
<h2 id="Javascript_Stack">Javascript Stack</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.printStack()</span><br></pre></td></tr></table></figure>
<p>Useful when stuck somewhere in the code and you’d like to see the Javascript stack outputted to the console.</p>
<h2 id="Profiling">Profiling</h2><p>Sometimes you want to know how much time did something take to get executed. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br><span class="line"><span class="comment">//run some code... then to output results:</span></span><br><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br></pre></td></tr></table></figure></p>
<p>You can have multiple profiles running at the same time.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Cookies]]></title>
      <url>http://quasar-framework.org/api/quasar-cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Read_a_Cookie">Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = quasar.get.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<h2 id="Read_All_Cookies">Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookies = quasar.get.all.cookies();</span><br></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<h2 id="Verify_if_Cookie_is_Set">Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Boolean</span>) quasar.has.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Write_a_Cookie">Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'cookie_name'</span>, cookie_value, options);</span><br></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expire</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</span><br><span class="line">  secure: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Option_expires">Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expires: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option_path">Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/'</span></span><br></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option_domain">Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">domain: <span class="string">'quasar-framework.org'</span></span><br></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option_secure">Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">secure: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove_a_Cookie">Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Ajax Requests]]></title>
      <url>http://quasar-framework.org/api/quasar-ajax-requests.html</url>
      <content type="html"><![CDATA[<p>Quasar Ajax Requests are a wrapper over jQuery’s <code>$.ajax()</code> method. There are many features added on top of it.</p>
<h2 id="Getting_Started">Getting Started</h2><h3 id="Making_a_Request">Making a Request</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET request:</span></span><br><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'...'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">jsonObject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data received: '</span>, jsonObject);</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'uh, oh... the request failed...'</span>, errorThrown);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Same for PUT, POST, DELETE:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.put.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line">quasar.make.a.post.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notice `del` instead of `delete`</span></span><br><span class="line">quasar.make.a.del.request(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>DATA FORMAT</strong><br>By default, the response is treated as a JSON string and it’s parsed, unless specified otherwise with <code>dataType</code> property (see <a href="#Request_Properties">Request Properties</a>).</p>
</blockquote>
<h3 id="Request_Properties">Request Properties</h3><p>When making a request, you can use the properties below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>String</td>
<td>URL or relative path to base URL (see <a href="#Configuring_Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>query</td>
<td>String or Object</td>
<td>Query String</td>
</tr>
<tr>
<td>data</td>
<td>Object</td>
<td>Data to be sent along with the request</td>
</tr>
<tr>
<td>cachable</td>
<td>Boolean</td>
<td>Should the response be cached? <em>Only for GET requests</em></td>
</tr>
<tr>
<td>requestName</td>
<td>String</td>
<td>See Request Name</td>
</tr>
<tr>
<td>persistent</td>
<td>Boolean</td>
<td>Cannot be aborted by <code>quasar.abort.all.requests()</code></td>
</tr>
<tr>
<td>local</td>
<td>Boolean</td>
<td>Ignore baseURL and make a request from App folder (see <a href="#Configuring_Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>timeout</td>
<td>Number</td>
<td>Number of milliseconds before timeout</td>
</tr>
</tbody>
</table>
<p>… and any jQuery <a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="external">$.ajax() properties</a>. Some examples: <code>dataFilter</code>, <code>dataType</code>, <code>converters</code>, <code>contentType</code>, <code>headers</code>, <code>processData</code>, <code>xhrFields</code>. See <a href="#More_Request_Properties">More Request Properties</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Only the <code>url</code> property is mandatory.</p>
</blockquote>
<h3 id="Request_Outcome">Request Outcome</h3><p>There are multiple ways to see the request outcome, depending on the style that you prefer:</p>
<ol>
<li><p>Inside the configuration object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  done: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;,</span><br><span class="line">  always: <span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Through <code>statusCode</code> property<br><code>statusCode</code> is an object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  statusCode: &#123;</span><br><span class="line">    <span class="number">404</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Page not found handler</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>If the request is successful, the status code functions take the same parameters as the success callback (<code>done</code>); if it results in an error (including 3xx redirect), they take the same parameters as the failure callback (<code>fail</code>).</p>
<ol>
<li>Using Promises <em>(recommended)</em><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'/articles.php'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .always(<span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data,textStatus,jqXHR</span>) </span>&#123;...&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .abort();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Explanation of the methods are below:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>done</td>
<td>data, textStatus, jqXHR</td>
<td>Success handler</td>
</tr>
<tr>
<td>fail</td>
<td>jqXHR, textStatus, errorThrown</td>
<td>Failure handler</td>
</tr>
<tr>
<td>always</td>
<td>data/jqXHR, textStatus, jqXHR/errorThrown</td>
<td>Both success &amp; failure handler; is triggered regardless of the outcome</td>
</tr>
<tr>
<td>then</td>
<td>Function, Function</td>
<td>Alternative way to specify success handler (first param) and failure handler (second param)</td>
</tr>
<tr>
<td>abort</td>
<td></td>
<td>Halts the request before it is completed</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>All methods (including <code>quasar.make.a.&lt;TYPE&gt;.request</code>) return a Promise.</p>
</blockquote>
<h2 id="Configuring_Requests">Configuring Requests</h2><p>There are global configuration properties that apply to all requests through <code>quasar.config.requests</code> object. Its configurable properties are:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseURL</td>
<td>String</td>
<td>Base URL for all requests. Example: “<a href="http://quasar-framework.org/api/">http://quasar-framework.org/api/</a>“</td>
</tr>
<tr>
<td>failFnHandler</td>
<td>Function</td>
<td>Global failure handler. See <a href="#Global_Failure_Handler">Global Failure Handler</a></td>
</tr>
<tr>
<td>use.cache</td>
<td>Boolean</td>
<td>GET requests cache the response by default or not. See <a href="#Request_Cache">Request Cache</a></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.baseURL = <span class="string">"http://quasar-framework.org/api/"</span>;</span><br></pre></td></tr></table></figure></p>
<p>If a request is made with <em>local</em> property set to <code>true</code> then baseURL is ignored.</p>
<h3 id="More_Request_Properties">More Request Properties</h3><p>The properties below are additions to <a href="#Request_Properties">Request Properties</a>.</p>
<h4 id="Filtering_Received_Data">Filtering Received Data</h4><p>Sometime you need to sanitize the received data with <code>dataFilter</code> method, which takes a function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the <code>dataType</code> parameter.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataFilter: <span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//include any conditions to filter data here...</span></span><br><span class="line">    <span class="comment">//some examples below...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 1 - remove all commas from returned data</span></span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">","</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 2 - if data is JSON process it in some way</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parsed_data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        $.each(parsed_data, <span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//process the JSON data</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(parsed_data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Data_Type">Data Type</h4><p>By default, the response is considered to be a JSON string, but you can specify other data types if necessary through the <code>dataType</code> property.</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>json</td>
<td>Evaluates the response as JSON and returns a JavaScript object</td>
</tr>
<tr>
<td>xml</td>
<td>Returns an XML document</td>
</tr>
<tr>
<td>html</td>
<td>Return HTML as plain-text</td>
</tr>
<tr>
<td>script</td>
<td>Evaluates the response as JavaScript and returns it as plain text</td>
</tr>
<tr>
<td>text</td>
<td>Returns a plain text string</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataType: <span class="string">"text"</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">plainText</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Converters">Converters</h4><p>Converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g JSON), you must add a correspondence between the response Content-Type and the actual data type using the contents option:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</p>
<p>To convert from a supported type (e.g text, JSON) to a custom data type and back again, use another pass-through converter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"text mycustomtype"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>The above now allows passing from text to mycustomtype and then mycustomtype to json.</p>
<h4 id="Content_Type">Content Type</h4><p>When sending data to the server, use <code>contentType</code> to specify Content Type.</p>
<p>Default is <strong>application/x-www-form-urlencoded; charset=UTF-8</strong>, which is fine for most cases. If you explicitly pass in a <code>contentType</code>, then it is always sent to the server (even if no data is sent). If set to <code>false</code> it will not set any content type header.</p>
<blockquote>
<p>Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.</p>
</blockquote>
<h4 id="Headers">Headers</h4><p><code>headers</code> is an object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.</p>
<h4 id="Process_Data">Process Data</h4><p>This refers to the boolean <code>processData</code>. By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type “application/x-www-form-urlencoded”. If you want to send a DOMDocument, or other non-processed data, set this option to false.</p>
<h4 id="XHR_Fields">XHR Fields</h4><p>This refers to <code>xhrFields</code> which is an object of fieldName-fieldValue pairs to set on the native XHR object.</p>
<p>For example, you can use it to set withCredentials to true for cross-domain requests if needed, <em>which is the default behavior for Quasar out of the box</em>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">   url: a_cross_domain_url,</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">      withCredentials: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Global_Failure_Handler">Global Failure Handler</h2><p>Specify a global failure handler for times when (as an example) you return a specific HTTP code if user is not authenticated.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.failFnHandler = <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (jqXHR.status &amp;&amp; jqXHR.status == <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="comment">// user is not authenticated... give the user a message or redirect the UI</span></span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>You can <code>return true;</code> if you want to override the request’s own failure handler(s).</p>
<h2 id="Request_Cache">Request Cache</h2><p>Cache response for GET requests (only) using <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  cachable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>You can also configure all GET requests to be cached by default, so you won’t have to specify <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.use.cache = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p>
<p>At some point you may want to clear the cache for all requests:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.requests.cache();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>All GET requests are configured by default to cache their response, because <code>quasar.config.requests.use.cache</code> is by default set to <code>true</code>.</p>
</blockquote>
<h2 id="Group_Requests">Group Requests</h2><p>Sometimes you need to wait for multiple requests until you proceed further:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.group.request(</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.del.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...)</span><br><span class="line">).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// all calls ended with success</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// at least one call failed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Request_Store">Request Store</h2><p>Sometimes you need to make multiple calls using the same request properties:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.store(&#123;...common...request...properties...&#125;);</span><br><span class="line"></span><br><span class="line">store.make.a.get.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.put.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.post.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.del.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Aborting_Requests">Aborting Requests</h2><p>Sometimes you need to halt a request before it is finished:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = quasar.make.a.get.request(...);</span><br><span class="line">...</span><br><span class="line">request.abort();</span><br></pre></td></tr></table></figure></p>
<p>Or you may want to halt ALL requests in progress:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.abort.all.requests();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When aborting all requests, you may want to exclude some of them. For this, use the <code>persistent</code> property when making those particular requests.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/api/index.html</url>
      <content type="html"><![CDATA[<p>Learn here the API specifications of every feature embedded in Quasar Framework. How to require a script, how to create a route, how to detect if the app is running within Cordova or on a desktop, and many more.</p>
]]></content>
    </entry>
    
  
</search>
