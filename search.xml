<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>http://quasar-framework.org/2015/10/02/Working-On-The-First-Release/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/support-quasar-framework.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Color Palette]]></title>
      <url>http://quasar-framework.org/api/css-color-palette.html</url>
      <content type="html"><![CDATA[<p>Quasar Framework offers a wide selection of colors out of the box. You can use them both as Stylus variables in your CSS code or directly as CSS classes in your HTML templates.</p>
<input type="hidden" data-fullpage-demo="colors">

<p>This page comes really handy after reading <a href="/guide/quasar-theming.html">Quasar Theming</a>.</p>
<h2 id="Brand-Colors"><a href="#Brand-Colors" class="headerlink" title="Brand Colors"></a>Brand Colors</h2><p>There can be three main colors used throughout your App, called <code>primary</code>, <code>secondary</code> and <code>tertiary</code>.</p>
<p>Most of the colors that Quasar Components use are strongly linked with these three colors that you can change. Choosing these colors is the first step one should take when differentiating the design of its own App. You’ll notice immediately on changing their default values that Quasar Components follow these colors as a guideline.</p>
<h2 id="Color-List"><a href="#Color-List" class="headerlink" title="Color List"></a>Color List</h2><p>Here’s the list of colors provided out of the box. Use them as CSS classes or as Stylus variables (preceded by <code>$</code> character).</p>
<p><code>primary</code>, <code>secondary</code>, <code>tertiary</code><br><code>neutral</code>, <code>neutral</code>, <code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>light</code>, <code>dark</code>, <code>faded</code></p>
<p>On the following colors there are variations available:<br><code>red</code>, <code>pink</code>, <code>purple</code>, <code>deep-purple</code>, <code>indigo</code>, <code>blue</code>, <code>light-blue</code>, <code>cyan</code>, <code>teal</code>, <code>green</code>, <code>light-green</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>, <code>orange</code>, <code>deep-orange</code>, <code>brown</code>, <code>grey</code>, <code>blue-grey</code></p>
<p>Example of color variation: <code>red</code>, <code>red-1</code>, <code>red-2</code>, …, <code>red-14</code>. See the demo to make a good picture of what variations are. Variation 11 to 14 are color accents.</p>
<h2 id="CSS-Classes"><a href="#CSS-Classes" class="headerlink" title="CSS Classes"></a>CSS Classes</h2><p>Use <code>text-</code> or <code>bg-</code> prefixes as class names to change the color of text or the color of the background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- changing text color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- changing background color --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-positive"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Stylus-Color-Variables"><a href="#Stylus-Color-Variables" class="headerlink" title="Stylus Color Variables"></a>Stylus Color Variables</h2><p>In your Stylus App code you can use them as <code>$primary</code>, <code>$red-1</code>, and so on.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">  <span class="attribute">color</span> <span class="variable">$red</span>-<span class="number">1</span></span><br><span class="line">  <span class="attribute">background-color</span> <span class="variable">$grey</span>-<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>The full list of colors is stored in the <code>$colors</code> array. You can change it to add/remove/change colors and all Quasar Components will generate CSS according to those colors.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$colors ?= &#123;</span><br><span class="line">  neutral: $neutral</span><br><span class="line">  primary: $primary</span><br><span class="line">  secondary: $secondary</span><br><span class="line">  tertiary: $tertiary</span><br><span class="line">  positive: $positive</span><br><span class="line">  negative: $negative</span><br><span class="line">  warning: $warning</span><br><span class="line">  info: $info</span><br><span class="line">  light: $light</span><br><span class="line">  dark: $dark,</span><br><span class="line"></span><br><span class="line">  red: $red,</span><br><span class="line">  pink: $pink,</span><br><span class="line">  purple: $purple,</span><br><span class="line">  deep-purple: $deep-purple,</span><br><span class="line">  indigo: $indigo,</span><br><span class="line">  blue: $blue,</span><br><span class="line">  light-blue: $light-blue,</span><br><span class="line">  cyan: $cyan,</span><br><span class="line">  teal: $teal,</span><br><span class="line">  green: $green,</span><br><span class="line">  light-green: $light-green,</span><br><span class="line">  lime: $lime,</span><br><span class="line">  yellow: $yellow,</span><br><span class="line">  amber: $amber,</span><br><span class="line">  orange: $orange,</span><br><span class="line">  deep-orange: $deep-orange,</span><br><span class="line">  brown: $brown,</span><br><span class="line">  grey: $grey,</span><br><span class="line">  blue-grey: $blue-grey</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Grid Layout]]></title>
      <url>http://quasar-framework.org/api/css-grid-layout.html</url>
      <content type="html"><![CDATA[<p><input type="hidden" data-fullpage-demo="grid-layout"><br>Back in the ol’ days web developers used HTML tables to style their web pages. Then came along powerful CSS features. Latest in the arena entered <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Flexbox</a>.</p>
<p>Quasar provides lots of CSS classes to help you deal easily with managing a layout. Long story short, think of it like operating with rows and columns with many options at hand.</p>
<h2 id="Background-on-Flexbox"><a href="#Background-on-Flexbox" class="headerlink" title="Background on Flexbox"></a>Background on Flexbox</h2><p>The Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>
<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar Grid Layout CSS classes apply to either the Container (Parent) or the Container’s items (Children).</p>
<p><img src="/images/flexbox-container.svg" alt="Flexbox Container"><br><img src="/images/flexbox-items.svg" alt="Flexbox Items"></p>
<h2 id="Parent-Classes"><a href="#Parent-Classes" class="headerlink" title="Parent Classes"></a>Parent Classes</h2><h3 id="Setting-Direction"><a href="#Setting-Direction" class="headerlink" title="Setting Direction"></a>Setting Direction</h3><p>One of the following CSS classes is mandatory for the parent in order for the children ones (described in next sections) to have any effect.</p>
<p><img src="/images/flexbox-direction.svg" alt="Flexbox Direction"></p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex</code></td>
<td><code>display</code> is set to <code>flex</code></td>
</tr>
<tr>
<td><code>row</code></td>
<td>Flex row</td>
</tr>
<tr>
<td><code>row inline</code></td>
<td>Inline Flex row</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Flex column</td>
</tr>
<tr>
<td><code>column inline</code></td>
<td>Inline Flex column</td>
</tr>
<tr>
<td><code>reverse-row</code></td>
<td>Flex row with <code>flex-direction</code> set to <code>row-reverse</code></td>
</tr>
<tr>
<td><code>reverse-column</code></td>
<td>Flex column with <code>flex-direction</code> set to <code>column-reverse</code></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h3><p><strong>You can also wrap content</strong>. Use <code>wrap</code> or <code>reverse-wrap</code> classes. By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. Direction also plays a role here, determining the direction new lines are stacked in.</p>
<p><img src="/images/flexbox-wrap.svg" alt="Flexbox Direction"></p>
<p>If you explicitly do not want to wrap, use <code>no-wrap</code> class.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wrap</code></td>
<td>Wrap if necessary</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Do NOT wrap even if necessary</td>
</tr>
<tr>
<td><code>reverse-wrap</code></td>
<td>Wrap backwards if necessary</td>
</tr>
</tbody>
</table>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p><strong>For alignment along the main axis</strong>, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>
<p><img src="/images/flexbox-main-axis-align.svg" alt="Flexbox Justify Content"></p>
<p><strong>For alignment perpendicular to the main axis</strong>, use classes below. This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the horizontal-* version for the cross-axis (perpendicular to the main-axis).</p>
<p><img src="/images/flexbox-cross-axis-align.svg" alt="Flexbox Items Align"></p>
<p>The next classes <strong>align a flex container’s lines</strong> within when there is extra space in the cross-axis, similar to how horizontal-* aligns individual items within the main-axis.</p>
<p><img src="/images/flexbox-content-align.svg" alt="Flexbox Content Align"></p>
<h3 id="Gutters"><a href="#Gutters" class="headerlink" title="Gutters"></a>Gutters</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>small-gutter</code></td>
<td>Small gutter between cells</td>
</tr>
<tr>
<td><code>medium-gutter</code> or <code>gutter</code></td>
<td>Default gutter between cells</td>
</tr>
<tr>
<td><code>big-gutter</code></td>
<td>Big gutter between cells</td>
</tr>
<tr>
<td><code>large-gutter</code></td>
<td>Large gutter between cells</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row large-gutter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Children-Classes"><a href="#Children-Classes" class="headerlink" title="Children Classes"></a>Children Classes</h2><h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h3><p><strong>You can set the order</strong> by using <code>order-i</code> classes, where <em>i</em> is between 1-10. By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use <code>order</code> CSS property and assign the desired value.</p>
<p><img src="/images/flexbox-order.svg" alt="Flexbox Order"></p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-2"</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-3"</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-1"</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h3><p>The width of a column can be set as <code>width-XofY</code> (where <em>Y</em> is 1 to 5 and <em>X</em> is 1 to Y).<br>It’s a wrapper over <code>flex 0 1 X%</code>.</p>
<p>Example: <code>width-1of3</code> for a 33% width for the cell.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"width-2of3"</span>&gt;</span>2/3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"width-1of5"</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS class <code>auto</code> makes the cell expand to the remaining unused width.</p>
<p>There’s also the possible to offset a cell with <code>offset-</code></p>
<h3 id="Grow"><a href="#Grow" class="headerlink" title="Grow"></a>Grow</h3><p><strong>An item can grow if it’s enough space available</strong> by using <code>grow-i</code> classes, where <em>i</em> is between 1-10. This defines the ability for a flex item to grow if necessary. It accepts a unit-less value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.<br>If all items have <code>grow-1</code> class, the remaining space in the container will be distributed equally to all children. If one of the children has <code>grow-2</code>, the remaining space would take up twice as much space as the others (or it will try to, at least).</p>
<p><img src="/images/flexbox-grow.svg" alt="Flexbox Grow"></p>
<h3 id="Shrink"><a href="#Shrink" class="headerlink" title="Shrink"></a>Shrink</h3><p><strong>An item can shrink if necessary</strong> by using <code>shrink-i</code> classes, where <em>i</em> is between 1-10.</p>
<h3 id="Self-Alignment"><a href="#Self-Alignment" class="headerlink" title="Self Alignment"></a>Self Alignment</h3><p><strong>An item can override the aligned specified on parent</strong>. This allows alignment to be overridden for individual flex items. Please see the <a href="#Alignment">Alignment</a> explanation from Parent Classes to understand the available values (<code>self-start</code>, <code>self-center</code>, <code>self-baseline</code>, <code>self-end</code>, <code>self-stretch</code>).</p>
<p><img src="/images/flexbox-self.svg" alt="Flexbox Grow"></p>
<h2 id="Visibility"><a href="#Visibility" class="headerlink" title="Visibility"></a>Visibility</h2><p><strong>An item can be displayed or not based on the width of the screen</strong>. The following list displays prefixes (can be used as standalone too!) that you can use for all of the above CSS classes.</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>bg</code></td>
<td>Display only on big windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>lt-md</code></td>
<td>Display only on lower than medium windows</td>
</tr>
<tr>
<td><code>lt-bg</code></td>
<td>Display only on lower than big windows</td>
</tr>
<tr>
<td><code>lt-lg</code></td>
<td>Display only on lower than large windows</td>
</tr>
<tr>
<td><code>gt-sm</code></td>
<td>Display only on greater than small windows</td>
</tr>
<tr>
<td><code>gt-md</code></td>
<td>Display only on greater than medium windows</td>
</tr>
<tr>
<td><code>gt-bg</code></td>
<td>Display only on greater than big windows</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Also see the demo on this page and try a mobile and desktop view --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sm"</span>&gt;</span>SM<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"md"</span>&gt;</span>MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span>BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lg"</span>&gt;</span>LG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-md"</span>&gt;</span>lt-MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-bg"</span>&gt;</span>lt-BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-lg"</span>&gt;</span>lt-LG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-sm"</span>&gt;</span>gt-SM<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-md"</span>&gt;</span>gt-MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-bg"</span>&gt;</span>gt-BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>One more example:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- Displayed as column on small windows and as rows the rest of the time --&gt;</span><br><span class="line">&lt;div class="row gutter sm-column"&gt; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  &lt;div class="width-2of3"&gt;&lt;div&gt;2/3&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="width-1of5"&gt;&lt;div&gt;1/5&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="auto"&gt;&lt;div&gt;auto&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="auto"&gt;&lt;div&gt;auto&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>Prefixes also work with <code>order-i</code>, <code>shrink-i</code>, <code>width-XofY</code>, on gutters and so on.</p>
<p>What does small, medium, big or large windows mean? Check <a href="/api/css-visibility.html#Window-Width-Related">CSS &gt; Visibility</a> page to see thresholds on window width.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Icons]]></title>
      <url>http://quasar-framework.org/api/css-icons.html</url>
      <content type="html"><![CDATA[<p>What would an App be without icons? A default set of (hundreds of) icons is included in any Quasar App.<br>These are the <a href="https://design.google.com/icons/" target="_blank" rel="external">Material Design Icons</a>. You can you can read (and search for them) in the previous link.</p>
<p><img src="/images/material-icons.png" alt="Material Icons Example"></p>
<p>It just differs the way you use them in a Quasar App:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span><br><span class="line">  On Material Design Icons website you check for an icon and it says:</span><br><span class="line">  "&lt;i class="material-icons"&gt;account_circle&lt;/i&gt;"</span><br><span class="line"></span><br><span class="line">  On Quasar App you simply use it like this:</span><br><span class="line">--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>account_circle<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>No need for extra markup. Note the “underscore” character instead of a space character… this is mandatory, as Material Icons are displayed using a ligature font.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Helper Classes]]></title>
      <url>http://quasar-framework.org/api/css-other-helper-classes.html</url>
      <content type="html"><![CDATA[<p>There are a lot of CSS classes that you can use while writing your Vue templates. Very handy to ease the complexity of your VueModels and templates.</p>
<p>The list below is not complete. Also check the other CSS documentation pages like Typography, Visibility, Shadows, Positioning.</p>
<h3 id="Mouse-Related"><a href="#Mouse-Related" class="headerlink" title="Mouse Related"></a>Mouse Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>non-selectable</code></td>
<td>User won’t be able to select DOM node along with its text</td>
</tr>
<tr>
<td><code>scroll</code></td>
<td>Applies CSS tweaks to make scroll work at its best on ALL platforms</td>
</tr>
<tr>
<td><code>no-scroll</code></td>
<td>Hides scrollbars on the DOM node</td>
</tr>
<tr>
<td><code>no-pointer-events</code></td>
<td>DOM element does not become a target of mouse events - clicks, hover and so on</td>
</tr>
<tr>
<td><code>all-pointer-events</code></td>
<td>The opposite of <code>no-pointer-events</code></td>
</tr>
<tr>
<td><code>cursor-pointer</code></td>
<td>Change mouse pointer on DOM element to look as if on a clickable link</td>
</tr>
</tbody>
</table>
<h3 id="Size-Related"><a href="#Size-Related" class="headerlink" title="Size Related"></a>Size Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fit</code></td>
<td>Width and Height is set to 100%</td>
</tr>
<tr>
<td><code>full-height</code></td>
<td>Height is set to 100%</td>
</tr>
<tr>
<td><code>full-width</code></td>
<td>Width is set to 100%</td>
</tr>
<tr>
<td><code>window-height</code></td>
<td>Height is set to 100vh with top and bottom margins 0</td>
</tr>
<tr>
<td><code>window-width</code></td>
<td>Width is set to 100vw with left and right margins 0</td>
</tr>
<tr>
<td><code>block</code></td>
<td>Same as <code>full-width</code> and with <code>display</code> property set to <code>block</code></td>
</tr>
</tbody>
</table>
<h3 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotate-90</code></td>
<td>Rotate by 90 degrees</td>
</tr>
<tr>
<td><code>rotate-180</code></td>
<td>Rotate by 180 degrees</td>
</tr>
<tr>
<td><code>rotate-270</code></td>
<td>Rotate by 270 degrees</td>
</tr>
<tr>
<td><code>flip-horizontal</code></td>
<td>Flip DOM element horizontally</td>
</tr>
<tr>
<td><code>flip-vertical</code></td>
<td>Flip DOM element vertically</td>
</tr>
<tr>
<td><code>spin</code></td>
<td>Apply a continuous spin/rotation to the DOM element</td>
</tr>
<tr>
<td><code>blink</code></td>
<td>Apply a blinking effect to the DOM element</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Positioning Classes]]></title>
      <url>http://quasar-framework.org/api/css-positioning.html</url>
      <content type="html"><![CDATA[<p>There are CSS classes supplied by Quasar to help you position a DOM element easily:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pull-left</code></td>
<td>Float to the left</td>
</tr>
<tr>
<td><code>pull-right</code></td>
<td>Float to the right</td>
</tr>
<tr>
<td><code>fullscreen</code></td>
<td>Fix position covering all window real-estate</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>Set <code>position</code> to <code>fixed</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>Set <code>position</code> to <code>absolute</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>fixed-top</code>, <code>absolute-top</code></td>
<td>Fixed or absolute position to top of screen</td>
</tr>
<tr>
<td><code>fixed-right</code>, <code>absolute-right</code></td>
<td>Fixed or absolute position to the right edge of screen</td>
</tr>
<tr>
<td><code>fixed-bottom</code>, <code>absolute-bottom</code></td>
<td>Fixed or absolute position to bottom of screen</td>
</tr>
<tr>
<td><code>fixed-left</code>, <code>absolute-left</code></td>
<td>Fixed or absolute position to the left edge of screen</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Shadows]]></title>
      <url>http://quasar-framework.org/api/css-shadows.html</url>
      <content type="html"><![CDATA[<p>Simple yet effective way to add shadows to create a depth effect.<br>The shadows are in accordance to Material Design speifications.<br>Don’t forget to check the demo.</p>
<input type="hidden" data-fullpage-demo="shadows">

<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-shadow</code></td>
<td>Remove any shadow</td>
</tr>
<tr>
<td><code>inset-shadow</code></td>
<td>Set an inset shadow</td>
</tr>
<tr>
<td><code>shadow-1</code>, <code>hoverable</code>, <code>hoverable-1</code></td>
<td>Set a depth of 1 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-2</code>, <code>hoverable-2</code></td>
<td>Set a depth of 2 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-3</code>, <code>hoverable-3</code></td>
<td>Set a depth of 3 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-4</code>, <code>hoverable-4</code></td>
<td>Set a depth of 4 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-5</code>, <code>hoverable-5</code></td>
<td>Set a depth of 5 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-transition</code></td>
<td>Apply a CSS transition on the shadow; best use in conjonction with <code>hoverable</code> classes</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stylus Variables]]></title>
      <url>http://quasar-framework.org/api/css-stylus-variables.html</url>
      <content type="html"><![CDATA[<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. To understand how and where to make use of the full list of variables below, read <a href="/guide/quasar-theming.html">Guide &gt; Theming</a>.</p>
<h2 id="Variables-List"><a href="#Variables-List" class="headerlink" title="Variables List"></a>Variables List</h2><!-- DO NOT WRITE ANYTHING BELOW THIS LINE -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Typography]]></title>
      <url>http://quasar-framework.org/api/css-typography.html</url>
      <content type="html"><![CDATA[<p><input type="hidden" data-fullpage-demo="typography"><br>See how headings, blockquotes, definitions lists and more are displayed in the demo. At the end of this page you can read about CSS helper classes.</p>
<h3 id="Default-Font"><a href="#Default-Font" class="headerlink" title="Default Font"></a>Default Font</h3><p>The default font embedded in any Quasar App is the latest iteration of Roboto Google has released. It comes with 5 different font weights you can use: 200, 300, 400, 500, 600. Below is an image from Google’s Roboto Specimen document displaying the different font weights:</p>
<div style="max-width: 550px"><br><img src="/images/roboto.png" alt="Roboto Font" title="Roboto Font"><br></div>

<h3 id="Text-Types"><a href="#Text-Types" class="headerlink" title="Text Types"></a>Text Types</h3><p>You can display text in a variety of ways.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Small and Big text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- sub and sup --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>Subtext<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>Supertext<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Paragraphs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Default Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Caption Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"light-paragraph"</span>&gt;</span>Light Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"thin-paragraph"</span>&gt;</span>Thin Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Blockquotes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Definition Lists --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CSS-Helper-Classes"><a href="#CSS-Helper-Classes" class="headerlink" title="CSS Helper Classes"></a>CSS Helper Classes</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-right</code></td>
<td>Align text to the right</td>
</tr>
<tr>
<td><code>text-left</code></td>
<td>Align text to the left</td>
</tr>
<tr>
<td><code>text-center</code></td>
<td>Align text to the center</td>
</tr>
<tr>
<td><code>text-justify</code></td>
<td>Text will be justified</td>
</tr>
<tr>
<td><code>text-truncate</code></td>
<td>Applies all CSS tweaks to truncate text when container is too small</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>For use on caption parapgraphs</td>
</tr>
<tr>
<td><code>light-paragraph</code></td>
<td>Applies a font-weight of 300</td>
</tr>
<tr>
<td><code>thin-paragraph</code></td>
<td>Applies a font-weight of 200</td>
</tr>
<tr>
<td><code>uppercase</code></td>
<td>Transform text to uppercase</td>
</tr>
<tr>
<td><code>lowercase</code></td>
<td>Transform text to lowercase</td>
</tr>
<tr>
<td><code>capitalize</code></td>
<td>Capitalize first letter of the text</td>
</tr>
<tr>
<td><code>strong</code></td>
<td>DOM element’s font becomes <strong>bold</strong></td>
</tr>
<tr>
<td><code>emphasize</code></td>
<td>DOM element’s font becomes <em>italic</em></td>
</tr>
<tr>
<td><code>block</code></td>
<td>Same as <code>full-width</code> and with <code>display</code> property set to <code>block</code></td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Every Quasar Theme has a generic border radius. This radius is applied to the DOM node</td>
</tr>
<tr>
<td><code>no-margin</code></td>
<td>Margins are set to 0</td>
</tr>
<tr>
<td><code>no-padding</code></td>
<td>Padding is set to 0</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Visibility]]></title>
      <url>http://quasar-framework.org/api/css-visibility.html</url>
      <content type="html"><![CDATA[<p>There are some CSS classes that you can use out of the box for common functionality.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disabled</code></td>
<td>Cursor is changed to notify a ‘disable’ and opacity is set to a lower value.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Set <code>display</code> to <code>none</code></td>
</tr>
<tr>
<td><code>invisible</code></td>
<td>Set <code>visibility</code> to <code>none</code></td>
</tr>
<tr>
<td><code>transparent</code></td>
<td>Background color is transparent</td>
</tr>
</tbody>
</table>
<h3 id="Platform-Related"><a href="#Platform-Related" class="headerlink" title="Platform Related"></a>Platform Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-only</code></td>
<td>Visible only on desktop</td>
</tr>
<tr>
<td><code>mobile-only</code></td>
<td>Visible only on mobile</td>
</tr>
<tr>
<td><code>cordova-only</code></td>
<td>Visible only on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>touch-only</code></td>
<td>Visible only on touch capable platforms</td>
</tr>
<tr>
<td><code>no-touch-only</code></td>
<td>Visible only on non-touch platforms</td>
</tr>
<tr>
<td><code>mat-only</code></td>
<td>Visible only for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-only</code></td>
<td>Visible only for iOS Quasar Theme</td>
</tr>
</tbody>
</table>
<p>Also check <a href="/guide/quasar-theming.html#Platform-Specific-Styles">Quasar Theming &gt; Platform Specific Styles</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a non-recommended way to hide DOM elements through Javascript. Read more on <a href="/api/js-environment.html">Javascript &gt; Environment</a> page.</p>
</blockquote>
<h3 id="Window-Width-Related"><a href="#Window-Width-Related" class="headerlink" title="Window Width Related"></a>Window Width Related</h3><p>First of all, let’s define what does a small, medium, big or large window means:</p>
<table>
<thead>
<tr>
<th>Window Size</th>
<th>Width threshold in pixels</th>
</tr>
</thead>
<tbody>
<tr>
<td>Small</td>
<td>Up to 600px</td>
</tr>
<tr>
<td>Medium</td>
<td>Up to 920px</td>
</tr>
<tr>
<td>Big</td>
<td>Up to 1280px</td>
</tr>
<tr>
<td>Large</td>
<td>Bigger than 1280px</td>
</tr>
</tbody>
</table>
<p>Now on to the window width related CSS classes:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>bg</code></td>
<td>Display only on big windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>lt-md</code></td>
<td>Display only on lower than medium windows</td>
</tr>
<tr>
<td><code>lt-bg</code></td>
<td>Display only on lower than big windows</td>
</tr>
<tr>
<td><code>lt-lg</code></td>
<td>Display only on lower than large windows</td>
</tr>
<tr>
<td><code>gt-sm</code></td>
<td>Display only on greater than small windows</td>
</tr>
<tr>
<td><code>gt-md</code></td>
<td>Display only on greater than medium windows</td>
</tr>
<tr>
<td><code>gt-bg</code></td>
<td>Display only on greater than big windows</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/api/index.html</url>
      <content type="html"><![CDATA[<p>Learn here about the API specifications of every feature embedded in Quasar Framework. How to require a script, how to create a route, how to detect if the app is running within Cordova or on a desktop, and many more, including Quasar CSS specifications.</p>
<p>By default, Quasar covers a lot of areas of Web development with ready to use API which simplifies your code and hides the different platform quirks.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Ajax Requests]]></title>
      <url>http://quasar-framework.org/api/js-ajax-requests.html</url>
      <content type="html"><![CDATA[<p>Quasar Ajax Requests are a wrapper over jQuery’s <code>$.ajax()</code> method. There are many features added on top of it.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Making-a-Request"><a href="#Making-a-Request" class="headerlink" title="Making a Request"></a>Making a Request</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET request:</span></span><br><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'...'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">jsonObject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data received: '</span>, jsonObject);</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'uh, oh... the request failed...'</span>, errorThrown);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Same for PUT, POST, DELETE:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.put.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line">quasar.make.a.post.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notice `del` instead of `delete`</span></span><br><span class="line">quasar.make.a.del.request(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>DATA FORMAT</strong><br>By default, the response is treated as a JSON string and it’s parsed, unless specified otherwise with <code>dataType</code> property (see <a href="#Request-Properties">Request Properties</a>).</p>
</blockquote>
<h3 id="Request-Properties"><a href="#Request-Properties" class="headerlink" title="Request Properties"></a>Request Properties</h3><p>When making a request, you can use the properties below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>String</td>
<td>URL or relative path to base URL (see <a href="#Configuring-Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>query</td>
<td>String or Object</td>
<td>Query String</td>
</tr>
<tr>
<td>data</td>
<td>Object/Array/String</td>
<td>Data to be sent along with the request. Read more below this table.</td>
</tr>
<tr>
<td>cachable</td>
<td>Boolean</td>
<td>Should the response be cached? <em>Only for GET requests</em></td>
</tr>
<tr>
<td>requestName</td>
<td>String</td>
<td>See Request Name</td>
</tr>
<tr>
<td>persistent</td>
<td>Boolean</td>
<td>Cannot be aborted by <code>quasar.abort.all.requests()</code></td>
</tr>
<tr>
<td>local</td>
<td>Boolean</td>
<td>Ignore baseURL and make a request from App folder (see <a href="#Configuring-Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>timeout</td>
<td>Number</td>
<td>Number of milliseconds before timeout</td>
</tr>
</tbody>
</table>
<p>… and any jQuery <a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="external">$.ajax() properties</a>. Some examples: <code>dataFilter</code>, <code>dataType</code>, <code>converters</code>, <code>contentType</code>, <code>headers</code>, <code>processData</code>, <code>xhrFields</code>. See <a href="#More-Request-Properties">More Request Properties</a>.</p>
<h4 id="data-property"><a href="#data-property" class="headerlink" title="data property"></a><code>data</code> property</h4><p>When using an Object or Array as data for your POST request then the data is JSON stringified. If on the other hand your data is already a String, it will be sent as-is.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;some: &apos;value&apos;&#125; --&gt; &#123;&quot;some&quot;: &quot;value&quot;&#125;</span><br><span class="line">data: [&apos;one&apos;, &apos;two&apos;] --&gt; [&quot;one&quot;,&quot;two&quot;]</span><br><span class="line">data: &apos;wow=true&amp;some=value&apos; --&gt; wow=true&amp;some=value</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>Only the <code>url</code> property is mandatory.</p>
</blockquote>
<h3 id="Request-Outcome"><a href="#Request-Outcome" class="headerlink" title="Request Outcome"></a>Request Outcome</h3><p>There are multiple ways to see the request outcome, depending on the style that you prefer:</p>
<ol>
<li><p>Inside the configuration object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  done: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;,</span><br><span class="line">  always: <span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Through <code>statusCode</code> property<br><code>statusCode</code> is an object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  statusCode: &#123;</span><br><span class="line">    <span class="number">404</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Page not found handler</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>If the request is successful, the status code functions take the same parameters as the success callback (<code>done</code>); if it results in an error (including 3xx redirect), they take the same parameters as the failure callback (<code>fail</code>).</p>
<ol>
<li>Using Promises <em>(recommended)</em><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'/articles.php'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .always(<span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data,textStatus,jqXHR</span>) </span>&#123;...&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .abort();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Explanation of the methods are below:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>done</td>
<td>data, textStatus, jqXHR</td>
<td>Success handler</td>
</tr>
<tr>
<td>fail</td>
<td>jqXHR, textStatus, errorThrown</td>
<td>Failure handler</td>
</tr>
<tr>
<td>always</td>
<td>data/jqXHR, textStatus, jqXHR/errorThrown</td>
<td>Both success &amp; failure handler; is triggered regardless of the outcome</td>
</tr>
<tr>
<td>then</td>
<td>Function, Function</td>
<td>Alternative way to specify success handler (first param) and failure handler (second param)</td>
</tr>
<tr>
<td>abort</td>
<td><em>None</em></td>
<td>Halts the request before it is completed</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>All methods (including <code>quasar.make.a.&lt;TYPE&gt;.request</code>) return a Promise.</p>
</blockquote>
<h2 id="Configuring-Requests"><a href="#Configuring-Requests" class="headerlink" title="Configuring Requests"></a>Configuring Requests</h2><p>There are global configuration properties that apply to all requests through <code>quasar.config.requests</code> object. Its configurable properties are:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseURL</td>
<td>String</td>
<td>Base URL for all requests. Example: “<a href="http://quasar-framework.org/api/">http://quasar-framework.org/api/</a>“</td>
</tr>
<tr>
<td>failFnHandler</td>
<td>Function</td>
<td>Global failure handler. See <a href="#Global-Failure-Handler">Global Failure Handler</a></td>
</tr>
<tr>
<td>use.cache</td>
<td>Boolean</td>
<td>GET requests cache the response by default or not. See <a href="#Request-Cache">Request Cache</a></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.baseURL = <span class="string">"http://quasar-framework.org/api/"</span>;</span><br></pre></td></tr></table></figure></p>
<p>When wrapping your App with Cordova this provides very useful as your App may use a server somewhere on the Internet to get data. So in order to avoid specifying the host for each request, set the <code>baseURL</code> property.</p>
<blockquote>
<p><strong>TIP</strong><br>If a request is made with <em>local</em> property set to <code>true</code> then baseURL is ignored. This is to be used when making Ajax requests from same server that fetches your website (or from a local resource from a website wrapped with Cordova).</p>
</blockquote>
<h3 id="More-Request-Properties"><a href="#More-Request-Properties" class="headerlink" title="More Request Properties"></a>More Request Properties</h3><p>The properties below are additions to <a href="#Request-Properties">Request Properties</a>.</p>
<h4 id="Filtering-Received-Data"><a href="#Filtering-Received-Data" class="headerlink" title="Filtering Received Data"></a>Filtering Received Data</h4><p>Sometime you need to sanitize the received data with <code>dataFilter</code> method, which takes a function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the <code>dataType</code> parameter.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataFilter: <span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//include any conditions to filter data here...</span></span><br><span class="line">    <span class="comment">//some examples below...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 1 - remove all commas from returned data</span></span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">","</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 2 - if data is JSON process it in some way</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parsed_data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        $.each(parsed_data, <span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//process the JSON data</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(parsed_data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h4><p>By default, the response is considered to be a JSON string, but you can specify other data types if necessary through the <code>dataType</code> property.</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>json</td>
<td>Evaluates the response as JSON and returns a JavaScript object</td>
</tr>
<tr>
<td>xml</td>
<td>Returns an XML document</td>
</tr>
<tr>
<td>html</td>
<td>Return HTML as plain-text</td>
</tr>
<tr>
<td>script</td>
<td>Evaluates the response as JavaScript and returns it as plain text</td>
</tr>
<tr>
<td>text</td>
<td>Returns a plain text string</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataType: <span class="string">"text"</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">plainText</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Converters"><a href="#Converters" class="headerlink" title="Converters"></a>Converters</h4><p>Converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g JSON), you must add a correspondence between the response Content-Type and the actual data type using the contents option:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</p>
<p>To convert from a supported type (e.g text, JSON) to a custom data type and back again, use another pass-through converter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"text mycustomtype"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>The above now allows passing from text to mycustomtype and then mycustomtype to json.</p>
<h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content Type"></a>Content Type</h4><p>When sending data to the server, use <code>contentType</code> to specify Content Type.</p>
<p>Default is <strong>application/x-www-form-urlencoded; charset=UTF-8</strong>, which is fine for most cases. If you explicitly pass in a <code>contentType</code>, then it is always sent to the server (even if no data is sent). If set to <code>false</code> it will not set any content type header.</p>
<blockquote>
<p><strong>NOTE</strong><br>The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.</p>
</blockquote>
<h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><p><code>headers</code> is an object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.</p>
<h4 id="Process-Data"><a href="#Process-Data" class="headerlink" title="Process Data"></a>Process Data</h4><p>This refers to the boolean <code>processData</code>. By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type “application/x-www-form-urlencoded”. If you want to send a DOMDocument, or other non-processed data, set this option to false.</p>
<h4 id="XHR-Fields"><a href="#XHR-Fields" class="headerlink" title="XHR Fields"></a>XHR Fields</h4><p>This refers to <code>xhrFields</code> which is an object of fieldName-fieldValue pairs to set on the native XHR object.</p>
<p>For example, you can use it to set withCredentials to true for cross-domain requests if needed, <em>which is the default behavior for Quasar out of the box</em>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">   url: a_cross_domain_url,</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">      withCredentials: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Global-Failure-Handler"><a href="#Global-Failure-Handler" class="headerlink" title="Global Failure Handler"></a>Global Failure Handler</h2><p>Specify a global failure handler for times when (as an example) you return a specific HTTP code if user is not authenticated.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.failFnHandler = <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (jqXHR.status &amp;&amp; jqXHR.status == <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="comment">// user is not authenticated... give the user a message or redirect the UI</span></span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>You can <code>return true;</code> if you want to override the request’s own failure handler(s).</p>
<h2 id="Request-Cache"><a href="#Request-Cache" class="headerlink" title="Request Cache"></a>Request Cache</h2><p>Cache response for GET requests (only) using <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  cachable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>You can also configure all GET requests to be cached by default, so you won’t have to specify <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.use.cache = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p>
<p>At some point you may want to clear the cache for all requests:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.requests.cache();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>All GET requests are configured by default to cache their response, because <code>quasar.config.requests.use.cache</code> is by default set to <code>true</code>.</p>
</blockquote>
<h2 id="Group-Requests"><a href="#Group-Requests" class="headerlink" title="Group Requests"></a>Group Requests</h2><p>Sometimes you need to wait for multiple requests until you proceed further:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.group.request(</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.del.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...)</span><br><span class="line">).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// all calls ended with success</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// at least one call failed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Request-Store"><a href="#Request-Store" class="headerlink" title="Request Store"></a>Request Store</h2><p>Sometimes you need to make multiple calls using the same request properties:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.store(&#123;...common...request...properties...&#125;);</span><br><span class="line"></span><br><span class="line">store.make.a.get.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.put.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.post.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.del.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Aborting-Requests"><a href="#Aborting-Requests" class="headerlink" title="Aborting Requests"></a>Aborting Requests</h2><p>Sometimes you need to halt a request before it is finished:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = quasar.make.a.get.request(...);</span><br><span class="line">...</span><br><span class="line">request.abort();</span><br></pre></td></tr></table></figure></p>
<p>Or you may want to halt ALL requests in progress:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.abort.all.requests();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When aborting all requests, you may want to exclude some of them. For this, use the <code>persistent</code> property when making those particular requests.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Fullscreen]]></title>
      <url>http://quasar-framework.org/api/js-app-fullscreen.html</url>
      <content type="html"><![CDATA[<p>There are times when you want your website or App to run in fullscreen.<br>Quasar makes it easy by wrapping the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="external">Fullscreen API</a>.</p>
<input type="hidden" data-external-demo="app-fullscreen">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Determining if website is in fullscreen mode:</span></span><br><span class="line">(<span class="built_in">Boolean</span>) quasar.is.fullscreen();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Requesting fullscreen mode:</span></span><br><span class="line">quasar.request.fullscreen();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exiting fullscreen mode:</span></span><br><span class="line">quasar.exit.fullscreen();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Toggle fullscreen mode:</span></span><br><span class="line">quasar.toggle.fullscreen();</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Cookies]]></title>
      <url>http://quasar-framework.org/api/js-cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Read-a-Cookie"><a href="#Read-a-Cookie" class="headerlink" title="Read a Cookie"></a>Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = quasar.get.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<h2 id="Read-All-Cookies"><a href="#Read-All-Cookies" class="headerlink" title="Read All Cookies"></a>Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookies = quasar.get.all.cookies();</span><br></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<h2 id="Verify-if-Cookie-is-Set"><a href="#Verify-if-Cookie-is-Set" class="headerlink" title="Verify if Cookie is Set"></a>Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Boolean</span>) quasar.has.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Write-a-Cookie"><a href="#Write-a-Cookie" class="headerlink" title="Write a Cookie"></a>Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'cookie_name'</span>, cookie_value, options);</span><br></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expire</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</span><br><span class="line">  secure: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Option-expires"><a href="#Option-expires" class="headerlink" title="Option expires"></a>Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expires: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option-path"><a href="#Option-path" class="headerlink" title="Option path"></a>Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/'</span></span><br></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option-domain"><a href="#Option-domain" class="headerlink" title="Option domain"></a>Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">domain: <span class="string">'quasar-framework.org'</span></span><br></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option-secure"><a href="#Option-secure" class="headerlink" title="Option secure"></a>Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">secure: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove-a-Cookie"><a href="#Remove-a-Cookie" class="headerlink" title="Remove a Cookie"></a>Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Visibility]]></title>
      <url>http://quasar-framework.org/api/js-app-visibility.html</url>
      <content type="html"><![CDATA[<p>Quasar makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="external">Page Visibility API</a> which lets you know when a website/app is visible or in focus.</p>
<input type="hidden" data-fullpage-demo="app-visibility">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Boolean</span>) quasar.app.is.visible();</span><br></pre></td></tr></table></figure>
<p>There is also an event triggered when focus changes:</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Environment]]></title>
      <url>http://quasar-framework.org/api/js-environment.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the environment in which the code is running:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>quasar.runs.on.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>quasar.runs.on.cordova</td>
<td>boolean</td>
<td>Is the code running within Cordova?</td>
</tr>
<tr>
<td>quasar.runs.on.desktop</td>
<td>boolean</td>
<td>Is the code running on a desktop browser?</td>
</tr>
<tr>
<td>quasar.runs.with.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
<tr>
<td>quasar.runs.within.iframe</td>
<td>boolean</td>
<td>Is the App running within an IFRAME?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper.</p>
</blockquote>
<p>Other <strong>quasar.runs.on</strong> platform specific properties:<br><code>android</code>, <code>blackberry</code>, <code>cros</code>, <code>ios</code>, <code>ipad</code>, <code>iphone</code>, <code>ipod</code>, <code>kindle</code>, <code>linux</code>, <code>mac</code>, <code>playbook</code>, <code>silk</code>, <code>chrome</code>, <code>opera</code>, <code>safari</code>, <code>win</code> (Windows), <code>winphone</code> (Windows Phone) and more…</p>
<p>Example when running Chrome on a Linux desktop machine:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.runs.on = &#123;</span><br><span class="line">  chrome: <span class="literal">true</span>,</span><br><span class="line">  desktop: <span class="literal">true</span>,</span><br><span class="line">  linux: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">"chrome"</span>,</span><br><span class="line">  platform: <span class="string">"linux"</span>,</span><br><span class="line">  version: <span class="string">"47.0.2526.80"</span>,</span><br><span class="line">  versionNumber: <span class="number">47</span>,</span><br><span class="line">  webkit: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When trying to show DOM elements only on a platform you can skip using Javascript and make use of Quasar CSS classes (which is more efficient). Read about on <a href="/api/css-visibility.html#Platform-Related">CSS &gt; Visibility</a> documentation page.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Events List]]></title>
      <url>http://quasar-framework.org/api/js-events-list.html</url>
      <content type="html"><![CDATA[<p>There are global events registered for some key things in Quasar Framework.<br>See <a href="/api/js-events.html">Quasar Events API</a> if you haven’t already, to learn how to hook into these events and what they are.</p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.events.on(<span class="string">'Event-Name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Object/Array/String/Anything</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Page-Events"><a href="#Page-Events" class="headerlink" title="Page Events"></a>Page Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:page:require</td>
<td>Triggered before requiring page JS file</td>
</tr>
<tr>
<td>app:page:post-require</td>
<td>Triggered after requiring page JS file</td>
</tr>
<tr>
<td>app:page:prepare</td>
<td>Triggered before solving page dependencies</td>
</tr>
<tr>
<td>app:page:post-prepare</td>
<td>Triggered after we have the page’s Vue instantiation object</td>
</tr>
<tr>
<td>app:page:render</td>
<td>Triggered before rendering page on screen</td>
</tr>
<tr>
<td>app:page:post-render</td>
<td>Triggered after rendering page on screen</td>
</tr>
<tr>
<td>app:page:ready</td>
<td>Triggered when page has fully loaded</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.events.on(<span class="string">'app:page:ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Object context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hey, app page is ready</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `context` has the following properties:</span></span><br><span class="line">  <span class="comment">// `name`, `hash`, `manifest`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Layout-Events"><a href="#Layout-Events" class="headerlink" title="Layout Events"></a>Layout Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:layout:require</td>
<td>Triggered before requiring page JS file</td>
</tr>
<tr>
<td>app:layout:post-require</td>
<td>Triggered after requiring page JS file</td>
</tr>
<tr>
<td>app:layout:prepare</td>
<td>Triggered before solving page dependencies</td>
</tr>
<tr>
<td>app:layout:post-prepare</td>
<td>Triggered after we have the page’s Vue instantiation object</td>
</tr>
<tr>
<td>app:layout:render</td>
<td>Triggered before rendering page on screen</td>
</tr>
<tr>
<td>app:layout:post-render</td>
<td>Triggered after rendering page on screen</td>
</tr>
<tr>
<td>app:layout:ready</td>
<td>Triggered when page has fully loaded</td>
</tr>
</tbody>
</table>
<h2 id="Router-Events"><a href="#Router-Events" class="headerlink" title="Router Events"></a>Router Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:route:change</td>
<td>(String) hash</td>
<td>Detected hash change</td>
</tr>
<tr>
<td>app:route:notfound</td>
<td>(Array) hash_parts</td>
<td>New hash does not match any route</td>
</tr>
<tr>
<td>app:route:trigger</td>
<td>(Object) route</td>
<td>Triggering execution of a route</td>
</tr>
<tr>
<td>app:router:started</td>
<td><em>None</em></td>
<td>Router has started listening</td>
</tr>
<tr>
<td>app:router:stopped</td>
<td><em>None</em></td>
<td>Router has stopped listening</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.events.on(<span class="string">'app:route:notfound'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Array hashParts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hey, user navigated to a route, but we don't have</span></span><br><span class="line">  <span class="comment">// any route with such hash matched...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="App-Visibility"><a href="#App-Visibility" class="headerlink" title="App Visibility"></a>App Visibility</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/api/js-app-visibility.html">here</a>.</p>
<h2 id="App-Notify"><a href="#App-Notify" class="headerlink" title="App Notify"></a>App Notify</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:notify</td>
<td>(String) html</td>
<td>Is triggered when <code>quasar.notify()</code> is used.</td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/app-notify.html">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Events]]></title>
      <url>http://quasar-framework.org/api/js-events.html</url>
      <content type="html"><![CDATA[<p>Events are important for the inner workings of your App and also for writing Quasar Plugins.<br>Sometimes you need an event bus or a publish/subscribe channel. An emitter solves this need.</p>
<p>If you are looking for the Events List, it is <a href="/api/js-events-list.html">here</a>.</p>
<h2 id="Creating-an-Emitter"><a href="#Creating-an-Emitter" class="headerlink" title="Creating an Emitter"></a>Creating an Emitter</h2><p>We call an emitter an object who is capable of registering and triggering events.</p>
<p>There are two ways to create one:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a new Object</span></span><br><span class="line"><span class="keyword">var</span> emitter = quasar.create.events.emitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make existing Object an emitter</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;...&#125;;</span><br><span class="line">quasar.make.events.emitter(object);</span><br></pre></td></tr></table></figure></p>
<h3 id="Check-if-Object-is-Emitter"><a href="#Check-if-Object-is-Emitter" class="headerlink" title="Check if Object is Emitter"></a>Check if Object is Emitter</h3><p>You can also check if an object is an emitter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someObject = &#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> isEmitter = quasar.is.events.emitter(someObject);</span><br></pre></td></tr></table></figure></p>
<h3 id="Global-Events-Emitter"><a href="#Global-Events-Emitter" class="headerlink" title="Global Events Emitter"></a>Global Events Emitter</h3><p>There is a global events emitter already available for you to use: <code>quasar.events</code>. Make sure you <em>DON’T</em> name your own events to match the ones that Quasar uses by default (see list <a href="/guide/writing-quasar-page.html#Page-Events">here</a>). It is recommended that you create your own global emitters to avoid event naming problems.</p>
<h2 id="Emitter-Methods"><a href="#Emitter-Methods" class="headerlink" title="Emitter Methods"></a>Emitter Methods</h2><blockquote>
<p><strong>NOTE</strong><br>Event name must <em>NOT</em> contain space characters, otherwise the string will be considered as containing multiple events names.</p>
</blockquote>
<h3 id="Registering-an-Event-Callback"><a href="#Registering-an-Event-Callback" class="headerlink" title="Registering an Event/Callback"></a>Registering an Event/Callback</h3><p><code>emitter.on(String eventNames, Function callback [, Object context])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;...&#125;; <span class="comment">// will be used as *this* within callback</span></span><br><span class="line">emitter.on(<span class="string">'event-name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2, ...paramN</span>) </span>&#123; ... &#125;, context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The params that are used when triggering the event are passed on</span></span><br><span class="line"><span class="comment">// to each callback.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can register multiple events at once:</span></span><br><span class="line">emitter.on(<span class="string">'event1 event2 eventN'</span>, callback);</span><br></pre></td></tr></table></figure></p>
<h3 id="Removing-an-Event-Callback"><a href="#Removing-an-Event-Callback" class="headerlink" title="Removing an Event/Callback"></a>Removing an Event/Callback</h3><p><code>emitter.off(String eventNames [, Function callback])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unregistering an event:</span></span><br><span class="line">emitter.off(<span class="string">'event-name'</span>);</span><br><span class="line"><span class="comment">// 'event-name' does no longer has any callbacks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unregistering a specific callback for an event:</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;;</span><br><span class="line">emitter.on(<span class="string">'event-name'</span>, callback);</span><br><span class="line">emitter.off(<span class="string">'event-name'</span>, callback);</span><br><span class="line"><span class="comment">// 'event-name' still exists (if other callbacks are registered to this event),</span></span><br><span class="line"><span class="comment">// but does not contain the above callback anymore</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can remove callback from multiple events at once:</span></span><br><span class="line">emitter.off(<span class="string">'event1 event2 eventN'</span>, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or we can remove all callbacks from multiple events at once:</span></span><br><span class="line">emitter.off(<span class="string">'event1 event2 eventN'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or we can remove all callbacks and all events at once:</span></span><br><span class="line">emitter.off();</span><br></pre></td></tr></table></figure>
<h3 id="Registering-a-Callback-to-Be-Run-Only-Once"><a href="#Registering-a-Callback-to-Be-Run-Only-Once" class="headerlink" title="Registering a Callback to Be Run Only Once"></a>Registering a Callback to Be Run Only Once</h3><p><code>emitter.once(String eventNames, Function callback [, Object context])</code></p>
<p>Sometimes you need to trigger a callback only once. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;;</span><br><span class="line">emitter.once(<span class="string">'event-name'</span>, callback);</span><br><span class="line"><span class="comment">// callback will be triggered only once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also register callback to be triggered once</span></span><br><span class="line"><span class="comment">// for multiple events at once:</span></span><br><span class="line">emitter.once(<span class="string">'event1 event2'</span>, callback);</span><br><span class="line"><span class="comment">// callback will be triggered only once for 'event1'</span></span><br><span class="line"><span class="comment">// AND only once more for 'event2'</span></span><br><span class="line"><span class="comment">// ... so triggering 'event1' and 'event2' multiple times</span></span><br><span class="line"><span class="comment">// will run callback a total of 2 times</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Triggering-an-Event"><a href="#Triggering-an-Event" class="headerlink" title="Triggering an Event"></a>Triggering an Event</h3><p><code>emitter.trigger(String eventNames [, Anything *args])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">emitter.trigger(<span class="string">'event-name'</span>);</span><br><span class="line"><span class="comment">// All callbacks associated with 'event-name' will be triggered</span></span><br><span class="line"><span class="comment">// in the order that they were registered.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger with parameters (as many as you want):</span></span><br><span class="line">emitter.trigger(<span class="string">'event-name'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">// These parameters will be used when calling all registered</span></span><br><span class="line"><span class="comment">// callbacks for 'event-name' --&gt; callback(10, 'wow', &#123;obj: true&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also trigger multiple events at once:</span></span><br><span class="line">emitter.trigger(<span class="string">'event1 event2 event3'</span>);</span><br><span class="line">emitter.trigger(<span class="string">'event1 event2 event3'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also trigger ALL registered events at once:</span></span><br><span class="line">emitter.trigger();</span><br></pre></td></tr></table></figure></p>
<h3 id="Checking-for-Subscribers"><a href="#Checking-for-Subscribers" class="headerlink" title="Checking for Subscribers"></a>Checking for Subscribers</h3><p><code>Boolean emitter.hasSubscriber(String eventNames [, Function callback])</code><br>or<br><code>Boolean emitter.hasSubscriber(Function callback)</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check if 'event-name' has any callbacks associated</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event-name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for an event:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event-name'</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for any of the specified events</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event1 event2'</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for any events</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if an emitter has any events/callbacks at all:</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber();</span><br></pre></td></tr></table></figure></p>
<h3 id="Getting-List-of-Events"><a href="#Getting-List-of-Events" class="headerlink" title="Getting List of Events"></a>Getting List of Events</h3><p><code>Array emitter.getEventsList()</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eventsList = emitter.getEventsList();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Helpers]]></title>
      <url>http://quasar-framework.org/api/js-helpers-and-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Open-External-URL"><a href="#Open-External-URL" class="headerlink" title="Open External URL"></a>Open External URL</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.open.url(<span class="string">'http://...'</span>);</span><br></pre></td></tr></table></figure>
<p>It will take care of the quirks involved when running under Cordova or on a browser, including notifying the user he/she has to acknowledge opening popups.</p>
<h2 id="Debounce-Function"><a href="#Debounce-Function" class="headerlink" title="Debounce Function"></a>Debounce Function</h2><p>If your App uses JavaScript to accomplish taxing tasks, a debounce function is essential to ensuring a given task doesn’t fire so often that it bricks browser performance. Debouncing a function limits the rate at which the function can fire.</p>
<p>A quick example: you have a resize listener on the window which does some element dimension calculations and (possibly) repositions a few elements. That isn’t a heavy task in itself but being repeatedly fired after numerous resizes will really slow your App down. So why not limit the rate at which the function can fire?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></span><br><span class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></span><br><span class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></span><br><span class="line"><span class="comment">// leading edge, instead of the trailing.</span></span><br><span class="line"></span><br><span class="line">(Debounced <span class="built_in">Function</span>) quasar.debounce(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> milliseconds_to_wait, <span class="built_in">Boolean</span> immediate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">'resize'</span>,</span><br><span class="line">  quasar.debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    .... things to <span class="keyword">do</span> ...</span><br><span class="line">  &#125;, <span class="number">300</span> <span class="comment">/*ms to wait*/</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Function-Reflection"><a href="#Function-Reflection" class="headerlink" title="Function Reflection"></a>Function Reflection</h2><p>Retrieve in an array the formal name of a Function’s parameters (NOT their effective value).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 'fn' must be a reference to a Function</span></span><br><span class="line">(<span class="built_in">Array</span>) quasar.get.fn.param.names(<span class="built_in">Function</span> fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="keyword">var</span> parameters = quasar.get.fn.param.names(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testMe</span>(<span class="params">a, b, c</span>) </span>&#123; <span class="comment">/* bla bla */</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(parameters); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>
<h2 id="Key-Codes"><a href="#Key-Codes" class="headerlink" title="Key Codes"></a>Key Codes</h2><p>Quasar has all key codes available through <code>quasar.key</code>. Some examples:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#searchbox input'</span>).bind(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = e.keyCode || e.which;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (key === quasar.key.enter) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key === quasar.key.backspace) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>For a complete list of keys just type <code>quasar.key</code> in your browsers JS console.</p>
<h2 id="Get-Normalized-Path"><a href="#Get-Normalized-Path" class="headerlink" title="Get Normalized Path"></a>Get Normalized Path</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">String</span>) quasar.get.normalized.path(<span class="built_in">String</span> path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="keyword">var</span> normalizedPath = quasar.get.normalized.path(</span><br><span class="line">  <span class="string">'images/singing/../folder/second/../../quasar.png'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(normalizedPath); <span class="comment">// "http://quasar-framework.org/images/quasar.png"</span></span><br></pre></td></tr></table></figure>
<h2 id="Next-Tick"><a href="#Next-Tick" class="headerlink" title="Next Tick"></a>Next Tick</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Alias for `setTimeout(fn, 1)`:</span></span><br><span class="line">quasar.nextTick(<span class="built_in">Function</span> fn);</span><br></pre></td></tr></table></figure>
<p>Note that Vue also has a <code>nextTick()</code> method, but it differs than <code>quasar.nextTick()</code> in the sense that the specified Function will run on the next digest cycle:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.nextTick(<span class="built_in">Function</span> fn);</span><br></pre></td></tr></table></figure></p>
<h2 id="Capitalize-String"><a href="#Capitalize-String" class="headerlink" title="Capitalize String"></a>Capitalize String</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(Capitalized <span class="built_in">String</span>) quasar.capitalize(<span class="built_in">String</span> str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example: 'title' becomes 'Title'</span></span><br></pre></td></tr></table></figure>
<h2 id="Debug-Helpers"><a href="#Debug-Helpers" class="headerlink" title="Debug Helpers"></a>Debug Helpers</h2><p>The <code>quasar.debug</code> object has useful debugging methods.</p>
<h3 id="Javascript-Stack"><a href="#Javascript-Stack" class="headerlink" title="Javascript Stack"></a>Javascript Stack</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.printStack()</span><br></pre></td></tr></table></figure>
<p>Useful when stuck somewhere in the code and you’d like to see the Javascript stack outputted to the console.</p>
<h3 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h3><p>Sometimes you want to know how much time did something take to get executed. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br><span class="line"><span class="comment">//run some code... then to output results:</span></span><br><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br></pre></td></tr></table></figure></p>
<p>You can have multiple profiles running at the same time.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Require]]></title>
      <url>http://quasar-framework.org/api/js-require-script-or-css.html</url>
      <content type="html"><![CDATA[<p>This feature is used to dynamically include <code>.js</code> files or inject <code>.css</code> ones.</p>
<h2 id="Require-a-Script-file"><a href="#Require-a-Script-file" class="headerlink" title="Require a Script file"></a>Require a Script file</h2><p>You can require a CommonJS compliant .js file directly from your application. Subsequent require() calls within the files are going to also be fetched. Besides being able to use synchronous (but not browser blocking!) require() calls within the browser, you can also require scripts from your node_modules/ folder.</p>
<p>Features that you can take advantage of:</p>
<ul>
<li>Synchronous <code>require()</code> in modules, but without making synchronous Ajax calls nor freezing the browser.</li>
<li><code>exports</code> and <code>module.exports</code> objects just work.</li>
<li>Works with NPM; you can include files directly from your node_modules/ folder. Just make sure that the included libraries work well with the browser.</li>
<li><code>require()</code> paths are relative to the folder of each script in place. No need to write all paths using the same base.</li>
<li>Debugging works really well as required files appear in the Scripts section, each separately, with their real name not a hash or VM string.</li>
<li>Dependencies are loaded as well. Circular dependencies are not a problem as they are handled correctly.</li>
<li>There’s no need for a build step of your scripts.</li>
<li>Required modules are cached. Subsequent calls are resolved instantly.</li>
</ul>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>In your modules you can use the <code>require()</code> function, <code>exports</code> and <code>module.exports</code> objects as you would in NodeJS.</p>
<p>There are multiple ways to include a script file through <code>quasar.require.script()</code>, depending on your style. The syntax is:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using Callback Fn</span></span><br><span class="line">quasar.require.script(</span><br><span class="line">  &#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn,</span><br><span class="line">  &#123;<span class="built_in">Function</span>&#125; callback(err, exports)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Promises</span></span><br><span class="line">quasar.require.script(&#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we failed...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we succeeded!</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying-Path"><a href="#Specifying-Path" class="headerlink" title="Specifying Path"></a>Specifying Path</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Requiring "module-file.js"</span></span><br><span class="line">quasar.require.script(<span class="string">"./module-file"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// an error was encountered while loading the script file</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP code returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.status);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.statusText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use the exports object as needed</span></span><br><span class="line">    exports.method();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying-Factory-Function"><a href="#Specifying-Factory-Function" class="headerlink" title="Specifying Factory Function"></a>Specifying Factory Function</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Requiring "./hello world.js"</span></span><br><span class="line">quasar.require.script(<span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">require</span>(<span class="string">"./hello-world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello(<span class="string">'World!'</span>));</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err.statusText);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>The first parameter of the Factory function <strong>must</strong> be named exactly <code>require</code>, otherwise no file is going to get fetched.</p>
</blockquote>
<h3 id="Managing-Cache"><a href="#Managing-Cache" class="headerlink" title="Managing Cache"></a>Managing Cache</h3><p>By default, all modules that are loaded are cached. If at some point you want to clear out the cache, proceed as follows:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.require.cache();</span><br></pre></td></tr></table></figure></p>
<h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><ul>
<li>If you load from <code>node_modules/</code> folder, specify full path to the entry point file; Quasar will not read the module’s <code>package.json</code> file, and so the “main” property is ignored. Modules inside packages must be requested by their full path, e.g. <code>var _ = require(&quot;underscore/underscore&quot;);</code></li>
<li>When using the Factory function, the first formal parameter must be exactly <code>require</code> and nothing else, otherwise no files are going to get fetched.</li>
<li>No cross-domain paths can be used when within a browser. Cross-domain paths work only when app is packaged with Cordova.</li>
</ul>
<h2 id="Injecting-CSS"><a href="#Injecting-CSS" class="headerlink" title="Injecting CSS"></a>Injecting CSS</h2><p>Injecting CSS means inserting a stylesheet DOM element which makes the browser request your <code>.css</code> file.</p>
<p>List of features:</p>
<ul>
<li>You have two methods of injecting CSS: globally and per-page. When using “per-page” option and navigating to another page, the injected CSS will be removed. Globally injected will not get removed when navigating away.</li>
<li>CSS is cached, so subsequent calls to the same resource are resolved without fetching file again.</li>
<li>Ability to remove global or per-page injected CSS at command.</li>
</ul>
<h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Injecting globally</span></span><br><span class="line">quasar.inject.css(URL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Injecting per-page</span></span><br><span class="line">quasar.inject.page.css(URL);</span><br></pre></td></tr></table></figure>
<p>Removing injected CSS:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Removing globally injected CSS</span></span><br><span class="line">quasar.clear.css();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removing page injected CSS</span></span><br><span class="line">quasar.clear.page.css();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Router]]></title>
      <url>http://quasar-framework.org/api/js-router.html</url>
      <content type="html"><![CDATA[<p>Quasar Framwork takes care of your routes automatically so you don’t have to manage Page switching yourself. But in case you need to do something fancy, here’s the API.</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Each route is an object defined like below:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  hash: <span class="string">'#/'</span></span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Adding a route:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Initialize router to start listening to hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router();</span><br></pre></td></tr></table></figure></p>
<h2 id="Route-Definition"><a href="#Route-Definition" class="headerlink" title="Route Definition"></a>Route Definition</h2><p>A more detailed explanation of a route:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  <span class="comment">// hash that gets matched</span></span><br><span class="line">  hash: <span class="string">'#/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// method to run when hash is matched</span></span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//The [this] object is a copy of the [route] object plus:</span></span><br><span class="line">    <span class="comment">//this.params containing the hash tokens</span></span><br><span class="line">    <span class="comment">//this.url containing the original url hash</span></span><br><span class="line">    <span class="comment">//this.query containing the query string parameters</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>The <code>hash</code> property can be a normal static hash like #/page/books or a parametrized string like #/article/:category/:date, in this case the route parameters will be completed with hash tokens.</p>
<p>For example, for <a href="">http://domain.com/#/article/science/20151010</a> you will have:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  hash: <span class="string">'#/article/:category/:date'</span>,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.params.category contains 'science'</span></span><br><span class="line">    <span class="comment">// this.params.date contains '20151010'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>You can hook into some Router events easily. See <a href="/api/js-events-list.html#Router-Events">Quasar Events List</a>.</p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.events.on(<span class="string">'app:route:notfound'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Array hashParts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hey, user navigated to a route, but we don't have</span></span><br><span class="line">  <span class="comment">// any route with such hash matched...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Router-Management"><a href="#Router-Management" class="headerlink" title="Router Management"></a>Router Management</h2><h3 id="Initializing-the-Router"><a href="#Initializing-the-Router" class="headerlink" title="Initializing the Router"></a>Initializing the Router</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router();</span><br></pre></td></tr></table></figure>
<p>Once the router is initialized it will start listening for hash changes.</p>
<h3 id="Stopping-the-Router"><a href="#Stopping-the-Router" class="headerlink" title="Stopping the Router"></a>Stopping the Router</h3><p>The router can be stopped so it won’t listen for hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.stop.router();</span><br></pre></td></tr></table></figure></p>
<h3 id="Checking-if-Router-is-running"><a href="#Checking-if-Router-is-running" class="headerlink" title="Checking if Router is running"></a>Checking if Router is running</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.router.is.running();</span><br></pre></td></tr></table></figure>
<h3 id="Adding-Route"><a href="#Adding-Route" class="headerlink" title="Adding Route"></a>Adding Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Overwriting-a-Route"><a href="#Overwriting-a-Route" class="headerlink" title="Overwriting a Route"></a>Overwriting a Route</h3><p>Sometimes you may need to overwrite a route.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.overwrite.route(&#123;...new_route_obj...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>It will look for the <code>hash</code> from new_route_obj and replace the current route with this new one.</p>
<h3 id="Removing-Route"><a href="#Removing-Route" class="headerlink" title="Removing Route"></a>Removing Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.route(hash);</span><br><span class="line">Example: quasar.remove.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving-All-Routes"><a href="#Retrieving-All-Routes" class="headerlink" title="Retrieving All Routes"></a>Retrieving All Routes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = quasar.get.all.routes();</span><br></pre></td></tr></table></figure>
<h3 id="Checking-if-Route-Exists"><a href="#Checking-if-Route-Exists" class="headerlink" title="Checking if Route Exists"></a>Checking if Route Exists</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.route(hash);</span><br><span class="line">Example: quasar.has.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving-Current-Route"><a href="#Retrieving-Current-Route" class="headerlink" title="Retrieving Current Route"></a>Retrieving Current Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.current.route();</span><br></pre></td></tr></table></figure>
<h3 id="Get-Route-By-Path"><a href="#Get-Route-By-Path" class="headerlink" title="Get Route By Path"></a>Get Route By Path</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.route(hash);</span><br><span class="line">Example: quasar.get.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Reloading-Current-Route"><a href="#Reloading-Current-Route" class="headerlink" title="Reloading Current Route"></a>Reloading Current Route</h3><p>This will trigger the route methods once again.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.reload.current.route();</span><br></pre></td></tr></table></figure></p>
<h3 id="Navigating-to-a-Route"><a href="#Navigating-to-a-Route" class="headerlink" title="Navigating to a Route"></a>Navigating to a Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.navigate.to.route(hash);</span><br><span class="line">Example: quasar.navigate.to.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Scroll Fire]]></title>
      <url>http://quasar-framework.org/api/js-scroll-fire-directive.html</url>
      <content type="html"><![CDATA[<p>“Scroll Fire” is a feature that enables a method to be called (once and only once) when user scrolls current page to a specific scroll position in pixels.</p>
<input type="hidden" data-fullpage-demo="scroll-fire">

<p>For ease of use, its implementation is through a Vue Directive called <code>v-scroll-fire</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a <code>v-scroll</code> directive which fires whenever user scrolls the Page, available to read <a href="/api/js-vue-directives.html#Directive-“v-scroll”">here</a>.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll-fire</span>=<span class="string">"bounceImage"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    bounceImage: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">      element.velocity(<span class="string">'callout.tada'</span>, &#123;</span><br><span class="line">        display: <span class="literal">null</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>For performance purposes, the scroll listener function injected  is by default debounced by 50ms. Read more about <code>debouncing</code> <a href="/api/js-helpers-and-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling Touch Events]]></title>
      <url>http://quasar-framework.org/api/js-touch-events.html</url>
      <content type="html"><![CDATA[<p>Quasar makes good use of <a href="http://hammerjs.github.io/" target="_blank" rel="external">HammerJS</a> and has specific API to nicely wrap touch events.</p>
<h2 id="Vue-‘v-touch’-directive"><a href="#Vue-‘v-touch’-directive" class="headerlink" title="Vue ‘v-touch’ directive"></a>Vue ‘v-touch’ directive</h2><p>Quasar has its own Vue directive written for handling touch events:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch:event</span>=<span class="string">"method_name"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ..where "event" is the name of the Touch action --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch:pan</span>=<span class="string">"panning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Here’s the list of touch events supported by HammerJS: <code>pan</code>, <code>pinch</code>, <code>press</code>, <code>rotate</code>, <code>swipe</code>. Basically, any touch action that HammerJS has, so visit their website to get updates.</p>
<blockquote>
<p>Just make sure that the method you supply to the directive is registered in your Vue, be that the Quasar Page Vue instance, the Quasar Layout Vue instance or any other Vue instance containing the respective node.</p>
</blockquote>
<p>Example of declaring the method used for the touch action:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="comment">// or in Page/Layout definition 'module.exports = &#123;...&#125;'</span></span><br><span class="line"></span><br><span class="line">  template: <span class="string">'&lt;div v-touch:pan="panning"&gt;Touch Enabled Node&lt;/div&gt;'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    panning: <span class="function"><span class="keyword">function</span>(<span class="params">hammer</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 'hammer' variable has the Hammer object</span></span><br><span class="line">      <span class="comment">// which describes the Touch Event</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// hammer.deltaX, hammer.deltaY, ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="Custom-Touch-Events"><a href="#Custom-Touch-Events" class="headerlink" title="Custom Touch Events"></a>Custom Touch Events</h3><p>There’s a way to write your own custom Touch Events. Here’s an example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.register.custom.touch.event(&#123;</span><br><span class="line">  event: <span class="string">'doubletap'</span>,</span><br><span class="line">  type: <span class="string">'tap'</span>,</span><br><span class="line">  taps: <span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch:doubletap</span>=<span class="string">"doubleTapped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Through-jQuery"><a href="#Through-jQuery" class="headerlink" title="Through jQuery"></a>Through jQuery</h2><p>There are two methods you can use to manage Hammer:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = $(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize Hammer on DOM node</span></span><br><span class="line">node.hammer(hammerOptions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get Hammer instance from node</span></span><br><span class="line"><span class="keyword">var</span> hammer = node.getHammer();</span><br><span class="line">hammer.on(<span class="string">'pan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Don’t worry, jQuery events are still emitted when using Hammer this way.</p>
<h2 id="Prevent-Ghost-Clicks"><a href="#Prevent-Ghost-Clicks" class="headerlink" title="Prevent Ghost Clicks"></a>Prevent Ghost Clicks</h2><p>When dealing directly with jQuery and Hammer for a <code>tap</code> event, you need to make the following call:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.prevent.ghost.click(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'node' can be a jQuery selector or a native DOM element</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br><code>v-touch</code> directive does NOT support <code>tap</code> event. Use <code>v-on:click</code> directive or jQuery’s <code>.click()</code> method instead.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Vue Directives]]></title>
      <url>http://quasar-framework.org/api/js-vue-directives.html</url>
      <content type="html"><![CDATA[<p>Quasar provides some useful ready to use Vue directives. If you don’t know what a directive is, read <a href="http://vuejs.org/guide/custom-directive.html" target="_blank" rel="external">here</a>.</p>
<p>This is not a complete list. The missing ones are specific to some Quasar Components and are described on their documentation pages.</p>
<h3 id="Directive-“v-page-link”"><a href="#Directive-“v-page-link”" class="headerlink" title="Directive “v-page-link”"></a>Directive “v-page-link”</h3><p>Add click event for the respective DOM element so that when clicked it will make the App navigate to a certain Page.</p>
<p>Takes one mandatory parameter which must be either a String (page name) or a Function. Look at examples below.</p>
<h4 id="Example-1-String-Parameter"><a href="#Example-1-String-Parameter" class="headerlink" title="Example 1. String Parameter."></a>Example 1. String Parameter.</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-page-link</span>=<span class="string">"bookstore"</span>&gt;</span>Go to Bookstore<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- When clicked, button will make App navigate to #/bookstore --&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Example-2-Function-Parameter"><a href="#Example-2-Function-Parameter" class="headerlink" title="Example 2. Function Parameter."></a>Example 2. Function Parameter.</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-page-link</span>=<span class="string">"navigateToBookstore"</span>&gt;</span>Go to Bookstore<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    navigateToBookstore: <span class="function"><span class="keyword">function</span>(<span class="params">navigateTo</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// do something here before navigating</span></span><br><span class="line">      <span class="comment">// and finally:</span></span><br><span class="line">      navigateTo(<span class="string">'#/bookstore'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Directive-“v-exit-app”"><a href="#Directive-“v-exit-app”" class="headerlink" title="Directive “v-exit-app”"></a>Directive “v-exit-app”</h3><p>Adds click event to close the App when running under Cordova wrapper, otherwise it just hides the respective element.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-exit-app</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>close<span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Directive-“v-scroll”"><a href="#Directive-“v-scroll”" class="headerlink" title="Directive “v-scroll”"></a>Directive “v-scroll”</h3><p>This one takes one parameter (a Function) and fires when user scrolls the Page containing that DOM node.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrolled"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    scrolled: <span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// when this method is invoked then it means user</span></span><br><span class="line">      <span class="comment">// has scrolled the Page to `position`</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// `position` is an Integer designating the current</span></span><br><span class="line">      <span class="comment">// scroll position in pixels.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Please note that by default the method called is not debounced. For that you have to do it yourself, by wrapping your method with <code>quasar.debounce</code> like in example below.<br>Read more about <code>debouncing</code> <a href="/api/js-helpers-and-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    scrolled: quasar.debounce(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// when this method is invoked then it means user</span></span><br><span class="line">      <span class="comment">// has scrolled the Page to `position`</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// `position` is an Integer designating the current</span></span><br><span class="line">      <span class="comment">// scroll position in pixels.</span></span><br><span class="line">    &#125;, <span class="number">200</span>); <span class="comment">// debounce for 200ms</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>There is one more scrolling-related directive available called “Scroll Fire” described on its own documentation page. Read more <a href="/api/js-scroll-fire-directive.html">here</a>.</p>
</blockquote>
<h3 id="Directive-“v-active-page”"><a href="#Directive-“v-active-page”" class="headerlink" title="Directive “v-active-page”"></a>Directive “v-active-page”</h3><p>Takes one parameter (page name). Adds or Removes the <code>active</code> class on the respective DOM node when user navigates to or away from the indicated page.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- When on (and only on) #/login, the button below has class `active` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-active-page</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Directive-“v-hover”"><a href="#Directive-“v-hover”" class="headerlink" title="Directive “v-hover”"></a>Directive “v-hover”</h3><p>Takes one parameter (a Function) and manages the focus on the respective element.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-hover</span>=<span class="string">"hoverAction"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in the VueModel of the template above:</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  .....</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    hoverAction: <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (state) &#123;</span><br><span class="line">        <span class="comment">// on hover</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// on blur / lose of focus</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Directive-“v-layout-page-sticky”"><a href="#Directive-“v-layout-page-sticky”" class="headerlink" title="Directive “v-layout-page-sticky”"></a>Directive “v-layout-page-sticky”</h3><p>Useful to make a DOM element fixed on screen (when using a Layout for your Page), like for example a FAB (Floating Action Button). User can scroll but your element will be fixed positioned between Header and Footer screen bars.</p>
<p>When using it, also add CSS code to absolute-position the element. In the example below, the helper class <code>absolute-bottom-right</code> class is used.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;fab</span><br><span class="line">  v-layout-page-sticky &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  class="absolute-bottom-right" &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  :click="alert"</span><br><span class="line">  type="primary"</span><br><span class="line">  active-icon="alarm"</span><br><span class="line">  direction="up"</span><br><span class="line">&gt;</span><br><span class="line">  &lt;small-fab label="first" class="primary"&gt;mail&lt;/small-fab&gt;</span><br><span class="line">  &lt;small-fab label="second"&gt;alarm&lt;/small-fab&gt;</span><br><span class="line">&lt;/fab&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Directive-“v-attr”"><a href="#Directive-“v-attr”" class="headerlink" title="Directive “v-attr”"></a>Directive “v-attr”</h3><p>This directive sets HTML attributes (with no value) on the respective DOM node.</p>
<blockquote>
<p><strong>NOTE</strong><br>Do not mistake this directive with the one that Vue had on its early releases up to v0.11.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-attr</span>=<span class="string">"attributes"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the example above <code>attributes</code> is a variable from VM data. It can be a String or an Array of Strings. Some examples of its effects:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// `attributes` has value 'close-me' then DIV below</span><br><span class="line">// has empty HTML attribute 'close-me' added.</span><br><span class="line">&lt;div close-me&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// Changing `attributes` to value "active" makes</span><br><span class="line">// the DIV's DOM node look like this:</span><br><span class="line">&lt;div active&gt;...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// If `attributes` is an Array of String, like</span><br><span class="line">// ['close-me', 'active'] then DIV's DOM node looks like this:</span><br><span class="line">&lt;div active close-me&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Directive-“v-touch”"><a href="#Directive-“v-touch”" class="headerlink" title="Directive “v-touch”"></a>Directive “v-touch”</h3><p>This one is explained in detail on <a href="/api/js-touch-events.html#Vue-‘v-touch’-directive">Touch Events</a> page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Vue Transitions]]></title>
      <url>http://quasar-framework.org/api/js-vue-transitions.html</url>
      <content type="html"><![CDATA[<p>At the moment, Quasar provides only one ready to use Vue transition. If you don’t know what a transition is, read <a href="http://vuejs.org/guide/transitions.html" target="_blank" rel="external">here</a>.<br>Vue transitions work alongside <code>v-show</code>, <code>v-if</code> and <code>v-for</code> Vue directives.</p>
<input type="hidden" data-fullpage-demo="transitions">

<h3 id="“slide”-transition"><a href="#“slide”-transition" class="headerlink" title="“slide” transition"></a>“slide” transition</h3><p>Slide the DOM element up or down based on its visibility.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- Template for VueModel below --&gt;</span><br><span class="line">&lt;img</span><br><span class="line">  v-show="visible" &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  transition="slide" &lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">  src="assets/quasar.jpg"</span><br><span class="line">&gt;</span><br><span class="line">&lt;button @click="toggleVisibility()"&gt;Toggle&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    toggleVisibility: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>http://quasar-framework.org/api/js-web-storage.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="external">Web Storage API</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.local.storage.item(key);</span><br><span class="line"></span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Storing-Data"><a href="#Storing-Data" class="headerlink" title="Storing Data"></a>Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving-Data"><a href="#Retrieving-Data" class="headerlink" title="Retrieving Data"></a>Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.item(key);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.all.local.storage.items();</span><br><span class="line"><span class="keyword">var</span> store = quasar.get.all.session.storage.items();</span><br></pre></td></tr></table></figure></p>
<h3 id="Iterating-through-Store"><a href="#Iterating-through-Store" class="headerlink" title="Iterating through Store"></a>Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = quasar.get.local.storage.length();</span><br><span class="line"><span class="keyword">var</span> length = quasar.get.session.storage.length();</span><br></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.at.index(index);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.at.index(index);</span><br></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing-Data"><a href="#Removing-Data" class="headerlink" title="Removing Data"></a>Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.local.storage.item(key);</span><br><span class="line">quasar.remove.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.local.storage();</span><br><span class="line">quasar.clear.session.storage();</span><br></pre></td></tr></table></figure></p>
<h3 id="Is-Store-Empty"><a href="#Is-Store-Empty" class="headerlink" title="Is Store Empty?"></a>Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.local.storage.is.empty()</span><br><span class="line">(boolean) quasar.session.storage.is.empty()</span><br></pre></td></tr></table></figure>
<h3 id="Is-Key-in-Store"><a href="#Is-Key-in-Store" class="headerlink" title="Is Key in Store?"></a>Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.local.storage.item()</span><br><span class="line">(boolean) quasar.has.session.storage.item()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Action Sheet]]></title>
      <url>http://quasar-framework.org/components/action-sheet.html</url>
      <content type="html"><![CDATA[<p>Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.</p>
<p>The Action Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Action Sheet options.</p>
<input type="hidden" data-fullpage-demo="action-sheet">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.action.sheet(&#123;</span><br><span class="line">  title: <span class="string">'Article Actions'</span>,</span><br><span class="line">  buttons: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Delete'</span>,</span><br><span class="line">      icon: <span class="string">'delete'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        quasar.notify.positive(<span class="string">'Deleted Article'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Cancel'</span>,</span><br><span class="line">      icon: <span class="string">'cancel'</span>,</span><br><span class="line">      classes: <span class="string">'text-primary'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// quasar.notify('Cancelled...');</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The last button specified is always used as a <em>Cancel</em> option to dismiss the Action Sheet and is displayed distinctively from the rest of the buttons.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Notify]]></title>
      <url>http://quasar-framework.org/components/app-notify.html</url>
      <content type="html"><![CDATA[<p>Quasar App Notifiers appear on top of the screen above any other components to signal the user with a message and sometimes with an action too.<br>On mobile platforms they show up at the bottom edge of the screen and on desktop platforms they are shown on the top right edge of the screen.</p>
<input type="hidden" data-fullpage-demo="app-notify">

<p>Quasar App Notifiers are:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Stackable</td>
<td>Multiple can be displayed simultaneous, but not more than 5 at a time. Only the last 5 will remain on screen and the rest are automatically dismissed.</td>
</tr>
<tr>
<td>Controllable</td>
<td>When a Notify is built you can control it completely. See <em>Notify Object Properties</em> above</td>
</tr>
<tr>
<td>Page or Layout Agnostic</td>
<td>App Notify do not depend on a Page or Layout</td>
</tr>
</tbody>
</table>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Quasar App Notify is a message displayed to the user. Below is an example of a simple notify containing only a message:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(Notify <span class="built_in">Object</span>) quasar.notify(<span class="built_in">String</span> or <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure></p>
<p>The <em>Notify Object</em> returned is an instantiation of your notify and has the following properties:</p>
<table>
<thead>
<tr>
<th>Notify Object Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dismiss</code></td>
<td>Function</td>
<td>Dismisses the Notify</td>
</tr>
<tr>
<td><code>node</code></td>
<td>jQuery Node</td>
<td>DOM node of the notify</td>
</tr>
<tr>
<td><code>vm</code></td>
<td>Object</td>
<td>VueModel of the Notify</td>
</tr>
</tbody>
</table>
<h2 id="Notify-Options"><a href="#Notify-Options" class="headerlink" title="Notify Options"></a>Notify Options</h2><p>We saw how to display a notify, but let’s go deeper and analize the required parameter at instantiation, which can be a String or an Object.</p>
<p>When a String, it simply displays that String as the content of your Notify.<br>When an Object, you can specify more options:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.notify(&#123;</span><br><span class="line">  html: <span class="string">'Message to display'</span>,</span><br><span class="line">  icon: <span class="string">'alarm_add'</span>,</span><br><span class="line">  timeout: <span class="number">2500</span>,</span><br><span class="line">  button: &#123;</span><br><span class="line">    label: <span class="string">'Undo'</span>,</span><br><span class="line">    handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Specify what to do when button is clicked/tapped</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  vm: &#123;</span><br><span class="line">    <span class="comment">// VueModel for the Notify</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Mandatory</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>html</code></td>
<td>Yes</td>
<td><em>none</em></td>
<td>HTML to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td></td>
<td><em>none</em></td>
<td>Icon to use. See <a href="/api/css-icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td></td>
<td>7000</td>
<td>Timeout in milliseconds until being automatically dissmissed. Disable automatic dismissal with value “0”.</td>
</tr>
<tr>
<td><code>button</code></td>
<td></td>
<td><em>none</em></td>
<td>Place a button with an action, like “Undo”. Specify <code>label</code> (String) and <code>handler</code> (Function).</td>
</tr>
<tr>
<td><code>vm</code></td>
<td></td>
<td>{methods: ___pan}</td>
<td>VueModel for your Notify if necessary. Do not override the injected <em>___pan</em> method.</td>
</tr>
</tbody>
</table>
<h2 id="Controlling-a-Notify"><a href="#Controlling-a-Notify" class="headerlink" title="Controlling a Notify"></a>Controlling a Notify</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> notify = quasar.notify(<span class="string">'Some message'</span>);</span><br><span class="line"></span><br><span class="line">notify.node.css(<span class="string">'background-color'</span>, <span class="string">'#f0a3a3'</span>);</span><br><span class="line">notify.vm.someDataVariable = <span class="string">'quasar'</span>;</span><br><span class="line">notify.dismiss();</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Badge]]></title>
      <url>http://quasar-framework.org/components/badge.html</url>
      <content type="html"><![CDATA[<p>Quasar Badges are small graphical elements used to indicate something like the number of likes an article has, the new or unread messages in an inbox and so on.</p>
<p>This component only has CSS code, so you just have to follow the HTML structure in your templates for it.</p>
<input type="hidden" data-fullpage-demo="badge">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Basic examples --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge bg-primary text-white"</span>&gt;</span>badge<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge bg-secondary text-white shadow-1"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With Icon as detail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge bg-purple text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">left-detail</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 10</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- With text as detail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge bg-amber"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"left-detail"</span>&gt;</span>Quasar<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Framework</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge bg-secondary text-white"</span>&gt;</span></span><br><span class="line">  Quasar <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right-detail"</span>&gt;</span>Framework<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Play with colors from Quasar <a href="/api/css-color-palette.html">API &gt; CSS &gt; Color Palette</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Breadcrumb]]></title>
      <url>http://quasar-framework.org/components/breadcrumb.html</url>
      <content type="html"><![CDATA[<p>Quasar Breadcrumbs is a graphical control element used as a navigational aid in UI. It allows users to keep track of their locations within programs, documents, or websites.</p>
<p>This component only has CSS code, so you just have to follow the HTML structure in your templates for it.</p>
<input type="hidden" data-fullpage-demo="breadcrumb">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>home<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Quasar</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Breadcrumb</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Buttons]]></title>
      <url>http://quasar-framework.org/components/buttons.html</url>
      <content type="html"><![CDATA[<p>Quasar buttons are of two shapes: rectangle (regular) and circular. They come in three sizes: small, medium (default) and big. As for the colors, use the ones from <a href="/api/css-color-palette.html">Quasar CSS Color Palette</a>. There are some more CSS classes that you can use to enhance the appearance of a button.</p>
<input type="hidden" data-fullpage-demo="buttons">

<p>For circular buttons only use icons as content.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Regular shaped --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"clickMethod()"</span>&gt;</span></span><br><span class="line">  Button Label</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Circular shaped; only use icon as content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When adding an icon to a regular button, use <code>on-left</code> or <code>on-right</code> CSS classes:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-left"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Button Label</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"teal"</span>&gt;</span></span><br><span class="line">  Button Label <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-right"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Button-Sizes"><a href="#Button-Sizes" class="headerlink" title="Button Sizes"></a>Button Sizes</h2><p>Use <code>small</code> or <code>big</code> CSS classes. You don’t need to specify <code>medium</code> because that’s the default size.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary small"</span>&gt;</span></span><br><span class="line">  Small Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary big"</span>&gt;</span></span><br><span class="line">  Big Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Button-Colors"><a href="#Button-Colors" class="headerlink" title="Button Colors"></a>Button Colors</h2><p>Use the ones from <a href="/api/css-color-palette.html">Quasar CSS Color Palette</a>. Examples: <code>primary</code>, <code>orange</code>, <code>lime</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"amber"</span>&gt;</span>Amber Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="More-Button-CSS-Classes"><a href="#More-Button-CSS-Classes" class="headerlink" title="More Button CSS Classes"></a>More Button CSS Classes</h2><p>There are also the <code>glossy</code>, <code>raised</code>, <code>clear</code>, <code>outline</code> and <code>round</code> CSS classes that you can use.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Cards]]></title>
      <url>http://quasar-framework.org/components/cards.html</url>
      <content type="html"><![CDATA[<p>Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps. They’re are a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.</p>
<p>Quasar Cards are all about HTML markup with some exception where Quasar Vue directive need to be used. It’s all about being creative. Experiment with different Web Components by embedding them in Cards to create awesome results.</p>
<blockquote>
<p><strong>NOTE</strong><br>Quasar Cards have by default a width set to 100%, so make sure you either set them a <code>max-width</code> or wrap them in DOM element with maximum width.</p>
</blockquote>
<p>Scroll down to on how to use Cards and see the demos (if on desktop).</p>
<h2 id="Basic-Cards"><a href="#Basic-Cards" class="headerlink" title="Basic Cards"></a>Basic Cards</h2><input type="hidden" data-demo="card-basic">

<p>Familiarize yourself with Cards with these basic examples of card with only content and title.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">    Card Title</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Coloring-Cards"><a href="#Coloring-Cards" class="headerlink" title="Coloring Cards"></a>Coloring Cards</h2><input type="hidden" data-demo="card-coloring">

<p>Use <a href="/api/css-color-palette.html">Quasar CSS color classes</a> to set color for text and background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title bg-primary text-white"</span>&gt;</span></span><br><span class="line">    Colored Card Title</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content card-force-top-padding"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card bg-teal text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">    Background Colored Card</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Minimizing-Cards"><a href="#Minimizing-Cards" class="headerlink" title="Minimizing Cards"></a>Minimizing Cards</h2><input type="hidden" data-demo="card-minimize">

<p>There’s a way to make buttons minimize or close/dismiss Cards by using the Quasar Vue directives <code>v-card-minimize</code> and <code>v-card-close</code>. Make sure you use them on DOM elements from the Card’s title.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>Card Title<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span><br><span class="line">        <span class="attr">class</span>=<span class="string">"primary clear small"</span></span><br><span class="line">        <span class="attr">v-card-minimize</span></span><br><span class="line">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>vertical_align_bottom<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span><br><span class="line">        <span class="attr">class</span>=<span class="string">"primary clear small"</span></span><br><span class="line">        <span class="attr">v-card-close</span></span><br><span class="line">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>close<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Embedding-Other-Web-Components-into-Cards"><a href="#Embedding-Other-Web-Components-into-Cards" class="headerlink" title="Embedding Other Web Components into Cards"></a>Embedding Other Web Components into Cards</h2><p>See how to embed images, maps, Collapsibles, Lists or how to write code for a Social Card, and many more. Just be creative! Experiment with different Web Components to achieve awesome Cards.</p>
<h3 id="Card-with-List"><a href="#Card-with-List" class="headerlink" title="Card with List"></a>Card with List</h3><input type="hidden" data-demo="card-list">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">    Card with List</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter highlight"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">          Quasar Framework</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span>&gt;</span>keyboard_arrow_right<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-Images"><a href="#Card-with-Images" class="headerlink" title="Card with Images"></a>Card with Images</h3><input type="hidden" data-demo="card-images">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Be creative. You can embed a Parallax Web Component:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">    Card with Parallax Image</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parallax</span> <span class="attr">src</span>=<span class="string">"assets/parallax2.jpg"</span> <span class="attr">:height</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parallax</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-Videos"><a href="#Card-with-Videos" class="headerlink" title="Card with Videos"></a>Card with Videos</h3><input type="hidden" data-demo="card-video">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Social-Cards"><a href="#Social-Cards" class="headerlink" title="Social Cards"></a>Social Cards</h3><input type="hidden" data-demo="card-social">

<p>Use social cards to present posts on a wall like on Facebook or Twitter.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-avatar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Web Developer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-actions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>thumb_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 11k likes</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mode_comment<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 8 comments</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-grey-6"</span>&gt;</span></span><br><span class="line">      23 minutes ago.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-Map"><a href="#Card-with-Map" class="headerlink" title="Card with Map"></a>Card with Map</h3><input type="hidden" data-demo="card-map">

<p>Offer directions or present places with a nice Card.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-media"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/map.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>place<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_bar<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Bar XYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Have a drink.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_gas_station<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Gas Station<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Fill your gas tank.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_movies<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Cinema XYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Watch a movie.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-actions card-no-top-padding"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-lime"</span>&gt;</span></span><br><span class="line">      13 minutes</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      (1 mile)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear small"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-left"</span>&gt;</span>directions<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-Collapsible"><a href="#Card-with-Collapsible" class="headerlink" title="Card with Collapsible"></a>Card with Collapsible</h3><input type="hidden" data-demo="card-collapsible">

<p>Imagine a Card with Collapsibles containing Cards. Inception :)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title bg-primary text-white"</span>&gt;</span></span><br><span class="line">    Card with Collapsible</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span>First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Collapsible Content</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>shopping_cart<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Collapsible Content</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>whatshot<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Third<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Collapsible Content</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Card-with-FAB"><a href="#Card-with-FAB" class="headerlink" title="Card with FAB"></a>Card with FAB</h3><input type="hidden" data-demo="card-fab">

<p>In the example below we include a circular button which the user can tap/click for additional actions on the Card.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></span><br><span class="line">    Card with FAB</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-media"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span></span><br><span class="line">        <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span><br><span class="line">        <span class="attr">frameborder</span>=<span class="string">"0"</span></span><br><span class="line">        <span class="attr">allowfullscreen</span></span><br><span class="line">      &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>share<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">    Card Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Checkbox]]></title>
      <url>http://quasar-framework.org/components/checkbox.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="checkbox">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">  Checkbox Label</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Checkbox Label</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        Checkbox Label</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Collapsibles]]></title>
      <url>http://quasar-framework.org/components/collapsible.html</url>
      <content type="html"><![CDATA[<p>Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.</p>
<p>There are two types of Collapsibles: <strong>Regular</strong> and <strong>Popout</strong>. And two types of behavior: <strong>Default</strong> (only one opened accordion element at a time) and <strong>Freely</strong> (user can open multiple accordion elements at a time). And also there are two ways of implementing a Collapsible: through a Vue Directive or through a Web Component.</p>
<input type="hidden" data-fullpage-demo="collapsible">

<h2 id="Basic-Usage-Directive"><a href="#Basic-Usage-Directive" class="headerlink" title="Basic Usage - Directive"></a>Basic Usage - Directive</h2><p>The usage below implies you won’t add or remove items from the Collapsibles. If this is the case though, use the Web Component in the next section (Advanced Usage).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Regular collapsible --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>assignment_ind<span class="tag">&lt;/<span class="name">i</span>&gt;</span>First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>explore<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>shopping_cart<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Third<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>For Popouts, add class <code>popout</code> to the <code>&lt;ul&gt;</code> DOM element.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Popout collapsible --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"popout"</span> <span class="attr">v-collapsible</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>For Freely type (user can open multiple accordion elements at a time), use a slightly different version of the <code>v-collapsible</code> directive:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>=<span class="string">"true"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"popout"</span> <span class="attr">v-collapsible</span>=<span class="string">"true"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Advanced-Usage-Web-Component"><a href="#Advanced-Usage-Web-Component" class="headerlink" title="Advanced Usage - Web Component"></a>Advanced Usage - Web Component</h2><p>This usage allows you to add or remove accordion items at any time, but it comes with a small price on performance. So avoid it if you can.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>assignment_ind<span class="tag">&lt;/<span class="name">i</span>&gt;</span>First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>shopping_basket<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>loyalty<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Third<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Content 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>For Popouts, add class <code>popout</code> to the <code>&lt;quasar-collapsible&gt;</code> DOM element.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Popout collapsible --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">class</span>=<span class="string">"popout"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>For Freely type (user can open multiple accordion elements at a time), add <code>freely</code> DOM element empty attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">freely</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">class</span>=<span class="string">"popout"</span> <span class="attr">freely</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Preselecting-Items"><a href="#Preselecting-Items" class="headerlink" title="Preselecting Items"></a>Preselecting Items</h2><p>Accordion items can be opened by default. For this, add CSS class <code>active</code> to them. If opening multiple items at once by default then make sure that the Collapsible is in <em>Freely</em> mode.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">freely</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible-item</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible-item</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-collapsible-item</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Ubiquity-Use-Cards-As-Content"><a href="#Ubiquity-Use-Cards-As-Content" class="headerlink" title="Ubiquity - Use Cards As Content"></a>Ubiquity - Use Cards As Content</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-collapsible</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>explore<span class="tag">&lt;/<span class="name">i</span>&gt;</span>Second Card<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Dialog]]></title>
      <url>http://quasar-framework.org/components/dialog.html</url>
      <content type="html"><![CDATA[<p>Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).</p>
<p>From a UI perspective, you can think of Alerts as a type of “floating” modal, that covers only a portion of the screen. This means Alerts should only be used for quick actions like password verification, small App notifications, or quick options. More in depth user flows should be reserved for full screen ​Modals​.</p>
<input type="hidden" data-fullpage-demo="dialog">

<p>Multiple types of Quasar Dialogs are available:</p>
<h2 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Alert'</span>,</span><br><span class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Prompt'</span>,</span><br><span class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</span><br><span class="line">  inputs: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'input1'</span>,</span><br><span class="line">      label: <span class="string">'Placeholder 1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'input2'</span>,</span><br><span class="line">      label: <span class="string">'Placeholder 2'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  buttons: [</span><br><span class="line">    <span class="string">'Cancel'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Ok'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Confirm"><a href="#Confirm" class="headerlink" title="Confirm"></a>Confirm</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Confirm'</span>,</span><br><span class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</span><br><span class="line">  buttons: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Disagree'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Disagreed...'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Agree'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Agreed!'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Pick-One-Option-Radios"><a href="#Pick-One-Option-Radios" class="headerlink" title="Pick One Option (Radios)"></a>Pick One Option (Radios)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Radios'</span>,</span><br><span class="line">  message: <span class="string">'Message can be used for all types of Dialogs.'</span>,</span><br><span class="line">  radios: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 1'</span>,</span><br><span class="line">      value: <span class="string">'opt1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 2'</span>,</span><br><span class="line">      value: <span class="string">'opt2'</span>,</span><br><span class="line">      selected: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 3'</span>,</span><br><span class="line">      value: <span class="string">'opt3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 4'</span>,</span><br><span class="line">      value: <span class="string">'opt4'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 5'</span>,</span><br><span class="line">      value: <span class="string">'opt5'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  buttons: [</span><br><span class="line">    <span class="string">'Cancel'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Ok'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Pick-Multiple-Options-Checkboxes"><a href="#Pick-Multiple-Options-Checkboxes" class="headerlink" title="Pick Multiple Options (Checkboxes)"></a>Pick Multiple Options (Checkboxes)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Checkboxes'</span>,</span><br><span class="line">  checkboxes: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 1'</span>,</span><br><span class="line">      value: <span class="string">'opt1'</span>,</span><br><span class="line">      checked: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 2'</span>,</span><br><span class="line">      value: <span class="string">'opt2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  buttons: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Cancel'</span>,</span><br><span class="line">      handler: $.noop</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Ok'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Pick-Multiple-Options-2-Toggles"><a href="#Pick-Multiple-Options-2-Toggles" class="headerlink" title="Pick Multiple Options #2 (Toggles)"></a>Pick Multiple Options #2 (Toggles)</h2><p>Same as previous but using Toggles instead of Checkboxes.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Toggles'</span>,</span><br><span class="line">  toggles: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 1'</span>,</span><br><span class="line">      value: <span class="string">'opt1'</span>,</span><br><span class="line">      checked: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Option 2'</span>,</span><br><span class="line">      value: <span class="string">'opt2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  buttons: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Cancel'</span>,</span><br><span class="line">      handler: $.noop</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Ok'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Pick-Range"><a href="#Pick-Range" class="headerlink" title="Pick Range"></a>Pick Range</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.dialog(&#123;</span><br><span class="line">  title: <span class="string">'Ranges'</span>,</span><br><span class="line">  ranges: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Volume'</span>,</span><br><span class="line">      min: <span class="number">1</span>,</span><br><span class="line">      max: <span class="number">5</span>,</span><br><span class="line">      iconMin: <span class="string">'volume_down'</span>,</span><br><span class="line">      iconMax: <span class="string">'volume_up'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Brightness'</span>,</span><br><span class="line">      min: <span class="number">1</span>,</span><br><span class="line">      max: <span class="number">5</span>,</span><br><span class="line">      value: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Speed'</span>,</span><br><span class="line">      min: <span class="number">1</span>,</span><br><span class="line">      max: <span class="number">10</span>,</span><br><span class="line">      value: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Noise Level'</span>,</span><br><span class="line">      min: <span class="number">4</span>,</span><br><span class="line">      max: <span class="number">15</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  buttons: [</span><br><span class="line">    <span class="string">'Cancel'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Change'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        quasar.notify(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Floating Action Buttons]]></title>
      <url>http://quasar-framework.org/components/floating-action-buttons.html</url>
      <content type="html"><![CDATA[<p>A Quasar Floating Action Button (FAB) represents the primary action in an App Page. But it’s not limited to only that. It can contain sub-actions too, and more importantly it can also be used inline into your Pages or Layouts.</p>
<input type="hidden" data-fullpage-demo="floating-action-button">

<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>So there are two types: expandable (has sub-actions) and non-expandable. If not expandable, a simple circular button will suffice. Otherwise check the HTML tags below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Non-expandable --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span> @<span class="attr">click</span>=<span class="string">"method()"</span>&gt;</span></span><br><span class="line">  Button label</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Expandable --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"someMethod()"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fab</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We’ll continue describing only the expandable ones, as the non-expandable are simple circular buttons and you can read about them in the Buttons documentation page.</p>
<p>FABs are Web Components defined by <code>&lt;fab&gt;</code> and <code>&lt;small-fab&gt;</code> HTML tags with the following Vue properties:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>“primary”</td>
<td>One of the main colors in Quasar Color Palette; can also be an array of colors or CSS classes. Check second inline usage example below.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>“add”</td>
<td>Icon to use when not expanded</td>
</tr>
<tr>
<td><code>click</code></td>
<td><em>none</em></td>
<td>The method from VM to call when clicked/tapped.</td>
</tr>
<tr>
<td><code>direction</code></td>
<td>“right”</td>
<td>The direction in which to expand; one of the following values: “up”, “down”, “left”, “right”.</td>
</tr>
<tr>
<td><code>activeIcon</code></td>
<td>“close”</td>
<td>The icon to change to when expanded.</td>
</tr>
<tr>
<td><code>backdrop</code></td>
<td><em>none</em></td>
<td>Empty attribute; Use a backdrop behind it when expanded.</td>
</tr>
</tbody>
</table>
<h2 id="Inline-Usage"><a href="#Inline-Usage" class="headerlink" title="Inline Usage"></a>Inline Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fab</span></span><br><span class="line">  <span class="attr">type</span>=<span class="string">"primary"</span></span><br><span class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_right"</span></span><br><span class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></span><br><span class="line">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fab</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fab</span></span><br><span class="line">  <span class="attr">:type</span>=<span class="string">"['primary', 'glossy']"</span></span><br><span class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_right"</span></span><br><span class="line">  <span class="attr">active-icon</span>=<span class="string">"mail"</span></span><br><span class="line">  <span class="attr">direction</span>=<span class="string">"right"</span></span><br><span class="line">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"light-blue"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"purple"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fab</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Fixed-Positioning-Usage"><a href="#Fixed-Positioning-Usage" class="headerlink" title="Fixed Positioning Usage"></a>Fixed Positioning Usage</h2><p>When used on a Page with <strong>no</strong> Layout, you can use the <a href="/api/css-positioning.html">CSS Quasar Positioning</a> classes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- on a Page WITH NO Layout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fab</span></span><br><span class="line">  <span class="attr">class</span>=<span class="string">"fixed-bottom-right"</span></span><br><span class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></span><br><span class="line">  <span class="attr">style</span>=<span class="string">"right: 20px;"</span></span><br><span class="line">  <span class="attr">:click</span>=<span class="string">"vmActionMethod"</span></span><br><span class="line">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fab</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When used on a Page with a Layout, in order to make the FAB fixed positioned you need to make use of the <code>v-layout-page-sticky</code> Vue directive embedded in Quasar and add an absolute (not fixed) CSS Quasar Positioning class.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- on a Page with Layout --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fab</span></span><br><span class="line">  <span class="attr">v-layout-page-sticky</span></span><br><span class="line">  <span class="attr">class</span>=<span class="string">"absolute-bottom-right"</span></span><br><span class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></span><br><span class="line">  <span class="attr">icon</span>=<span class="string">"add"</span></span><br><span class="line">  <span class="attr">active-icon</span>=<span class="string">"alarm"</span></span><br><span class="line">  <span class="attr">:click</span>=<span class="string">"vmActionMethod"</span></span><br><span class="line">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small-fab</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">small-fab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fab</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Grid Web Component]]></title>
      <url>http://quasar-framework.org/components/grid-component.html</url>
      <content type="html"><![CDATA[<p>Quasar Grid is a Web Component which allows you to display data in a tabular manner. Best way to display a Grid is on a desktop so you might want to check that first.</p>
<input type="hidden" data-fullpage-demo="grid-component">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">grid</span></span><br><span class="line">  <span class="attr">:columns</span>=<span class="string">"columns"</span></span><br><span class="line">  <span class="attr">:data</span>=<span class="string">"data"</span></span><br><span class="line">  <span class="attr">:rows-per-page</span>=<span class="string">"5"</span></span><br><span class="line">  <span class="attr">:selection-mode</span>=<span class="string">"selectionMode"</span></span><br><span class="line">  <span class="attr">:selection-actions</span>=<span class="string">"selectionActions"</span></span><br><span class="line">  <span class="attr">:sortable</span>=<span class="string">"sortable"</span></span><br><span class="line">  <span class="attr">id-property</span>=<span class="string">"unique_id"</span></span><br><span class="line">&gt;</span><span class="tag">&lt;/<span class="name">grid</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  data: data,</span><br><span class="line">  grid: quasar.current.layout.vm.$data.grid,</span><br><span class="line">  columns: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Date'</span>,</span><br><span class="line">      field: <span class="string">'isodate'</span>,</span><br><span class="line">      style: <span class="string">'width: 100px'</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value).toLocaleString();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Source'</span>,</span><br><span class="line">      field: <span class="string">'source'</span>,</span><br><span class="line">      style: <span class="string">'width: 100px'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'Service'</span>,</span><br><span class="line">      field: <span class="string">'serviceable'</span>,</span><br><span class="line">      formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value === <span class="string">'Informational'</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'&lt;i&gt;info&lt;/i&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      style: <span class="string">'color: green; width: 100px'</span>,</span><br><span class="line">      classes: <span class="string">'text-center'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  selectionMode: <span class="string">'single'</span>,</span><br><span class="line">  selectionActions: [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'View 1'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">selectedRows</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(selectedRows);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'View 2'</span>,</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params">selectedRows</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(selectedRows);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>columns</code></td>
<td><em>none</em></td>
<td><em>(required)</em> Configure columns to be displayed.</td>
</tr>
<tr>
<td><code>data</code></td>
<td><em>none</em></td>
<td><em>(required)</em>  Data to display on Grid.</td>
</tr>
<tr>
<td><code>rows-per-page</code></td>
<td>5</td>
<td>Self explanatory. Value “0” disables pagination.</td>
</tr>
<tr>
<td><code>sortable</code></td>
<td>true</td>
<td>Data can or cannot be sorted by columns.</td>
</tr>
<tr>
<td><code>id-property</code></td>
<td><em>none</em></td>
<td>Help improve rendering performance when each row has a unique id as property. The value must be the name of that property.</td>
</tr>
<tr>
<td><code>selection-mode</code></td>
<td>‘none’</td>
<td>No selection (‘none’), single selection (‘single’) or multiple selection (‘multiple’).</td>
</tr>
<tr>
<td><code>selection-actions</code></td>
<td><em>none</em></td>
<td>Array of Objects (with <code>label</code> and <code>handler</code> properties) from which the user can choose with his/her selection.</td>
</tr>
<tr>
<td><code>no-data-label</code></td>
<td>‘No data to display.’</td>
<td>String to display when there’s no data or the selection is empty.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar HTML Tables]]></title>
      <url>http://quasar-framework.org/components/html-tables.html</url>
      <content type="html"><![CDATA[<p>HTML tables don`t need to look bad. Quasar takes care of them by default.</p>
<input type="hidden" data-fullpage-demo="html-tables">

<p>If the default table style is not enough, use following CSS classes to best suit your needs: <code>inner-delimiter</code>, <code>bordered</code>, <code>striped</code>, <code>highlight</code>, <code>centered</code>, <code>compact</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"...."</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>In Stock<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Item #1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$10.11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>101<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Item #2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$8.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Item #3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$0.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1670<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Image Gallery]]></title>
      <url>http://quasar-framework.org/components/image-gallery.html</url>
      <content type="html"><![CDATA[<p>All Web Components below are responsive. They accommodate with the width of their container.</p>
<input type="hidden" data-fullpage-demo="image-gallery">

<h2 id="Responsive-Images"><a href="#Responsive-Images" class="headerlink" title="Responsive Images"></a>Responsive Images</h2><p>Just add the <code>responsive</code> CSS class to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/quasar.jpg"</span> <span class="attr">class</span>=<span class="string">"responsive"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Image-Gallery"><a href="#Image-Gallery" class="headerlink" title="Image Gallery"></a>Image Gallery</h2><p>Use this Web Component when you want to display multiple images together.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gallery</span> <span class="attr">:src</span>=<span class="string">"gallery"</span>&gt;</span><span class="tag">&lt;/<span class="name">gallery</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    gallery: [</span><br><span class="line">      <span class="string">'assets/mountains.jpg'</span>,</span><br><span class="line">      <span class="string">'assets/parallax1.jpg'</span>,</span><br><span class="line">      <span class="string">'assets/parallax2.jpg'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Image-Gallery-Slider"><a href="#Image-Gallery-Slider" class="headerlink" title="Image Gallery Slider"></a>Image Gallery Slider</h2><p>When the real estate of the Page is an issue, use this Web Component which displays multiple images using a Slider Component. Read more about Sliders <a href="/components/slider.html">here</a>.</p>
<p>Gallery Slider has two control buttons available: one which when clicked displays a list of thumbnails of all images in the gallery, and the other which can bring the slider to fullscreen.</p>
<p>User can switch between images using the arrow buttons or through swipe actions. When on desktop, user can also drag on images to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gallery-slider</span> <span class="attr">:src</span>=<span class="string">"gallery"</span>&gt;</span><span class="tag">&lt;/<span class="name">gallery</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    gallery: [</span><br><span class="line">      <span class="string">'assets/mountains.jpg'</span>,</span><br><span class="line">      <span class="string">'assets/parallax1.jpg'</span>,</span><br><span class="line">      <span class="string">'assets/parallax2.jpg'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/components/index.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are made of high-level building blocks called components. Components allow you to quickly construct an interface for your App. Quasar comes with a number of components, including modals, action sheets, collapsibles, cards, dialogs, FAB, lists and many more.</p>
<p>Quasar Components are written as Web Components, so they embed HTML, CSS and Javascript code that you can use by just including an HTML tag in your Page and Layout templates.</p>
<p>Check out the examples (text and live demos for each platform) to see what each component looks like and to learn how to use each one.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Input Textbox]]></title>
      <url>http://quasar-framework.org/components/input-textbox.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="input-textbox">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue DOM attribute properties you can use:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lazy</code></td>
<td>Empty Attribute</td>
<td>Change model after Web Component loses focus</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Change model with a debouncing timing</td>
</tr>
</tbody>
</table>
<h2 id="Fixed-Label-Usage"><a href="#Fixed-Label-Usage" class="headerlink" title="Fixed Label Usage"></a>Fixed Label Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Fixed<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item fixed-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item fixed-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pass1"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pass1"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Floating-Label-Usage"><a href="#Floating-Label-Usage" class="headerlink" title="Floating Label Usage"></a>Floating Label Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Floating<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item floating-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item floating-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Inline-Label-Usage"><a href="#Inline-Label-Usage" class="headerlink" title="Inline Label Usage"></a>Inline Label Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Inline<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item inline-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Username</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item inline-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Password</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Placeholder-Usage"><a href="#Placeholder-Usage" class="headerlink" title="Placeholder Usage"></a>Placeholder Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Placeholder<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Stacked-Usage"><a href="#Stacked-Usage" class="headerlink" title="Stacked Usage"></a>Stacked Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Stacked<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item stacked-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user4"</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"user4"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item stacked-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pass4"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pass4"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Automatic Navigation Tabs]]></title>
      <url>http://quasar-framework.org/components/layout-automatic-navigation-tabs.html</url>
      <content type="html"><![CDATA[<p>Quasar Automatic Navigation Tabs are links to Page Apps. They get displayed below the Layout Header with Material Theme and above the Layout Footer in iOS Theme.</p>
<input type="hidden" data-fullpage-demo="layout-navigation">

<p>The Automatic Navigation Tabs are defined by <code>&lt;screen-tabs&gt;</code> Web Component. This is how you include them in your Layout:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">screen-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span><span class="tag">&lt;/<span class="name">screen-tabs</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Their purpose is to create Tabs for the Layout to ease the navigation to Pages of your App. They are “automatic” because the only thing you have to do is to specify in your Page’s Manifest files how these tabs should be handled.</p>
<p>Example of Page Manifest file:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">label:</span> <span class="string">'Control Panel'</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">'dashboard'</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">'main'</span></span><br><span class="line"><span class="attr">navigation:</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">'typography'</span></span><br><span class="line"><span class="attr">  order:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  hide:</span> <span class="string">'icon'</span></span><br></pre></td></tr></table></figure></p>
<p>So there you go. It’s all about handling Page Manifest files. The Page described above will make Layout to display a Tab with the dashboard icon along ‘Control Panel’ String. It will link the Page to a Layout called ‘main’. The <code>navigation</code> property actually enables the Page to be included in the Automatic Navigation Tabs. You must specify a <code>group</code> (mandatory) and optionally the <code>order</code> (of the Tab in the generated Tab list) or <code>hide</code> (which hides either <code>icon</code> or <code>label</code> on small windows but shows both icon and label on wide windows).</p>
<h2 id="Navigation-Tab-Groups"><a href="#Navigation-Tab-Groups" class="headerlink" title="Navigation Tab Groups"></a>Navigation Tab Groups</h2><p>Navigation Tabs are organized by groups. Only one group can be displayed at a time. To better understand what groups are about, take this example:</p>
<p>You have four Pages: ‘my-account’, ‘settings’, ‘shopping-cart’ and ‘store’. You can specify in the Page Manifests that the first two pages belong to the navigation group ‘account’ and the last two in the group ‘shopping’. Now, when user navigates to either ‘my-account’ or ‘settings’ Pages, the Automatic Navigation Tabs will only show tabs for those two pages since they belong to the same group and no other Page is in this group. When user navigates to ‘shopping-cart’ or ‘store’ Pages, navigation group will switch to ‘shopping’ from ‘account’ and so the only Tabs displayed will be for these two last Pages.</p>
<p>You can also specify an order in which the tabs are displayed on the Automatic Navigation Tabs if you won’t like the default order, through the <code>navigation.order</code> property.</p>
<blockquote>
<p><strong>NOTE</strong><br>You can use Pages with different Layouts but same navigation group names. Only Pages linked to the current Layout being used will be taken into consideration when displaying them by the Automatic Navigation Tabs component.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Layout Drawer]]></title>
      <url>http://quasar-framework.org/components/layout-drawer.html</url>
      <content type="html"><![CDATA[<p>The Quasar Layout Drawer (also known as a Sidebar) is the element on the left side or right side of your screen, usually used for Navigation, which gets hidden on smaller screens (and can be activated by swiping them into view from the edge of the screen or by clicking/tapping on menu buttons) and is shown alongside the Page content on wide enough screens.</p>
<p>There are two types of Drawers: left-side or right-side. Check the HTML markup to learn how to declare each of them.</p>
<input type="hidden" data-fullpage-demo="layout-drawer">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In your Layout template file, you can declare up to two drawers, but they must differ in type (one must be left-side and one right-side) otherwise they’ll be one on top of each other.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left side Drawer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">drawer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">        Left Side Drawer</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"my-account"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"shopping-cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span><br><span class="line">    Right side Drawer;</span><br><span class="line">    Notice the HTML Attributes on &lt;drawer&gt; element</span><br><span class="line">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">drawer</span> <span class="attr">right-side</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">        Right Side Drawer</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"typography"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Configuring-Drawer"><a href="#Configuring-Drawer" class="headerlink" title="Configuring Drawer"></a>Configuring Drawer</h2><p>The <code>&lt;drawer&gt;</code> tag supports two HTML attributes (both optional) which changes its behavior:</p>
<table>
<thead>
<tr>
<th>Drawer Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>right-side</code></td>
<td>User can swipe the Drawer into view from the right side of the screen.</td>
</tr>
<tr>
<td><code>swipe-only</code></td>
<td>By default, Drawers get hidden on smaller screens but they get displayed on wide enough ones. Adding <code>swipe-only</code> attribute makes the Drawer hidden on bigger screens too. Rest assured, in this case the user can still bring them into view by swiping on the edge of the screen or by clicking/tapping on menu buttons.</td>
</tr>
</tbody>
</table>
<h2 id="Drawer-Content"><a href="#Drawer-Content" class="headerlink" title="Drawer Content"></a>Drawer Content</h2><p>The Drawer component gets along very well with <a href="/components/list.html">Quasar Lists</a>. You can use Lists to define the contents of the Drawer. To differentiate how a Drawer List looks like, use the special CSS class <code>platform-delimiter</code> on the list DOM node.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>There’s also a helper Web Component called <code>&lt;drawer-link&gt;</code> which generates a link to a Page of your App (defined with <code>page</code> HTML attribute). It automatically handles click/tap events so it navigates to the respective Page. Best use it within a Quasar List.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"page-name"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Study-Case"><a href="#Study-Case" class="headerlink" title="Study Case"></a>Study Case</h3><p>Let’s build a Drawer with links to all available App Pages. We’ll make use of the global <code>quasar.data.manifest.pages</code> Object and make Vue iterate through the list to generate <code>&lt;drawer-link&gt;</code> tags.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In your Layout template: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">drawer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">drawer-link</span></span><br><span class="line">      <span class="attr">v-for</span>=<span class="string">"pageName in pages"</span></span><br><span class="line">      <span class="attr">:page</span>=<span class="string">"pageName"</span></span><br><span class="line">    &gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In your Layout script:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    pages: <span class="built_in">Object</span>.keys(quasar.data.manifest.pages)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Ways-to-Open-the-Drawer"><a href="#Ways-to-Open-the-Drawer" class="headerlink" title="Ways to Open the Drawer"></a>Ways to Open the Drawer</h2><p>As you read above, the Drawer can be brought into view by either swiping from the edge of the screen or by clicking on menu buttons. A menu button is automatically added a click/tap event to open the Drawer if it has either <code>left-drawer-toggle</code> or <code>right-drawer-toggle</code> CSS classes added to it.</p>
<p>From a user’s perspective, it’s best to put those buttons in the Layout Header. Quick example below. Notice the <code>&lt;button&gt;</code> tag has <code>left-drawer-toggle</code>.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-toggle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>The two CSS classes mentioned above can be used on any DOM element. Quasar will add click/tap events to them by default.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Layout Header and Footer]]></title>
      <url>http://quasar-framework.org/components/layout-header-and-footer.html</url>
      <content type="html"><![CDATA[<p>A Quasar Layout can have have a Header and/or a Footer (also called Marginals), which will always be visible to the user at all times as long as the Layout gets being used.</p>
<input type="hidden" data-fullpage-demo="layout-marginals">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>The marginals are DOM elements that must be defined inside the <code>&lt;screen&gt;</code> tag of your Layout template, and they must contain the <code>slot</code> HTML attribute with either <code>header</code> or <code>footer</code> as value.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-toggle"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"small"</span> <span class="attr">v-exit-app</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>power_settings_new<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>settings<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li><p>As you can see from the example above, it’s best to inject <a href="/api/css-grid-layout.html">Grid Layout</a> CSS classes (like <code>row</code>, <code>items-center</code>, <code>justify-center</code>, <code>auto</code>) to manage how marginals look.</p>
</li>
<li><p>Make sure the title is wrapped in a paragraph tag (<code>&lt;p&gt;</code>).</p>
</li>
<li><p>It’s best to use small buttons in the marginals (<code>&lt;button class=&quot;small&quot;&gt;</code>) and no colors on them.</p>
</li>
<li><p>You can include multiple headers or footers. They will be stacked in the order that they appear in your Layout template. Think of each <code>&lt;div slot=&quot;header&quot;&gt;...&lt;/div&gt;</code> and <code>&lt;div slot=&quot;header&quot;&gt;...&lt;/div&gt;</code> as rows in your Header/Footer.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Layout Components Overview]]></title>
      <url>http://quasar-framework.org/components/layout-overview.html</url>
      <content type="html"><![CDATA[<p>Layouts are the elements that wrap page content, like navigational bar or drawer. Multiple pages can share the same Layout, which is one of the main reason for their existence.</p>
<input type="hidden" data-fullpage-demo="layout-overview">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Layout is constructed by <code>&lt;screen&gt;</code> Web Component. It is mandatory unless you really know what you are doing.</p>
<p>An example of Layout, containing all possible elements: a header, a footer, automatic navigational tabs, a drawer on the left side (which is shown alongside Page content on wide screens) and a drawer on the right side (which is always hidden regardless of the screen width):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Automatic Navigational Tabs --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">screen-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span><span class="tag">&lt;/<span class="name">screen-tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Header --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-toggle"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"small"</span> <span class="attr">v-exit-app</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>power_settings_new<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"small right-drawer-toggle"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Left-side Drawer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">drawer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">        Left Side Drawer</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"my-account"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"shopping-cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Page Contents will be placed here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">page</span> <span class="attr">class</span>=<span class="string">"smart-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Right-side Drawer --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">drawer</span> <span class="attr">right-side</span> <span class="attr">swipe-only</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">        Right Side Drawer</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">drawer-link</span> <span class="attr">page</span>=<span class="string">"typography"</span>&gt;</span><span class="tag">&lt;/<span class="name">drawer-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li><p>Make sure that your Layout template DOM elements are wrapped by one (and <strong>only one</strong>) DOM element, like for example <code>&lt;screen&gt;</code>. Do not add more than one DOM element at the highest hierarchical level of your Layout template.</p>
</li>
<li><p>The <code>&lt;screen&gt;</code> Web Component uses the following slots: <code>header</code>, <code>footer</code> and <code>navigation</code>. You can specify your content for these slots with the <code>slot</code> HTML attribute: <code>slot=&quot;footer&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">  ...Your Content...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Note that you can use define multiple headers, footers and navigation elements.</p>
</li>
<li><p>The order of inclusion of the drawers and <code>&lt;page&gt;</code> tag matters on a desktop view (and even on wide screen tablets) where if the window is wide enough, drawers are displayed side by side with Page content. For example, you can actually decide that your left-side drawer should be displayed on the right-side of your Page content on a wide window by including <code>&lt;page&gt;</code> tag before the <code>&lt;drawer&gt;</code> one.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">page</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">drawer</span>&gt;</span></span><br><span class="line">    ...Drawer Content...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">drawer</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>It’s best to use Quasar Lists for the Drawer links, but this is not mandatory.</p>
</li>
<li><p>You can include automatic navigation tabs (through <code>&lt;screen-tabs&gt;</code> Web Component) or simply use a <a href="/components/tabs.html">Quasar Tab</a> (through <code>&lt;tabs&gt;</code> and <code>&lt;tab&gt;</code>).</p>
</li>
<li><p>The component which dictates where the App Pages’ content goes on the Layout is <code>&lt;page&gt;</code>. If you want your Page content to have margins and padding calculated automatically (responsive) add CSS class <code>smart-container</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">page</span> <span class="attr">class</span>=<span class="string">"smart-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Linking-a-Page-to-a-Layout"><a href="#Linking-a-Page-to-a-Layout" class="headerlink" title="Linking a Page to a Layout"></a>Linking a Page to a Layout</h2><p>Make sure you read the Quasar App Pages documentation (from Guide) first, especially the section regarding <a href="/guide/quasar-pages.html#Page-Manifest">Page Manifest</a>. You will notice there that a Page manifest contains <code>layout</code> property, which specifies which (if any) Layout to use for the respective page.</p>
<h2 id="Layout-Components"><a href="#Layout-Components" class="headerlink" title="Layout Components"></a>Layout Components</h2><p>You learned the basics, now let’s go deeper and study each Layout Web Component in detail. See next documentation pages for each Layout Component available.</p>
<blockquote>
<p>Also make sure you read about how to communicate between Pages and Layouts VueModels <a href="/guide/vue-model-communication.html">here</a>.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Lists]]></title>
      <url>http://quasar-framework.org/components/list.html</url>
      <content type="html"><![CDATA[<p>Quasar Lists are used to display rows of information, such as a contact list, a playlist, or menu. Each row is called an item. Items can also be used outside of a list.</p>
<p>Lists can also be used (and it’s also recommended) on Quasar Drawers.</p>
<p>Scroll down to see the demos if on desktop.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><input type="hidden" data-demo="list-basic-usage">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default List --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Striped List --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list striped"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inset List --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inset"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Highlight List (Hover over Items) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list highlight"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with a Divider --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Item Delimiters --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Border (and Item Delimiters) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered item-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Complex-Usage"><a href="#Complex-Usage" class="headerlink" title="Complex Usage"></a>Complex Usage</h2><input type="hidden" data-demo="list-complex-usage">

<p>Quasar Lists are able to carry items with labels and values, icons and more, all these in many forms of display it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Item Label and Item Value --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>pages<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Inner Delimiters --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear"</span>&gt;</span>View<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Icons --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>query_builder<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear"</span>&gt;</span>View<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>explore<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>shopping_cart<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="List-Headers"><a href="#List-Headers" class="headerlink" title="List Headers"></a>List Headers</h2><input type="hidden" data-demo="list-headers">

<p>Quasar Lists can also have headers (default or inverted) to better separate contents.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default Header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>H3 Header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">    Normal Text Header</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inverted Header --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header inverted"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>H3 Header<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header inverted"</span>&gt;</span></span><br><span class="line">    Normal Text Header</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="List-Multiline"><a href="#List-Multiline" class="headerlink" title="List Multiline"></a>List Multiline</h2><input type="hidden" data-demo="list-multiline">

<p>Quasar Labels are able to support multi-line labels, with possible a line as title of the item.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Web Developer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Newbie<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="List-with-Images"><a href="#List-with-Images" class="headerlink" title="List with Images"></a>List with Images</h2><input type="hidden" data-demo="list-images">

<p>Quasar List items can also contain an avatar or a thumbnail.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Avatars --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-avatar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-avatar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/guy-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Web Developer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar Framework enthusiast<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-avatar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/boy-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Newbie<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-avatar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar-2.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Thumbnails --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-thumbnail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-thumbnail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/guy-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Web Developer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar Framework enthusiast<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-thumbnail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/boy-avatar.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Newbie<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-thumbnail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar-2.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Linux Lover<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Linux rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Quasar rulz!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="List-with-Form-Web-Components"><a href="#List-with-Form-Web-Components" class="headerlink" title="List with Form Web Components"></a>List with Form Web Components</h2><input type="hidden" data-demo="list-form">

<p>Quasar Lists can contain Web Components such as Checkboxes, Radios, Toggles, Ranges and more. Good for using them on a settings menu, for example.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Radios --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Option 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"radioModel"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"radioModel"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"radioModel"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Option 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"radioModel"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Option 2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Checkboxes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checkboxModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checkboxModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checkboxModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checkboxModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Toggles --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"toggleModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"toggleModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"toggleModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"toggleModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Quasar Framework</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List with Ranges --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>volume_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-value item-right-margin"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">range</span> <span class="attr">:model.sync</span>=<span class="string">"rangeModel"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-value item-left-margin"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-left-margin"</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>&#123;&#123;rangeModel&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-right-margin"</span>&gt;</span>volume_down<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">range</span> <span class="attr">:model.sync</span>=<span class="string">"rangeModel"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-left-margin"</span>&gt;</span>volume_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Lists-with-Sliding-Actions"><a href="#Lists-with-Sliding-Actions" class="headerlink" title="Lists with Sliding Actions"></a>Lists with Sliding Actions</h2><input type="hidden" data-demo="list-sliding-actions">

<p>Some items can contain additional actions. The actions are hidden behind the item and user can swipe the items to the left in order to make them visible.</p>
<p>On desktop, users can drag the items to the left with their mouse to uncover the actions.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>explore<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-swipe"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>More<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"tertiary"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span> <span class="attr">v-swipe-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Item Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>perm_identity<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-swipe"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>More<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span> <span class="attr">v-swipe-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Item Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>query_builder<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-swipe"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"tertiary"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span> <span class="attr">v-swipe-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Item Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Modal]]></title>
      <url>http://quasar-framework.org/components/modal.html</url>
      <content type="html"><![CDATA[<p>Quasar Modals slide in off screen to display a temporary UI, often used for login or signup pages, message composition, and option selection.</p>
<input type="hidden" data-fullpage-demo="modal">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// syntax</span></span><br><span class="line">(Modal <span class="built_in">Object</span>) <span class="keyword">new</span> quasar.Modal(VueModel <span class="built_in">Object</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// basic example:</span></span><br><span class="line"><span class="keyword">var</span> modal = <span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'This is a basic modal. &lt;button class="secondary" @click="close()"&gt;Close Me&lt;/button&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">modal.show();</span><br></pre></td></tr></table></figure>
<p>The <em>Modal Object</em> returned has the following methods:</p>
<table>
<thead>
<tr>
<th>Modal Object Method</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show</code></td>
<td>Function onShow</td>
<td>Shows Modal and optionally executes the parameter Function</td>
</tr>
<tr>
<td><code>close</code></td>
<td>Function onClose</td>
<td>Closes Modal and optionally executes the parameter Function</td>
</tr>
<tr>
<td><code>onShow</code></td>
<td>Function</td>
<td>Triggers the Function when Modal is shown. Multiple calls allowed in which case a stack is built and executed in the order Functions were pushed.</td>
</tr>
<tr>
<td><code>onClose</code></td>
<td>Function</td>
<td>Triggers the Function when Modal is closed. Multiple calls allowed in which case a stack is built and executed in the order Functions were pushed.</td>
</tr>
<tr>
<td><code>css</code></td>
<td>Object</td>
<td>Object containing CSS properties as keys and their CSS values. CSS is applied to your Modal.</td>
</tr>
<tr>
<td><code>set</code></td>
<td>Object</td>
<td>Object containing Modal properties and their values. See explanations below at <a href="#Modal-Object-Properties">Modal Object Properties</a>.</td>
</tr>
<tr>
<td><code>destroy</code></td>
<td><em>none</em></td>
<td>Destroys your Modal and frees up the memory. Is called automatically <code>selfDestroy</code> property is set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<h3 id="Modal-Object-Properties"><a href="#Modal-Object-Properties" class="headerlink" title="Modal Object Properties"></a>Modal Object Properties</h3><p>On the Modal Object you can use the <code>set()</code> method to change any of these properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>minimized</code></td>
<td>Boolean</td>
<td>Modal is always minimized</td>
</tr>
<tr>
<td><code>maximized</code></td>
<td>Boolean</td>
<td>Modal is always maximized</td>
</tr>
<tr>
<td><code>transitionIn</code></td>
<td>Object</td>
<td>VelocityJS effect when Modal is displayed. Example: <code>{translateX: [0, &#39;101%&#39;]}</code></td>
</tr>
<tr>
<td><code>transitionOut</code></td>
<td>Object</td>
<td>VelocityJS effect when Modal is displayed. Example: <code>{translateX: [&#39;101%&#39;, 0]}</code></td>
</tr>
<tr>
<td><code>selfDestroy</code></td>
<td>Boolean</td>
<td>Modal gets destroyed when closed and memory is freed up. Default value is <code>true</code>.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> modal = <span class="keyword">new</span> quasar.Modal(...);</span><br><span class="line"></span><br><span class="line">modal.set(<span class="string">'selfDestroy'</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>You can also close your Modal from within the Modal’s template. The VueModel of any Modal is automatically injected with <code>close()</code> method which you can use in your modal template.</p>
</blockquote>
<h2 id="Triggering-Events"><a href="#Triggering-Events" class="headerlink" title="Triggering Events"></a>Triggering Events</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'...'</span></span><br><span class="line">&#125;)</span><br><span class="line">.onShow(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  quasar.notify(<span class="string">'onShow triggered'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.onClose(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  quasar.notify(<span class="string">'onClose triggered'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.show();</span><br></pre></td></tr></table></figure>
<h2 id="Styling-Modals"><a href="#Styling-Modals" class="headerlink" title="Styling Modals"></a>Styling Modals</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'...'</span></span><br><span class="line">&#125;)</span><br><span class="line">.css(&#123;</span><br><span class="line">  padding: <span class="string">'50px'</span>,</span><br><span class="line">  minWidth: <span class="string">'50vw'</span></span><br><span class="line">&#125;)</span><br><span class="line">.show();</span><br></pre></td></tr></table></figure>
<h2 id="Screen-Modals"><a href="#Screen-Modals" class="headerlink" title="Screen Modals"></a>Screen Modals</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'...'</span> <span class="comment">// see below for template</span></span><br><span class="line">&#125;).css(&#123;</span><br><span class="line">  minWidth: <span class="string">'80vw'</span>,</span><br><span class="line">  minHeight: <span class="string">'80vh'</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template for Screen Modal above --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">screen</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"close()"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>keyboard_arrow_left<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 20px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Screen Modal Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Always-Minimized-Modal"><a href="#Always-Minimized-Modal" class="headerlink" title="Always Minimized Modal"></a>Always Minimized Modal</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'...'</span></span><br><span class="line">&#125;).set(&#123;</span><br><span class="line">  minimized: <span class="literal">true</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>
<h2 id="Always-Maximized-Modal"><a href="#Always-Maximized-Modal" class="headerlink" title="Always Maximized Modal"></a>Always Maximized Modal</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: <span class="string">'...'</span></span><br><span class="line">&#125;).set(&#123;</span><br><span class="line">  maximized: <span class="literal">true</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Number]]></title>
      <url>http://quasar-framework.org/components/number.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="number">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">number</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"17"</span>&gt;</span><span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue DOM attribute properties you can use:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>0</td>
<td>Model for Number Web Component</td>
</tr>
<tr>
<td><code>step</code></td>
<td>1</td>
<td>Value of increment / decrement</td>
</tr>
<tr>
<td><code>lazy</code></td>
<td><em>none</em></td>
<td>If present and set to <code>false</code> it change model after Web Component loses focus</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td><em>none</em></td>
<td>Change model with a debouncing timing</td>
</tr>
<tr>
<td><code>min</code></td>
<td><em>none</em></td>
<td>Minimum value of the model</td>
</tr>
<tr>
<td><code>max</code></td>
<td><em>none</em></td>
<td>Maximum value of the model</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label fixed-label"</span>&gt;</span></span><br><span class="line">        Some number</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">number</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"17"</span>&gt;</span><span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Pagination]]></title>
      <url>http://quasar-framework.org/components/pagination.html</url>
      <content type="html"><![CDATA[<p>Quasar Pagination is a Web Component ready to use where a pagination system is needed.</p>
<input type="hidden" data-fullpage-demo="pagination">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pagination</span> <span class="attr">:model.sync</span>=<span class="string">"page"</span> <span class="attr">:max</span>=<span class="string">"17"</span>&gt;</span><span class="tag">&lt;/<span class="name">pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>The model (a Number) used for Pagination</td>
</tr>
<tr>
<td><code>min</code></td>
<td></td>
<td>Number of the first page; Default: “1”</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Yes</td>
<td>Number of last page</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Parallax]]></title>
      <url>http://quasar-framework.org/components/parallax.html</url>
      <content type="html"><![CDATA[<p>Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion.</p>
<p>Quasar provides an out of the box Web Component you can use. It takes care of a lot of quirks, including image size which can actually be smaller than the window width/height.</p>
<input type="hidden" data-fullpage-demo="parallax">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parallax</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parallax</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>While the underlying image is being loaded you can display a specific message through <code>&lt;div slot=&quot;loading&quot;&gt;...&lt;/div&gt;</code>. After image has loaded, you can also display some content on top of the Parallax image (in the example above an H1 tag).</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>String</td>
<td>Source for the image.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>Number</td>
<td>Height of Parallax in pixels. Default value is 500.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- VueModel contains data property "imageURL" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parallax</span> <span class="attr">:src</span>=<span class="string">"imageURL"</span> <span class="attr">:height</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parallax</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Progress Bar]]></title>
      <url>http://quasar-framework.org/components/progress-bars.html</url>
      <content type="html"><![CDATA[<p>A progress bar is used to show a user how far along he/she is in a process.</p>
<input type="hidden" data-fullpage-demo="progress-bar">

<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progressModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Configure how your progress bar is shown. Add one of these CSS classes:</p>
<table>
<thead>
<tr>
<th>CSS Class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>indeterminate</code></td>
<td>Make its state as indeterminate.</td>
</tr>
<tr>
<td><code>stripe</code></td>
<td>Make it striped. Optionally use in conjunction with <code>animate</code></td>
</tr>
<tr>
<td><code>animate</code></td>
<td>Works only along <code>stripe</code>. It makes a nice animated stripe.</td>
</tr>
</tbody>
</table>
<p>For color, use one of the main colors. See <a href="/api/css-color-palette.html">API &gt; CSS &gt; Color Palette</a>.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"positive"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"warning"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"tertiary"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"dark"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress-bar</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"light-blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">progress-bar</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Radio]]></title>
      <url>http://quasar-framework.org/components/radio.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="radio">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">  Option 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">  Option 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Option 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        Option 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">        Option 2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Range]]></title>
      <url>http://quasar-framework.org/components/range.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="range">

<h2 id="Standalone-Usage"><a href="#Standalone-Usage" class="headerlink" title="Standalone Usage"></a>Standalone Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">range</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"7"</span>&gt;</span><span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue DOM attribute properties you can use:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Model for the Web Component</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Minimum value of the model</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Maximum value of the model</td>
</tr>
<tr>
<td><code>precision</code></td>
<td>Number of decimals for model</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-right-margin"</span>&gt;</span>volume_down<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">range</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"7"</span>&gt;</span><span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-left-margin"</span>&gt;</span>volume_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Rating]]></title>
      <url>http://quasar-framework.org/components/rating.html</url>
      <content type="html"><![CDATA[<p>Quasar Rating is a Web Component which allows users to rate items, usually knows as “Star Rating”.</p>
<input type="hidden" data-fullpage-demo="rating">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- VueModel contains data property "ratingModel" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rating</span> <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span> <span class="attr">:max-grade</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Number</td>
<td>Model for Rating Component.</td>
</tr>
<tr>
<td><code>max-grade</code></td>
<td>Number</td>
<td>Number of icons to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use as grade. Default value: <code>grade</code>.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- VueModel contains data property "ratingModel" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rating</span> <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span> <span class="attr">:max-grade</span>=<span class="string">"5"</span> <span class="attr">icon</span>=<span class="string">"pets"</span>&gt;</span><span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rating</span> <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span> <span class="attr">:max-grade</span>=<span class="string">"9"</span> <span class="attr">icon</span>=<span class="string">"thumb_up"</span>&gt;</span><span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rating</span> <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span> <span class="attr">:max-grade</span>=<span class="string">"6"</span> <span class="attr">icon</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Selectbox]]></title>
      <url>http://quasar-framework.org/components/selectbox.html</url>
      <content type="html"><![CDATA[<p>A Quasar Selectbox can be of two types: single selection (using Radios) or multiple selection (using Checkboxes).</p>
<input type="hidden" data-fullpage-demo="selectbox">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Single Selection --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choice</span></span><br><span class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></span><br><span class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span><br><span class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></span><br><span class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></span><br><span class="line">  <span class="attr">title</span>=<span class="string">"Company"</span></span><br><span class="line">&gt;</span><span class="tag">&lt;/<span class="name">choice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Multiple Selection --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choice</span></span><br><span class="line">  <span class="attr">multiple</span></span><br><span class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></span><br><span class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span><br><span class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></span><br><span class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></span><br><span class="line">  <span class="attr">title</span>=<span class="string">"Company"</span></span><br><span class="line">&gt;</span><span class="tag">&lt;/<span class="name">choice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue DOM attribute properties you can use:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Model for the Web Component.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Array of options (Object with <code>label</code> and <code>value</code> properties).</td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Empty attribute. When present it allows for multiple selection.</td>
</tr>
<tr>
<td><code>ok-label</code></td>
<td>Label for “OK” button</td>
</tr>
<tr>
<td><code>cancel-label</code></td>
<td>Label for “Cancel” button</td>
</tr>
<tr>
<td><code>title</code></td>
<td>Title displayed when choosing option(s).</td>
</tr>
<tr>
<td><code>message</code></td>
<td>Message below the title when choosing option(s).</td>
</tr>
<tr>
<td><code>fixed-label</code></td>
<td>Label to display on the Web Component to inform user of the current selection. The default label can be replaced with a String</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Single Selection --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Company<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">choice</span></span><br><span class="line">        <span class="attr">:model.sync</span>=<span class="string">"select"</span></span><br><span class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span><br><span class="line">        <span class="attr">ok-label</span>=<span class="string">"Pick"</span></span><br><span class="line">        <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></span><br><span class="line">        <span class="attr">title</span>=<span class="string">"Company"</span></span><br><span class="line">      &gt;</span><span class="tag">&lt;/<span class="name">choice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Multiple Selection --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Companies<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">choice</span></span><br><span class="line">        <span class="attr">multiple</span></span><br><span class="line">        <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span></span><br><span class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></span><br><span class="line">        <span class="attr">ok-label</span>=<span class="string">"Pick"</span></span><br><span class="line">        <span class="attr">title</span>=<span class="string">"Companies"</span></span><br><span class="line">      &gt;</span><span class="tag">&lt;/<span class="name">choice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Slider]]></title>
      <url>http://quasar-framework.org/components/slider.html</url>
      <content type="html"><![CDATA[<p>Quasar Slider is a Web Component which you can use to display more information with less real estate, using slides.</p>
<p>The Slider height is determined by the slide with biggest height.</p>
<input type="hidden" data-fullpage-demo="slider">

<h2 id="Basic-Slider"><a href="#Basic-Slider" class="headerlink" title="Basic Slider"></a>Basic Slider</h2><p>Basic Slider. No controls. Just swipe between slides or<br>use you mouse to drag slides to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></span><br><span class="line">    Slide 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></span><br><span class="line">    Slide 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></span><br><span class="line">    Slide 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Slider-with-Arrows-Dots-and-Fullscreen-Controls"><a href="#Slider-with-Arrows-Dots-and-Fullscreen-Controls" class="headerlink" title="Slider with Arrows, Dots and Fullscreen Controls"></a>Slider with Arrows, Dots and Fullscreen Controls</h2><p>Sliders can contain button controls, like:</p>
<ul>
<li>Arrows so user can switch between slides if swipe actions are not enough.</li>
<li>Clickable small dots to also quickly switch between slides and give a hint on the number of current slide.</li>
<li>Fullscreen button so Slider can be displayed over all screen real-estate.</li>
</ul>
<p>To show these controls simply add <code>arrows</code>, <code>dots</code> and/or <code>fullscreen</code> DOM node attributes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">fullscreen</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></span><br><span class="line">    Slide 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></span><br><span class="line">    Slide 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Slider-with-Centered-Content"><a href="#Slider-with-Centered-Content" class="headerlink" title="Slider with Centered Content"></a>Slider with Centered Content</h2><p>Add CSS class <code>centered</code> to the slide that you want to center its content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></span><br><span class="line">    Slide 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></span><br><span class="line">    Slide 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Slider-with-Custom-Actions"><a href="#Slider-with-Custom-Actions" class="headerlink" title="Slider with Custom Actions"></a>Slider with Custom Actions</h2><p>Put icons on the same DOM hierarchical level as the slides.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">actions</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></span><br><span class="line">    Slide 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></span><br><span class="line">    Slide 2</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></span><br><span class="line">    Slide 3</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someMethod()"</span>&gt;</span></span><br><span class="line">    camera_enhance</span><br><span class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someOtherMethod()"</span>&gt;</span></span><br><span class="line">    bookmark_border</span><br><span class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"thirdMethod()"</span>&gt;</span></span><br><span class="line">    add_shopping_cart</span><br><span class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Launch-Slider-in-Fullscreen"><a href="#Launch-Slider-in-Fullscreen" class="headerlink" title="Launch Slider in Fullscreen"></a>Launch Slider in Fullscreen</h2><p>You can launch a Slider in Fullscreen by using <a href="/components/modal.html">Modals</a>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> quasar.Modal(&#123;</span><br><span class="line">  template: modalTemplate</span><br><span class="line">&#125;).set(&#123;</span><br><span class="line">  maximized: <span class="literal">true</span></span><br><span class="line">&#125;).show();</span><br></pre></td></tr></table></figure>
<p>Your modal template should only contain a slider like ones above.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Spinners]]></title>
      <url>http://quasar-framework.org/components/spinners.html</url>
      <content type="html"><![CDATA[<p>A spinner is used to show the user a process is currently taking place. You can pick their size without a loss of quality due to the fact that SVGs are used.</p>
<input type="hidden" data-fullpage-demo="spinners">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default platform spinner with no options--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spinner</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Specific spinner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spinner</span> <span class="attr">name</span>=<span class="string">"bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spinner with options --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spinner</span> <span class="attr">color</span>=<span class="string">"#ff00ee"</span> <span class="attr">:size</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Following types are available: <code>audio</code>, <code>ball</code>, <code>bars</code>, <code>circles</code>, <code>dots</code>, <code>grid</code>, <code>hearts</code>, <code>ios</code>, <code>oval</code>, <code>puff</code>, <code>rings</code>, <code>tail</code>.</p>
<p>The size is in pixels.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar State Component]]></title>
      <url>http://quasar-framework.org/components/state-component.html</url>
      <content type="html"><![CDATA[<p>Quasar State Component helps you when you have two states (called “default” and “active”) to display using the same real estate of a Page. Look at the demo which presents a button that when clicked it shifts to the “active” state and shows a spinner.</p>
<input type="hidden" data-fullpage-demo="state-component">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">state</span> <span class="attr">:model.sync</span>=<span class="string">"state"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spinner</span> <span class="attr">:size</span>=<span class="string">"51"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span> Active State</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span><br><span class="line">    any component outside of slot="active"</span><br><span class="line">    is displayed for the default state</span><br><span class="line">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"changeState()"</span>&gt;</span></span><br><span class="line">    Default State - Hit me!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VueModel for template above</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    state: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    changeState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = <span class="literal">true</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="literal">false</span>;</span><br><span class="line">      &#125;.bind(<span class="keyword">this</span>), <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Tabs]]></title>
      <url>http://quasar-framework.org/components/tabs.html</url>
      <content type="html"><![CDATA[<p>Quasar Tabs are a way of displaying more information using less window real-estate. This Web Component can especially be used in Layouts.</p>
<input type="hidden" data-fullpage-demo="tabs">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tab</span></span><br><span class="line">    <span class="attr">v-for</span>=<span class="string">"tab in tabs"</span></span><br><span class="line">    <span class="attr">:hidden</span>=<span class="string">"tab.hidden"</span></span><br><span class="line">    <span class="attr">:disabled</span>=<span class="string">"tab.disabled"</span></span><br><span class="line">    <span class="attr">:icon</span>=<span class="string">"tab.icon"</span></span><br><span class="line">    <span class="attr">:target</span>=<span class="string">"tab.target"</span></span><br><span class="line">  &gt;</span></span><br><span class="line">    &#123;&#123;tab.label&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tabs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 5"</span>&gt;</span>Tab 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>Tab 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 7"</span>&gt;</span>Tab 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  data: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    tabs: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'Tab 1'</span>,</span><br><span class="line">        icon: <span class="string">'message'</span>,</span><br><span class="line">        target: <span class="string">'#tab-1'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'Disabled'</span>,</span><br><span class="line">        icon: <span class="string">'fingerprint'</span>,</span><br><span class="line">        disabled: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'Tab 2'</span>,</span><br><span class="line">        icon: <span class="string">'alarm'</span>,</span><br><span class="line">        target: <span class="string">'#tab-2'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'Tab 3'</span>,</span><br><span class="line">        icon: <span class="string">'accessibility'</span>,</span><br><span class="line">        target: <span class="string">'#tab-3'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'Tab 4'</span>,</span><br><span class="line">        icon: <span class="string">'accessibility'</span>,</span><br><span class="line">        target: <span class="string">'#tab-4'</span>,</span><br><span class="line">        hidden: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Layout-Usage"><a href="#Layout-Usage" class="headerlink" title="Layout Usage"></a>Layout Usage</h2><p>You can use the Web Component above in a Layout as is, but if you want the Tabs to be filled in automatically, read <a href="/components/layout-automatic-navigation-tabs.html">Layout Automatic Navigation Tabs</a> page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Toggle]]></title>
      <url>http://quasar-framework.org/components/toggle.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="toggle">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">  Toggle Label</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Toggle Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list inner-delimiter bordered"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">toggle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></span><br><span class="line">      Toggle Label</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Textarea]]></title>
      <url>http://quasar-framework.org/components/textarea.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="textarea">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"Textarea Label"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Vue DOM attribute properties you can use:</p>
<table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lazy</code></td>
<td>Empty Attribute</td>
<td>Change model after Web Component loses focus</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Change model with a debouncing timing</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Tooltips]]></title>
      <url>http://quasar-framework.org/components/tooltips.html</url>
      <content type="html"><![CDATA[<p>Quasar Tooltips offer additional information to the user that otherwise would be hidden. The implementation is through a Quasar directive called <code>v-tooltip</code>.</p>
<input type="hidden" data-fullpage-demo="tooltips">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Some examples --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip.literal</span>=<span class="string">"Quasar Rulz!"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"indigo"</span> <span class="attr">v-tooltip.wrap.inline.literal</span>=<span class="string">"Tooltip"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"red"</span> <span class="attr">v-tooltip.wrap.literal</span>=<span class="string">"Tooltip for the user"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip</span>=<span class="string">"vmProperty"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip.inline.literal</span>=<span class="string">"Lorem Ipsum..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Tooltips use <code>:before</code> and <code>:after</code> CSS pseudo-elements. When used on a DOM element that already has these pseudo-elements, then add the <code>wrap</code> directive modifier so they won’t be overriden. If you need that wrapped element to be inline, then also add the <code>inline</code> directive modifier.</p>
<table>
<thead>
<tr>
<th>Directive Modifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>literal</code></td>
<td>Use the literal string instead of interpreting it as a variable name from VueModel.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Make the element inline.</td>
</tr>
<tr>
<td><code>wrap</code></td>
<td>Wrap the element so the <code>:before</code> and <code>:after</code> CSS pseudo-elements won’t be overriden.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Tree]]></title>
      <url>http://quasar-framework.org/components/tree.html</url>
      <content type="html"><![CDATA[<p>Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure.</p>
<p>Trees are stripped out of any design by default so you can<br>easily stylize and turn them into anything you want.</p>
<input type="hidden" data-fullpage-demo="tree">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree</span></span><br><span class="line">  <span class="attr">:model</span>=<span class="string">"treeModel"</span></span><br><span class="line">  <span class="attr">contract-html</span>=<span class="string">"&lt;i&gt;remove_circle&lt;/i&gt;"</span></span><br><span class="line">  <span class="attr">expand-html</span>=<span class="string">"&lt;i&gt;add_circle&lt;/i&gt;"</span></span><br><span class="line">&gt;</span><span class="tag">&lt;/<span class="name">tree</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Tree-model-structure"><a href="#Tree-model-structure" class="headerlink" title="Tree model structure"></a>Tree model structure</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">treeModel: [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Item 1'</span>,</span><br><span class="line">    expanded: <span class="literal">true</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">'Item 1.1'</span>,</span><br><span class="line">        expanded: <span class="literal">false</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            title: <span class="string">'Item 1.1.1'</span>,</span><br><span class="line">            expanded: <span class="literal">false</span>,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                title: <span class="string">'Item 1.1.1.1'</span>,</span><br><span class="line">                expanded: <span class="literal">false</span>,</span><br><span class="line">                children: []</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            title: <span class="string">'Item 1.1.2'</span>,</span><br><span class="line">            expanded: <span class="literal">false</span>,</span><br><span class="line">            handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; quasar.notify(<span class="string">'Tapped on Item 1.1.2'</span>); &#125;,</span><br><span class="line">            children: []</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">'Item 1.2'</span>,</span><br><span class="line">        expanded: <span class="literal">false</span>,</span><br><span class="line">        children: []</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Item 2'</span>,</span><br><span class="line">    expanded: <span class="literal">false</span>,</span><br><span class="line">    children: []</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Items containing a <code>handler</code> method will make those items trigger the handler method when clicked/tapped.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Vue model for the Tree</td>
</tr>
<tr>
<td><code>contract-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch contracts</td>
</tr>
<tr>
<td><code>expand-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch expands</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Video Embedding]]></title>
      <url>http://quasar-framework.org/components/video-embedding.html</url>
      <content type="html"><![CDATA[<p>Embedding a video like Youtube is easy. It also resizes to fit the container by default.</p>
<input type="hidden" data-fullpage-demo="embed-videos">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span><br><span class="line">    <span class="attr">width</span>=<span class="string">"853"</span></span><br><span class="line">    <span class="attr">height</span>=<span class="string">"480"</span></span><br><span class="line">    <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></span><br><span class="line">    <span class="attr">frameborder</span>=<span class="string">"0"</span></span><br><span class="line">    <span class="attr">allowfullscreen</span></span><br><span class="line">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Built-in Technology Stack]]></title>
      <url>http://quasar-framework.org/guide/built-in-stack.html</url>
      <content type="html"><![CDATA[<p>You can take full advantage of the following dependencies that are provided by default:</p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>Two-way data binding technology. Reactive Components for Modern Web Interfaces. A <em>must-use</em>. Read more <a href="http://vuejs.org" target="_blank" rel="external">here</a>.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Changing the <em>input</em> element content automatically updates <code>data.message</code> (called <em>scope</em>). Works the other way around too if you programmatically change <code>data.message</code> property. But this is just the tip of the iceberg.</p>
<h2 id="Apache-Cordova"><a href="#Apache-Cordova" class="headerlink" title="Apache Cordova"></a>Apache Cordova</h2><p>Wrap your App in Cordova so it can be installed on a mobile phone. It offers access to native device APIs, which is awesome. It integrates perfectly with Quasar Framework.</p>
<p>Read more about it <a href="https://cordova.apache.org/" target="_blank" rel="external">here</a>.</p>
<h2 id="HammerJS"><a href="#HammerJS" class="headerlink" title="HammerJS"></a>HammerJS</h2><p>Add touch gestures to your App. Hammer is a open-source library that can recognize gestures made by touch, mouse and pointer events. It doesn’t have any dependencies, and it’s small.</p>
<p>Read more about it <a href="http://hammerjs.github.io/" target="_blank" rel="external">here</a>.</p>
<h2 id="VelocityJS"><a href="#VelocityJS" class="headerlink" title="VelocityJS"></a>VelocityJS</h2><p>Add complex Javascript animations which make good use of <code>requestAnimationFrame()</code> under the hood. Note that requestAnimationFrame() is a browser API which enables for faster than CSS animations.</p>
<p>It’s incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling. It is the best of jQuery and CSS transitions combined.</p>
<p>The Velocity UI pack is included too. Read more about it <a href="http://julian.com/research/velocity/" target="_blank" rel="external">here</a>.</p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>No need for an introduction. Mind that you should not be required to use it though due to Vue. It is included by default just because Quasar Framework uses it under the cover.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Good Quasar App code uses jQuery or touches DOM elements directly in extreme cases only. Vue should (and it does so efficiently) handle the DOM update for you through the data scope. If you’re using too much jQuery it means you missed the point with Quasar Framework and Vue.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CLI Commands]]></title>
      <url>http://quasar-framework.org/guide/cli-commands.html</url>
      <content type="html"><![CDATA[<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><h4 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h4><p>Displays version information.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar -V</span><br><span class="line">$ quasar version</span><br></pre></td></tr></table></figure></p>
<h4 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h4><p>Displays list of all commands and options.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar</span><br><span class="line">$ quasar -h</span><br></pre></td></tr></table></figure></p>
<h4 id="Verbose-Mode"><a href="#Verbose-Mode" class="headerlink" title="Verbose Mode"></a>Verbose Mode</h4><p>If you want to get more information on what’s going on (for example when building App), turn on the debug flag (<code>-d</code> option):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar <span class="_">-d</span> ..........</span><br></pre></td></tr></table></figure></p>
<h2 id="Create-App"><a href="#Create-App" class="headerlink" title="Create App"></a>Create App</h2><p>Initializes a project folder with everything necessary.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new [folder-name]</span><br></pre></td></tr></table></figure></p>
<h2 id="Build-App"><a href="#Build-App" class="headerlink" title="Build App"></a>Build App</h2><h3 id="Make-a-Build"><a href="#Make-a-Build" class="headerlink" title="Make a Build"></a>Make a Build</h3><p>Generates a folder called <code>/dist</code> which contains sourcemaps and everything needed to debug for Development or compiled, minified, optimized for Production.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Make a Development build</span></span><br><span class="line">$ quasar build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a Production build</span></span><br><span class="line">$ quasar build -p <span class="comment"># or --production</span></span><br></pre></td></tr></table></figure>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<h3 id="Cleaning"><a href="#Cleaning" class="headerlink" title="Cleaning"></a>Cleaning</h3><p>Cleans App folder from build artifacts.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar clean</span><br></pre></td></tr></table></figure>
<h3 id="Monitoring-amp-Auto-Rebuild"><a href="#Monitoring-amp-Auto-Rebuild" class="headerlink" title="Monitoring &amp; Auto-Rebuild"></a>Monitoring &amp; Auto-Rebuild</h3><p>Monitors source code files (Javascript files, CSS files, assets, …) for changes and when that happens it auto-rebuilds to update the end-user code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># monitor and auto-rebuild for Development</span></span><br><span class="line">$ quasar monitor</span><br><span class="line"></span><br><span class="line"><span class="comment"># monitor and auto-rebuild for Production</span></span><br><span class="line">$ quasar monitor -p <span class="comment"># or --production</span></span><br></pre></td></tr></table></figure>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<h2 id="Live-Preview"><a href="#Live-Preview" class="headerlink" title="Live Preview"></a>Live Preview</h2><p>You can even live preview the build in your browser(s). Whenever you modify anything in the source code (Javascript files, CSS files, assets, …), it gets rebuilt and the browser(s) refreshed.</p>
<p>Furthermore, clicks, scroll and form input are automatically synchronized between all opened browsers.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live Preview Development build</span></span><br><span class="line">$ quasar preview</span><br><span class="line"></span><br><span class="line"><span class="comment"># Live Preview Production build</span></span><br><span class="line">$ quasar preview -p <span class="comment"># or --production</span></span><br></pre></td></tr></table></figure></p>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>CSS is injected into the browser(s) so the page is not required to reload, which is really cool.</p>
</blockquote>
<h2 id="Responsive-Live-Preview"><a href="#Responsive-Live-Preview" class="headerlink" title="Responsive Live Preview"></a>Responsive Live Preview</h2><p>Want to quickly see how your App handles different device screen sizes? This is the command that you should use. Recommended (and designed) to be viewed from a desktop browser.</p>
<p>Watches the source code (and reloads if necessary or injects CSS without page reload) but clicks, scroll and form input are <em>NOT</em> automatically synchronized between all opened browsers as for previous command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Responsive Live Preview Development build</span></span><br><span class="line">$ quasar responsive</span><br><span class="line"></span><br><span class="line"><span class="comment"># Responsive Live Preview Production build</span></span><br><span class="line">$ quasar responsive -p <span class="comment"># or --production</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/preview.png" alt="Responsive Preview Screen" title="Responsive Preview Screen"></p>
<h2 id="Running-Test-Suites"><a href="#Running-Test-Suites" class="headerlink" title="Running Test Suites"></a>Running Test Suites</h2><p>Write tests and run them with the out of the box test-pack which includes Karma, Mocha, Chai &amp; Sinon.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>For more details on how to tweak testing see <a href="/guide/quasar-app-configuration.html">Configuring Quasar App</a> and look for <code>test</code> property description.</p>
<h2 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h2><p>Pages are the core of any Quasar App. Think of a Quasar Page as a webpage which has its own View, Controller and Model.</p>
<h3 id="Create-Page"><a href="#Create-Page" class="headerlink" title="Create Page"></a>Create Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page [page-name]</span><br></pre></td></tr></table></figure>
<h3 id="Rename-Page"><a href="#Rename-Page" class="headerlink" title="Rename Page"></a>Rename Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page [current-page-name] [new-page-name]</span><br></pre></td></tr></table></figure>
<h3 id="Copy-Page"><a href="#Copy-Page" class="headerlink" title="Copy Page"></a>Copy Page</h3><p>Create a new Page using another Page as template.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page -c [<span class="built_in">source</span>-page-name] [new-page-name]</span><br></pre></td></tr></table></figure></p>
<h2 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h2><p>Layouts are the elements that wrap one or multiple pages (like navigational bar).</p>
<h3 id="Create-Layout"><a href="#Create-Layout" class="headerlink" title="Create Layout"></a>Create Layout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout [layout-name]</span><br></pre></td></tr></table></figure>
<h3 id="Rename-Layout"><a href="#Rename-Layout" class="headerlink" title="Rename Layout"></a>Rename Layout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout [current-layout-name] [new-layout-name]</span><br></pre></td></tr></table></figure>
<h3 id="Copy-Layout"><a href="#Copy-Layout" class="headerlink" title="Copy Layout"></a>Copy Layout</h3><p>Create a new Layout using another Layout as template.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout -c [<span class="built_in">source</span>-layout-name] [new-layout-name]</span><br></pre></td></tr></table></figure></p>
<h2 id="Native-Mobile-App-Wrapper"><a href="#Native-Mobile-App-Wrapper" class="headerlink" title="Native Mobile App Wrapper"></a>Native Mobile App Wrapper</h2><p>You can use Cordova to wrap your Quasar App into a native mobile App. Make sure you have the platform SDK installed on your machine, like <a href="https://developer.android.com/studio/index.html#download" target="_blank" rel="external">Android SDK</a>.</p>
<p><strong>Read more about how to use Quasar CLI to manage the Cordova wrapper <a href="/guide/native-mobile-app-wrapper.html">here</a>.</strong></p>
<p>Some of the CLI commands available:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wrapping your App</span></span><br><span class="line">$ quasar wrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># add a platform</span></span><br><span class="line">$ quasar wrap platform add android</span><br><span class="line"></span><br><span class="line"><span class="comment"># executing a Cordova command</span></span><br><span class="line">$ quasar wrap [Cordova <span class="built_in">command</span> arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment"># some more Cordova commands examples:</span></span><br><span class="line">$ quasar wrap plugin add cordova-plugin-battery-status</span><br><span class="line">$ quasar wrap run</span><br><span class="line">$ quasar wrap build</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>TIP</strong><br>Use <code>quasar build</code> in conjunction with <code>quasar wrap run</code> when you frequently test on your mobile: <code>quasar build &amp;&amp; quasar wrap run</code>.</p>
</blockquote>
<h2 id="Serve-Static-Content-Folder"><a href="#Serve-Static-Content-Folder" class="headerlink" title="Serve Static-Content Folder"></a>Serve Static-Content Folder</h2><p>You are able to create an ad-hoc web server to serve static-content web files from a folder. Browser sessions are automatically refreshed when content changes. User clicks/scroll can be synchronized.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Serve current folder:</span></span><br><span class="line">$ quasar serve</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or serve a full or relative path</span></span><br><span class="line">$ quasar serve ./dist</span><br><span class="line">$ quasar serve /work/quasar-app/dist</span><br></pre></td></tr></table></figure>
<p>This command does not rely on Quasar Framework. Any folder with any web content can be served.</p>
<h2 id="Runtime-Information"><a href="#Runtime-Information" class="headerlink" title="Runtime Information"></a>Runtime Information</h2><p>Display information about your runtime, including operating system, nodejs version, Quasar CLI version and more.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar info</span><br></pre></td></tr></table></figure>
<p>Output example:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar info</span><br><span class="line"></span><br><span class="line"> Runtime</span><br><span class="line"> Quasar CLI:	 v0.1.0</span><br><span class="line"> Node JS:	 v4.2.0</span><br><span class="line"></span><br><span class="line"> Operating System</span><br><span class="line"> Architecture:	 x64</span><br><span class="line"> Platform:	 linux</span><br><span class="line"> Release:	 3.19.0-33-generic</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CommonJS Format]]></title>
      <url>http://quasar-framework.org/guide/commonjs-format.html</url>
      <content type="html"><![CDATA[<p>CommonJS modules are at the core of Quasar Framework and are the format that Quasar expects every module to adhere to. As well as ensuring your code is encapsulated and modular, CommonJS modules give you dependency management, scope isolation, and namespacing. They should be used in any JavaScript application that spans more than a few files.</p>
<p>The format is remarkably straightforward, but is something you’ll have to adhere to in every file to make it work. CommonJS uses explicit exporting, so to expose a property inside a module to other modules, you’ll need to do something like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.propName = ...;</span><br><span class="line"><span class="comment">// or export multiple props at once:</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  prop1: ...,</span><br><span class="line">  prop2: ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The module dependency is also easy by using <code>require</code>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br></pre></td></tr></table></figure></p>
<p>One more example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'world'</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span> + text + <span class="string">'!'</span>); <span class="comment">// Hello world!</span></span><br></pre></td></tr></table></figure>
<p>You can export anything: Functions, Strings, Numbers, Objects, Regular Expressions, …</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Contributing Guide]]></title>
      <url>http://quasar-framework.org/guide/contributing-to-quasar.html</url>
      <content type="html"><![CDATA[<p>I’m really excited if you are interested in contributing to Quasar Framework. There are lots of features waiting for someone to write them. Check <a href="https://github.com/rstoenescu/quasar-framework" target="_blank" rel="external">Github</a> or contact <a href="https://github.com/rstoenescu" target="_blank" rel="external">Razvan Stoenescu</a> through email.</p>
<p>Before submitting your contribution though, please make sure to take a moment and read through the following guidelines.</p>
<p>You can also help with the documentation if you catch a mistake or want to add a few lines to a page or write new pages. Use the link at the end of each page of this website (specifically the <em>Suggest an edit on Github</em>).</p>
<h2 id="Github-Repositories"><a href="#Github-Repositories" class="headerlink" title="Github Repositories"></a>Github Repositories</h2><ul>
<li><a href="https://github.com/rstoenescu/quasar-framework" target="_blank" rel="external">Quasar Framework</a></li>
<li><a href="https://github.com/rstoenescu/quasar-cli" target="_blank" rel="external">Quasar CLI</a></li>
</ul>
<h2 id="Issue-Reporting-Guidelines"><a href="#Issue-Reporting-Guidelines" class="headerlink" title="Issue Reporting Guidelines"></a>Issue Reporting Guidelines</h2><ul>
<li><p>The issue list of the repository is <strong>exclusively</strong> for bug reports and feature requests.</p>
</li>
<li><p>Try to search for your issue, it may have already been fixed in the development branch or it may have a resolution.</p>
</li>
<li><p>Check if the issue is reproducible with the latest stable version of Quasar. If you are using a pre-release, please indicate the specific version you are using.</p>
</li>
<li><p>It is <strong>required</strong> that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled “need repro” receives no further input from the issue author for more than 5 days, it will be closed.</p>
</li>
<li><p>If your issue is resolved but still open, don’t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.</p>
</li>
</ul>
<h2 id="Pull-Request-Guidelines"><a href="#Pull-Request-Guidelines" class="headerlink" title="Pull Request Guidelines"></a>Pull Request Guidelines</h2><ul>
<li><p>Checkout a topic branch from <code>master</code> and merge back against <code>master</code>.</p>
</li>
<li><p>Work in the <code>src</code> folder and <strong>DO NOT</strong> checkin <code>/dist</code> in the commits or any other file or folder described in <code>.gitignore</code>.</p>
</li>
<li><p>Squash the commit if there are too many small ones.</p>
</li>
<li><p>Follow the <a href="#Code-Style">code style</a> in next section.</p>
</li>
<li><p>Make sure that running “npm test” passes all tests.</p>
</li>
<li><p>If adding new feature:</p>
<ul>
<li>Add accompanying test case.</li>
<li>Provide convincing reason to add this feature. Ideally you should open a suggestion issue first and have it greenlighted before working on it.</li>
</ul>
</li>
<li><p>If fixing a bug:</p>
<ul>
<li>Provide detailed description of the bug in the PR. Live demo preferred. Use <a href="https://jsfiddle.net/" target="_blank" rel="external">jsFiddle</a>, <a href="https://plnkr.co/" target="_blank" rel="external">Plunker</a>, or <a href="http://jsbin.com/" target="_blank" rel="external">JsBin</a>.</li>
<li>Add appropriate test coverage if applicable.</li>
</ul>
</li>
</ul>
<h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><ul>
<li>Follow <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li>2 spaces indentation (<em>NO</em> tabs).</li>
<li>Stroustrup brace style.</li>
<li><p>Multiple var declarations like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  first,</span><br><span class="line">  second,</span><br><span class="line">  ...,</span><br><span class="line">  last</span><br><span class="line">  ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return early.</p>
</li>
<li><p>Notice the spaces when declaring a <code>function</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params">param1, param2, ..., paramN</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>1 space between arguments, but not between parentheses.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (conditions) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">2</span> &amp;&amp; b === <span class="number">3</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>When in doubt, read the source code.</p>
</li>
<li><p>Break long ternary conditionals like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = superLongConditionalStatement</span><br><span class="line">  ? <span class="string">'yep'</span></span><br><span class="line">  : <span class="string">'nope'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Development-Setup"><a href="#Development-Setup" class="headerlink" title="Development Setup"></a>Development Setup</h2><p>You will need <a href="http://nodejs.org" target="_blank" rel="external">Node.js</a> along NPM.</p>
<p>Fork Quasar Framework Github repository. Then install all other dependencies.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>To monitor source code for changes and rebuild automatically:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for Development</span></span><br><span class="line">$ gulp monitor</span><br><span class="line"></span><br><span class="line"><span class="comment"># for Production</span></span><br><span class="line">$ gulp monitor:prod</span><br></pre></td></tr></table></figure></p>
<p>A better option is to watch source code and rebuild automatically <strong>while previewing the UI in browser(s)</strong>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># multiple browsers opened to the indicated link will</span></span><br><span class="line"><span class="comment"># have clicks/scrolls/form input events synchronized</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Development</span></span><br><span class="line">$ gulp preview</span><br><span class="line"></span><br><span class="line"><span class="comment"># for Production</span></span><br><span class="line">$ gulp preview:prod</span><br></pre></td></tr></table></figure></p>
<p>There’s a <code>/preview</code> folder containing a demo Quasar App which gets previewed in the browser. Change its source to make use of a feature that’s of interest to you.</p>
<p>There’s also another type of previewing – with a Responsive View (browsers won’t be synchronized). Its purpose is for you to view the UI in a desktop browser and be able to quickly switch between different device screen sizes and orientation.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for Development</span></span><br><span class="line">$ gulp responsive</span><br><span class="line"></span><br><span class="line"><span class="comment"># for Production</span></span><br><span class="line">$ gulp responsive:prod</span><br></pre></td></tr></table></figure></p>
<p>To make a build (will create <code>/dist</code> folder):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Development:</span></span><br><span class="line">$ gulp dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Production:</span></span><br><span class="line">$ gulp prod</span><br></pre></td></tr></table></figure></p>
<p>By default, you can create both development and production builds – this is the official Production build:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ gulp dist</span><br></pre></td></tr></table></figure></p>
<p>After you build the demo App (from <code>/preview</code>) you can see it in action as a native App. Make sure you add a platform to the demo App first.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp wrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Adding a platform to the demo App</span></span><br><span class="line">$ <span class="built_in">cd</span> preview</span><br><span class="line">$ quasar wrap platform add android</span><br></pre></td></tr></table></figure></p>
<p>To clean folder from build artifacts:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp clean</span><br></pre></td></tr></table></figure></p>
<p>Testing (one single run only):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with all browsers:</span></span><br><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with PhantomJS only</span></span><br><span class="line">$ npm run pjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Chrome only</span></span><br><span class="line">$ npm run chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Firefox only</span></span><br><span class="line">$ npm run ff</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then check the coverage in HTML coverage:</span></span><br><span class="line">$ npm run coverage</span><br><span class="line"><span class="comment"># --This opens Chrome browser--</span></span><br></pre></td></tr></table></figure></p>
<p>Watch source code and test on changes (browsers will remain opened):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with all browsers:</span></span><br><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with PhantomJS only</span></span><br><span class="line">$ npm run pjs-live</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Chrome only</span></span><br><span class="line">$ npm run chrome-live</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Firefox only</span></span><br><span class="line">$ npm run ff-live</span><br></pre></td></tr></table></figure></p>
<h2 id="Commit-Message-Format"><a href="#Commit-Message-Format" class="headerlink" title="Commit Message Format"></a>Commit Message Format</h2><p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>.  The header has a special<br>format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>
<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>
<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier<br>to read on GitHub as well as in various git tools.</p>
<h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>
<h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p>Must be one of the following:</p>
<ul>
<li><strong>feat</strong>: A new feature</li>
<li><strong>fix</strong>: A bug fix</li>
<li><strong>docs</strong>: Documentation only changes</li>
<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing<br>semi-colons, etc)</li>
<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>
<li><strong>perf</strong>: A code change that improves performance</li>
<li><strong>test</strong>: Adding missing tests</li>
<li><strong>chore</strong>: Changes to the build process or auxiliary tools and libraries such as documentation<br>generation</li>
</ul>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>The scope could be anything specifying place of the commit change. For example use modules as scope name: <code>xhr</code>, <code>router</code>, <code>view</code> etc…</p>
<h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><p>The subject contains succinct description of the change:</p>
<ul>
<li>use the imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul>
<h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Just as in the <strong>subject</strong>, use the imperative, present tense: “change” not “changed” nor “changes”.<br>The body should include the motivation for the change and contrast this with previous behavior.</p>
<h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to<br>reference GitHub issues that this commit <strong>Closes</strong>.</p>
<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create Quasar App]]></title>
      <url>http://quasar-framework.org/guide/create-app.html</url>
      <content type="html"><![CDATA[<p>After <a href="/guide/installation.html">installing Quasar CLI</a> you can create your first Quasar App. Let’s initialize a folder (for this example: <em>quasarApp</em>, but you can name it whatever you want) with all the boilerplating necessary:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new quasarApp</span><br><span class="line">$ <span class="built_in">cd</span> quasarApp</span><br></pre></td></tr></table></figure></p>
<p>The boilerplating generates the <code>index</code> Page which is the first to get loaded if no other registered hash route is specified. Add other Quasar Pages with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page &lt;pageName&gt;</span><br></pre></td></tr></table></figure></p>
<p>You can also add a Layout (think of it as a wrapper of Pages with common content) with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout &lt;layoutName&gt;</span><br></pre></td></tr></table></figure></p>
<p>Preview your App in as many browsers you like with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar preview</span><br></pre></td></tr></table></figure></p>
<p>You’re mostly set now. Make a thorough reading about the Quasar CLI <a href="/guide/cli-commands.html">here</a>. The Quasar CLI is the primary tool used during the process of developing a Quasar App. It’s like a Swiss Army Knife as it brings together a bunch of miscellaneous tools under a single interface. Get to know how powerful it is so you can leverage it.</p>
<blockquote>
<p>You can check what Quasar Framework version it is being currently used by accessing the browser console and looking at <code>quasar.VERSION</code> property.</p>
</blockquote>
<p>Continue reading the <strong>App</strong> section of the Guide to understand how Quasar works and how you can use it.</p>
<h2 id="Generating-Native-Mobile-Apps"><a href="#Generating-Native-Mobile-Apps" class="headerlink" title="Generating Native Mobile Apps"></a>Generating Native Mobile Apps</h2><p>If you want to be able to wrap your Quasar App into a native mobile app, then you should head to <a href="/guide/native-mobile-app-wrapper.html">Native Mobile App Wrapper</a> section to see how easily to do it.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Development Plans]]></title>
      <url>http://quasar-framework.org/guide/development-plans.html</url>
      <content type="html"><![CDATA[<p>There are lots of features waiting to get into Quasar.<br>Feel free to contribute if you like. Read how to do it <a href="/guide/contributing-to-quasar.html">here</a>.</p>
<h1 id="High-Level-Plans"><a href="#High-Level-Plans" class="headerlink" title="High Level Plans"></a>High Level Plans</h1><ul>
<li><a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> support.</li>
<li><a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="external">Chrome Extension</a> support.</li>
<li>Example Apps</li>
<li>Tutorials</li>
<li>Forum</li>
<li>Improve debugging capabilities for native mobile Apps</li>
<li>Upgrade to VueJS 2.0</li>
<li>ES6 support</li>
</ul>
<h1 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h1><ul>
<li>Parameterized Route for Pages</li>
<li><a href="https://developer.mozilla.org/en/docs/Web/API/notification" target="_blank" rel="external">Notification API</a> wrapper/component</li>
<li>Quasar Data Model (for REST APIs)</li>
<li>Pull to Refresh</li>
<li>Tipster Component (highlight areas of your UI to help user understand what they are for; something like helping the user know about hidden or non-intuitive features of your UI; example: User can swipe here or there, and so on…)</li>
<li>Edit in place text-box</li>
<li><a href="https://material.google.com/components/menus.html" target="_blank" rel="external">Menus</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Importing External Dependencies]]></title>
      <url>http://quasar-framework.org/guide/importing-dependencies.html</url>
      <content type="html"><![CDATA[<p>Quasar easily allows you to import external dependencies from NPM. Here are the few steps to follow to achieve this:</p>
<ol>
<li><p>NPM install your dependency.</p>
<blockquote>
<p>It may be the case that the package you are installing also depends on other packages. NPM install them too, but ignore the ones already supplied by Quasar (see <a href="/guide/built-in-stack.html">Built-In Stack</a>) so you won’t duplicate them.</p>
</blockquote>
</li>
<li><p>Configure <code>quasar.build.yml</code> (the <a href="/guide/quasar-app-configuration.html">App Configuration file</a>) so Quasar will embed these dependencies.</p>
<p>You are interested in <code>deps</code> property which features both the Javascript dependency files as well as the CSS ones.<br>Take a look inside the <code>node_modules/[package_name]</code> folder and see what files to include for Quasar. The Javascript file is usually specified in <code>package.json</code> under the “main” property. Most packages have a <code>dist</code> folder featuring the files you need.</p>
<blockquote>
<p>The order in which dependencies are specified matters!</p>
</blockquote>
</li>
<li><p>Use your dependency. Check out your dependency’s website and look on how to use the dependency as “standalone”, meaning look for the global Objects that they inject.</p>
</li>
</ol>
<h2 id="Study-Case"><a href="#Study-Case" class="headerlink" title="Study Case"></a>Study Case</h2><p>Let’s embed <code>vue-google-maps</code> as a study case.</p>
<p>First we npm install it and see it depends on Q, Lodash and Vue. Vue is already supplied, so we only npm install Q and Lodash.</p>
<p>Then we take a look into <code>node_modules/lodash</code> and <code>node_modules/q</code> folders to see what to tell Quasar to embed in <code>quasar.build.yml</code>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deps:</span></span><br><span class="line"><span class="attr">  js:</span> [</span><br><span class="line">    <span class="string">'node_modules/q/q.js'</span>,</span><br><span class="line">    <span class="string">'node_modules/lodash/index.js'</span>,</span><br><span class="line">    <span class="string">'node_modules/vue-google-maps/index.js'</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>Now all we have to do is use our new dependency. Looking on their website for a “standalone” use case, we see that the package exports <code>VueGoogleMap</code> global.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">VueGoogleMap.load(&#123;</span><br><span class="line">  <span class="string">'key'</span>: <span class="string">'YOUR_API_KEY'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this package requires us to declare the components</span></span><br><span class="line"><span class="comment">// we are going to use from it, so here it is:</span></span><br><span class="line">Vue.component(<span class="string">'google-map'</span>, VueGoogleMap.Map);</span><br></pre></td></tr></table></figure>
<p>Now be creative on where to include the code above.</p>
<h4 id="Option-A"><a href="#Option-A" class="headerlink" title="Option A"></a>Option A</h4><p>If multiple Pages use the package, then include it in <code>src/index.html</code> under the <code>quasar.boot()</code> call, right before <code>quasar.start.app()</code>, like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.boot(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  VueGoogleMap.load(&#123;</span><br><span class="line">    <span class="string">'key'</span>: <span class="string">'YOUR_API_KEY'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(<span class="string">'google-map'</span>, VueGoogleMap.Map);</span><br><span class="line"></span><br><span class="line">  quasar.start.app();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Or you can add a new file, let’s say <code>js/app.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">VueGoogleMap.load(&#123;</span><br><span class="line">  <span class="string">'key'</span>: <span class="string">'YOUR_API_KEY'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">Vue.component(<span class="string">'google-map'</span>, VueGoogleMap.Map);</span><br><span class="line"></span><br><span class="line">quasar.start.app();</span><br></pre></td></tr></table></figure></p>
<p>and in your <code>src/index.html</code> you’ll write:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.boot(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  quasar.require.script(<span class="string">'js/app'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Read more about <a href="/guide/quasar-app-starting-point.html">Quasar Starting Point</a>.</p>
<h4 id="Option-B"><a href="#Option-B" class="headerlink" title="Option B"></a>Option B</h4><p>If only one Page uses it, then embed the code in the script file of your Page (<code>script.*page-name*.js</code>), before defining <code>module.exports</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Getting Started]]></title>
      <url>http://quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p>Following the following steps will familiarize yourself with Quasar Framework fast. You’ll write Quasar Apps in no time.</p>
<ol>
<li>Make sure you know to write code with <a href="http://vuejs.org" target="_blank" rel="external">Vue</a> and you have an idea about the <a href="http://npmjs.org" target="_blank" rel="external">NPM</a> ecosystem.</li>
<li>Install Quasar CLI on your development machine <a href="/guide/installation.html">here</a>.</li>
<li>Read about Quasar CLI <a href="/guide/cli-commands.html">here</a>.<br>If you are going to write (native) mobile Apps, check the section about <a href="/guide/native-mobile-app-wrapper.html">Native Mobile App Wrapper</a>.</li>
<li>Read about the <a href="/guide/built-in-stack.html">Built-in Stack</a> of technologies that you can use out of the box.</li>
<li>Read about how App code is structured (the “Guide &gt; App” section - see menu). Start with <a href="/guide/quasar-app-structure.html">App Structure</a>.</li>
<li>Read about <a href="/guide/quasar-theming.html">theming your App</a>. Great starting point to understand how to write your CSS (Stylus) code.</li>
<li>Learn about the built-in <a href="/api/">API</a> (includes Quasar CSS Framework) and <a href="/components">Quasar Web Components</a>.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new app-name</span><br></pre></td></tr></table></figure>
<p>And don’t forget to have fun :)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Installation]]></title>
      <url>http://quasar-framework.org/guide/installation.html</url>
      <content type="html"><![CDATA[<p>Quasar relies on its own CLI (Command Line Interface) which does most of the heavy-lifting so you don’t have to take care of the redundant tasks. You must install it to generate and manage a Quasar App.</p>
<h2 id="Installing-Quasar-CLI"><a href="#Installing-Quasar-CLI" class="headerlink" title="Installing Quasar CLI"></a>Installing Quasar CLI</h2><p>Make sure you have at least NodeJS 4.2.0 (latest always recommended) and latest NPM.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g quasar-cli</span><br></pre></td></tr></table></figure></p>
<p>This is it. Next, <a href="/guide/create-app.html">create your first Quasar App</a>, read about the <a href="/guide/cli-commands.html">Quasar CLI</a> and follow the next documentation pages on this Guide.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Native Mobile App Wrapper]]></title>
      <url>http://quasar-framework.org/guide/native-mobile-app-wrapper.html</url>
      <content type="html"><![CDATA[<p>You can use Cordova to wrap your Quasar App into a native mobile App. We’ll be using Quasar CLI to manage this, including issuing Cordova commands for your wrapped up App.</p>
<p>First install Cordova globally on your machine:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cordova</span><br></pre></td></tr></table></figure></p>
<p>Then make sure you have the platform SDK installed on your machine, like <a href="https://developer.android.com/studio/index.html#download" target="_blank" rel="external">Android SDK</a>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cordova requirements</span><br></pre></td></tr></table></figure></p>
<h2 id="Wrap-your-App"><a href="#Wrap-your-App" class="headerlink" title="Wrap your App"></a>Wrap your App</h2><p>Now let’s create the Wrapper for your App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># With Crosswalk plugin</span></span><br><span class="line"><span class="comment"># which is the recommended way</span></span><br><span class="line">$ quasar wrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Without Crosswalk plugin</span></span><br><span class="line">$ quasar wrap <span class="_">-s</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ quasar wrap --slim</span><br></pre></td></tr></table></figure></p>
<p>This command generates a folder inside your App called <code>/wrapper</code>. It contains the assets of a Cordova project mapped to your Quasar App’s source code.</p>
<p>Wrapping with Crosswalk ensures that your App will have the same runtime on all platforms (which is also the latest and greatest), but will also make your package file bigger. Read more <a href="https://crosswalk-project.org/documentation/about.html" target="_blank" rel="external">here</a> about Crosswalk. <strong>It is recommended that you opt for the Crosswalk plugin to be installed.</strong></p>
<p>If however you opt for the slim (non-Crosswalk) wrapper, you can add it later with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar wrap plugin add cordova-plugin-crosswalk-webview</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE for Windows Developers</strong><br>It is possible that you get <code>Error: EPERM: operation not permitted, symlink &#39;..\dist&#39;</code>, in which case you need to add privileges for your user to be able to create symlinks. Read <a href="http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7" target="_blank" rel="external">here</a>.</p>
</blockquote>
<p>After making the wrapper and making sure you have the platform’s SDK installed on your machine, you need to add at least a platform to your App, like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar wrap platform add android</span><br></pre></td></tr></table></figure></p>
<h2 id="Execute-Cordova-Command"><a href="#Execute-Cordova-Command" class="headerlink" title="Execute Cordova Command"></a>Execute Cordova Command</h2><p>You surely want to add a platform or perform useful Cordova commands:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar wrap [Cordova <span class="built_in">command</span> arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment"># examples:</span></span><br><span class="line">$ quasar wrap platform add android</span><br><span class="line">$ quasar wrap run</span><br><span class="line">$ quasar wrap build</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>TIP</strong><br>Use it in conjunction with <code>quasar build</code> when you frequently test on your mobile: <code>quasar build &amp;&amp; quasar wrap run</code></p>
</blockquote>
<h2 id="Cordova-Plugins"><a href="#Cordova-Plugins" class="headerlink" title="Cordova Plugins"></a>Cordova Plugins</h2><p>There are lots of Cordova plugins available which enables to you access the Camera, NFC, Battery Status, Contacts, Geolocation, Device motion and orientation and many more. Check out Cordova’s website (example for Battery Status <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-battery-status/index.html" target="_blank" rel="external">here</a>).</p>
<p>Remember all Cordova commands can be issued with <code>quasar wrap [cordova command]</code>.</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="Browser-Simulator"><a href="#Browser-Simulator" class="headerlink" title="Browser Simulator"></a>Browser Simulator</h3><p>Use Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an <em>emulator</em> and not the real deal.</p>
<p><img src="/images/chrome.png" alt="Google Chrome emulator" title="Google Chrome emulator"></p>
<h3 id="Debug-on-Android"><a href="#Debug-on-Android" class="headerlink" title="Debug on Android"></a>Debug on Android</h3><p>When something goes wrong with your App when running on a mobile platform, what do you do? Write a bunch of <code>console.log()s</code>? Where should this be displayed? Use <code>alert()s</code>? This may interfere with the application’s flow.</p>
<p>So what do you do? The solution is to make use of the <code>tools/monitor</code> tool from the SDK.</p>
<p><img src="/images/monitor.png" alt="tools/monitor screen" title="tools/monitor screen"></p>
<h3 id="Setting-Up-Device-on-Linux"><a href="#Setting-Up-Device-on-Linux" class="headerlink" title="Setting Up Device on Linux"></a>Setting Up Device on Linux</h3><p>You may bump into <code>?????? no permissions</code> problem when trying to run your App directly on an Android phone/tablet.</p>
<p>Here’s how you fix this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create the .rules file and insert the content</span></span><br><span class="line"><span class="comment"># from below this example</span></span><br><span class="line">sudo vim /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo chmod 644   /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo chown root. /etc/udev/rules.d/51-android.rules</span><br><span class="line">sudo service udev restart</span><br><span class="line">sudo killall adb</span><br></pre></td></tr></table></figure>
<p>The content for <code>51-android.rules</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0e79&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0502&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0b05&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;413c&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0489&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;091e&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;18d1&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;12d1&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;24e3&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2116&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0482&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;17ef&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1004&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;22b8&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0409&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2080&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0955&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2257&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;10a9&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1d4d&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0471&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04da&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;05c6&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1f53&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04e8&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04dd&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0fce&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0930&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;19d2&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1bbb&quot;, MODE=&quot;0666&quot;</span><br></pre></td></tr></table></figure></p>
<p>Now running <code>adb devices</code> should discover your device.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring Quasar App]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-configuration.html</url>
      <content type="html"><![CDATA[<p>As you’ve seen in <a href="/guide/quasar-app-structure.html">App Structure</a> page (read it if you haven’t already), there is a build configuration file for your Quasar App: <code>quasar.build.yml</code></p>
<p>This is the place where you configure how your App is built, what dependencies to inject, how your Quasar App is tested and more.</p>
<p>Example:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deps:</span></span><br><span class="line"><span class="attr">  js:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'node_modules/X/js/y.js'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'node_modules/W/z.js'</span></span><br><span class="line"><span class="attr">  css:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'node_modules/X/css/y.css'</span></span><br><span class="line"><span class="attr">preview:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3500</span></span><br><span class="line"><span class="attr">responsive:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3600</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="attr">  exclude:</span> []</span><br><span class="line">// forceTheme: <span class="string">'mat'</span> &lt;&lt; optional</span><br></pre></td></tr></table></figure></p>
<h3 id="‘deps’-Object"><a href="#‘deps’-Object" class="headerlink" title="‘deps’ Object"></a>‘deps’ Object</h3><p>Specify the dependencies of your App. You can use NPM to install different packages, or Bower, or just download some file from somewhere and store it inside the App’s folder. In the end, all you need is a path. The Build System takes care of the rest. Mind the order as it may be important.</p>
<p>Read more on how to import dependencies <a href="/guide/importing-dependencies.html">here</a>.</p>
<h3 id="‘preview’-Object"><a href="#‘preview’-Object" class="headerlink" title="‘preview’ Object"></a>‘preview’ Object</h3><p><a href="/guide/cli-commands.html#Live-Preview">Live Preview</a> configuration. Read more about configuration properties  <a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">here</a>. Example of default configuration which is merged with user specific one:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">preview:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">  ui:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">3001</span></span><br><span class="line"><span class="attr">  open:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  reloadOnRestart:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="‘responsive’-Object"><a href="#‘responsive’-Object" class="headerlink" title="‘responsive’ Object"></a>‘responsive’ Object</h3><p><a href="/guide/cli-commands.html#Responsive-Live-Preview">Live Preview with Responsive View</a> configuration. Read more about configuration properties <a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">here</a>. Example of default configuration which is merged with user specific one:<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">responsive:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3100</span></span><br><span class="line"><span class="attr">  ui:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  open:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  ghostMode:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  reloadOnRestart:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="‘test’-Object"><a href="#‘test’-Object" class="headerlink" title="‘test’ Object"></a>‘test’ Object</h3><p>This object’s properties override any of the <a href="https://github.com/rstoenescu/quasar-cli/blob/master/lib/gulp/gulp-config.js#L11-L97" target="_blank" rel="external">default Karma configuration</a> options.<br>See the full list of <a href="http://karma-runner.github.io/0.8/config/configuration-file.html" target="_blank" rel="external">Karma configuration properties</a> that you can use.</p>
<h3 id="‘forceTheme’-String"><a href="#‘forceTheme’-String" class="headerlink" title="‘forceTheme’ String"></a>‘forceTheme’ String</h3><p>By default, Quasar builds all available themes for your App. This is costly while writing code, so you can force the build of only one theme to speed up your development. Works only for <strong>development</strong> builds. A production build will always contain both themes.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Starting Point]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-starting-point.html</url>
      <content type="html"><![CDATA[<p>Starting a Quasar App is simple. The code is embedded in <code>index.html</code> under a &lt;script&gt; tag.<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  @@appManifest</span><br><span class="line">  quasar.boot(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    quasar.start.app();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>The <code>@@appManifest</code> part is replaced by the Build System with the App Manifest definition. Example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.data.manifest = &#123;</span><br><span class="line">    <span class="string">"pages"</span>: &#123;</span><br><span class="line">        <span class="string">"index"</span>: &#123;</span><br><span class="line">            <span class="string">"layout"</span>: <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"css"</span>: <span class="string">"pages/index/style.index.css"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"second"</span>: &#123;</span><br><span class="line">            <span class="string">"layout"</span>: <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"css"</span>: <span class="string">"pages/second/style.second.css"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"layouts"</span>: &#123;</span><br><span class="line">        <span class="string">"main"</span>: &#123;</span><br><span class="line">            <span class="string">"css"</span>: <span class="string">"layouts/main/layout.main.css"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>quasar.boot()</code> call injects Cordova if necessary then runs the callback. Finally, <code>quasar.start.app()</code> registers routes, loads the required layout then page.</p>
</li>
</ol>
<p>The first Quasar Page that gets loaded (if no hash in URL exists) is the one called <code>index</code>.</p>
<h3 id="Study-Case"><a href="#Study-Case" class="headerlink" title="Study Case"></a>Study Case</h3><p>Hey, I know there’s the ‘/js’ folder in my App that I can use. I want to put the starting code for my App there. Then what you should do is make a little change to <code>index.html</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  @@appManifest</span><br><span class="line">  quasar.boot(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    quasar.require.script(<span class="string">'js/app'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Just make sure that you create <code>/js/app.js</code> file and you call <code>quasar.start.app()</code> from there at some point.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Structure]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-structure.html</url>
      <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is what a new Quasar Framework App folder structure looks like. Some folders are creating after building the App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -I <span class="string">'node_modules|wrapper'</span> <span class="_">-a</span> --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── coverage</span><br><span class="line">│   ├── lcov-report</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── lcov.info</span><br><span class="line">├── dist</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── icons</span><br><span class="line">│   │   │   │   ├── ...</span><br><span class="line">│   │   │   │   └── ...</span><br><span class="line">│   │   │   └── roboto</span><br><span class="line">│   │   │       ├── ...</span><br><span class="line">│   │   │       └── ...</span><br><span class="line">│   │   └── favicon.ico</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── app.mat.css</span><br><span class="line">│   │   └── app.ios.css</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   └── deps.js</span><br><span class="line">│   ├── layouts</span><br><span class="line">│   │   └── main</span><br><span class="line">│   │       ├── layout.main.css</span><br><span class="line">│   │       └── layout.main.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       │   └── assets-README.txt</span><br><span class="line">│   │       ├── style.index.css</span><br><span class="line">│   │       └── script.index.js</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── favicon.ico</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── common</span><br><span class="line">│   │   │   ├── app.style.styl</span><br><span class="line">│   │   │   └── app.theme.styl</span><br><span class="line">│   │   ├── app.ios.styl</span><br><span class="line">│   │   └── app.mat.styl</span><br><span class="line">│   ├── html</span><br><span class="line">│   │   └── html-README.txt</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   ├── layouts</span><br><span class="line">│   │   └── main</span><br><span class="line">│   │       ├── layout.main.yml</span><br><span class="line">│   │       ├── layout.main.styl</span><br><span class="line">│   │       ├── layout.main.html</span><br><span class="line">│   │       └── layout.main.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       │   └── assets-README.txt</span><br><span class="line">│   │       ├── config.index.yml</span><br><span class="line">│   │       ├── style.index.styl</span><br><span class="line">│   │       ├── script.index.js</span><br><span class="line">│   │       └── view.index.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   ├── .eslintrc</span><br><span class="line">│   ├── setup.js</span><br><span class="line">│   └── test.spec.js</span><br><span class="line">├── wrapper</span><br><span class="line">│   ├── ....</span><br><span class="line">│   ├── ....</span><br><span class="line">│   └── ....</span><br><span class="line">├── .eslintrc</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package.json</span><br><span class="line">├── quasar.build.yml</span><br><span class="line">├── README.md</span><br><span class="line">└── .stylintrc</span><br></pre></td></tr></table></figure></p>
<p>What each is used for:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/dist</td>
<td>Production build folder</td>
</tr>
<tr>
<td>/coverage</td>
<td>Code coverage after <a href="/guide/cli-commands.html#Running-Test-Suites">running tests with CLI</a></td>
</tr>
<tr>
<td>/src</td>
<td>App source files; see <a href="#Source-Folder">Source Folder</a></td>
</tr>
<tr>
<td>/test</td>
<td>Test source files used for <a href="/guide/cli-commands.html#Running-Test-Suites">running tests with CLI</a></td>
</tr>
<tr>
<td>/wrapper</td>
<td>Native mobile app wrapper; see <a href="/guide/native-mobile-app-wrapper.html">Native Mobile App Wrapper</a></td>
</tr>
<tr>
<td>/.eslintrc</td>
<td>Default ESLINT config for linting Javascript files</td>
</tr>
<tr>
<td>/.gitignore</td>
<td>Tells GIT what files to ignore</td>
</tr>
<tr>
<td>/package.json</td>
<td>App’s NPM management file</td>
</tr>
<tr>
<td>/quasar.build.yml</td>
<td>YAML file used to <a href="/guide/quasar-app-configuration.html#quasar-build-yml">configure App build</a></td>
</tr>
<tr>
<td>/.stylintrc</td>
<td>Default Stylus lint config for linting Stylus files</td>
</tr>
</tbody>
</table>
<h2 id="Source-Folder"><a href="#Source-Folder" class="headerlink" title="Source Folder"></a>Source Folder</h2><p>This is where you’ll spend most of your time writing code for your App.</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/src/css</td>
<td>Folder to store global/common CSS files</td>
</tr>
<tr>
<td>/src/html</td>
<td>Folder to store global/common HTML files</td>
</tr>
<tr>
<td>/src/js</td>
<td>Folder to store global/common JS files</td>
</tr>
<tr>
<td>/src/pages</td>
<td>Folder to store assets for each page; see <a href="/guide/quasar-pages.html">Pages</a></td>
</tr>
<tr>
<td>/src/layouts</td>
<td>Folder to store assets for each layout; see <a href="/guide/quasar-layouts.html">Layouts</a></td>
</tr>
<tr>
<td>/src/index.html</td>
<td>App starting point</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Build System]]></title>
      <url>http://quasar-framework.org/guide/quasar-build-system.html</url>
      <content type="html"><![CDATA[<p>The App must be built before deployment. Read more how to build (and test) in the <a href="/guide/cli-commands.html#Build-App">CLI Commands</a> section.</p>
<p>Following lines will describe how everything is glued together.</p>
<h2 id="Source-Files"><a href="#Source-Files" class="headerlink" title="Source Files"></a>Source Files</h2><h3 id="Javascript-Files"><a href="#Javascript-Files" class="headerlink" title="Javascript Files"></a>Javascript Files</h3><p>Javascript files are glued together using <a href="http://webpack.github.io/docs/" target="_blank" rel="external">Webpack</a>. So you can use <em>require()</em> – and <em>require.resolve()</em> – for modularity. You must adhere to the <a href="/guide/commonjs-format.html">CommonJS format</a> because of its many advantages when writing <em>.js</em> files.</p>
<p>Take into consideration that the following files are taken as Webpack entry-points (take a good look at folders):</p>
<ul>
<li>/js/*.js (Note: directly under /js; no sub-folders)</li>
<li>/pages/<em>page-name</em>/script.<em>page-name</em>.js</li>
<li>/layouts/<em>layout-name</em>/layout.<em>layout-name</em>.js</li>
</ul>
<blockquote>
<p><strong>NOTE</strong><br>Subfolders should be used to modularize your JS code.</p>
</blockquote>
<h3 id="CSS-Files"><a href="#CSS-Files" class="headerlink" title="CSS Files"></a>CSS Files</h3><p>Notice that all CSS files are built using <a href="https://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>, so they have the <em>.styl</em> extension. The Stylus NIB extension is also available.</p>
<p>Take into consideration that the following files are taken as Stylus entry-points (take a good look at folders):</p>
<ul>
<li>/css/*.styl (Note: directly under /css; no sub-folders)</li>
<li>/pages/<em>page-name</em>/css/<em>file-name</em>.styl</li>
<li>/layouts/<em>layout-name</em>/layout.<em>layout-name</em>.styl</li>
</ul>
<blockquote>
<p><strong>NOTE</strong><br>You can speed up build time when developing by forcing only one theme rather than build all. See <a href="/guide/quasar-app-configuration.html#‘forceTheme’-String">forceTheme</a> property in <a href="/guide/quasar-app-configuration.html">App Configuration</a>.</p>
<p><strong>NOTE</strong><br>Subfolders should be used to modularize your CSS code.</p>
</blockquote>
<h3 id="Image-Files"><a href="#Image-Files" class="headerlink" title="Image Files"></a>Image Files</h3><p>Image files should be placed under <code>assets</code> folders. By default, on a production build, <code>GIF</code>, <code>JPEG</code>, <code>PNG</code> and <code>SVG</code> image files get “minified” without losing noticeable quality.</p>
<h3 id="HTML-Files"><a href="#HTML-Files" class="headerlink" title="HTML Files"></a>HTML Files</h3><p>When building for Production, HTML files are minified.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CLI Release Notes]]></title>
      <url>http://quasar-framework.org/guide/quasar-cli-release-notes.html</url>
      <content type="html"><![CDATA[<p>NPM package holding Quasar CLI is <code>quasar-cli</code>.</p>
<h4 id="v0-1-3-2016-06-13"><a href="#v0-1-3-2016-06-13" class="headerlink" title="v0.1.3 / 2016-06-13"></a>v0.1.3 / 2016-06-13</h4><ul>
<li>Serve Static-Content Folders (<code>quasar serve</code>). Read more <a href="/guide/cli-commands.html#Serve-Static-Content-Folder">here</a>.</li>
<li>When wrapping, you are able to <a href="/guide/native-mobile-app-wrapper.html#Wrap-your-App">skip Crosswalk plugin installation</a>: <code>quasar wrap -s</code> or <code>quasar wrap --slim</code>.</li>
</ul>
<h4 id="v0-1-2-2016-06-11"><a href="#v0-1-2-2016-06-11" class="headerlink" title="v0.1.2 / 2016-06-11"></a>v0.1.2 / 2016-06-11</h4><ul>
<li>fix: Cannot use ‘quasar wrap’ on Windows<br>This closes <a href="https://github.com/rstoenescu/quasar-cli/issues/1" target="_blank" rel="external">#1</a></li>
</ul>
<h4 id="v0-1-1-2016-06-10"><a href="#v0-1-1-2016-06-10" class="headerlink" title="v0.1.1 / 2016-06-10"></a>v0.1.1 / 2016-06-10</h4><ul>
<li>feat: Wrapper also installs Crosswalk plugin</li>
</ul>
<h4 id="v0-1-0-2016-06-06"><a href="#v0-1-0-2016-06-06" class="headerlink" title="v0.1.0 / 2016-06-06"></a>v0.1.0 / 2016-06-06</h4><ul>
<li>First public-ready release.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Release Notes]]></title>
      <url>http://quasar-framework.org/guide/quasar-framework-release-notes.html</url>
      <content type="html"><![CDATA[<p>NPM package holding Quasar Framework is <code>quasar-framework</code>.</p>
<h4 id="v0-1-1-2016-06-13"><a href="#v0-1-1-2016-06-13" class="headerlink" title="v0.1.1 / 2016-06-13"></a>v0.1.1 / 2016-06-13</h4><ul>
<li>Updated some dependencies: jQuery to v3, Roboto font face to v0.5.0</li>
<li>fix: Trigger Parallax events in the right order</li>
<li>fix: Grid column selection; avoid VueJS glitch</li>
<li>feat: Dialog with Toggles</li>
<li>style: Improve design for Tree web component</li>
</ul>
<h4 id="v0-1-0-2016-06-06"><a href="#v0-1-0-2016-06-06" class="headerlink" title="v0.1.0 / 2016-06-06"></a>v0.1.0 / 2016-06-06</h4><ul>
<li>First public-ready release.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Layouts]]></title>
      <url>http://quasar-framework.org/guide/quasar-layouts.html</url>
      <content type="html"><![CDATA[<p>Layouts are the elements that wrap page content, like navigational bar or drawers. Multiple pages can share the same Layout, which is one of the main reason for their existence.</p>
<p>Because it’s easier and it ensures you’re using the Quasar standard, use <a href="/guide/cli-commands.html#Layouts">Quasar CLI</a> to build a Layout.</p>
<p>Don’t forget to read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand how layouts are precompiled and bundled, what files are considered an entry-point and many more.</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>Each layout has its own folder (<code>/src/layouts/&lt;layout-name&gt;</code>) and has the following structure:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/assets</td>
<td>Yes</td>
<td>Folder to place images, fonts, … specific to the layout only</td>
</tr>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.js</td>
<td></td>
<td>Starting point of the Layout logic</td>
</tr>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.yml</td>
<td></td>
<td>YAML file with layout configuration (called <em>Manifest</em>)</td>
</tr>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.html</td>
<td></td>
<td>Template for your Layout</td>
</tr>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.styl</td>
<td>Yes</td>
<td>Starting point of the Layout CSS</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>If you do not use the optional files or folder, delete them to get a boost in build times. This folder structure is created by <a href="/guide/cli-commands.html#Create-Layout">Quasar CLI</a> so you don’t have to manually do it.</p>
</blockquote>
<h2 id="Layout-Controller-Javascript"><a href="#Layout-Controller-Javascript" class="headerlink" title="Layout Controller (Javascript)"></a>Layout Controller (Javascript)</h2><p>The starting point of a Quasar Layout is <em>layout.layout-name.js</em> file. Think of it as the Controller of a Layout.</p>
<p>It has a basic CommonJS structure that exports a Vue instantiation object or a function for doing asynchronous operations before calling a callback with a Vue instantiation object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 1. Supply Vue instantiation object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./layout.layout-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 2. Do some asynchronous operations first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./layout.layout-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * 'this' contains Layout manifest;</span><br><span class="line">   * for example if you have specific</span><br><span class="line">   * CSS for the layout, then:</span><br><span class="line">   * 'this.css' will contain the URL</span><br><span class="line">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// asynchronous operations</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  done(&#123; <span class="comment">// Vue instance</span></span><br><span class="line">    template: html,</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol>
<li><p>When exporting a function, make sure the callback is called, otherwise the Page will never load.</p>
</li>
<li><p>Include other JS files for modularity by <em>require()</em>-ing them. Take full advantage of Webpack.<br>Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
</li>
<li><p>Make sure you use <code>require(&#39;raw!.....&#39;)</code> syntax for the template so that it will get bundled automatically into your JS file with the help of the Build System. This saves one precious HTTP request. <strong>Do not require the template within the exporting function (if you use one) because Webpack won’t know it needs to be handled at compile time</strong>. So require it outside to avoid issues.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./some.html'</span>); <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    template: html <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// don't!</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'raw!./some.html'</span>) <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make good use of the Vue component lifecycle methods (<code>created</code>, <code>beforeCompile</code>, <code>compiled</code>, <code>ready</code>, <code>beforeDestroy</code>, <code>destroyed</code>) and different props:</p>
<p><img src="/images/vue-lifecycle.png" alt="Vue Lifecycle Diagram" title="Vue Lifecycle Diagram"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example making use of Vue component lifecycle methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./layout.main.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  template: html,</span><br><span class="line">  beforeCompile: ...,</span><br><span class="line">  compiled: ...,</span><br><span class="line">  destroyed: ...,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make sure you sanitize intervals, timeouts, requestAnimationFrames or anything else at <code>beforeDestroy</code> point, otherwise you may end up with bugs when user switches to another Layout.</p>
</li>
<li><p>Read about how to communicate between Page and Layouts  <a href="/guide/vue-model-communication.html">here</a>. It’s important to know how to share VueModel data between the two.</p>
</li>
</ol>
<h3 id="Global-Layout-Variable"><a href="#Global-Layout-Variable" class="headerlink" title="Global Layout Variable"></a>Global Layout Variable</h3><p>There is a global variable available for you to use called <code>quasar.current.layout</code> which holds properties like <code>name</code> and <code>vm</code> (current layout’s VueModel Object - good place to change VM’s reactive data).</p>
<h2 id="Layout-Template"><a href="#Layout-Template" class="headerlink" title="Layout Template"></a>Layout Template</h2><p>The Quasar App Layout HTML represents a Vue instance template. Read more about the <a href="/guide/quasar-build-system.html#HTML-Files">Build System</a> to understand.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>There are several Web Components that you can use. Some of them are mandatory. Read more about them and how to use them starting with <a href="/components/layout-overview.html">Components &gt; Layout Overview</a> documentation page.</p>
</blockquote>
<h2 id="Layout-CSS"><a href="#Layout-CSS" class="headerlink" title="Layout CSS"></a>Layout CSS</h2><p>Each Layout can use its own CSS. Notice that all CSS files have the <em>.styl</em> extension. This is because you can use Stylus (with NIB extension). Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
<p>To better isolate scope of each Layout CSS, the <code>layout.*layout-name*.styl</code> files have by default the following structure:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.layout-X // where X is the name of the layout</span><br><span class="line">  //</span><br></pre></td></tr></table></figure>
<p>Place all your Stylus code under <code>.layout-*X*</code>.</p>
<h2 id="Layout-Assets"><a href="#Layout-Assets" class="headerlink" title="Layout Assets"></a>Layout Assets</h2><p>Place all your page assets (like images) inside the <code>/layouts/*layout-name*/assets/</code> folder.<br>Images get optimized by default on a production build.</p>
<h2 id="Layout-Events"><a href="#Layout-Events" class="headerlink" title="Layout Events"></a>Layout Events</h2><p>Loading a Layout is a complex procedure involving requiring its script file, preparing script file (including resolving dependencies) and rendering it. You can hook into these procedures by making good use of the Events API. See <a href="/api/js-events-list.html#Layout-Events">Quasar Events List</a> and <a href="/api/js-events.html">Event API</a>.</p>
<h2 id="Layout-Manifest"><a href="#Layout-Manifest" class="headerlink" title="Layout Manifest"></a>Layout Manifest</h2><p>Provide layout specific configuration (in YAML format), called <em>Manifest</em> in <code>/layouts/*layout-name*/layout.*layout-name*.yml</code>.</p>
<p>Example of Layout Manifest property: <code>css</code>. This property gets computed by default if the <code>.styl</code> file exists in the layout folder (<strong>so it is optional!</strong>), but it can be overridden to point to other files. The path must start with the folder where app root <em>index.html</em> file exists.<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">css:</span> <span class="string">'path/to/css'</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Pages]]></title>
      <url>http://quasar-framework.org/guide/quasar-pages.html</url>
      <content type="html"><![CDATA[<p>An App’s central working point is the Pages it is composed of. It enables navigation between different corners of your App.</p>
<p>Because it’s easier and it ensures you’re using the Quasar standard, use <a href="/guide/cli-commands.html#Pages">Quasar CLI</a> to create a Page (also use CLI to change its name too because it’s easier due to the conventions required).</p>
<p>Don’t forget to read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand how pages are precompiled and bundled, what files are considered an entry-point and many more.</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p>Each page has its own folder (<code>/src/pages/&lt;page-name&gt;</code>) and has the structure below:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/assets</td>
<td>Folder to place images, fonts, … specific to the page only</td>
</tr>
<tr>
<td>/script.<strong>&lt;page-name&gt;</strong>.js</td>
<td>JS entry point for the page</td>
</tr>
<tr>
<td>/config.<strong>&lt;page-name&gt;</strong>.yml</td>
<td>YAML file with page configuration (called <em>Manifest</em>)</td>
</tr>
<tr>
<td>/view.<strong>&lt;page-name&gt;</strong>.html</td>
<td><em>(optional)</em> HTML template for the page</td>
</tr>
<tr>
<td>/style.<strong>&lt;page-name&gt;</strong>.styl</td>
<td><em>(optional)</em> CSS entry point for the page</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>If you do not use the optional files or folder, delete them to get a boost in build times. This folder structure is created by <a href="/guide/cli-commands.html#Create-Page">Quasar CLI</a> so you don’t have to manually do it.</p>
</blockquote>
<h2 id="Page-Controller-Javascript"><a href="#Page-Controller-Javascript" class="headerlink" title="Page Controller (Javascript)"></a>Page Controller (Javascript)</h2><p>The starting point of a Quasar Page is <em>script.page-name.js</em> file. Think of it as the Controller part of a Page.</p>
<p>It has a basic CommonJS structure that exports a Vue instantiation object or a function for doing asynchronous operations before calling a callback with a Vue instantiation object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 1. Supply Vue instantiation object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 2. Do some asynch ops first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Properties available:</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">  <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line">  <span class="keyword">this</span>.route <span class="comment">// [String] Route name (eg. '#/login' or '#/book/:chapter/:page')</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// asynchronous operations</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  done(&#123; <span class="comment">// Vue instance</span></span><br><span class="line">    template: html,</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol>
<li><p>When exporting a function, make sure the callback is called, otherwise the Page will never finish loading.</p>
</li>
<li><p>Include other JS files for modularity by <em>require()</em>-ing them. Take full advantage of Webpack.<br>Read more about the <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/api/js-require-script-or-css.html#Require-a-Script-file">Require API</a> to understand.</p>
</li>
<li><p>Make sure you use <code>require(&#39;raw!.....&#39;)</code> syntax for the template so that it will get bundled automatically into your JS file with the help of the Build System. This saves one precious HTTP request. <strong>Do not require the template within the exporting function (if you use one) because Webpack won’t know it needs to be handled at compile time</strong>. So require it outside to avoid issues.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// do</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./some.html'</span>); <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    template: html <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// don't!</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    template: <span class="built_in">require</span>(<span class="string">'raw!./some.html'</span>) <span class="comment">// &lt;&lt;&lt;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make good use of the Vue component lifecycle methods (<code>created</code>, <code>beforeCompile</code>, <code>compiled</code>, <code>ready</code>, <code>beforeDestroy</code>, <code>destroyed</code>) and different props:</p>
<p><img src="/images/vue-lifecycle.png" alt="Vue Lifecycle Diagram" title="Vue Lifecycle Diagram"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example making use of Vue component lifecycle methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  beforeCompile: &#123;</span><br><span class="line">    <span class="comment">// Before template compiling</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ready: &#123;</span><br><span class="line">    <span class="comment">// Template has been rendered into view</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make sure you sanitize intervals, timeouts, requestAnimationFrames or anything else at <code>beforeDestroy</code> point, otherwise you may end up with bugs when user switches to another Page or Layout.</p>
</li>
<li><p>Read about how to communicate between Page and Layouts  <a href="/guide/vue-model-communication.html">here</a>. It’s important to know how to share VueModel data between the two.</p>
</li>
</ol>
<h3 id="Global-Page-Variables"><a href="#Global-Page-Variables" class="headerlink" title="Global Page Variables"></a>Global Page Variables</h3><p>Global variables are available for you to use to access pages:</p>
<table>
<thead>
<tr>
<th>Global Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>quasar.current.page</code></td>
<td>Access current page’s properties, like <code>name</code>, <code>hash</code>, <code>manifest</code>, <code>pageContainer</code> (jQuery Node), <code>scrollContainer</code> (jQuery Node), <code>vm</code> (current page’s VueModel Object - good place to change VM’s reactive data)</td>
</tr>
<tr>
<td><code>quasar.data.manifest.pages</code></td>
<td>Manifest of all pages registered in your App</td>
</tr>
</tbody>
</table>
<h2 id="Page-Manifest"><a href="#Page-Manifest" class="headerlink" title="Page Manifest"></a>Page Manifest</h2><p>Provide page specific configuration (in YAML format), called <em>Manifest</em> in <code>/pages/*page-name*/config.*page-name*.yml</code>.</p>
<p>Example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">label:</span> <span class="string">'Control Panel'</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">'dashboard'</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">'main'</span></span><br><span class="line"><span class="attr">navigation:</span></span><br><span class="line"><span class="attr">  group:</span> <span class="string">'typography'</span></span><br><span class="line"><span class="attr">  order:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  hide:</span> <span class="string">'icon'</span></span><br></pre></td></tr></table></figure>
<p>Let’s look at all properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>Text to display on navigation links (drawer or layout navigational tabs).</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>Icon to display on navigation links (drawer or layout navigational tabs); see <a href="/api/css-icons.html">Icons</a></td>
</tr>
<tr>
<td><code>layout</code></td>
<td>Optional. Specify which layout does the page belongs to, if any.</td>
</tr>
<tr>
<td><code>navigation</code></td>
<td>Help layout tabs determine when and how to display a link for this page. See sub-properties below.</td>
</tr>
<tr>
<td><code>css</code></td>
<td>This property gets computed by default if the <code>.styl</code> file exists in the page folder (<strong>so it is optional!</strong>), but it can be overridden to point to other CSS files. The path must start with the folder where app root <em>index.html</em> file exists.</td>
</tr>
</tbody>
</table>
<p>Sub-properties for <code>navigation</code> object:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>group</code></td>
<td>Which group does the page belongs to. Only one group can be displayed at one time in the <a href="/components/layout-automatic-navigation-tabs.html">Automatic Navigation Tabs</a>. So you can have multiple pages but in the navigation tabs display them by groups. The group displayed when visiting a page is that page’s group only.</td>
</tr>
<tr>
<td><code>order</code></td>
<td>You can also change the order in which the groups’ links are displayed.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>Possible values: <code>icon</code> or <code>label</code>. Hide one of the two when displaying link in navigation tabs.</td>
</tr>
</tbody>
</table>
<p>You can also specify your own properties. Any other property that you write in the page manifest will be accessible under <code>this.manifest</code> property in page methods, and under the global <code>quasar.data.manifest</code> object.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.book.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">myprop:</span> <span class="string">'my-value'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js/script.book.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.manifest.myprop <span class="comment">// is 'my-value'</span></span><br><span class="line"></span><br><span class="line">  done(...);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Page-Template"><a href="#Page-Template" class="headerlink" title="Page Template"></a>Page Template</h2><p>The Quasar App Page HTML represents a Vue instance template. Read more about the <a href="/guide/quasar-build-system.html#HTML-Files">Build System</a> to understand.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Pagination<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Page: &#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pagination</span> <span class="attr">:model.sync</span>=<span class="string">"page"</span> <span class="attr">:max</span>=<span class="string">"17"</span>&gt;</span><span class="tag">&lt;/<span class="name">pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Page-CSS"><a href="#Page-CSS" class="headerlink" title="Page CSS"></a>Page CSS</h2><p>Each page can use its own CSS. Notice that all CSS files have the <em>.styl</em> extension. This is because you can use Stylus (with NIB extension). Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
<p>To better isolate scope of each Page CSS, the <code>style.*page-name*.styl</code> files have by default the following structure:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">.page-X // where X is the name of the page</span><br><span class="line">  //</span><br></pre></td></tr></table></figure>
<p>Place all your Stylus code under <code>.page-*X*</code>.</p>
<h2 id="Page-Assets"><a href="#Page-Assets" class="headerlink" title="Page Assets"></a>Page Assets</h2><p>Place all your page assets (like images, fonts, …) inside the <code>/pages/*page-name*/assets/</code> folder.<br>Images get optimized by default on a production build.</p>
<h2 id="Page-Events"><a href="#Page-Events" class="headerlink" title="Page Events"></a>Page Events</h2><p>Loading a Page is a complex procedure involving requiring its script file, preparing script file (including resolving dependencies) and rendering it. You can hook into these procedures by making good use of the Events API. See <a href="/api/js-events-list.html#Page-Events">Quasar Events List</a> and <a href="/api/js-events.html">Event API</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Theming]]></title>
      <url>http://quasar-framework.org/guide/quasar-theming.html</url>
      <content type="html"><![CDATA[<p>Every website or mobile app needs a specific design to differentiate from the competition. This is where Quasar Framework excels, because:</p>
<ol>
<li>It offers two themes out of the box: Material and iOS</li>
<li>The two themes can be customized/extended easily from the App code. You can change the primary color, the secondary color, and most of the CSS. Customizing does not mean having multiple CSS files, one overriding properties from the other. No. You’ll have one stylesheet with each CSS property declared only once.</li>
<li>You can create your own theme from scratch.</li>
<li><strong>All themes include a CSS reset (following latest standards) to eliminate quirks between platforms</strong>.</li>
</ol>
<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. After reading this intro you can go to <a href="/api/css-stylus-variables.html">API &gt; Stylus Variables</a> for a list of all Stylus variables that you can override so you can theme your App.</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><code>src/css</code> folder from a Quasar App will contain the following files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">└── css</span><br><span class="line">    ├── app.ios.styl</span><br><span class="line">    ├── app.mat.styl</span><br><span class="line">    └── common</span><br><span class="line">        ├── app.style.styl</span><br><span class="line">        └── app.theme.styl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 directory, 4 files</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>File</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app.theme.styl</td>
<td>(Common code for all themes) Place to override Stylus variables which define the primary color, the secondary color, the list border radius and so many properties.. You can easily make good use of Quasar Themes and customize your App so it will have a distinct overall design.</td>
</tr>
<tr>
<td>app.style.styl</td>
<td>A starting point for your App’s own CSS.</td>
</tr>
<tr>
<td>app.ios.styl</td>
<td>Used by Build System to create iOS specific theme for your App. It includes app.theme.styl, Quasar iOS theme and then app.style.styl</td>
</tr>
<tr>
<td>app.mat.styl</td>
<td>Used by Build System to create Material specific theme for your App. It includes app.theme.styl, Quasar Material theme and then app.style.styl</td>
</tr>
</tbody>
</table>
<p>The Build System expects just <code>app.ios.styl</code> and <code>app.mat.styl</code> to exist, so feel free to dig in into the <code>src/css</code> folder to understand how and what is rendered by Stylus and change whatever you like and best suits your needs. Just make sure you have those two files there.</p>
<h2 id="Theming-Your-App"><a href="#Theming-Your-App" class="headerlink" title="Theming Your App"></a>Theming Your App</h2><p>You can easily them your App by adding Stylus variable declarations in <code>src/css/common/app.theme.styl</code>. For example, change the primary color of your App:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Place here all your theme definition overrides</span><br><span class="line"> * Example: $primary = #ff0000</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$primary</span> = <span class="number">#00ffff</span></span><br></pre></td></tr></table></figure>
<h3 id="Platform-Specific-Styles"><a href="#Platform-Specific-Styles" class="headerlink" title="Platform Specific Styles"></a>Platform Specific Styles</h3><p>The platform in which your App runs is automatically detected and the <code>&lt;body&gt;</code> tag gets following classes:</p>
<table>
<thead>
<tr>
<th>Body Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mat</code></td>
<td>Default style; <strong>Material Design theme</strong>; Android platform</td>
</tr>
<tr>
<td><code>ios</code></td>
<td>Apple platform; <strong>iOS theme</strong></td>
</tr>
<tr>
<td><code>desktop</code></td>
<td>App runs on a desktop browser</td>
</tr>
<tr>
<td><code>mobile</code></td>
<td>App runs on a mobile browser</td>
</tr>
<tr>
<td><code>cordova</code></td>
<td>Standalone Mobile App wrapped with Apache Cordova</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>Touch capable platform</td>
</tr>
<tr>
<td><code>no-touch</code></td>
<td>Touch capability not present</td>
</tr>
</tbody>
</table>
<p>So you can write specific Stylus code for your App like this:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  &amp;<span class="selector-class">.cordova</span> <span class="selector-class">.tag</span></span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$primary</span></span><br><span class="line">  &amp;<span class="selector-class">.desktop</span> <span class="selector-class">.tag</span></span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$secondary</span></span><br><span class="line">  &amp;<span class="selector-class">.mobile</span> <span class="selector-class">.tag</span></span><br><span class="line">    <span class="attribute">color</span> <span class="variable">$tertiary</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Theme Specific CSS</strong><br>Regarding themes, if you take a look at the Structure of Stylus files above, you’ll notice there are two files (<code>app.ios.styl</code> and <code>app.mat.styl</code>). Inject code for the specific theme there after you get the hang of how things stand with those files. It’s best to not clog all themes generated CSS with code specific to a certain theme only.</p>
<p><strong>All your Stylus variables need to be declared before the inclusion of Quasar Framework theme files (from NPM).</strong> If you follow the default structure of files (and be care-free) then inject variable overrides in <em>src/css/common/app.theme.styl</em>.</p>
</blockquote>
<h2 id="Speed-Up-Build-Time"><a href="#Speed-Up-Build-Time" class="headerlink" title="Speed Up Build Time"></a>Speed Up Build Time</h2><p>By default, Quasar CLI builds your App with all available themes. You can speed up build time when developing by forcing only one theme rather than building all of them. See <a href="/guide/quasar-app-configuration.html#‘forceTheme’-String">forceTheme</a> property in <a href="/guide/quasar-app-configuration.html">App Configuration</a>.</p>
<h2 id="Stylus-Variables"><a href="#Stylus-Variables" class="headerlink" title="Stylus Variables"></a>Stylus Variables</h2><p>Read a complete list of all Stylus variables that you can override <a href="/api/css-stylus-variables.html">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VueModel Communication]]></title>
      <url>http://quasar-framework.org/guide/vue-model-communication.html</url>
      <content type="html"><![CDATA[<p>As you should know, Pages and Layouts are essentially Vue instances. So they have a data object. It is good to learn how to efficiently share parts of the data object between components.</p>
<p>We’ll start with an example of how to communicate between a Page and a Layout and then explaining how things work in the subsequent section.</p>
<h2 id="Page-Layout-Communication-Example"><a href="#Page-Layout-Communication-Example" class="headerlink" title="Page-Layout Communication Example"></a>Page-Layout Communication Example</h2><p>You can make use of the <code>quasar.current.page</code> and <code>quasar.current.layout</code> globals.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Page Script file (defining its VueModel):</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...,</span><br><span class="line">      checkboxModel: quasar.current.layout.vm.$data.checkboxModel</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Layout Script file (defining its VueModel):</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  done(&#123;</span><br><span class="line">    ...,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...,</span><br><span class="line">      checkboxModel: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Please note that we are using a Function to define the Page’s VueModel. This allows us to connect Layout’s VM to Page’s VM each time the respective Page is loaded.<br>-<br>If we wouldn’t have used a Function in Page’s script file, then the link would have been made only when the Page is first loaded. Subsequent loads of the Page would maintain previous connections, which would render the functionality useless.<br>-<br>When defining a Layout or a Page through a Function, that Function is being run every time the Layout/Page is loaded.</p>
</blockquote>
<h2 id="Explaining-the-Communication-Design"><a href="#Explaining-the-Communication-Design" class="headerlink" title="Explaining the Communication Design"></a>Explaining the Communication Design</h2><p><em>The following is an extract (and adaptation) from <a href="http://vuejs.org/guide/application.html#State-Management" target="_blank" rel="external">VueJS official website &gt; State Management</a></em>.</p>
<p>In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instances simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sourceOfTruth = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Extending this idea further, we would arrive at the <strong>store pattern</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    message: <span class="string">'Hello!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action A triggered'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action B triggered'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Notice we are putting all actions that mutate the store’s state inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen to the state, and how are they triggered. Each component can still own and manage its private state.</p>
<p><img src="/images/vue-state-management.png" alt="Vue State Management"></p>
<p>One thing to take note is that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for the mutations to be observed.</p>
<p>If we enforce a convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we’ve essentially arrived at the <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> architecture. The benefits of this convention is we can record all state mutations happening to the store, and on top of that we can implement advanced debugging helpers such as mutation logs, snapshots, history re-rolls etc.</p>
<p>The Flux architecture is commonly used in React applications. Turns out the core idea behind Flux can be quite simply achieved in Vue.js, thanks to the unobtrusive reactivity system. Do note what we demonstrated here is just an example to introduce the concept - you may not need it at all for simple scenarios, and you should adapt the pattern to fit the real needs of your application.</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
