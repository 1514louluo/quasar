<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://quasar-framework.org/2016/08/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>http://quasar-framework.org/2015/10/02/2015-10-02-Working-On-The-First-Release/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/support-quasar-framework.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Palette]]></title>
      <url>http://quasar-framework.org/api/css-color-palette.html</url>
      <content type="html"><![CDATA[<p>Quasar Framework offers a wide selection of colors out of the box. You can use them both as Stylus variables in your CSS code or directly as CSS classes in your HTML templates.</p>
<input type="hidden" data-fullpage-demo="css/colors">

<p>This page comes really handy after reading <a href="/guide/quasar-theming.html">Quasar Theming</a>.</p>
<h2 id="Brand-Colors"><a href="#Brand-Colors" class="headerlink" title="Brand Colors"></a>Brand Colors</h2><p>There can be three main colors used throughout your App, called <code>primary</code>, <code>secondary</code> and <code>tertiary</code>.</p>
<p>Most of the colors that Quasar Components use are strongly linked with these three colors that you can change. Choosing these colors is the first step one should take when differentiating the design of its own App. You’ll notice immediately on changing their default values that Quasar Components follow these colors as a guideline.</p>
<h2 id="Color-List"><a href="#Color-List" class="headerlink" title="Color List"></a>Color List</h2><p>Here’s the list of colors provided out of the box. Use them as CSS classes or as Stylus variables (preceded by <code>$</code> character) in files directly required by <code>themes/app.*theme*.styl</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><strong>Do not use them in Vue components <code>&lt;style&gt;</code> tags</strong> as they are not available there. Use CSS classes described in the next section instead.</p>
</blockquote>
<p><code>primary</code>, <code>secondary</code>, <code>tertiary</code><br><code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>white</code>, <code>light</code>, <code>dark</code>, <code>faded</code></p>
<p>On the following colors there are variations available:<br><code>red</code>, <code>pink</code>, <code>purple</code>, <code>deep-purple</code>, <code>indigo</code>, <code>blue</code>, <code>light-blue</code>, <code>cyan</code>, <code>teal</code>, <code>green</code>, <code>light-green</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>, <code>orange</code>, <code>deep-orange</code>, <code>brown</code>, <code>grey</code>, <code>blue-grey</code></p>
<p>Example of color variation: <code>red</code>, <code>red-1</code>, <code>red-2</code>, …, <code>red-14</code>. See the demo to make a good picture of what variations are. Variation 11 to 14 are color accents.</p>
<h2 id="CSS-Classes"><a href="#CSS-Classes" class="headerlink" title="CSS Classes"></a>CSS Classes</h2><p>Use <code>text-</code> or <code>bg-</code> prefixes as class names to change the color of text or the color of the background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- changing text color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- changing background color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-positive"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Stylus-Color-Variables"><a href="#Stylus-Color-Variables" class="headerlink" title="Stylus Color Variables"></a>Stylus Color Variables</h2><p>In your Stylus App code you can use them as <code>$primary</code>, <code>$red-1</code>, and so on.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">div</span></div><div class="line">  <span class="attribute">color</span> <span class="variable">$red</span>-<span class="number">1</span></div><div class="line">  <span class="attribute">background-color</span> <span class="variable">$grey</span>-<span class="number">5</span></div></pre></td></tr></table></figure>
<p>The full list of colors is stored in the <code>$colors</code> array. You can change it to add/remove/change colors and all Quasar Components will generate CSS according to those colors.</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">$colors ?= &#123;</div><div class="line">  primary: $primary,</div><div class="line">  secondary: $secondary,</div><div class="line">  tertiary: $tertiary,</div><div class="line">  positive: $positive,</div><div class="line">  negative: $negative,</div><div class="line">  warning: $warning,</div><div class="line">  info: $info,</div><div class="line">  light: $light,</div><div class="line">  dark: $dark,</div><div class="line">  white: $white,</div><div class="line"></div><div class="line">  red: $red,</div><div class="line">  pink: $pink,</div><div class="line">  purple: $purple,</div><div class="line">  deep-purple: $deep-purple,</div><div class="line">  indigo: $indigo,</div><div class="line">  blue: $blue,</div><div class="line">  light-blue: $light-blue,</div><div class="line">  cyan: $cyan,</div><div class="line">  teal: $teal,</div><div class="line">  green: $green,</div><div class="line">  light-green: $light-green,</div><div class="line">  lime: $lime,</div><div class="line">  yellow: $yellow,</div><div class="line">  amber: $amber,</div><div class="line">  orange: $orange,</div><div class="line">  deep-orange: $deep-orange,</div><div class="line">  brown: $brown,</div><div class="line">  grey: $grey,</div><div class="line">  blue-grey: $blue-grey</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Grid Layout]]></title>
      <url>http://quasar-framework.org/api/css-grid-layout.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="layout/grid-layout">

<p>Back in the ol’ days web developers used HTML tables to style their web pages. Then came along powerful CSS features. Latest in the arena entered <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Flexbox</a>.</p>
<p>Quasar provides lots of CSS classes to help you deal easily with managing a layout. Long story short, think of it like operating with rows and columns with many options at hand.</p>
<h2 id="Background-on-Flexbox"><a href="#Background-on-Flexbox" class="headerlink" title="Background on Flexbox"></a>Background on Flexbox</h2><p>The Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>
<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar Grid Layout CSS classes apply to either the Container (Parent) or the Container’s items (Children).</p>
<p><img src="/images/flexbox-container.svg" alt="Flexbox Container"><br><img src="/images/flexbox-items.svg" alt="Flexbox Items"></p>
<h2 id="Parent-Classes"><a href="#Parent-Classes" class="headerlink" title="Parent Classes"></a>Parent Classes</h2><h3 id="Setting-Direction"><a href="#Setting-Direction" class="headerlink" title="Setting Direction"></a>Setting Direction</h3><p>One of the following CSS classes is mandatory for the parent in order for the children ones (described in next sections) to have any effect.</p>
<p><img src="/images/flexbox-direction.svg" alt="Flexbox Direction"></p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex</code></td>
<td><code>display</code> is set to <code>flex</code></td>
</tr>
<tr>
<td><code>row</code></td>
<td>Flex row</td>
</tr>
<tr>
<td><code>row inline</code></td>
<td>Inline Flex row</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Flex column</td>
</tr>
<tr>
<td><code>column inline</code></td>
<td>Inline Flex column</td>
</tr>
<tr>
<td><code>reverse-row</code></td>
<td>Flex row with <code>flex-direction</code> set to <code>row-reverse</code></td>
</tr>
<tr>
<td><code>reverse-column</code></td>
<td>Flex column with <code>flex-direction</code> set to <code>column-reverse</code></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h3><p><strong>You can also wrap content</strong>. Use <code>wrap</code> or <code>reverse-wrap</code> classes. By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. Direction also plays a role here, determining the direction new lines are stacked in.</p>
<p><img src="/images/flexbox-wrap.svg" alt="Flexbox Direction"></p>
<p>If you explicitly do not want to wrap, use <code>no-wrap</code> class.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wrap</code></td>
<td>Wrap if necessary</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Do NOT wrap even if necessary</td>
</tr>
<tr>
<td><code>reverse-wrap</code></td>
<td>Wrap backwards if necessary</td>
</tr>
</tbody>
</table>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p><strong>For alignment along the main axis</strong>, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>
<p><img src="/images/flexbox-main-axis-align.svg" alt="Flexbox Justify Content"></p>
<p><strong>For alignment perpendicular to the main axis</strong>, use classes below. This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the horizontal-* version for the cross-axis (perpendicular to the main-axis).</p>
<p><img src="/images/flexbox-cross-axis-align.svg" alt="Flexbox Items Align"></p>
<p>The next classes <strong>align a flex container’s lines</strong> within when there is extra space in the cross-axis, similar to how horizontal-* aligns individual items within the main-axis.</p>
<p><img src="/images/flexbox-content-align.svg" alt="Flexbox Content Align"></p>
<h3 id="Gutters"><a href="#Gutters" class="headerlink" title="Gutters"></a>Gutters</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>small-gutter</code></td>
<td>Small gutter between cells</td>
</tr>
<tr>
<td><code>medium-gutter</code> or <code>gutter</code></td>
<td>Default gutter between cells</td>
</tr>
<tr>
<td><code>big-gutter</code></td>
<td>Big gutter between cells</td>
</tr>
<tr>
<td><code>large-gutter</code></td>
<td>Large gutter between cells</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row large-gutter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Children-Classes"><a href="#Children-Classes" class="headerlink" title="Children Classes"></a>Children Classes</h2><h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h3><p><strong>You can set the order</strong> by using <code>order-i</code> classes, where <em>i</em> is between 1-10. By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use <code>order</code> CSS property and assign the desired value.</p>
<p><img src="/images/flexbox-order.svg" alt="Flexbox Order"></p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-2"</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-3"</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-1"</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h3><p>The width of a column can be set as <code>width-XofY</code> (where <em>Y</em> is 1 to 5 and <em>X</em> is 1 to Y).<br>It’s a wrapper over <code>flex 0 1 X%</code>.</p>
<p>Example: <code>width-1of3</code> for a 33% width for the cell.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"width-2of3"</span>&gt;</span>2/3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"width-1of5"</span>&gt;</span>1/5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CSS class <code>auto</code> makes the cell expand to the remaining unused width.</p>
<p>There’s also the possible to offset a cell with <code>offset-</code></p>
<h3 id="Grow"><a href="#Grow" class="headerlink" title="Grow"></a>Grow</h3><p><strong>An item can grow if it’s enough space available</strong> by using <code>grow-i</code> classes, where <em>i</em> is between 1-10. This defines the ability for a flex item to grow if necessary. It accepts a unit-less value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.<br>If all items have <code>grow-1</code> class, the remaining space in the container will be distributed equally to all children. If one of the children has <code>grow-2</code>, the remaining space would take up twice as much space as the others (or it will try to, at least).</p>
<p><img src="/images/flexbox-grow.svg" alt="Flexbox Grow"></p>
<h3 id="Shrink"><a href="#Shrink" class="headerlink" title="Shrink"></a>Shrink</h3><p><strong>An item can shrink if necessary</strong> by using <code>shrink-i</code> classes, where <em>i</em> is between 1-10.</p>
<h3 id="Self-Alignment"><a href="#Self-Alignment" class="headerlink" title="Self Alignment"></a>Self Alignment</h3><p><strong>An item can override the aligned specified on parent</strong>. This allows alignment to be overridden for individual flex items. Please see the <a href="#Alignment">Alignment</a> explanation from Parent Classes to understand the available values (<code>self-start</code>, <code>self-center</code>, <code>self-baseline</code>, <code>self-end</code>, <code>self-stretch</code>).</p>
<p><img src="/images/flexbox-self.svg" alt="Flexbox Grow"></p>
<h2 id="Visibility"><a href="#Visibility" class="headerlink" title="Visibility"></a>Visibility</h2><p><strong>An item can be displayed or not based on the width of the screen</strong>. The following list displays prefixes (can be used as standalone too!) that you can use for all of the above CSS classes.</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>bg</code></td>
<td>Display only on big windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>lt-md</code></td>
<td>Display only on lower than medium windows</td>
</tr>
<tr>
<td><code>lt-bg</code></td>
<td>Display only on lower than big windows</td>
</tr>
<tr>
<td><code>lt-lg</code></td>
<td>Display only on lower than large windows</td>
</tr>
<tr>
<td><code>gt-sm</code></td>
<td>Display only on greater than small windows</td>
</tr>
<tr>
<td><code>gt-md</code></td>
<td>Display only on greater than medium windows</td>
</tr>
<tr>
<td><code>gt-bg</code></td>
<td>Display only on greater than big windows</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Also see the demo on this page and try a mobile and desktop view --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row gutter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sm"</span>&gt;</span>SM<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"md"</span>&gt;</span>MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span>BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lg"</span>&gt;</span>LG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-md"</span>&gt;</span>lt-MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-bg"</span>&gt;</span>lt-BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"lt-lg"</span>&gt;</span>lt-LG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-sm"</span>&gt;</span>gt-SM<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-md"</span>&gt;</span>gt-MD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gt-bg"</span>&gt;</span>gt-BG<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>One more example:<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- Displayed as column on small windows and as rows the rest of the time --&gt;</div><div class="line">&lt;div class="row gutter sm-column"&gt; &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">  &lt;div class="width-2of3"&gt;&lt;div&gt;2/3&lt;/div&gt;&lt;/div&gt;</div><div class="line">  &lt;div class="width-1of5"&gt;&lt;div&gt;1/5&lt;/div&gt;&lt;/div&gt;</div><div class="line">  &lt;div class="auto"&gt;&lt;div&gt;auto&lt;/div&gt;&lt;/div&gt;</div><div class="line">  &lt;div class="auto"&gt;&lt;div&gt;auto&lt;/div&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>Prefixes also work with <code>order-i</code>, <code>shrink-i</code>, <code>width-XofY</code>, on gutters and so on.</p>
<p>What does small, medium, big or large windows mean? Check <a href="/api/css-visibility.html#Window-Width-Related">CSS &gt; Visibility</a> page to see thresholds on window width.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Icons]]></title>
      <url>http://quasar-framework.org/api/css-icons.html</url>
      <content type="html"><![CDATA[<p>What would an App be without icons? A default set of (hundreds of) icons is included in any Quasar App.<br>These are the <a href="https://design.google.com/icons/" target="_blank" rel="external">Material Design Icons</a>. You can you can read (and search for them) in the previous link.</p>
<p><img src="/images/material-icons.png" alt="Material Icons Example"></p>
<p>It just differs the way you use them in a Quasar App:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  On Material Design Icons website you check for an icon and it says:</div><div class="line">  "&lt;i class="material-icons"&gt;account_circle&lt;/i&gt;"</div><div class="line"></div><div class="line">  On Quasar App you simply use it like this:</div><div class="line">--&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>account_circle<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>No need for extra markup. Note the “underscore” character instead of a space character… this is mandatory, as Material Icons are displayed using a ligature font.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Helper Classes]]></title>
      <url>http://quasar-framework.org/api/css-other-helper-classes.html</url>
      <content type="html"><![CDATA[<p>There are a lot of CSS classes that you can use while writing your Vue templates. Very handy to ease the complexity of your VueModels and templates.</p>
<p>The list below is not complete. Also check the other CSS documentation pages like Typography, Visibility, Shadows, Positioning.</p>
<h3 id="Mouse-Related"><a href="#Mouse-Related" class="headerlink" title="Mouse Related"></a>Mouse Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>non-selectable</code></td>
<td>User won’t be able to select DOM node along with its text</td>
</tr>
<tr>
<td><code>scroll</code></td>
<td>Applies CSS tweaks to make scroll work at its best on ALL platforms</td>
</tr>
<tr>
<td><code>no-scroll</code></td>
<td>Hides scrollbars on the DOM node</td>
</tr>
<tr>
<td><code>no-pointer-events</code></td>
<td>DOM element does not become a target of mouse events - clicks, hover and so on</td>
</tr>
<tr>
<td><code>all-pointer-events</code></td>
<td>The opposite of <code>no-pointer-events</code></td>
</tr>
<tr>
<td><code>cursor-pointer</code></td>
<td>Change mouse pointer on DOM element to look as if on a clickable link</td>
</tr>
</tbody>
</table>
<h3 id="Size-Related"><a href="#Size-Related" class="headerlink" title="Size Related"></a>Size Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fit</code></td>
<td>Width and Height is set to 100%</td>
</tr>
<tr>
<td><code>full-height</code></td>
<td>Height is set to 100%</td>
</tr>
<tr>
<td><code>full-width</code></td>
<td>Width is set to 100%</td>
</tr>
<tr>
<td><code>window-height</code></td>
<td>Height is set to 100vh with top and bottom margins 0</td>
</tr>
<tr>
<td><code>window-width</code></td>
<td>Width is set to 100vw with left and right margins 0</td>
</tr>
<tr>
<td><code>block</code></td>
<td>Sets <code>display</code> property set to <code>block</code></td>
</tr>
</tbody>
</table>
<h3 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotate-90</code></td>
<td>Rotate by 90 degrees</td>
</tr>
<tr>
<td><code>rotate-180</code></td>
<td>Rotate by 180 degrees</td>
</tr>
<tr>
<td><code>rotate-270</code></td>
<td>Rotate by 270 degrees</td>
</tr>
<tr>
<td><code>flip-horizontal</code></td>
<td>Flip DOM element horizontally</td>
</tr>
<tr>
<td><code>flip-vertical</code></td>
<td>Flip DOM element vertically</td>
</tr>
<tr>
<td><code>spin</code></td>
<td>Apply a continuous spin/rotation to the DOM element</td>
</tr>
<tr>
<td><code>blink</code></td>
<td>Apply a blinking effect to the DOM element</td>
</tr>
</tbody>
</table>
<h2 id="Border-Related"><a href="#Border-Related" class="headerlink" title="Border Related"></a>Border Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-border</code></td>
<td>Removes any border</td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Applies a generic border radius based on theme</td>
</tr>
</tbody>
</table>
<h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>There’s are two special CSS class named <code>group</code> and <code>generic-margin</code>.</p>
<p><code>group</code> applies a small margin to all children DOM elements, while <code>generic-margin</code> applies same margin to the respective DOM element.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Shadows]]></title>
      <url>http://quasar-framework.org/api/css-shadows.html</url>
      <content type="html"><![CDATA[<p>Simple yet effective way to add shadows to create a depth effect.<br>The shadows are in accordance to Material Design speifications.<br>Don’t forget to check the demo.</p>
<input type="hidden" data-fullpage-demo="css/shadows">

<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-shadow</code></td>
<td>Remove any shadow</td>
</tr>
<tr>
<td><code>inset-shadow</code></td>
<td>Set an inset shadow</td>
</tr>
<tr>
<td><code>shadow-1</code>, <code>hoverable</code>, <code>hoverable-1</code></td>
<td>Set a depth of 1 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-2</code>, <code>hoverable-2</code></td>
<td>Set a depth of 2 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-3</code>, <code>hoverable-3</code></td>
<td>Set a depth of 3 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-4</code>, <code>hoverable-4</code></td>
<td>Set a depth of 4 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-5</code>, <code>hoverable-5</code></td>
<td>Set a depth of 5 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-transition</code></td>
<td>Apply a CSS transition on the shadow; best use in conjonction with <code>hoverable</code> classes</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>The shadows above point towards the bottom of the element. If you want them to point towards the top of the element, add <code>up</code> before the number:</p>
<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shadow-up-1</code>, <code>hoverable-up</code>, <code>hoverable-up-1</code></td>
<td>Set a depth of 1 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-up-2</code>, <code>hoverable-up-2</code></td>
<td>Set a depth of 2 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-up-3</code>, <code>hoverable-up-3</code></td>
<td>Set a depth of 3 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-up-4</code>, <code>hoverable-up-4</code></td>
<td>Set a depth of 4 - always or on element hover</td>
</tr>
<tr>
<td><code>shadow-up-5</code>, <code>hoverable-up-5</code></td>
<td>Set a depth of 5 - always or on element hover</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Positioning Classes]]></title>
      <url>http://quasar-framework.org/api/css-positioning.html</url>
      <content type="html"><![CDATA[<p>There are CSS classes supplied by Quasar to help you position a DOM element easily:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float-left</code></td>
<td>Float to the left</td>
</tr>
<tr>
<td><code>float-right</code></td>
<td>Float to the right</td>
</tr>
<tr>
<td><code>fullscreen</code></td>
<td>Fix position covering all window real-estate</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>Set <code>position</code> to <code>fixed</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>Set <code>position</code> to <code>absolute</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>fixed-top</code>, <code>absolute-top</code></td>
<td>Fixed or absolute position to top of screen</td>
</tr>
<tr>
<td><code>fixed-right</code>, <code>absolute-right</code></td>
<td>Fixed or absolute position to the right edge of screen</td>
</tr>
<tr>
<td><code>fixed-bottom</code>, <code>absolute-bottom</code></td>
<td>Fixed or absolute position to bottom of screen</td>
</tr>
<tr>
<td><code>fixed-left</code>, <code>absolute-left</code></td>
<td>Fixed or absolute position to the left edge of screen</td>
</tr>
<tr>
<td><code>fixed-top-left</code>, <code>absolute-top-left</code></td>
<td>Fixed or absolute position to top left of screen</td>
</tr>
<tr>
<td><code>fixed-top-right</code>, <code>absolute-top-right</code></td>
<td>Fixed or absolute position to top right of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-left</code>, <code>absolute-bottom-left</code></td>
<td>Fixed or absolute position to bottom left of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-right</code>, <code>absolute-bottom-right</code></td>
<td>Fixed or absolute position to bottom right of screen</td>
</tr>
<tr>
<td><code>relative-position</code></td>
<td>Set position to <code>relative</code></td>
</tr>
<tr>
<td><code>vertical-top</code></td>
<td>Set vertical alignment to <code>top</code></td>
</tr>
<tr>
<td><code>vertical-middle</code></td>
<td>Set vertical alignment to <code>middle</code></td>
</tr>
<tr>
<td><code>vertical-bottom</code></td>
<td>Set vertical alignment to <code>bottom</code></td>
</tr>
<tr>
<td><code>on-left</code></td>
<td>Sets a small margin to the right; commonly used for icon elements with other siblings</td>
</tr>
<tr>
<td><code>on-right</code></td>
<td>Sets a small margin to the left; commonly used for icon elements with other siblings</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stylus Variables]]></title>
      <url>http://quasar-framework.org/api/css-stylus-variables.html</url>
      <content type="html"><![CDATA[<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. To understand how and where to make use of the full list of variables below, read <a href="/guide/quasar-theming.html">Guide &gt; Theming</a>.</p>
<h2 id="Variables-List"><a href="#Variables-List" class="headerlink" title="Variables List"></a>Variables List</h2><!-- DO NOT WRITE ANYTHING BELOW THIS LINE -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Typography]]></title>
      <url>http://quasar-framework.org/api/css-typography.html</url>
      <content type="html"><![CDATA[<p><input type="hidden" data-fullpage-demo="css/typography"><br>See how headings, blockquotes, definitions lists and more are displayed in the demo. At the end of this page you can read about CSS helper classes.</p>
<h3 id="Default-MD-Font"><a href="#Default-MD-Font" class="headerlink" title="Default MD Font"></a>Default MD Font</h3><p>The default font embedded in Quasar App <em>when built with Material Design Theme</em> is Roboto. It comes with 5 different font weights you can use: 200, 300, 400, 500, 600. Below is an image from Google’s Roboto Specimen document displaying the different font weights:</p>
<div style="max-width: 550px"><br><img src="/images/roboto.png" alt="Roboto Font" title="Roboto Font"><br></div>

<blockquote>
<p><strong>NOTE</strong><br>You can embed it for iOS theme too by copying font related code from <code>themes/app.mat.styl</code> to <code>themes/app.ios.styl</code> and requiring the <code>.styl</code> version of CSS in <code>src/app.js</code></p>
</blockquote>
<h3 id="Text-Types"><a href="#Text-Types" class="headerlink" title="Text Types"></a>Text Types</h3><p>You can display text in a variety of ways.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Token (as CSS class) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"token"</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Small and Big text --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">big</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- sub and sup --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>Subtext<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>Supertext<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Paragraphs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Default Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Caption Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"light-paragraph"</span>&gt;</span>Light Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"thin-paragraph"</span>&gt;</span>Thin Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Bold or italic --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-bold"</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-italic"</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Blockquotes --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Definition Lists --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"horizontal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Tokens; alternative: Chips --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"token"</span>&gt;</span>Some token<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS-Helper-Classes"><a href="#CSS-Helper-Classes" class="headerlink" title="CSS Helper Classes"></a>CSS Helper Classes</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-right</code></td>
<td>Align text to the right</td>
</tr>
<tr>
<td><code>text-left</code></td>
<td>Align text to the left</td>
</tr>
<tr>
<td><code>text-center</code></td>
<td>Align text to the center</td>
</tr>
<tr>
<td><code>text-justify</code></td>
<td>Text will be justified</td>
</tr>
<tr>
<td><code>text-truncate</code></td>
<td>Applies all CSS tweaks to truncate text when container is too small</td>
</tr>
<tr>
<td><code>text-bold</code></td>
<td>Text will be in bold</td>
</tr>
<tr>
<td><code>text-italic</code></td>
<td>Text will be in italic</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>For use on caption parapgraphs</td>
</tr>
<tr>
<td><code>light-paragraph</code></td>
<td>Applies a font-weight of 300</td>
</tr>
<tr>
<td><code>thin-paragraph</code></td>
<td>Applies a font-weight of 200</td>
</tr>
<tr>
<td><code>uppercase</code></td>
<td>Transform text to uppercase</td>
</tr>
<tr>
<td><code>lowercase</code></td>
<td>Transform text to lowercase</td>
</tr>
<tr>
<td><code>capitalize</code></td>
<td>Capitalize first letter of the text</td>
</tr>
<tr>
<td><code>strong</code></td>
<td>DOM element’s font becomes <strong>bold</strong></td>
</tr>
<tr>
<td><code>emphasize</code></td>
<td>DOM element’s font becomes <em>italic</em></td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Every Quasar Theme has a generic border radius. This radius is applied to the DOM node</td>
</tr>
<tr>
<td><code>block</code></td>
<td><code>display</code> property set to <code>block</code></td>
</tr>
<tr>
<td><code>no-margin</code></td>
<td>Margins are set to 0</td>
</tr>
<tr>
<td><code>no-padding</code></td>
<td>Padding is set to 0</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Visibility]]></title>
      <url>http://quasar-framework.org/api/css-visibility.html</url>
      <content type="html"><![CDATA[<p>There are some CSS classes that you can use out of the box for common functionality.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disabled</code></td>
<td>Cursor is changed to notify a ‘disable’ and opacity is set to a lower value.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Set <code>display</code> to <code>none</code></td>
</tr>
<tr>
<td><code>invisible</code></td>
<td>Set <code>visibility</code> to <code>none</code></td>
</tr>
<tr>
<td><code>transparent</code></td>
<td>Background color is transparent</td>
</tr>
<tr>
<td><code>dimmed</code></td>
<td>Apply dark transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>light-dimmed</code></td>
<td>Apply white transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>highlight-and-fade</code></td>
<td>Adds a yellow background color and fades it away upon element is displayed.</td>
</tr>
<tr>
<td><code>ellipsis</code></td>
<td>Truncates text and shows ellipsis when not enough space available.</td>
</tr>
</tbody>
</table>
<h3 id="Platform-Related"><a href="#Platform-Related" class="headerlink" title="Platform Related"></a>Platform Related</h3><p>Visible only on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-only</code></td>
<td>Visible only on desktop</td>
</tr>
<tr>
<td><code>mobile-only</code></td>
<td>Visible only on mobile</td>
</tr>
<tr>
<td><code>cordova-only</code></td>
<td>Visible only on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>touch-only</code></td>
<td>Visible only on touch capable platforms</td>
</tr>
<tr>
<td><code>no-touch-only</code></td>
<td>Visible only on non-touch platforms</td>
</tr>
<tr>
<td><code>mat-only</code></td>
<td>Visible only for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-only</code></td>
<td>Visible only for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>within-iframe-only</code></td>
<td>Visible only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Hide on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-hide</code></td>
<td>Hide on desktop</td>
</tr>
<tr>
<td><code>mobile-hide</code></td>
<td>Hide on mobile</td>
</tr>
<tr>
<td><code>cordova-hide</code></td>
<td>Hide on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>touch-hide</code></td>
<td>Hide on touch capable platforms</td>
</tr>
<tr>
<td><code>no-touch-hide</code></td>
<td>Hide on non-touch platforms</td>
</tr>
<tr>
<td><code>mat-hide</code></td>
<td>Hide for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-hide</code></td>
<td>Hide for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>within-iframe-hide</code></td>
<td>Hide only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Also check <a href="/guide/quasar-theming.html#Platform-Specific-Styles">Quasar Theming &gt; Platform Specific Styles</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a non-recommended way to hide DOM elements through Javascript. Read more on <a href="/api/js-platform-detection.html">Javascript &gt; Environment</a> page.</p>
</blockquote>
<h3 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orientation-portrait</code></td>
<td>Visible only when screen orientation is <em>Portrait</em></td>
</tr>
<tr>
<td><code>orientation-landscape</code></td>
<td>Visible only when screen orientation is <em>Landscape</em></td>
</tr>
</tbody>
</table>
<h3 id="Window-Width-Related"><a href="#Window-Width-Related" class="headerlink" title="Window Width Related"></a>Window Width Related</h3><p>First of all, let’s define what does a small, medium, big or large window means:</p>
<table>
<thead>
<tr>
<th>Window Size</th>
<th>Width threshold in pixels</th>
</tr>
</thead>
<tbody>
<tr>
<td>Small</td>
<td>Up to 600px</td>
</tr>
<tr>
<td>Medium</td>
<td>Up to 920px</td>
</tr>
<tr>
<td>Big</td>
<td>Up to 1280px</td>
</tr>
<tr>
<td>Large</td>
<td>Bigger than 1280px</td>
</tr>
</tbody>
</table>
<p>Now on to the window width related CSS classes:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>bg</code></td>
<td>Display only on big windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>lt-md</code></td>
<td>Display only on lower than medium windows</td>
</tr>
<tr>
<td><code>lt-bg</code></td>
<td>Display only on lower than big windows</td>
</tr>
<tr>
<td><code>lt-lg</code></td>
<td>Display only on lower than large windows</td>
</tr>
<tr>
<td><code>gt-sm</code></td>
<td>Display only on greater than small windows</td>
</tr>
<tr>
<td><code>gt-md</code></td>
<td>Display only on greater than medium windows</td>
</tr>
<tr>
<td><code>gt-bg</code></td>
<td>Display only on greater than big windows</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/api/index.html</url>
      <content type="html"><![CDATA[<p>Learn here about the API specifications of every feature embedded in Quasar Framework. How to require a script, how to create a route, how to detect if the app is running within Cordova or on a desktop, and many more, including Quasar CSS specifications.</p>
<p>By default, Quasar covers a lot of areas of Web development with ready to use API which simplifies your code and hides the different platform quirks.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cookies]]></title>
      <url>http://quasar-framework.org/api/js-cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Read-a-Cookie"><a href="#Read-a-Cookie" class="headerlink" title="Read a Cookie"></a>Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> value = Cookies.get(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<h2 id="Read-All-Cookies"><a href="#Read-All-Cookies" class="headerlink" title="Read All Cookies"></a>Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cookies = Cookies.all()</div></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<h2 id="Verify-if-Cookie-is-Set"><a href="#Verify-if-Cookie-is-Set" class="headerlink" title="Verify if Cookie is Set"></a>Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Boolean</span>) Cookies.has(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
<h2 id="Write-a-Cookie"><a href="#Write-a-Cookie" class="headerlink" title="Write a Cookie"></a>Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.set(<span class="string">'cookie_name'</span>, cookie_value, options)</div></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expire</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.set(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</div><div class="line">  secure: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Option-expires"><a href="#Option-expires" class="headerlink" title="Option expires"></a>Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">expires: <span class="number">10</span></div></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option-path"><a href="#Option-path" class="headerlink" title="Option path"></a>Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">path: <span class="string">'/'</span></div></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option-domain"><a href="#Option-domain" class="headerlink" title="Option domain"></a>Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">domain: <span class="string">'quasar-framework.org'</span></div></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option-secure"><a href="#Option-secure" class="headerlink" title="Option secure"></a>Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">secure: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove-a-Cookie"><a href="#Remove-a-Cookie" class="headerlink" title="Remove a Cookie"></a>Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.remove(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Visibility]]></title>
      <url>http://quasar-framework.org/api/js-app-visibility.html</url>
      <content type="html"><![CDATA[<p>Quasar makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="external">Page Visibility API</a> which lets you know when a website/app is visible or in focus.</p>
<input type="hidden" data-fullpage-demo="other/app-visibility">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppVisibility &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Boolean</span>) AppVisibility.isVisible()</div></pre></td></tr></table></figure>
<p>There is also an event triggered when focus changes:</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fullscreen]]></title>
      <url>http://quasar-framework.org/api/js-app-fullscreen.html</url>
      <content type="html"><![CDATA[<p>There are times when you want your website or App to run in fullscreen.<br>Quasar makes it easy by wrapping the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="external">Fullscreen API</a>.</p>
<input type="hidden" data-external-demo="other/app-fullscreen">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppFullscreen &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Determining if website is in fullscreen mode:</span></div><div class="line">(<span class="built_in">Boolean</span>) AppFullscreen.isActive()</div><div class="line"></div><div class="line"><span class="comment">// Requesting fullscreen mode:</span></div><div class="line">AppFullscreen.request()</div><div class="line"></div><div class="line"><span class="comment">// Exiting fullscreen mode:</span></div><div class="line">AppFullscreen.exit()</div><div class="line"></div><div class="line"><span class="comment">// Toggle fullscreen mode:</span></div><div class="line">AppFullscreen.toggle()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Events]]></title>
      <url>http://quasar-framework.org/api/js-events.html</url>
      <content type="html"><![CDATA[<p>Events are important for the inner workings of your App.<br>Sometimes you need an event bus or a publish/subscribe channel. Quasar provides this out of the box:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div></pre></td></tr></table></figure>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><blockquote>
<p><strong>NOTE</strong><br>Event name must <em>NOT</em> contain space characters, otherwise the string will be considered as containing multiple events names.</p>
</blockquote>
<h3 id="Registering-an-Event-Callback"><a href="#Registering-an-Event-Callback" class="headerlink" title="Registering an Event/Callback"></a>Registering an Event/Callback</h3><p><code>Events.on(String eventNames, Function callback [, Object context])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> context = &#123;...&#125; <span class="comment">// will be used as *this* within callback</span></div><div class="line">Events.on(<span class="string">'event-name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2, ...paramN</span>) </span>&#123; ... &#125;, context)</div><div class="line"></div><div class="line"><span class="comment">// The params that are used when triggering the event are passed on</span></div><div class="line"><span class="comment">// to each callback.</span></div><div class="line"></div><div class="line"><span class="comment">// We can register multiple events at once:</span></div><div class="line">Events.on(<span class="string">'event1 event2 eventN'</span>, callback)</div></pre></td></tr></table></figure></p>
<h3 id="Removing-an-Event-Callback"><a href="#Removing-an-Event-Callback" class="headerlink" title="Removing an Event/Callback"></a>Removing an Event/Callback</h3><p><code>Events.off(String eventNames [, Function callback])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Unregistering an event:</span></div><div class="line">Events.off(<span class="string">'event-name'</span>)</div><div class="line"><span class="comment">// 'event-name' does no longer has any callbacks</span></div><div class="line"></div><div class="line"><span class="comment">// Unregistering a specific callback for an event:</span></div><div class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;</div><div class="line">Events.on(<span class="string">'event-name'</span>, callback)</div><div class="line">Events.off(<span class="string">'event-name'</span>, callback)</div><div class="line"><span class="comment">// 'event-name' still exists (if other callbacks are registered to this event),</span></div><div class="line"><span class="comment">// but does not contain the above callback anymore</span></div><div class="line"></div><div class="line"><span class="comment">// We can remove callback from multiple events at once:</span></div><div class="line">Events.off(<span class="string">'event1 event2 eventN'</span>, callback)</div><div class="line"></div><div class="line"><span class="comment">// or we can remove all callbacks from multiple events at once:</span></div><div class="line">Events.off(<span class="string">'event1 event2 eventN'</span>)</div><div class="line"></div><div class="line"><span class="comment">// or we can remove all callbacks and all events at once:</span></div><div class="line">Events.off()</div></pre></td></tr></table></figure>
<h3 id="Registering-a-Callback-to-Be-Run-Only-Once"><a href="#Registering-a-Callback-to-Be-Run-Only-Once" class="headerlink" title="Registering a Callback to Be Run Only Once"></a>Registering a Callback to Be Run Only Once</h3><p><code>Events.once(String eventNames, Function callback [, Object context])</code></p>
<p>Sometimes you need to trigger a callback only once. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;</div><div class="line">Events.once(<span class="string">'event-name'</span>, callback)</div><div class="line"><span class="comment">// callback will be triggered only once</span></div><div class="line"></div><div class="line"><span class="comment">// We can also register callback to be triggered once</span></div><div class="line"><span class="comment">// for multiple events at once:</span></div><div class="line">Events.once(<span class="string">'event1 event2'</span>, callback)</div><div class="line"><span class="comment">// callback will be triggered only once for 'event1'</span></div><div class="line"><span class="comment">// AND only once more for 'event2'</span></div><div class="line"><span class="comment">// ... so triggering 'event1' and 'event2' multiple times</span></div><div class="line"><span class="comment">// will run callback a total of 2 times</span></div></pre></td></tr></table></figure></p>
<h3 id="Triggering-an-Event"><a href="#Triggering-an-Event" class="headerlink" title="Triggering an Event"></a>Triggering an Event</h3><p><code>Events.trigger(String eventNames [, Anything *args])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Events.trigger(<span class="string">'event-name'</span>)</div><div class="line"><span class="comment">// All callbacks associated with 'event-name' will be triggered</span></div><div class="line"><span class="comment">// in the order that they were registered.</span></div><div class="line"></div><div class="line"><span class="comment">// Trigger with parameters (as many as you want):</span></div><div class="line">Events.trigger(<span class="string">'event-name'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;)</div><div class="line"><span class="comment">// These parameters will be used when calling all registered</span></div><div class="line"><span class="comment">// callbacks for 'event-name' --&gt; callback(10, 'wow', &#123;obj: true&#125;);</span></div><div class="line"></div><div class="line"><span class="comment">// We can also trigger multiple events at once:</span></div><div class="line">Events.trigger(<span class="string">'event1 event2 event3'</span>)</div><div class="line">Events.trigger(<span class="string">'event1 event2 event3'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">// We can also trigger ALL registered events at once:</span></div><div class="line">Events.trigger()</div></pre></td></tr></table></figure></p>
<h3 id="Checking-for-Subscribers"><a href="#Checking-for-Subscribers" class="headerlink" title="Checking for Subscribers"></a>Checking for Subscribers</h3><p><code>Boolean Events.hasSubscriber(String eventNames [, Function callback])</code><br>or<br><code>Boolean Events.hasSubscriber(Function callback)</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Check if 'event-name' has any callbacks associated</span></div><div class="line"><span class="keyword">let</span> exists = Events.hasSubscriber(<span class="string">'event-name'</span>)</div><div class="line"></div><div class="line"><span class="comment">// Check if a callback is registered for an event:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;...&#125;;</div><div class="line"><span class="keyword">let</span> exists = Events.hasSubscriber(<span class="string">'event-name'</span>, myFunction)</div><div class="line"></div><div class="line"><span class="comment">// Check if a callback is registered for any of the specified events</span></div><div class="line"><span class="keyword">let</span> exists = Events.hasSubscriber(<span class="string">'event1 event2'</span>, myFunction)</div><div class="line"></div><div class="line"><span class="comment">// Check if a callback is registered for any events</span></div><div class="line"><span class="keyword">let</span> exists = Events.hasSubscriber(myFunction)</div><div class="line"></div><div class="line"><span class="comment">// Check if an emitter has any events/callbacks at all:</span></div><div class="line"><span class="keyword">let</span> exists = Events.hasSubscriber()</div></pre></td></tr></table></figure></p>
<h3 id="Getting-List-of-Events"><a href="#Getting-List-of-Events" class="headerlink" title="Getting List of Events"></a>Getting List of Events</h3><p><code>Array Events.getEventsList()</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> eventsList = Events.getList()</div></pre></td></tr></table></figure></p>
<h2 id="Events-List"><a href="#Events-List" class="headerlink" title="Events List"></a>Events List</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Events.on(<span class="string">'event-name'</span>, callback)</div></pre></td></tr></table></figure>
<h3 id="Global-Events"><a href="#Global-Events" class="headerlink" title="Global Events"></a>Global Events</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:error</td>
<td>Triggered for any Javascript error. See parameters below.</td>
</tr>
</tbody>
</table>
<h4 id="Parameter-supplied-by-app-error"><a href="#Parameter-supplied-by-app-error" class="headerlink" title="Parameter supplied by app:error"></a>Parameter supplied by <code>app:error</code></h4><p><code>app:error</code> event is triggerd with one parameter, an Object containing the following properties:</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td>String</td>
<td>Error message</td>
</tr>
<tr>
<td>source</td>
<td>String</td>
<td>URL of the script where the error was raised</td>
</tr>
<tr>
<td>lineno</td>
<td>Number</td>
<td>Line number where error was raised</td>
</tr>
<tr>
<td>colno</td>
<td>Number</td>
<td>Column number for the line where the error occurred</td>
</tr>
<tr>
<td>error</td>
<td>Object</td>
<td>Error Object containing amongst other things the stack trace</td>
</tr>
</tbody>
</table>
<h3 id="App-Visibility"><a href="#App-Visibility" class="headerlink" title="App Visibility"></a>App Visibility</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/api/js-app-visibility.html">here</a>.</p>
<h3 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:notify</td>
<td>(String) html</td>
<td>Is triggered whenever a Toast is displayed.</td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/toast.html">here</a>.</p>
<h3 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:loading</td>
<td>(Boolean) status</td>
<td>Triggered when Loading component is displayed (with <code>true</code> as param) or hidden (with <code>false</code> as param).</td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/loading.html">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Platform Detection]]></title>
      <url>http://quasar-framework.org/api/js-platform-detection.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the Platform (and its capabilities) in which the code is running:</p>
<input type="hidden" data-fullpage-demo="other/platform-detection">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Platform.is.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>Platform.is.cordova</td>
<td>boolean</td>
<td>Is the code running within Cordova?</td>
</tr>
<tr>
<td>Platform.is.desktop</td>
<td>boolean</td>
<td>Is the code running on a desktop browser?</td>
</tr>
<tr>
<td>Platform.has.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
<tr>
<td>Platform.within.iframe</td>
<td>boolean</td>
<td>Is the App running within an IFRAME?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper.</p>
</blockquote>
<p>Other <strong>Platform.is</strong> specific properties:<br><code>android</code>, <code>blackberry</code>, <code>cros</code>, <code>ios</code>, <code>ipad</code>, <code>iphone</code>, <code>ipod</code>, <code>kindle</code>, <code>linux</code>, <code>mac</code>, <code>playbook</code>, <code>silk</code>, <code>chrome</code>, <code>opera</code>, <code>safari</code>, <code>win</code> (Windows), <code>winphone</code> (Windows Phone) and more…</p>
<p>Example when running Chrome on a Linux desktop machine:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Describing Platform.is</span></div><div class="line">&#123;</div><div class="line">  chrome: <span class="literal">true</span>,</div><div class="line">  desktop: <span class="literal">true</span>,</div><div class="line">  linux: <span class="literal">true</span>,</div><div class="line">  name: <span class="string">"chrome"</span>,</div><div class="line">  platform: <span class="string">"linux"</span>,</div><div class="line">  version: <span class="string">"47.0.2526.80"</span>,</div><div class="line">  versionNumber: <span class="number">47</span>,</div><div class="line">  webkit: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When trying to show DOM elements only on a platform you can skip using Javascript and make use of Quasar CSS classes (which is more efficient). Read about on <a href="/api/css-visibility.html#Platform-Related">CSS &gt; Visibility</a> documentation page.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue Directives]]></title>
      <url>http://quasar-framework.org/api/js-vue-directives.html</url>
      <content type="html"><![CDATA[<p>Quasar provides some useful ready to use Vue directives. If you don’t know what a directive is, read <a href="http://vuejs.org/guide/custom-directive.html" target="_blank" rel="external">here</a>.</p>
<p>This is not a complete list. The missing ones are specific to some Quasar Components and are described on their documentation pages. For example, see <a href="/guide/handling-back-button.html">Handling Back Button</a>.</p>
<h3 id="Directive-“v-scroll”"><a href="#Directive-“v-scroll”" class="headerlink" title="Directive “v-scroll”"></a>Directive “v-scroll”</h3><p>This one takes one parameter (a Function) and fires when user scrolls the page containing that DOM node.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line">......</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrolled"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">......</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    scrolled (position) &#123;</div><div class="line">      <span class="comment">// when this method is invoked then it means user</span></div><div class="line">      <span class="comment">// has scrolled the page to `position`</span></div><div class="line">      <span class="comment">//</span></div><div class="line">      <span class="comment">// `position` is an Integer designating the current</span></div><div class="line">      <span class="comment">// scroll position in pixels.</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Please note that by default the method called is not debounced. For that you have to do it yourself, by wrapping your method with <code>Utils.debounce</code> like in example below.<br>Read more about <code>debouncing</code> <a href="/api/js-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    scrolled: Utils.debounce(position =&gt; &#123;</div><div class="line">      <span class="comment">// when this method is invoked then it means user</span></div><div class="line">      <span class="comment">// has scrolled the Page to `position`</span></div><div class="line">      <span class="comment">//</span></div><div class="line">      <span class="comment">// `position` is an Integer designating the current</span></div><div class="line">      <span class="comment">// scroll position in pixels.</span></div><div class="line">    &#125;, <span class="number">200</span>) <span class="comment">// debounce for 200ms</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>There is one more scrolling-related directive available called “Scroll Fire” described on its own documentation page. Read more <a href="/components/scroll-fire.html">here</a>.</p>
</blockquote>
<h3 id="Directive-“v-attr”"><a href="#Directive-“v-attr”" class="headerlink" title="Directive “v-attr”"></a>Directive “v-attr”</h3><p>This directive sets HTML attributes (with no value) on the respective DOM node.</p>
<blockquote>
<p><strong>NOTE</strong><br>Do not mistake this directive with the one that Vue had on its early releases up to v0.11.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-attr</span>=<span class="string">"attributes"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In the example above <code>attributes</code> is a variable from VM data. It can be a String or an Array of Strings. Some examples of its effects:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">// `attributes` has value 'close-me' then DIV below</div><div class="line">// has empty HTML attribute 'close-me' added.</div><div class="line">&lt;div close-me&gt;...&lt;/div&gt;</div><div class="line"></div><div class="line">// Changing `attributes` to value "active" makes</div><div class="line">// the DIV's DOM node look like this:</div><div class="line">&lt;div active&gt;...&lt;/div&gt;</div><div class="line"></div><div class="line">// If `attributes` is an Array of String, like</div><div class="line">// ['close-me', 'active'] then DIV's DOM node looks like this:</div><div class="line">&lt;div active close-me&gt;...&lt;/div&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>http://quasar-framework.org/api/js-web-storage.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="external">Web Storage API</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.set(key, value)</div><div class="line"><span class="keyword">let</span> value = LocalStorage.get.item(key)</div><div class="line"></div><div class="line">SessionStorage.set(key, value)</div><div class="line"><span class="keyword">let</span> value = SessionStorage.get.item(key)</div></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Storing-Data"><a href="#Storing-Data" class="headerlink" title="Storing Data"></a>Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.set(key, value)</div><div class="line">SessionStorage.set(key, value)</div></pre></td></tr></table></figure>
<h3 id="Retrieving-Data"><a href="#Retrieving-Data" class="headerlink" title="Retrieving Data"></a>Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.item(key)</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.item(key)</div></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.all()</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.all()</div></pre></td></tr></table></figure></p>
<h3 id="Iterating-through-Store"><a href="#Iterating-through-Store" class="headerlink" title="Iterating through Store"></a>Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> length = LocalStorage.get.length()</div><div class="line"><span class="keyword">let</span> length = SessionStorage.get.length()</div></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.index(index)</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.index(index)</div></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing-Data"><a href="#Removing-Data" class="headerlink" title="Removing Data"></a>Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.remove(key)</div><div class="line">SessionStorage.remove(key)</div></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.clear(key)</div><div class="line">SessionStorage.clear(key)</div></pre></td></tr></table></figure></p>
<h3 id="Is-Store-Empty"><a href="#Is-Store-Empty" class="headerlink" title="Is Store Empty?"></a>Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(boolean) LocalStorage.isEmpty()</div><div class="line">(boolean) SessionStorage.isEmpty()</div></pre></td></tr></table></figure>
<h3 id="Is-Key-in-Store"><a href="#Is-Key-in-Store" class="headerlink" title="Is Key in Store?"></a>Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(boolean) LocalStorage.has(key)</div><div class="line">(boolean) SessionStorage.has(key)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax Requests]]></title>
      <url>http://quasar-framework.org/guide/ajax-requests.html</url>
      <content type="html"><![CDATA[<p>Quasar recommends using <code>vue-resource</code> plugin for VueJs. This package is not provided by default so you will have to npm install it and import it from <code>src/app.js</code>.</p>
<p>Get started with the <a href="https://github.com/vuejs/vue-resource" target="_blank" rel="external">documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App API Proxying for Dev]]></title>
      <url>http://quasar-framework.org/guide/app-api-proxying-for-dev.html</url>
      <content type="html"><![CDATA[<p>When integrating the boilerplate created by Quasar CLI with an existing backend, a common need is to access the backend API when using the dev server. To achieve that, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend.</p>
<p>To configure the proxy rules, edit <code>dev.proxyTable</code> option in <code>config.js</code>. The dev server is using <code>http-proxy-middleware</code> for proxying, so you should refer to its docs for detailed usage. But here’s a simple example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  dev: &#123;</div><div class="line">    proxyTable: &#123;</div><div class="line">      <span class="comment">// proxy all requests starting with /api to jsonplaceholder</span></div><div class="line">      <span class="string">'/api'</span>: &#123;</div><div class="line">        target: <span class="string">'http://jsonplaceholder.typicode.com'</span>,</div><div class="line">        changeOrigin: <span class="literal">true</span>,</div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above example will proxy the request <code>/api/posts/1</code> to <code>http://jsonplaceholder.typicode.com/posts/1</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Utils]]></title>
      <url>http://quasar-framework.org/api/js-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Open-External-URL"><a href="#Open-External-URL" class="headerlink" title="Open External URL"></a>Open External URL</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Utils.openURL(<span class="string">'http://...'</span>)</div></pre></td></tr></table></figure>
<p>It will take care of the quirks involved when running under Cordova or on a browser, including notifying the user he/she has to acknowledge opening popups.</p>
<h2 id="Debounce-Function"><a href="#Debounce-Function" class="headerlink" title="Debounce Function"></a>Debounce Function</h2><p>If your App uses JavaScript to accomplish taxing tasks, a debounce function is essential to ensuring a given task doesn’t fire so often that it bricks browser performance. Debouncing a function limits the rate at which the function can fire.</p>
<p>Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in “execute this function only if 100 milliseconds have passed without it being called.”</p>
<p>A quick example: you have a resize listener on the window which does some element dimension calculations and (possibly) repositions a few elements. That isn’t a heavy task in itself but being repeatedly fired after numerous resizes will really slow your App down. So why not limit the rate at which the function can fire?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></div><div class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class="line"><span class="comment">// leading edge, instead of the trailing.</span></div><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Debounced <span class="built_in">Function</span>) Utils.debounce(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> milliseconds_to_wait, <span class="built_in">Boolean</span> immediate)</div><div class="line"></div><div class="line"><span class="comment">// Example:</span></div><div class="line"><span class="built_in">window</span>.addEventListener(</div><div class="line">  <span class="string">'resize'</span>,</div><div class="line">  Utils.debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    .... things to <span class="keyword">do</span> ...</div><div class="line">  &#125;, <span class="number">300</span> <span class="comment">/*ms to wait*/</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Throttle-Function"><a href="#Throttle-Function" class="headerlink" title="Throttle Function"></a>Throttle Function</h2><p>Throttling enforces a maximum number of times a function can be called over time. As in “execute this function at most once every 300 milliseconds.”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></div><div class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class="line"><span class="comment">// leading edge, instead of the trailing.</span></div><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Throttled <span class="built_in">Function</span>) Utils.throttle(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> limit_in_milliseconds)</div><div class="line"></div><div class="line"><span class="comment">// Example:</span></div><div class="line"><span class="built_in">window</span>.addEventListener(</div><div class="line">  <span class="string">'resize'</span>,</div><div class="line">  Utils.throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    .... things to <span class="keyword">do</span> ...</div><div class="line">  &#125;, <span class="number">300</span> <span class="comment">/* execute at most once every 0.3s */</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Deep-Copy-Objects"><a href="#Deep-Copy-Objects" class="headerlink" title="(Deep) Copy Objects"></a>(Deep) Copy Objects</h2><p>A basic respawn of <code>jQuery.extend()</code>. Takes same parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> newObject = Utils.extend([<span class="built_in">Boolean</span> deepCopy], targetObj, obj, ...)</div></pre></td></tr></table></figure></p>
<p>Watch out for methods within objects.</p>
<h2 id="Generate-UID"><a href="#Generate-UID" class="headerlink" title="Generate UID"></a>Generate UID</h2><p>Generate unique identifiers:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> uid = Utils.uid()</div></pre></td></tr></table></figure></p>
<h2 id="DOM-methods"><a href="#DOM-methods" class="headerlink" title="DOM methods"></a>DOM methods</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Utils &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Offset on screen</span></div><div class="line"><span class="built_in">console</span>.log(Utils.dom.offset(DomElement))</div><div class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// Get COMPUTED style (when DomElement is visible!)</span></div><div class="line"><span class="comment">// Computed means a DomElement might not have "height" CSS property set,</span></div><div class="line"><span class="comment">// but that does not mean it doesn't have a height when it's displayed.</span></div><div class="line"><span class="comment">// The follosing method accesses the computed CSS provided by the browser:</span></div><div class="line"><span class="built_in">console</span>.log(Utils.dom.style(DomElement, <span class="string">'height'</span>))</div><div class="line"><span class="comment">// '10px' &lt;&lt;&lt; notice it returns a String ending in 'px'</span></div><div class="line"></div><div class="line"><span class="comment">// Some aliases of the previous method for "width" and "height" which</span></div><div class="line"><span class="comment">// returns Numbers instead of Strings:</span></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">  Utils.dom.height(DomElement),</div><div class="line">  Utils.dom.width(DomElement)</div><div class="line">)</div><div class="line"><span class="comment">// 10 100</span></div><div class="line"></div><div class="line"><span class="comment">// Apply a list of CSS properties to a DomNode</span></div><div class="line">Utils.dom.css(&#123;</div><div class="line">  height: <span class="string">'10px'</span>,</div><div class="line">  display: <span class="string">'flex'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Get Window height and width</span></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">  Utils.dom.viewport().height,</div><div class="line">  Utils.dom.viewport().width</div><div class="line">)</div><div class="line"><span class="comment">// 800 600</span></div><div class="line"></div><div class="line"><span class="comment">// Execute a Function when DOM is ready:</span></div><div class="line">Utils.dom.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ....</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// Determine if DomNode (target) is child of another DomNode (parent)</span></div><div class="line">(<span class="built_in">Boolean</span>) Utils.dom.childOf(target, parent)</div><div class="line"></div><div class="line"><span class="comment">// Get parent DomNode that handles page scrolling</span></div><div class="line"><span class="comment">// Usually this is element with classname ".layout-view" or "window"</span></div><div class="line">(DOM Element) Utils.dom.getScrollTarget(DomElement)</div><div class="line"></div><div class="line"><span class="comment">// Get scroll position of a page. Use it in conjunction with `Utils.dom.getScrollTarget()`</span></div><div class="line">(<span class="built_in">Number</span> pixels) Utils.dom.getScrollPosition(scrollTargetDomElement)</div></pre></td></tr></table></figure>
<h2 id="Handling-“event”-on-a-DOM-event-handler"><a href="#Handling-“event”-on-a-DOM-event-handler" class="headerlink" title="Handling “event” on a DOM event handler"></a>Handling “event” on a DOM event handler</h2><p>It’s cross-browser.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">node.addEventListener(<span class="string">'click'</span>, event =&gt; &#123;</div><div class="line">  <span class="comment">// right clicked?</span></div><div class="line">  (<span class="built_in">Boolean</span>) Utils.event.rightClick(event)</div><div class="line"></div><div class="line">  <span class="comment">// position on viewport</span></div><div class="line">  <span class="comment">// works both for mouse and touch events!</span></div><div class="line">  (<span class="built_in">Object</span> &#123;top, left&#125;) Utils.event.position(event)</div><div class="line"></div><div class="line">  <span class="comment">// get target DOM Element on which mouse or touch</span></div><div class="line">  <span class="comment">// event has fired upon</span></div><div class="line">  (DOM Element) Utils.event.targetElement(event)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Handling Static Assets]]></title>
      <url>http://quasar-framework.org/guide/app-handling-static-assets.html</url>
      <content type="html"><![CDATA[<p>You will notice in the project structure we have two directories for static assets: <code>src/assets/</code> and <code>src/statics/</code>. What is the difference between them?</p>
<h2 id="Webpacked-Assets"><a href="#Webpacked-Assets" class="headerlink" title="Webpacked Assets"></a>Webpacked Assets</h2><p>To answer this question, we first need to understand how Webpack deals with static assets. In <code>*.vue</code> components, all your templates and CSS are parsed by <code>vue-html-loader</code> and <code>css-loader</code> to look for asset URLs. For example, in <code>&lt;img src=&quot;./logo.png&quot;&gt;</code> and <code>background: url(./logo.png)</code>, <code>&quot;./logo.png&quot;</code> is a relative asset path and will be resolved by Webpack as a module dependency.</p>
<p>Because <code>logo.png</code> is not JavaScript, when treated as a module dependency, we need to use <code>url-loader</code> and <code>file-loader</code> to process it. The boilerplate has already configured these loaders for you, so you basically get features such as filename fingerprinting and conditional base64 inlining for free, while being able to use relative/module paths without worrying about deployment.</p>
<p>Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Webpack-processed static assets inside <code>/src/assets</code>, along side other source files. In fact, you don’t even have to put them all in <code>/src/assets</code>: you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.</p>
<h2 id="Asset-Resolving-Rules"><a href="#Asset-Resolving-Rules" class="headerlink" title="Asset Resolving Rules"></a>Asset Resolving Rules</h2><p>Relative URLs, e.g. <code>./assets/logo.png</code> will be interpreted as a module dependency. They will be replaced with a auto-generated URL based on your Webpack output configuration.</p>
<p>Non-prefixed URLs, e.g. <code>assets/logo.png</code> will be treated the same as the relative URLs and translated into <code>./assets/logo.png</code>.</p>
<p>URLs prefixed with <code>~</code> are treated as a module request, similar to <code>require(&#39;some-module/image.png&#39;)</code>. You need to use this prefix if you want to leverage Webpack’s module resolving configurations. For example if you have a resolve alias for assets, you need to use <code>&lt;img src=&quot;~assets/logo.png&quot;&gt;</code> to ensure that alias is respected.</p>
<p>Root-relative URLs, e.g. <code>/assets/logo.png</code> are not processed at all. This should be placed in <code>src/statics/</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>You can force serving static assets by using <code>src</code> as a Vue property. Instead of <code>src=&quot;statics/path/to/image&quot;</code> use <code>:src=&quot;&#39;statics/path/to/image&#39;&quot;</code>. Please note the usage of single and double quotes.</p>
</blockquote>
<h2 id="Getting-Asset-Paths-in-JavaScript"><a href="#Getting-Asset-Paths-in-JavaScript" class="headerlink" title="Getting Asset Paths in JavaScript"></a>Getting Asset Paths in JavaScript</h2><p>In order for Webpack to return the correct asset paths, you need to use <code>require(&#39;./relative/path/to/file.jpg&#39;)</code>, which will get processed by <code>file-loader</code> and returns the resolved URL. For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  background () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./bgs/'</span> + <span class="keyword">this</span>.id + <span class="string">'.jpg'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the above example will include every image under <code>./bgs/</code> in the final build. This is because Webpack cannot guess which of them will be used at runtime, so it includes them all.</p>
<h2 id="“Real”-Static-Assets"><a href="#“Real”-Static-Assets" class="headerlink" title="“Real” Static Assets"></a>“Real” Static Assets</h2><p>In comparison, files in <code>src/statics/</code> are not processed by Webpack at all: they are directly copied to their final destination as-is, with the same filename. You must reference these files using absolute paths, which is determined by <code>build.publicPath</code> in <code>config.js</code>.</p>
<p>As an example, with the following default values:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  build: &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    publicPath: <span class="string">'/'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Any file placed in <code>src/statics/</code> should be referenced using the absolute URL <code>/statics/[filename]</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Folder Boilerplate]]></title>
      <url>http://quasar-framework.org/guide/app-boilerplate.html</url>
      <content type="html"><![CDATA[<p>Quasar CLI helps you start an App folder with all the boilerplate necessary.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ quasar init &lt;folder name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>The boilerplate created is a fork of the official Webpack + VueJs <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">one</a>. So if you’ve worked with that one you will be totally familiar with Quasar’s.</p>
</blockquote>
<p>If you want to tweak things specific for your App, you first need to understand the created boilerplate’s underlying tools being used.</p>
<p>The boilerplate is targeted towards large, serious projects and assumes you are somewhat familiar with <strong>Webpack</strong> and <strong>vue-loader</strong>. Make sure to also read <a href="http://vue-loader.vuejs.org/index.html" target="_blank" rel="external">vue-loader’s documentation</a> for common workflow recipes.</p>
<h2 id="What’s-Included"><a href="#What’s-Included" class="headerlink" title="What’s Included"></a>What’s Included</h2><p>While developing with Dev Server (<code>$ quasar dev</code>):</p>
<ul>
<li>Webbpack + vue-loader for single file Vue components</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
</ul>
<p>Developing for production (<code>$quasar build</code>):</p>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="external">html-minifier</a></li>
<li>CSS across all components extracted into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="external">cssnano</a></li>
<li>All static assets compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets</li>
</ul>
<p>Unit testing (<code>$ quasar test -u</code>):</p>
<ul>
<li>Supports ES2015 in test files</li>
<li>Supports all webpack loaders</li>
<li>Easy mock injection</li>
</ul>
<p>End-to-end testing with <a href="http://nightwatchjs.org/" target="_blank" rel="external">Nightwatch</a> (<code>$ quasar test -e</code>):</p>
<ul>
<li>Run tests in multiple browsers in parallel</li>
<li>Works with one command out of the box:<ul>
<li>Selenium and chromedriver dependencies automatically handled</li>
<li>Automatically spawns the Selenium driver</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App End-to-end Testing]]></title>
      <url>http://quasar-framework.org/guide/app-end-to-end-testing.html</url>
      <content type="html"><![CDATA[<p>This boilerplate uses <a href="http://nightwatchjs.org" target="_blank" rel="external">Nightwatch.js</a> for e2e tests. Nightwatch.js is a highly integrated e2e test runner built on top of Selenium. This boilerplate comes with Selenium server and chromedriver binaries pre-configured for you, so you don’t have to mess with these yourself.</p>
<p>Let’s take a look at the files in the <code>test/e2e</code> directory:</p>
<ul>
<li><p><code>runner.js</code></p>
<p>A Node.js script that starts the dev server, and then launches Nightwatch to run tests against it. This is the script that will run when you run <code>npm run e2e</code>.</p>
</li>
<li><p><code>nightwatch.conf.js</code></p>
<p>Nightwatch configuration file. See <a href="http://nightwatchjs.org/guide#settings-file" target="_blank" rel="external">Nightwatch’s docs on configuration</a> for more details.</p>
</li>
<li><p><code>custom-assertions/</code></p>
<p>Custom assertions that can be used in Nightwatch tests. See <a href="http://nightwatchjs.org/guide#writing-custom-assertions" target="_blank" rel="external">Nightwatch’s docs on writing custom assertions</a> for more details.</p>
</li>
<li><p><code>specs/</code></p>
<p>You actual tests! See <a href="http://nightwatchjs.org/guide#writing-tests" target="_blank" rel="external">Nightwatch’s docs on writing tests</a> and <a href="http://nightwatchjs.org/api" target="_blank" rel="external">API reference</a> for more details.</p>
</li>
</ul>
<h3 id="Running-Tests-in-More-Browsers"><a href="#Running-Tests-in-More-Browsers" class="headerlink" title="Running Tests in More Browsers"></a>Running Tests in More Browsers</h3><p>To configure which browsers to run the tests in, add an entry under “test_settings” in <a href="https://github.com/vuejs-templates/webpack/blob/master/template/test/e2e/nightwatch.conf.js#L17-L39" target="_blank" rel="external"><code>test/e2e/nightwatch.conf.js</code></a> , and also the <code>--env</code> flag in <a href="https://github.com/vuejs-templates/webpack/blob/master/template/test/e2e/runner.js#L15" target="_blank" rel="external"><code>test/e2e/runner.js</code></a>. If you wish to configure remote testing on services like SauceLabs, you can either make the Nightwatch config conditional based on environment variables, or use a separate config file altogether. Consult <a href="http://nightwatchjs.org/guide#selenium-settings" target="_blank" rel="external">Nightwatch’s docs on Selenium</a> for more details.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Build Commands]]></title>
      <url>http://quasar-framework.org/guide/app-build-commands.html</url>
      <content type="html"><![CDATA[<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><blockquote>
<p>Starts a Node.js local development server. See <a href="/guide/app-api-proxying-for-dev.html">API Proxying For Dev</a> for more details.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># run development server (with default theme)</span></div><div class="line">$ quasar dev</div><div class="line"></div><div class="line"><span class="comment"># run development server with specific theme</span></div><div class="line">$ quasar dev mat</div><div class="line">$ quasar dev ios</div><div class="line"></div><div class="line"><span class="comment"># dev server with QR code</span></div><div class="line"><span class="comment"># scan QR code with Quasar Play app</span></div><div class="line">$ quasar dev -p</div><div class="line">$ quasar dev --play</div><div class="line">$ quasar dev mat --play</div></pre></td></tr></table></figure>
<p>While developing with Dev Server you will have:</p>
<ul>
<li>Ability to develop on phone with <a href="/guide/quasar-play-app.html">Quasar Play</a> App</li>
<li>Webbpack + vue-loader for single file Vue components</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
</ul>
<h4 id="Generate-vue-Components"><a href="#Generate-vue-Components" class="headerlink" title="Generate .vue Components"></a>Generate .vue Components</h4><p>After creating an App folder with the CLI, inside your App you’ll have a folder named <code>/templates</code> that contains templates for: <code>layout</code>, <code>view</code> (page), or a generic Vue <code>component</code>.</p>
<p>You can generate components for your App in your <code>/src</code> folder:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># get available Component templates</div><div class="line">$ quasar new -l</div><div class="line">$ quasar new --list</div><div class="line"></div><div class="line"># generate .vue file from a Component template</div><div class="line">$ quasar new component Hello</div><div class="line"></div><div class="line"># generate .vue file from a template to a subfolder</div><div class="line">$ quasar new layout layout/about/help/Hello</div><div class="line"># the above creates src/components/layout/about/help/Hello.vue</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Add your own component templates. Quasar will be able to handle them.</p>
</blockquote>
<h4 id="Serve-Static-Content-Folder"><a href="#Serve-Static-Content-Folder" class="headerlink" title="Serve Static-Content Folder"></a>Serve Static-Content Folder</h4><p>You are able to create an ad-hoc web server to serve static-content web files from a folder. Browser sessions are automatically refreshed when content changes. User click/scroll can be synchronized.</p>
<p>This command comes in really handy after building your Quasar App for production. The <code>/dist</code> folder contains files that are meant to be served with a webserver. So here you go:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Serve current folder:</span></div><div class="line">$ quasar serve</div><div class="line"></div><div class="line"><span class="comment"># ..or serve a full or relative path</span></div><div class="line">$ quasar serve ./dist</div><div class="line">$ quasar serve /work/quasar-app/dist</div></pre></td></tr></table></figure>
<p>This command does not rely on Quasar Framework. Any folder with any web content can be served.</p>
<h3 id="Production"><a href="#Production" class="headerlink" title="Production"></a>Production</h3><blockquote>
<p>Build assets for production.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># build for production</span></div><div class="line">$ quasar build</div><div class="line"></div><div class="line"><span class="comment"># build for production with specific theme</span></div><div class="line">$ quasar build mat</div><div class="line">$ quasar build ios</div></pre></td></tr></table></figure>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="external">html-minifier</a></li>
<li>CSS across all components extracted into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="external">cssnano</a></li>
<li>All static assets compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets</li>
</ul>
<h3 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h3><blockquote>
<p>Run unit tests in PhantomJS with <a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="external">Karma</a>. See <a href="/guide/app-unit-testing.html">Unit Testing</a> for more details.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar <span class="built_in">test</span> -u</div></pre></td></tr></table></figure>
<ul>
<li>Supports ES2015 in test files</li>
<li>Supports all webpack loaders</li>
<li>Easy mock injection</li>
</ul>
<h3 id="End-to-end-Testing"><a href="#End-to-end-Testing" class="headerlink" title="End-to-end Testing"></a>End-to-end Testing</h3><blockquote>
<p>Run end-to-end tests with <a href="http://nightwatchjs.org/" target="_blank" rel="external">Nightwatch</a>. See <a href="/guide/app-end-to-end-testing.html">End-to-end Testing</a> for more details.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar <span class="built_in">test</span> <span class="_">-e</span></div></pre></td></tr></table></figure>
<ul>
<li>Run tests in multiple browsers in parallel</li>
<li>Works with one command out of the box:<ul>
<li>Selenium and chromedriver dependencies automatically handled</li>
<li>Automatically spawns the Selenium driver</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Linter Configuration]]></title>
      <url>http://quasar-framework.org/guide/app-linter-configuration.html</url>
      <content type="html"><![CDATA[<p>The boilerplate created by Quasar CLI uses ESLint(<a href="http://eslint.org/" target="_blank" rel="external">http://eslint.org/</a>) as the linter, and uses the <a href="https://github.com/feross/standard/blob/master/RULES.md" target="_blank" rel="external">Standard</a> preset with some small customizations.</p>
<p>If you are not happy with the default linting rules, you have several options:</p>
<ol>
<li><p>Overwrite individual rules in .eslintrc.js. For example, you can add the following rule to enforce semicolons instead of omitting them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>]</div></pre></td></tr></table></figure>
<p>Pick a different ESLint preset when generating the project, for example <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="external">eslint-config-airbnb</a>.</p>
</li>
<li><p>Pick “none” for ESLint preset when generating the project and define your own rules. See <a href="http://eslint.org/docs/rules/" target="_blank" rel="external">ESLint documentation</a> for more details.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Pre-Processors]]></title>
      <url>http://quasar-framework.org/guide/app-pre-processors.html</url>
      <content type="html"><![CDATA[<p>The boilerplate created with Quasar CLI has pre-configured CSS extraction for most popular CSS pre-processors including LESS, SASS, Stylus, and PostCSS. To use a pre-processor, all you need to do is installing the appropriate webpack loader for it. For example, to use SASS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install sass-loader node-sass --save-dev</div></pre></td></tr></table></figure>
<p>Note you also need to install node-sass because sass-loader depends on it as a peer dependency.</p>
<h2 id="Using-Pre-Processors-inside-Components"><a href="#Using-Pre-Processors-inside-Components" class="headerlink" title="Using Pre-Processors inside Components"></a>Using Pre-Processors inside Components</h2><p>Once installed, you can use the pre-processors inside your <code>*.vue</code> components using the lang attribute on <code>&lt;style&gt;</code> tags:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></div><div class="line">/* write SASS! */</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="A-note-on-SASS-syntax"><a href="#A-note-on-SASS-syntax" class="headerlink" title="A note on SASS syntax"></a>A note on SASS syntax</h3><ul>
<li>lang=”scss” corresponds to the CSS-superset syntax (with curly braces and semicolones).</li>
<li>lang=”sass” corresponds to the indentation-based syntax.</li>
</ul>
<h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><p>Styles in <code>*.vue</code> files (and all other style files) are piped through PostCSS by default, so you don’t need to use a specific loader for it.</p>
<p>For <code>*.vue</code> files you can simply add PostCSS plugins you want to use in <code>build/webpack.base.conf.js</code> under the vue block, and for the other files under postcss block:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  vue: &#123;</div><div class="line">    postcss: [<span class="comment">/* your plugins */</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  postcss: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>By default, PostCSS is configured to use Autoprefixer.</p>
<p>Also, see <a href="http://vue-loader.vuejs.org/en/features/postcss.html" target="_blank" rel="external">vue-loader’s related documentation</a> for more details.</p>
<h2 id="Standalone-CSS-Files"><a href="#Standalone-CSS-Files" class="headerlink" title="Standalone CSS Files"></a>Standalone CSS Files</h2><p>To ensure consistent extraction and processing it is recommended that you import global, standalone style files from your root component, for example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./styles/global.less"</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Note you should probably only do this for the styles written by yourself for your application. For existing libraries e.g. Bootstrap or Semantic UI, you can place them inside <code>src/statics/</code> and reference them directly in index.html. This avoids extra build time and also is better for browser caching. (See <a href="/guide/app-handling-static-assets.html">Handling Static Assets</a>).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Prerendering for SEO]]></title>
      <url>http://quasar-framework.org/guide/app-prerendering-for-seo.html</url>
      <content type="html"><![CDATA[<p>If you want to prerender routes that will not significantly change once pushed to production, use this Webpack plugin: <a href="https://www.npmjs.com/package/prerender-spa-plugin" target="_blank" rel="external">prerender-spa-plugin</a>, which has been tested for use with Vue. For pages that <em>do</em> frequently change, <a href="https://prerender.io/" target="_blank" rel="external">Prerender.io</a> and <a href="https://www.netlify.com/pricing" target="_blank" rel="external">Netlify</a> both offer plans for regularly re-prerendering your content for search engines.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Structure]]></title>
      <url>http://quasar-framework.org/guide/app-structure.html</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── build/                        <span class="comment"># webpack config files</span></div><div class="line">│   └── ...</div><div class="line">├── config/                       <span class="comment"># main project config</span></div><div class="line">│   ├── index.js</div><div class="line">│   └── ...</div><div class="line">├── cordova/                      <span class="comment"># where cordova boilerplate goes if you wrap app</span></div><div class="line">├── dist/                         <span class="comment"># where production build will go</span></div><div class="line">├── src/</div><div class="line">│   ├── assets/                   <span class="comment"># dynamic assets (processed by webpack)</span></div><div class="line">│   ├── components/               <span class="comment"># .vue components</span></div><div class="line">│   ├── statics/                  <span class="comment"># pure static assets (directly copied)</span></div><div class="line">│   ├── themes/                   <span class="comment"># themes entry points for you to tweak</span></div><div class="line">│   │   ├── app.ios.styl</div><div class="line">│   │   ├── app.mat.styl</div><div class="line">│   │   └── app.variables.styl</div><div class="line">│   ├── app.js                    <span class="comment"># app entry file</span></div><div class="line">│   ├── index.html                <span class="comment"># boilerplate for webpack to inject deps</span></div><div class="line">│   └── router.js                 <span class="comment"># app router logic</span></div><div class="line">├── templates/                    <span class="comment"># templates for quickly generating components</span></div><div class="line">│   ├── component.vue             <span class="comment"># generic .vue component file</span></div><div class="line">│   ├── layout.vue                <span class="comment"># generic .vue for a Layout</span></div><div class="line">│   └── view.vue                  <span class="comment"># generic .vue for a Page</span></div><div class="line">├── <span class="built_in">test</span></div><div class="line">│   ├── e2e                       <span class="comment"># e2e testing</span></div><div class="line">│   │   ├── custom-assertions/    <span class="comment"># e2e custom assertions</span></div><div class="line">│   │   ├── specs/                <span class="comment"># test spec files</span></div><div class="line">│   │   ├── nightwatch.conf.js    <span class="comment"># test runner config file</span></div><div class="line">│   │   └── runner.js             <span class="comment"># test runner script</span></div><div class="line">│   └── unit                      <span class="comment"># unit testing</span></div><div class="line">│       ├── coverage/             <span class="comment"># where coverage report will go</span></div><div class="line">│       ├── specs/                <span class="comment"># unit test spec files</span></div><div class="line">│       ├── .eslintrc             <span class="comment"># eslint for test files</span></div><div class="line">│       ├── index.js              <span class="comment"># test build entry file</span></div><div class="line">│       └── karma.conf.js         <span class="comment"># test runner config file</span></div><div class="line">├── .babelrc                      <span class="comment"># babel config</span></div><div class="line">├── .editorconfig                 <span class="comment"># editor config</span></div><div class="line">├── .eslintignore                 <span class="comment"># ESlint ignore paths</span></div><div class="line">├── .eslintrc.js                  <span class="comment"># ESlint config</span></div><div class="line">├── .gitignore                    <span class="comment"># GIT ignore paths</span></div><div class="line">├── package.json                  <span class="comment"># npm scripts and dependencies</span></div><div class="line">├── README.md                     <span class="comment"># readme for your App</span></div><div class="line">└── .stylintrc                    <span class="comment"># Stylus lint config</span></div></pre></td></tr></table></figure>
<h3 id="build"><a href="#build" class="headerlink" title="build/"></a>build/</h3><p>This directory holds the actual configurations for both the development server and the production webpack build. Normally you don’t need to touch these files unless you want to customize Webpack loaders, in which case you should probably look at <code>build/webpack.base.conf.js</code>.</p>
<h3 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h3><p>This is the main configuration file that exposes some of the most common configuration options for the build setup.</p>
<h3 id="src"><a href="#src" class="headerlink" title="src/"></a>src/</h3><p>This is where most of your application code will live in. How to structure everything inside this directory is largely up to you; if you are using Vuex, you can consult the <a href="http://vuex.vuejs.org/en/structure.html" target="_blank" rel="external">recommendations for Vuex applications</a>.</p>
<h3 id="src-index-html"><a href="#src-index-html" class="headerlink" title="src/index.html"></a>src/index.html</h3><p>This is the <strong>template</strong> index.html for our single page application. During development and builds, Webpack will generate assets, and the URLs for those generated assets will automatically injected into this template to render the final HTML.</p>
<h3 id="src-statics"><a href="#src-statics" class="headerlink" title="src/statics/"></a>src/statics/</h3><p>This directory is an escape hatch for static assets that you do not want to process with Webpack. They will be directly copied into the same directory where webpack-built assets are generated.</p>
<p>See <a href="/guide/app-handling-static-assets.html">Handling Static Assets</a> for more details.</p>
<h3 id="templates"><a href="#templates" class="headerlink" title="templates/"></a>templates/</h3><p>Component templates that you can use along Quasar CLI to generate <code>*.vue</code> files for your App. See <a href="/guide/quasar-cli.html#Generating-Components">Generating Components</a>.</p>
<h3 id="test-unit"><a href="#test-unit" class="headerlink" title="test/unit/"></a>test/unit/</h3><p>Contains unit test related files. See <a href="/guide/app-unit-testing.html">Unit Testing</a> for more details.</p>
<h3 id="test-e2e"><a href="#test-e2e" class="headerlink" title="test/e2e/"></a>test/e2e/</h3><p>Contains e2e test related files. See <a href="/guide/app-end-to-end-testing.html">End-to-end Testing</a> for more details.</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>The NPM package meta file that contains all the build dependencies and scripts (including build scripts used by Quasar CLI).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Unit Testing]]></title>
      <url>http://quasar-framework.org/guide/app-unit-testing.html</url>
      <content type="html"><![CDATA[<p>An overview of the tools used by the boilerplate created with Quasar CLI for unit testing:</p>
<ul>
<li><a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="external">Karma</a>: the test runner that launches browsers, runs the tests and reports the results to us.</li>
<li><a href="https://github.com/webpack/karma-webpack" target="_blank" rel="external">karma-webpack</a>: the plugin for Karma that bundles our tests using Webpack.</li>
<li><a href="https://mochajs.org/" target="_blank" rel="external">Mocha</a>: the test framework that we write test specs with.</li>
<li><a href="http://chaijs.com/" target="_blank" rel="external">Chai</a>: test assertion library that provides better assertion syntax.</li>
<li><a href="http://sinonjs.org/" target="_blank" rel="external">Sinon</a>: test utility library that provides spies, stubs and mocks.</li>
</ul>
<p>Chai and Sinon are integrated using <a href="https://github.com/kmees/karma-sinon-chai" target="_blank" rel="external">karma-sinon-chai</a>, so all Chai interfaces (<code>should</code>, <code>expect</code>, <code>assert</code>) and <code>sinon</code> are globally available in test files.</p>
<p>And the files:</p>
<ul>
<li><p><code>index.js</code></p>
<p>This the entry file used by <code>karma-webpack</code> to bundle all the test code and source code (for coverage purposes). You can ignore it for the most part.</p>
</li>
<li><p><code>specs/</code></p>
<p>This directory is where you write your actual tests. You can use full ES2015 and all supported Webpack loaders in your tests.</p>
</li>
<li><p><code>karma.conf.js</code></p>
<p>This is the Karma configuration file. See <a href="http://karma-runner.github.io/0.13/index.html" target="_blank" rel="external">Karma docs</a> for more details.</p>
</li>
</ul>
<h2 id="Running-Tests-in-More-Browsers"><a href="#Running-Tests-in-More-Browsers" class="headerlink" title="Running Tests in More Browsers"></a>Running Tests in More Browsers</h2><p>You can run the tests in multiple real browsers by installing more <a href="http://karma-runner.github.io/0.13/config/browsers.html" target="_blank" rel="external">karma launchers</a> and adjusting the <code>browsers</code> field in <code>test/unit/karma.conf.js</code>.</p>
<h2 id="Mocking-Dependencies"><a href="#Mocking-Dependencies" class="headerlink" title="Mocking Dependencies"></a>Mocking Dependencies</h2><p>This boilerplate comes with <a href="https://github.com/plasticine/inject-loader" target="_blank" rel="external">inject-loader</a> installed by default. For usage with <code>*.vue</code> components, see <a href="http://vue-loader.vuejs.org/en/workflow/testing-with-mocks.html" target="_blank" rel="external">vue-loader docs on testing with mocks</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Contributing Guide]]></title>
      <url>http://quasar-framework.org/guide/contributing.html</url>
      <content type="html"><![CDATA[<p>I’m really excited if you are interested in contributing to Quasar Framework. There are <a href="https://github.com/rstoenescu/quasar-framework/issues?q=is%3Aissue+is%3Aopen+label%3Aproposal" target="_blank" rel="external">lots of features waiting</a> for someone to write them. Check <a href="https://github.com/rstoenescu/quasar-framework" target="_blank" rel="external">Github</a> or contact <a href="https://github.com/rstoenescu" target="_blank" rel="external">Razvan Stoenescu</a> through email.</p>
<p>Before submitting your contribution though, please make sure to take a moment and read through the following guidelines.</p>
<p>You can also help with the documentation if you catch a mistake or want to add a few lines to a page or write new pages. Use the link at the end of each page of this website (specifically the <em>Suggest an edit on Github</em>).</p>
<blockquote>
<p><i class="fa fa-usd" style="font-size: 2rem; float: left; margin-right: 10px;"></i> Finally, if you want, you can leave a buck for coffee from time to time. Quasar needs some financial backing to evolve. <a href="/support-quasar-framework.html">Read more here</a>.</p>
</blockquote>
<h2 id="Github-Repositories"><a href="#Github-Repositories" class="headerlink" title="Github Repositories"></a>Github Repositories</h2><ul>
<li><a href="https://github.com/rstoenescu/quasar-framework" target="_blank" rel="external">Quasar Framework</a></li>
<li><a href="https://github.com/rstoenescu/quasar-cli" target="_blank" rel="external">Quasar CLI</a></li>
<li><a href="https://github.com/rstoenescu/quasar-templates" target="_blank" rel="external">Quasar App Templates</a></li>
</ul>
<h2 id="Issue-Reporting-Guidelines"><a href="#Issue-Reporting-Guidelines" class="headerlink" title="Issue Reporting Guidelines"></a>Issue Reporting Guidelines</h2><ul>
<li><p>The issue list of the repository is <strong>exclusively</strong> for bug reports and feature requests.</p>
</li>
<li><p>Try to search for your issue, it may have already been fixed in the development branch or it may have a resolution.</p>
</li>
<li><p>Check if the issue is reproducible with the latest stable version of Quasar. If you are using a pre-release, please indicate the specific version you are using.</p>
</li>
<li><p>It is <strong>required</strong> that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled “need repro” receives no further input from the issue author for more than 5 days, it will be closed.</p>
</li>
<li><p>If your issue is resolved but still open, don’t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.</p>
</li>
</ul>
<h2 id="Pull-Request-Guidelines"><a href="#Pull-Request-Guidelines" class="headerlink" title="Pull Request Guidelines"></a>Pull Request Guidelines</h2><ul>
<li><p>Checkout a topic branch from <code>dev</code> and merge back against <code>dev</code>.</p>
</li>
<li><p>Work in the <code>src</code> folder and <strong>DO NOT</strong> checkin <code>/dist</code> in the commits or any other file or folder described in <code>.gitignore</code>.</p>
</li>
<li><p>Squash the commit if there are too many small ones.</p>
</li>
<li><p>Follow the <a href="#Code-Style">code style</a> in next section.</p>
</li>
<li><p>Make sure that running “npm test” passes all tests.</p>
</li>
<li><p>If adding new feature, provide convincing reason to add this feature. Ideally you should open a suggestion issue first and have it greenlighted before working on it.</p>
</li>
<li><p>If fixing a bug:</p>
<ul>
<li>Provide detailed description of the bug in the PR. Live demo preferred. Use <a href="https://jsfiddle.net/" target="_blank" rel="external">jsFiddle</a>, <a href="https://plnkr.co/" target="_blank" rel="external">Plunker</a>, or <a href="http://jsbin.com/" target="_blank" rel="external">JsBin</a> with standalone Quasar version.</li>
<li>Add appropriate test coverage if applicable.</li>
</ul>
</li>
</ul>
<h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><ul>
<li>Follow <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li>2 spaces indentation (<em>NO</em> tabs).</li>
<li>Stroustrup brace style.</li>
<li><p>Multiple var declarations like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span></div><div class="line">  first,</div><div class="line">  second,</div><div class="line">  ...,</div><div class="line">  last</div></pre></td></tr></table></figure>
</li>
<li><p>Omit ending semi-colons when not necessary.</p>
</li>
<li>Return early.</li>
<li><p>Notice the spaces when declaring a <code>function</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params">param1, param2, ..., paramN</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>1 space between arguments, but not between parentheses.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (conditions) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (a === <span class="number">2</span> &amp;&amp; b === <span class="number">3</span>) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When in doubt, read the source code.</p>
</li>
</ul>
<h2 id="Development-Setup"><a href="#Development-Setup" class="headerlink" title="Development Setup"></a>Development Setup</h2><p>You will need <a href="http://nodejs.org" target="_blank" rel="external">Node.js</a> along NPM. Read <code>package.json</code> and take notice of the scripts you can use.</p>
<h2 id="Commit-Message-Format"><a href="#Commit-Message-Format" class="headerlink" title="Commit Message Format"></a>Commit Message Format</h2><p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>.  The header has a special<br>format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class="line">&lt;BLANK LINE&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;BLANK LINE&gt;</div><div class="line">&lt;footer&gt;</div></pre></td></tr></table></figure>
<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>
<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier<br>to read on GitHub as well as in various git tools.</p>
<h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>
<h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p>Must be one of the following:</p>
<ul>
<li><strong>feat</strong>: A new feature</li>
<li><strong>fix</strong>: A bug fix</li>
<li><strong>docs</strong>: Documentation only changes</li>
<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing<br>semi-colons, etc)</li>
<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>
<li><strong>perf</strong>: A code change that improves performance</li>
<li><strong>test</strong>: Adding missing tests</li>
<li><strong>chore</strong>: Changes to the build process or auxiliary tools and libraries such as documentation<br>generation</li>
</ul>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>The scope could be anything specifying place of the commit change. For example use modules as scope name: <code>xhr</code>, <code>router</code>, <code>view</code> etc…</p>
<h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><p>The subject contains succinct description of the change:</p>
<ul>
<li>use the imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul>
<h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Just as in the <strong>subject</strong>, use the imperative, present tense: “change” not “changed” nor “changes”.<br>The body should include the motivation for the change and contrast this with previous behavior.</p>
<h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to<br>reference GitHub issues that this commit <strong>Closes</strong>.</p>
<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sharing State Between Components]]></title>
      <url>http://quasar-framework.org/guide/components-sharing-state.html</url>
      <content type="html"><![CDATA[<p>In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instances simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sourceOfTruth = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Extending this idea further, we would arrive at the <strong>store pattern</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> store = &#123;</div><div class="line">  state: &#123;</div><div class="line">    message: <span class="string">'Hello!'</span></div><div class="line">  &#125;,</div><div class="line">  actionA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action A triggered'</span></div><div class="line">  &#125;,</div><div class="line">  actionB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action B triggered'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Notice we are putting all actions that mutate the store’s state inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen to the state, and how are they triggered. Each component can still own and manage its private state.</p>
<p><img src="/images/vue-state-management.png" alt="Vue State Management"></p>
<p>One thing to take note is that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for the mutations to be observed.</p>
<p>If we enforce a convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we’ve essentially arrived at the <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> architecture. The benefits of this convention is we can record all state mutations happening to the store, and on top of that we can implement advanced debugging helpers such as mutation logs, snapshots, history re-rolls etc.</p>
<p>The Flux architecture is commonly used in React applications. Turns out the core idea behind Flux can be quite simply achieved in Vue.js, thanks to the unobtrusive reactivity system. Do note what we demonstrated here is just an example to introduce the concept - you may not need it at all for simple scenarios, and you should adapt the pattern to fit the real needs of your application.</p>
<h2 id="Best-Solution-Vuex"><a href="#Best-Solution-Vuex" class="headerlink" title="Best Solution: Vuex"></a>Best Solution: Vuex</h2><p>Vuex (see documentation <a href="http://vuex.vuejs.org/" target="_blank" rel="external">here</a> and Github page <a href="https://github.com/vuejs/vuex" target="_blank" rel="external">here</a>) is an application architecture for centralized state management in Vue.js applications. It is inspired by Flux and Redux, but with simplified concepts and an implementation that is designed specifically to take advantage of Vue.js’ reactivity system.</p>
<blockquote>
<p>Vuex is not supplied by default with Quasar Framework. NPM install it and import it from <code>src/app.js</code> in order to use it.</p>
</blockquote>
<h3 id="Why-using-Vuex"><a href="#Why-using-Vuex" class="headerlink" title="Why using Vuex"></a>Why using Vuex</h3><p>If your app is simple enough, you probably don’t need Vuex. Don’t apply it prematurely. But if you are building a medium-to-large-scale SPA, chances are you have run into situations that make you think about how to better structure things outside of your Vue components. This is where Vuex comes into play.</p>
<p>When using Vue.js alone, we often tend to store the state “inside” our components. That is, each component owns a piece of our application state, and as a result the state is scattered all over the place. However, sometimes a piece of state needs to be shared by multiple components. A commonly-seen practice is letting one component “send” some state to other components using the custom event system. The problem with this pattern is that the event flow inside large component trees can quickly become complex, and it’s often difficult to reason about when something goes wrong.</p>
<p>To better deal with shared state in large applications, we need to differentiate between component local state and application level state. Application state does not belong to a specific component, but our components can still observe it for reactive DOM updates. By centralizing its management in a single place, we no longer need to pass events around, because everything that affects more than one component should belong there. In addition, this allows us to record and inspect every mutation for easier understanding of state changes, and even implement fancy stuff like time-travel debugging.</p>
<p><img src="/images/vuex.png" alt="Vuex"></p>
<p>Vuex also enforces some opinions on how to split state management logic into different places, but still allows enough flexibility for the actual code structure.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cordova App Wrapper]]></title>
      <url>http://quasar-framework.org/guide/cordova-wrapper.html</url>
      <content type="html"><![CDATA[<p>You can use Cordova to wrap your Quasar App into a native mobile App. We’ll be using Quasar CLI to manage this.</p>
<p>First install Cordova globally on your machine:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g cordova</div></pre></td></tr></table></figure></p>
<p>Then make sure you have the platform SDK installed on your machine, like <a href="https://developer.android.com/studio/index.html#download" target="_blank" rel="external">Android SDK</a>.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ cordova requirements</div></pre></td></tr></table></figure></p>
<h2 id="Wrap-your-App"><a href="#Wrap-your-App" class="headerlink" title="Wrap your App"></a>Wrap your App</h2><p>Now let’s create the Wrapper for your App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar wrap cordova</div></pre></td></tr></table></figure></p>
<p>This command generates a subfolder inside your App named <code>/cordova</code>. It contains the assets of a Cordova project mapped to your Quasar App’s production ready code (<code>/dist</code>).</p>
<p>It will ask you if you want to install the Crosswalk plugin which applies to Android apps only. Crosswalk ensures that your App will have the same browser runtime (which is also the latest and greatest) on all Android platforms. The downside is that it will also make your native App package file bigger. Read more <a href="https://crosswalk-project.org/documentation/about.html" target="_blank" rel="external">here</a> about Crosswalk.</p>
<blockquote>
<p><strong>It is highly recommended that you opt for the Crosswalk plugin to be installed.</strong> Otherwise your App might experience unexpected behavior on older platforms.</p>
</blockquote>
<p>If however you don’t wrap your App with Crosswalk from the CLI you can add it later with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> cordova</div><div class="line">$ cordova plugin add cordova-plugin-crosswalk-webview</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE for Windows Developers</strong><br>It is possible that you get <code>Error: EPERM: operation not permitted, symlink &#39;..\dist&#39;</code>, in which case you need to add privileges for your user to be able to create symlinks. Read <a href="http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7" target="_blank" rel="external">here</a>.</p>
</blockquote>
<p>After making the wrapper and making sure you have the platform’s SDK installed on your machine, you need to add at least a platform to your App, like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> cordova</div><div class="line">$ cordova platform add android</div><div class="line"></div><div class="line"><span class="comment"># need to be on running a Mac OS for iOS:</span></div><div class="line">$ cordova platform add ios</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Remember all Cordova commands must be issued from within the <code>/cordova</code> subfolder.</p>
</blockquote>
<h2 id="Cordova-Plugins"><a href="#Cordova-Plugins" class="headerlink" title="Cordova Plugins"></a>Cordova Plugins</h2><p>There are lots of Cordova plugins available which enables to you access the Camera, NFC, Battery Status, Contacts, Geolocation, Device motion and orientation and many more.</p>
<p>Check out Cordova’s website. Example for Battery Status: <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-battery-status/index.html" target="_blank" rel="external">here</a>.</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="Browser-Simulator"><a href="#Browser-Simulator" class="headerlink" title="Browser Simulator"></a>Browser Simulator</h3><p>Use Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an <em>emulator</em> and not the real deal.</p>
<p><img src="/images/browser-simulator.png" alt="Google Chrome emulator" title="Google Chrome emulator"></p>
<h3 id="Remote-Debugging"><a href="#Remote-Debugging" class="headerlink" title="Remote Debugging"></a>Remote Debugging</h3><p>If you are debugging Android Apps, you can use Google Chrome <a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging?hl=en" target="_blank" rel="external">Remote Debugging</a> through a USB cable attached to your Android phone. Combine this with <a href="/guide/quasar-play-app.html">Quasar Play</a> App and you get an excellent debugging environment.</p>
<blockquote>
<p>This way you have Chrome Dev Tools directly for your App running on the phone. Inspect elements, check console output, and so on and so forth.</p>
</blockquote>
<p><img src="/images/remote-debug.png" alt="Android Remote Debugging" title="Android Remote Debugging"><br><img src="/images/remote-debug-2.png" alt="Android Remote Debugging" title="Android Remote Debugging"></p>
<h3 id="Setting-Up-Device-on-Linux"><a href="#Setting-Up-Device-on-Linux" class="headerlink" title="Setting Up Device on Linux"></a>Setting Up Device on Linux</h3><p>You may bump into <code>?????? no permissions</code> problem when trying to run your App directly on an Android phone/tablet.</p>
<p>Here’s how you fix this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># create the .rules file and insert the content</span></div><div class="line"><span class="comment"># from below this example</span></div><div class="line">sudo vim /etc/udev/rules.d/51-android.rules</div><div class="line">sudo chmod 644   /etc/udev/rules.d/51-android.rules</div><div class="line">sudo chown root. /etc/udev/rules.d/51-android.rules</div><div class="line">sudo service udev restart</div><div class="line">sudo killall adb</div></pre></td></tr></table></figure>
<p>The content for <code>51-android.rules</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0e79&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0502&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0b05&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;413c&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0489&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;091e&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;18d1&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;12d1&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;24e3&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2116&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0482&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;17ef&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1004&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;22b8&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0409&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2080&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0955&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2257&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;10a9&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1d4d&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0471&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04da&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;05c6&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1f53&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04e8&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04dd&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0fce&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0930&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;19d2&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1bbb&quot;, MODE=&quot;0666&quot;</div></pre></td></tr></table></figure></p>
<p>Now running <code>adb devices</code> should discover your device.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Theming]]></title>
      <url>http://quasar-framework.org/guide/quasar-theming.html</url>
      <content type="html"><![CDATA[<p>Every website or mobile app needs a specific design to differentiate from the competition. This is where Quasar Framework excels, because:</p>
<ol>
<li>It offers two themes out of the box: Material and iOS</li>
<li>The two themes can be customized/extended easily from the App code. You can change the primary color, the secondary color, and most of the CSS. Customizing does not mean having multiple CSS files, one overriding properties from the other. No. You’ll have one stylesheet with each CSS property declared only once.</li>
<li>You can create your own theme from scratch.</li>
<li><strong>All themes include a CSS reset (following latest standards) to eliminate quirks between platforms</strong>.</li>
</ol>
<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. After reading this intro you can go to <a href="/api/css-stylus-variables.html">API &gt; Stylus Variables</a> for a list of all Stylus variables that you can override so you can theme your App.</p>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>Please note the following:</p>
<ol>
<li><p>When building your App or starting the dev server you can only use one theme at a time. You can however start two dev servers on different ports, each server with a theme. This will obviously allow you to see the App with both themes simultaneously.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev mat</div><div class="line">$ PORT=3000 quasar dev ios</div></pre></td></tr></table></figure>
</li>
<li><p>By default your App will include the compiled Quasar themes (<code>.css</code> files instead of <code>.styl</code> from <code>node_modules/quasar-framework</code>). The reason is the build speed. This is how your <code>src/app.js</code> file looks:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  If overriding Quasar style, leave uncommented</div><div class="line">  just the first line.</div><div class="line"></div><div class="line">  If NOT overriding Quasar style, leave uncommented</div><div class="line">  just the second line. This option make compiling faster.</div><div class="line"></div><div class="line">  WARNING!</div><div class="line">  Leave just one of the two require() calls below</div><div class="line">  uncommented.</div><div class="line"> */</div><div class="line"><span class="comment">// require('./themes/app.' + __THEME + '.styl')</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'quasar/dist/quasar.'</span> + __THEME + <span class="string">'.css'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>If you want to override Quasar variables, comment the second line containing <code>.css</code> and uncomment the first one ending with <code>.styl</code>. The build speed will be slower. <strong>DO NOT</strong> leave both lines uncommented.</p>
</blockquote>
</li>
</ol>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><code>src/css</code> folder from a Quasar App will contain the following files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">src</div><div class="line">└── themes</div><div class="line">    ├── app.ios.styl</div><div class="line">    ├── app.mat.styl</div><div class="line">    └── app.variables.styl</div></pre></td></tr></table></figure>
<p>You will find more documentation and steps in these files.</p>
<table>
<thead>
<tr>
<th>File</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app.ios.styl</td>
<td>iOS entry point. It includes app.variables.styl and Quasar iOS theme.</td>
</tr>
<tr>
<td>app.mat.styl</td>
<td>Material Design entry point. It includes app.variables.styl and Quasar Material theme.</td>
</tr>
<tr>
<td>app.variables.styl</td>
<td>(Common code for all themes) Place to override Stylus variables which define the primary color, the secondary color, the list border radius and so many properties.. You can easily make good use of Quasar Themes and customize your App so it will have a distinct overall design.</td>
</tr>
</tbody>
</table>
<p>The Build System expects just <code>app.ios.styl</code> and <code>app.mat.styl</code> to exist, so feel free to dig in into the <code>src/themes</code> folder to understand how and what is rendered by Stylus and change whatever you like and best suits your needs. Just make sure you have those two files there.</p>
<h2 id="Theming-Your-App"><a href="#Theming-Your-App" class="headerlink" title="Theming Your App"></a>Theming Your App</h2><p>You can easily theme your App by adding Stylus variable declarations in <code>src/themes/app.variables.styl</code>.</p>
<p>To customize the look and feel of this app, you can override the Stylus variables found in Quasar’s source Stylus files. Setting variables before Quasar’s Stylus will use these variables rather than Quasar’s default Stylus variable values. Stylus variables specific to the themes belong in either the <code>app.ios.styl</code> or <code>app.mat.styl</code> files.</p>
<p>For example, change the primary color of your App:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="variable">$primary</span> = <span class="number">#00ffff</span></div></pre></td></tr></table></figure>
<h3 id="Platform-Specific-Styles"><a href="#Platform-Specific-Styles" class="headerlink" title="Platform Specific Styles"></a>Platform Specific Styles</h3><p>The platform in which your App runs is automatically detected and the <code>&lt;body&gt;</code> tag gets following classes:</p>
<table>
<thead>
<tr>
<th>Body Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mat</code></td>
<td>Default style; <strong>Material Design theme</strong>; Android platform</td>
</tr>
<tr>
<td><code>ios</code></td>
<td>Apple platform; <strong>iOS theme</strong></td>
</tr>
<tr>
<td><code>desktop</code></td>
<td>App runs on a desktop browser</td>
</tr>
<tr>
<td><code>mobile</code></td>
<td>App runs on a mobile browser</td>
</tr>
<tr>
<td><code>cordova</code></td>
<td>Standalone Mobile App wrapped with Apache Cordova</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>Touch capable platform</td>
</tr>
<tr>
<td><code>no-touch</code></td>
<td>Touch capability not present</td>
</tr>
<tr>
<td><code>within-iframe</code></td>
<td>For when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>So you can write specific Stylus code for your App like this:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span></div><div class="line">  &amp;<span class="selector-class">.cordova</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$primary</span></div><div class="line">  &amp;<span class="selector-class">.desktop</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$secondary</span></div><div class="line">  &amp;<span class="selector-class">.mobile</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$tertiary</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Theme Specific CSS</strong><br>Regarding themes, if you take a look at the Structure of Stylus files above, you’ll notice there are two files (<code>app.ios.styl</code> and <code>app.mat.styl</code>). Inject code for the specific theme there after you get the hang of how things stand with those files. It’s best to not clog all themes generated CSS with code specific to a certain theme only.</p>
<p><strong>All your Stylus variables need to be declared before the inclusion of Quasar Framework theme files (from NPM).</strong> If you follow the default structure of files (and be care-free) then inject variable overrides in <em>src/themes/app.variables.styl</em>.</p>
</blockquote>
<h2 id="Stylus-Variables"><a href="#Stylus-Variables" class="headerlink" title="Stylus Variables"></a>Stylus Variables</h2><p>Read a complete list of all <a href="/api/css-stylus-variables.html">Stylus variables</a> that you can override.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling Back Button]]></title>
      <url>http://quasar-framework.org/guide/handling-back-button.html</url>
      <content type="html"><![CDATA[<p>When writing same code for building a mobile App and a website simultaneously, it’s important to know how to handle the “Back” button. More specifically, how to manage buttons on your layout/page that should make your App “go back” to the previous screen.</p>
<blockquote>
<p>It would probably be better if you read and understand how <a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a> works first.</p>
</blockquote>
<h2 id="Navigation-Scenario"><a href="#Navigation-Scenario" class="headerlink" title="Navigation Scenario"></a>Navigation Scenario</h2><p>Analyze this situation: We have an App with two pages (so two routes): a login one (route “/“) and another one with a list of items on multiple layout tabs (let’s call it “List page” from now on; each tab has a route like “/list/shoes”, “/list/hats”). Login page redirects to List page and List page has a “Logout” button which redirects the user to the Login page.</p>
<p>How would you handle this situation? Normally, you’d write code like below for Login and Logout button (won’t go into details of handling the login information and communicating with a server as this is outside of our point here):<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Login button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> <span class="attr">v-link</span>=<span class="string">"/list"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> <span class="attr">v-link</span>=<span class="string">"/"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Now you build your App and install it on a phone. You open up the App, hit login then logout. Then the phone’s back button. What you most likely want is for your App to exit at this point… but it doesn’t! It goes to “/list” route instead.. It’s kind of obvious why. Web history builds up as you hit the buttons:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Start App</div><div class="line">--&gt; window.history.length is 1</div><div class="line"></div><div class="line"># Hit Login button</div><div class="line">--&gt; window.history.length is 2</div><div class="line"></div><div class="line"># Hit Logout button</div><div class="line">--&gt; window.history.length is 3!</div></pre></td></tr></table></figure></p>
<p>What you’d like instead is when you hit the Logout button the <code>window.history.length</code> to be 1 again. Quasar can handle this automatically for you. Read about the <code>v-go-back</code> Vue directive.</p>
<h2 id="Directive-“v-go-back”"><a href="#Directive-“v-go-back”" class="headerlink" title="Directive “v-go-back”"></a>Directive “v-go-back”</h2><p>Let’s rewrite the Logout button to act as we actually want it to work, which is to make <code>window.history.length</code> be 1 again:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> <span class="attr">v-go-back</span>=<span class="string">"/"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>This directive determines if the Platform is Cordova, and if so, it performs a <code>window.history.back()</code> call instead of a <code>$router.go(&#39;/&#39;)</code>.</p>
<h2 id="Quirks"><a href="#Quirks" class="headerlink" title="Quirks"></a>Quirks</h2><p>Now you think everything will work smoothly, but you must be careful on how you build up window history. Remember we started by says that the List page has a layout with multiple tabs, each one with its own route (“/list/shoes”, “/list/hats”).</p>
<p>If we’d use <code>v-link=&#39;/list/shoes&#39;</code> and <code>v-link=&#39;/list/hats&#39;</code> on your tabs, then window history will build up when switching between the tabs, simply because Vue Router pushes routes to the history. What you’d like instead is for your window history to stay the same, even if routes change. Fortunately, Vue Router comes to the rescue with the <code>replace</code> property.</p>
<p>So, you should rewrite <code>v-link=&#39;...route...&#39;</code> with <code>v-link=&#39;{path: &#39;...route...&#39;, replace: true}&#39;</code>. This will replace the current route in window history rather than pushing it.</p>
<blockquote>
<p>Always <strong>think</strong> on how you redirect your App to a new route, depending on what you want to achieve. Think if you really want to push a new route to window history or you want to “replace” the current route. Otherwise the phone/tablet “Back” button won’t work quite as expected and instead of finally exiting the App it will make you go through all routes in the reverse order they were visited. So when you hit back and go to Login page you’d expect another back to make the App exit, but it might make your App go to one of the List tabs, depending on how user navigation history.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Getting Started]]></title>
      <url>http://quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p>Quasar CLI allows you to start new projects in no time by generating a starter boilerplate filled with everything that you need. It also does most of the heavy-lifting so you don’t have to take care of the redundant tasks. You must install it to generate and manage a Quasar App.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g quasar-cli</div></pre></td></tr></table></figure>
<h2 id="Create-your-first-App"><a href="#Create-your-first-App" class="headerlink" title="Create your first App"></a>Create your first App</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># create starter boilerplate folder</span></div><div class="line">$ quasar init &lt;folder name&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder name&gt;</div><div class="line"></div><div class="line"><span class="comment"># npm install deps</span></div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>Start a development server of your first App, equipped with hot reload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev [theme]</div><div class="line"></div><div class="line"><span class="comment"># start with 'mat' theme</span></div><div class="line">$ quasar dev</div><div class="line"><span class="comment"># or</span></div><div class="line">$ quasar dev mat</div><div class="line"></div><div class="line"><span class="comment"># start with 'ios' theme</span></div><div class="line">$ quasar dev ios</div></pre></td></tr></table></figure>
<p>Create <code>*.vue</code> components from ready to use component templates folder (<code>/templates</code>):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar new [<span class="built_in">type</span>] &lt;name of your component with optional subfolder&gt;</div></pre></td></tr></table></figure>
<p>Type can be <code>layout</code>, <code>view</code> (page content), <code>component</code> (generic <code>*.vue</code> component).<br>You can even make your own component templates and use CLI to generate them in your App.</p>
<h2 id="Quasar-Play-App"><a href="#Quasar-Play-App" class="headerlink" title="Quasar Play App"></a>Quasar Play App</h2><p>If you want to <strong>develop mobile Apps with hot reload directly on your mobile phone</strong>, install <a href="/guide/quasar-play-app.html">Quasar Play</a> app, currently only on Google Play Store.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev --play</div></pre></td></tr></table></figure>
<p>This generates a QR code that you can scan with Quasar Play app and you’ll have your App on the phone as long as the development server is running.</p>
<h2 id="Things-to-read-about"><a href="#Things-to-read-about" class="headerlink" title="Things to read about"></a>Things to read about</h2><p>You should be familiar with these awesome tools/technologies:</p>
<ul>
<li><a href="http://www.2ality.com/2015/08/getting-started-es6.html" target="_blank" rel="external">ES6 Javascript</a></li>
<li><a href="http://vuejs.org" target="_blank" rel="external">Vue Js</a> and <a href="http://npmjs.org" target="_blank" rel="external">NPM</a> ecosystems</li>
<li><a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a>, <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="external">Vue Touch</a>, <a href="https://github.com/vuejs/vue-resource" target="_blank" rel="external">Vue Resource</a></li>
<li>Writing <a href="http://vue-loader.vuejs.org/en/index.html" target="_blank" rel="external">.vue files</a></li>
<li>[Optional] <a href="http://vuex.vuejs.org/" target="_blank" rel="external">Vuex</a> if building large scale Apps.</li>
<li>[Optional] <a href="http://webpack.github.io/" target="_blank" rel="external">Webpack</a> for tweaking the build system to your specific needs</li>
<li>[Optional] <a href="https://cordova.apache.org/" target="_blank" rel="external">Cordova</a> for building native mobile phone Apps out of your Quasar App</li>
</ul>
<blockquote>
<p>That’s it. You’re set now. Continue to read the guide about Quasar and don’t forget to have fun :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CLI]]></title>
      <url>http://quasar-framework.org/guide/quasar-cli.html</url>
      <content type="html"><![CDATA[<p>Quasar CLI allows you to start new projects in no time by generating a starter boilerplate filled with everything you need. It also does most of the heavy-lifting so you don’t have to take care of the redundant tasks. You must install it to generate and manage a Quasar App.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g quasar-cli</div></pre></td></tr></table></figure>
<p>Familiarize yourself with the list of commands:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar</div></pre></td></tr></table></figure></p>
<p>See help for any command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar [<span class="built_in">command</span> name] --help</div></pre></td></tr></table></figure></p>
<h2 id="Create-App"><a href="#Create-App" class="headerlink" title="Create App"></a>Create App</h2><p>Initializes an App folder with a starter boilerplate.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar init [template name] &lt;folder-name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>By omitting the <code>template name</code> parameter the CLI will detect latest App template and generate the App folder with it.</p>
</blockquote>
<p>By convention, templates follow the syntax <code>v[number]</code>, where <code>number</code> is 1, 2, 3… The number designates the major version of Quasar you are using. Currently, only <code>v1</code> is available for 0.x and (soon to be released) 1.x versions.</p>
<p>You can check available App template list at any time with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar list</div></pre></td></tr></table></figure>
<h2 id="Development-Server"><a href="#Development-Server" class="headerlink" title="Development Server"></a>Development Server</h2><p>Developing your App by compiling and maintaining code in-memory. A web server will serve your App while offering hot-reload out of the box. Running in-memory offers faster rebuilds when you change your code.</p>
<blockquote>
<p>Hot Reload is much more than just refreshing your browser when code changes. It skips the refresh and updates your code on the fly while maintaining your App’s state (like your VueModel’s data). Please note that there are cases when this is impossible, so the dev webserver will simply refresh your browser.</p>
</blockquote>
<p>Furthermore, you can develop your App directly on a phone and still benefit from Hot-Reload. Download and install the Quasar Play App (currently only on Google Play Store).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># run development server (with default theme)</span></div><div class="line">$ quasar dev</div><div class="line"></div><div class="line"><span class="comment"># run development server with specific theme</span></div><div class="line">$ quasar dev mat</div><div class="line">$ quasar dev ios</div><div class="line"></div><div class="line"><span class="comment"># dev server with QR code</span></div><div class="line"><span class="comment"># scan QR code with Quasar Play app</span></div><div class="line">$ quasar dev -p</div><div class="line">$ quasar dev --play</div><div class="line">$ quasar dev mat --play</div></pre></td></tr></table></figure>
<p>If you wish to change the port serving your App you have 2 options:</p>
<ul>
<li>Open up <code>/config/index.js</code> file and change <code>dev.port</code> property.</li>
<li>If this is a one time thing, specify the port as an environment variable:<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ PORT=3000 quasar dev</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Build-App-for-Production"><a href="#Build-App-for-Production" class="headerlink" title="Build App for Production"></a>Build App for Production</h2><p>Quasar CLI can pack everything together and optimize your App for production. Minifies source code, extracts vendor components and leverages browser cache, and many more.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># build for production</span></div><div class="line">$ quasar build</div><div class="line"></div><div class="line"><span class="comment"># build for production with specific theme</span></div><div class="line">$ quasar build mat</div><div class="line">$ quasar build ios</div></pre></td></tr></table></figure>
<p>You can also clean up the build assets with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar clean</div></pre></td></tr></table></figure></p>
<h2 id="Generating-Components"><a href="#Generating-Components" class="headerlink" title="Generating Components"></a>Generating Components</h2><p>After creating an App folder with the CLI, inside your App you’ll have a folder named <code>/templates</code> that contains templates for: <code>layout</code>, <code>view</code> (page), or a generic Vue <code>component</code>.</p>
<p>You can generate components for your App in your <code>/src</code> folder:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># get available Component templates</div><div class="line">$ quasar new -l</div><div class="line">$ quasar new --list</div><div class="line"></div><div class="line"># generate .vue file from a Component template</div><div class="line">$ quasar new component Hello</div><div class="line"></div><div class="line"># generate .vue file from a template to a subfolder</div><div class="line">$ quasar new layout layout/about/help/Hello</div><div class="line"># the above creates src/components/layout/about/help/Hello.vue</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Add your own component templates. Quasar will be able to handle them.</p>
</blockquote>
<h2 id="App-Wrappers-Cordova"><a href="#App-Wrappers-Cordova" class="headerlink" title="App Wrappers - Cordova"></a>App Wrappers - Cordova</h2><p>Current App Wrappers available is for Cordova only. More will be added in the future, to allow you to build an Electron App, a Google Chrome extension, or a standalone progressive Web App, to name a few examples.</p>
<p>The CLI command is like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar wrap &lt;wrapper name&gt;</div></pre></td></tr></table></figure></p>
<p>Further reading on Cordova wrapper is available <a href="/guide/cordova-wrapper.html">here</a>.</p>
<h2 id="Lint-App-Code"><a href="#Lint-App-Code" class="headerlink" title="Lint App Code"></a>Lint App Code</h2><p>ESlint is used to check your ES6 Javascript files.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar lint</div></pre></td></tr></table></figure>
<h2 id="Run-Test-Suites"><a href="#Run-Test-Suites" class="headerlink" title="Run Test Suites"></a>Run Test Suites</h2><p>The starter boilerplate comes packed with both Unit and End to end testing.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Run both unit and e2e tests</span></div><div class="line">$ quasar <span class="built_in">test</span></div><div class="line"></div><div class="line"><span class="comment"># Run either unit or e2e tests</span></div><div class="line">$ quasar <span class="built_in">test</span> -u</div><div class="line">$ quasar <span class="built_in">test</span> <span class="_">-e</span></div></pre></td></tr></table></figure>
<h2 id="Serve-Static-Content-Folder"><a href="#Serve-Static-Content-Folder" class="headerlink" title="Serve Static-Content Folder"></a>Serve Static-Content Folder</h2><p>You are able to create an ad-hoc web server to serve static-content web files from a folder. Browser sessions are automatically refreshed when content changes. User click/scroll can be synchronized.</p>
<p>This command comes in really handy after building your Quasar App for production. The <code>/dist</code> folder contains files that are meant to be served with a webserver. So here you go:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Serve current folder:</span></div><div class="line">$ quasar serve</div><div class="line"></div><div class="line"><span class="comment"># ..or serve a full or relative path</span></div><div class="line">$ quasar serve ./dist</div><div class="line">$ quasar serve /work/quasar-app/dist</div></pre></td></tr></table></figure>
<p>This command does not rely on Quasar Framework. Any folder with any web content can be served.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Router]]></title>
      <url>http://quasar-framework.org/guide/router.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are using by default the <code>vue-router</code> which is the official router for VueJs. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</p>
<ul>
<li>Nested route/view mapping</li>
<li>Modular, component-based router configuration</li>
<li>Route params, query, wildcards</li>
<li>View transition effects powered by Vue.js’ transition system</li>
<li>Fine-grained navigation control</li>
<li>Links with automatic active CSS classes</li>
<li>HTML5 history mode or hash mode, with auto-fallback in IE9</li>
<li>Restore scroll position when going back in history mode</li>
</ul>
<p>Get started with the <a href="http://vuejs.github.io/vue-router" target="_blank" rel="external">documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Touch Events]]></title>
      <url>http://quasar-framework.org/guide/touch-events.html</url>
      <content type="html"><![CDATA[<p>Touch events are handled by default in a Quasar App by <code>vue-touch</code> plugin for VueJs, which is basically a directive wrapper for <a href="http://hammerjs.github.io/" target="_blank" rel="external">Hammer.js 2.0</a>.</p>
<p>Get started with the <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="external">documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Play App]]></title>
      <url>http://quasar-framework.org/guide/quasar-play-app.html</url>
      <content type="html"><![CDATA[<p>We have the dev server which offers hot-reload. We can build and test Apps on a desktop machine. If we want to release a native App we can use emulators directly in the browser (read about debugging methods <a href="/guide/cordova-wrapper.html#Tips">here</a>). It’s cool. But what if we want to develop our Apps directly on phone, tap, swipe items on it. Wouldn’t it be way cooler to have hot-reload working on a phone too?</p>
<p><strong>Well, now you can.</strong> Download and install Quasar Play App (currently available only on the Google Play Store). This App (written with Quasar) will get you working in no time.</p>
<p><a class="playstore" href="https://play.google.com/store/apps/details?id=com.quasarframework.quasarplay&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1" target="_blank" rel="external"><img alt="Get it on Google Play" src="https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png"></a></p>
<ol>
<li><p>Make sure your phone and development machine can ping each other. In other words, they must be in the same network.</p>
</li>
<li><p>Start Dev Server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev --play</div></pre></td></tr></table></figure>
<p>Notice the <code>--play</code> parameter. This makes Quasar CLI generate a QR code on your console that will point Quasar Play to the newly created server.</p>
<blockquote>
<p>You can skip generating a QR code and manually add the development URL (displayed in the console) to Quasar Play app.</p>
</blockquote>
</li>
<li><p>Open up Quasar Play on your phone. Tap on <code>Play URL</code>. Click the FAB button which will pop out two small buttons. Tap on the green one and scan the QR code from your console.</p>
</li>
</ol>
<p>That’s it. You’re done. Wait for your App to load, usually really fast. You’ll have your App running as if it replaces Quasar Play.</p>
<blockquote>
<p>You can refresh your App if something goes wrong or close it and go back to Quasar Play at any time. A toolbar on top of the screen will slide down into view if you click on a small <code>+</code> button. To close the toolbar click on the small <code>+</code> button again.</p>
<p><strong>IMPORTANT</strong><br>While playing with your App in Quasar Play, Cordova functionality will currently not be available. This is due to Cordova Javascript code causing a crash in its Java container.</p>
</blockquote>
<p>Give it a try! It will change how you develop your Apps.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Action Sheet]]></title>
      <url>http://quasar-framework.org/components/action-sheet.html</url>
      <content type="html"><![CDATA[<p>Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.</p>
<p>The Action Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Action Sheet options.</p>
<input type="hidden" data-fullpage-demo="global/action-sheet">

<blockquote>
<p>Action Sheets can be displayed as a List or as a gallery, with icons or with avatars.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionSheet &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Modal <span class="built_in">Object</span>) ActionSheet.create(configObj).show()</div></pre></td></tr></table></figure>
<p>You can access the Dialog’s VueModel through the returned <em>Modal Object</em>. Read about its properties on <a href="/components/modal.html#Basic-Usage">Quasar Modal</a> documentation page.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionSheet &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">ActionSheet.create(&#123;</div><div class="line">  title: <span class="string">'Article Actions'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// specify ONLY IF you want gallery mode:</span></div><div class="line">  gallery: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Delete'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Choose one of the following two:</span></div><div class="line">      icon: <span class="string">'delete'</span>, <span class="comment">// specify ONLY IF using icon</span></div><div class="line">      avatar: <span class="string">'assets/some-avatar.png'</span>, <span class="comment">// specify ONLY IF using avatar</span></div><div class="line"></div><div class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Deleted Article'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    ...,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      icon: <span class="string">'cancel'</span>,</div><div class="line">      classes: <span class="string">'text-primary'</span>,</div><div class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log('Cancelled...')</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show() <span class="comment">// &lt;&lt;&lt; DO NOT forget</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br><code>ActionSheet.create()</code> returns a Modal (which you can configure if you wish), so don’t forget to call <code>.show()</code></p>
</blockquote>
<p>The last button specified is always used as a <em>Cancel</em> option to dismiss the Action Sheet and is displayed distinctively from the rest of the buttons.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>When user hits the browser/phone/tablet back button, the Action Sheet will get closed automatically. This behavior is disabled when running your App within an iframe though.<br><br>Also, when on a browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Breadcrumbs]]></title>
      <url>http://quasar-framework.org/components/breadcrumb.html</url>
      <content type="html"><![CDATA[<p>Quasar Breadcrumbs is a graphical control element used as a navigational aid in UI. It allows users to keep track of their locations within programs, documents, or websites.</p>
<p>This component only has CSS code, so you just have to follow the HTML structure in your templates for it.</p>
<input type="hidden" data-fullpage-demo="css/breadcrumb">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>home<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Quasar</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Breadcrumb</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Buttons]]></title>
      <url>http://quasar-framework.org/components/buttons.html</url>
      <content type="html"><![CDATA[<p>Quasar Buttons are of two shapes: rectangle (regular) and circular. They come in three sizes: small, medium (default) and big. As for the colors, use the ones from <a href="/api/css-color-palette.html">Quasar CSS Color Palette</a>. There are some more CSS classes that you can use to enhance the appearance of a button.</p>
<input type="hidden" data-fullpage-demo="css/button">

<p>For circular buttons only use icons as content.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Regular shaped --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"clickMethod()"</span>&gt;</span></div><div class="line">  Button Label</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Circular shaped; only use icon as content --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>When adding an icon to a regular button, use <code>on-left</code> or <code>on-right</code> CSS classes:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-left"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Button Label</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"teal"</span>&gt;</span></div><div class="line">  Button Label <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-right"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Button-Sizes"><a href="#Button-Sizes" class="headerlink" title="Button Sizes"></a>Button Sizes</h2><p>Use <code>small</code> or <code>big</code> CSS classes. You don’t need to specify <code>medium</code> because that’s the default size.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary small"</span>&gt;</span></div><div class="line">  Small Button</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary big"</span>&gt;</span></div><div class="line">  Big Button</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Button-Colors"><a href="#Button-Colors" class="headerlink" title="Button Colors"></a>Button Colors</h2><p>Use the ones from <a href="/api/css-color-palette.html">Quasar CSS Color Palette</a>. Examples: <code>primary</code>, <code>orange</code>, <code>lime</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"amber"</span>&gt;</span>Amber Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="More-Button-CSS-Classes"><a href="#More-Button-CSS-Classes" class="headerlink" title="More Button CSS Classes"></a>More Button CSS Classes</h2><p>There are also the <code>raised</code>, <code>clear</code>, <code>outline</code>, <code>push</code>, <code>bordered</code>, <code>round</code> and <code>glossy</code> CSS classes that you can use.</p>
<p>Make use of globally available <code>disabled</code>, <code>block</code> (sets CSS <code>display</code> property to <code>block</code>) or <code>full-width</code>.</p>
<h2 id="Progress-Buttons"><a href="#Progress-Buttons" class="headerlink" title="Progress Buttons"></a>Progress Buttons</h2><p>There’s also a type of button that has its own Quasar Component named <code>&lt;quasar-progress-button&gt;</code>. Check documentation <a href="/components/progress-button.html">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cards]]></title>
      <url>http://quasar-framework.org/components/cards.html</url>
      <content type="html"><![CDATA[<p>Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps. They’re are a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.</p>
<p>Quasar Cards are all about HTML markup with some exception where some Quasar Vue directives need to be used. It’s all about being creative. Experiment with different Web Components by embedding them in Cards to create awesome results.</p>
<blockquote>
<p><strong>NOTE</strong><br>Quasar Cards have by default a width set to 100%, so make sure you either set them a <code>max-width</code> or wrap them in DOM element with maximum width.</p>
</blockquote>
<p>Scroll down to check out how to use Cards HTML syntax and if on desktop see the demos.</p>
<h2 id="Basic-Cards"><a href="#Basic-Cards" class="headerlink" title="Basic Cards"></a>Basic Cards</h2><input type="hidden" data-demo="css/card/basic">

<p>Familiarize yourself with Cards with these basic examples of card with only content and title.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Card Title</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring-Cards"><a href="#Coloring-Cards" class="headerlink" title="Coloring Cards"></a>Coloring Cards</h2><input type="hidden" data-demo="css/card/coloring">

<p>Use <a href="/api/css-color-palette.html">Quasar CSS color classes</a> to set color for text and background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title bg-primary text-white"</span>&gt;</span></div><div class="line">    Colored Card Title</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content card-force-top-padding"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card bg-teal text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Background Colored Card</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Embedding-Other-Web-Components-into-Cards"><a href="#Embedding-Other-Web-Components-into-Cards" class="headerlink" title="Embedding Other Web Components into Cards"></a>Embedding Other Web Components into Cards</h2><p>See how to embed images, maps, Collapsibles, Lists or how to write code for a Social Card, and many more. Just be creative! Experiment with different Web Components to achieve awesome Cards.</p>
<h3 id="Card-with-List"><a href="#Card-with-List" class="headerlink" title="Card with List"></a>Card with List</h3><input type="hidden" data-demo="css/card/with-list">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Card with List</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list bordered inner-delimiter highlight"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 4"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></div><div class="line">          Quasar Framework</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"item-value"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">i</span>&gt;</span>keyboard_arrow_right<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-Images"><a href="#Card-with-Images" class="headerlink" title="Card with Images"></a>Card with Images</h3><input type="hidden" data-demo="css/card/with-images">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Be creative. You can embed a Parallax Web Component:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Card with Parallax Image</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">parallax</span> <span class="attr">src</span>=<span class="string">"assets/parallax2.jpg"</span> <span class="attr">:height</span>=<span class="string">"150"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parallax</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-Videos"><a href="#Card-with-Videos" class="headerlink" title="Card with Videos"></a>Card with Videos</h3><input type="hidden" data-demo="css/card/with-videos">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-video</span></span></div><div class="line">    <span class="attr">:src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">  &gt;<span class="tag">&lt;/<span class="name">quasar-video</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Social-Cards"><a href="#Social-Cards" class="headerlink" title="Social Cards"></a>Social Cards</h3><input type="hidden" data-demo="css/card/social">

<p>Use social cards to present posts on a wall like on Facebook or Twitter.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Web Developer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-actions"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>thumb_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 11k likes</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mode_comment<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 8 comments</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-grey-6"</span>&gt;</span></div><div class="line">      23 minutes ago.</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-Map"><a href="#Card-with-Map" class="headerlink" title="Card with Map"></a>Card with Map</h3><input type="hidden" data-demo="css/card/map">

<p>Offer directions or present places with a nice Card.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-media"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/map.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>place<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_bar<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Bar XYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Have a drink.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_gas_station<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Gas Station<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Fill your gas tank.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>local_movies<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item-title"</span>&gt;</span>Cinema XYZ<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Watch a movie.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-actions card-no-top-padding"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-lime"</span>&gt;</span></div><div class="line">      13 minutes</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      (1 mile)</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear small"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-left"</span>&gt;</span>directions<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-Collapsible"><a href="#Card-with-Collapsible" class="headerlink" title="Card with Collapsible"></a>Card with Collapsible</h3><input type="hidden" data-demo="css/card/with-collapsible">

<p>Imagine a Card with Collapsibles containing Cards. Inception :)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">style</span>=<span class="string">"margin-top: 25px;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Card with Collapsible List</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-FAB"><a href="#Card-with-FAB" class="headerlink" title="Card with FAB"></a>Card with FAB</h3><input type="hidden" data-demo="css/card/with-fab">

<p>In the example below we include a circular button which the user can tap/click for additional actions on the Card.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">    Card with FAB</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-media"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-video</span></span></div><div class="line">      <span class="attr">:src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">quasar-video</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>share<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chat CSS]]></title>
      <url>http://quasar-framework.org/components/chat.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies CSS classes for making a chat. Loot at the syntax below.</p>
<input type="hidden" data-fullpage-demo="css/chat">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Message received from peer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-other"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-user"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/linux-avatar.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-date"</span>&gt;</span></div><div class="line">      7 minutes ago</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-message"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        hey, if you type in your pw, it will show as stars</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Message sent by you --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-you"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-user"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/boy-avatar.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-date"</span>&gt;</span></div><div class="line">      4 minutes ago</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-message"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        hunter2</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Apply <code>bg-*</code> or <code>text-*</code> CSS classes (from <a href="/api/css-color-palette.html">Quasar CSS Color Palette</a>) to color a Chat like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-other"</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"chat-message"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-orange text-black"</span>&gt;</span></div><div class="line">      hey, if you type in your pw, it will show as stars</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Checkbox]]></title>
      <url>http://quasar-framework.org/components/checkbox.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/checkbox">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">  Checkbox Label</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span> <span class="attr">disable</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">  Checkbox Label</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- No label: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Boolean</td>
<td>Checked or not.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled user can not change state.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Notifications</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Allow notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Allow notifications Allow notifications Allow notifications Allow notifications Allow notifications <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Collapsibles]]></title>
      <url>http://quasar-framework.org/components/collapsible.html</url>
      <content type="html"><![CDATA[<p>Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.</p>
<input type="hidden" data-fullpage-demo="web-components/collapsible">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can add <code>item-delimiter</code> class on the list <code>&lt;div&gt;</code> element if you want separators between Collapsibles.</p>
<h2 id="Preselecting-Items"><a href="#Preselecting-Items" class="headerlink" title="Preselecting Items"></a>Preselecting Items</h2><p>Collapsible items can be opened by default:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">active</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- or --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">:active</span>=<span class="string">"boolean_variable"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Properties-amp-Methods"><a href="#Properties-amp-Methods" class="headerlink" title="Properties &amp; Methods"></a>Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>active</code></td>
<td>Boolean</td>
<td>Control if Collapsible is opened or not.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image or avatar.</td>
</tr>
<tr>
<td><code>img</code></td>
<td>String</td>
<td>URL to image to use. Either use an icon, image or avatar.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to avatar to use. Either use an icon, image or avatar.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label besides icon, image or avatar.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Methods</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle</code></td>
<td>Toggle open/close state.</td>
</tr>
</tbody>
</table>
<h2 id="Ubiquity"><a href="#Ubiquity" class="headerlink" title="Ubiquity"></a>Ubiquity</h2><p>Be creative. In the example below we’re using a Card as Collapsible content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First Card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card bg-primary text-white"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">      Card Title</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">      Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Chips Textbox]]></title>
      <url>http://quasar-framework.org/components/chips-textbox.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/text-input/chips">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-chips</span> <span class="attr">:model.sync</span>=<span class="string">"model"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-chips</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-chips</span> <span class="attr">:model.sync</span>=<span class="string">"model"</span> <span class="attr">diable</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-chips</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-chips</span> <span class="attr">:model.sync</span>=<span class="string">"model"</span> <span class="attr">placeholder</span>=<span class="string">"Type some names"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-chips</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The model variable must be an Array.</p>
</blockquote>
<p>User can remove a Chip by clicking/tapping on the <code>close</code> icon. Adding a Chip is done by clicking/tapping on the component, typing and then hitting the <code>send</code> icon or <code>&lt;ENTER&gt;</code> key.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Array</td>
<td>Model for Chips Textbox</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled user can not add or remove chips.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder for the textfield.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-chips</span> <span class="attr">:model.sync</span>=<span class="string">"model"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-chips</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Datetime]]></title>
      <url>http://quasar-framework.org/components/datetime.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a way to manage dates and time through Datetime pickers. An inline as well as an input component are available. To see the inline version, click/tap <a href="/components/inline-datetime.html">here</a>.</p>
<p>The iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<input type="hidden" data-fullpage-demo="form/datetime/input">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Only Date --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"time"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"datetime"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>Model for the Select Component.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Yes</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code> strings.</td>
</tr>
<tr>
<td><code>format</code></td>
<td></td>
<td>Format in MomentJs style of how input displays date and/or time.</td>
</tr>
<tr>
<td><code>okLabel</code></td>
<td></td>
<td>Label for “OK” button on mobile Dialog.</td>
</tr>
<tr>
<td><code>cancelLabel</code></td>
<td></td>
<td>Label for “Cancel” button on mobile Dialog.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td></td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pick()</code></td>
<td>Show Popover (on desktop) and Dialog (on mobile) to select date and/or time.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Time only --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>access_time<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"time"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Date only --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-baseline"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Date and Time --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>notifications<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-baseline"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"datetime"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Context Menu]]></title>
      <url>http://quasar-framework.org/components/context-menu.html</url>
      <content type="html"><![CDATA[<p>This component allows you to display a context menu (popup) instead of the default one when user performs a right-click.</p>
<blockquote>
<p>On a real mobile device a minimized Modal is displayed trigger by a long tap.</p>
</blockquote>
<input type="hidden" data-fullpage-demo="web-components/context-menu">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-context-menu</span> <span class="attr">v-ref:context</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list highlight"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"item item-link two-lines item-delimiter"</span></div><div class="line">      <span class="attr">v-for</span>=<span class="string">"n in 30"</span></div><div class="line">      @<span class="attr">click</span>=<span class="string">"showToast(), $refs.context.close()"</span></div><div class="line">    &gt;</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-context-menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The position of the menu/popup is calculated so that it will be displayed on the available screen real estate, switching to right-side and/or top-side when necessary.</p>
<p>On a mobile device, clicking outside of the minimized Modal will close the Context Menu.</p>
<blockquote>
<p>Use a Vue reference on <code>&lt;quasar-context-menu&gt;</code> to call <code>close()</code> method if you want an element to be able to close the Context Menu.</p>
<p><strong>IMPORTANT</strong><br><br>When on a mobile device and user hits the phone/tablet back button, the Context Menu will get closed automatically.<br><br>When on a desktop browser and user hits the &lt;ESCAPE&gt; key, the Context Menu will get close automatically.</p>
</blockquote>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disabled or not</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open()</code></td>
<td>Open Context Menu</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close Context Menu</td>
</tr>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state for  Context Menu</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog Select]]></title>
      <url>http://quasar-framework.org/components/dialog-select.html</url>
      <content type="html"><![CDATA[<p>A Quasar Dialog Select box can be of two types: single selection (using Radios) or multiple selection (using Checkboxes or Toggles).</p>
<p>This component opens up a Dialog Modal. If for some reason you want it to open a Popover, use the “sibling” basic <a href="/components/select.html">Select</a> component.</p>
<input type="hidden" data-fullpage-demo="form/select/dialog">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- With Radios --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-dialog-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">  <span class="attr">title</span>=<span class="string">"Radios"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-dialog-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With Checkboxes --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-dialog-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">  <span class="attr">title</span>=<span class="string">"Checkboxes"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-dialog-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With Toggles --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-dialog-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"toggle"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">  <span class="attr">title</span>=<span class="string">"Toggles"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-dialog-select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties-amp-amp-Properties"><a href="#Vue-Properties-amp-amp-Properties" class="headerlink" title="Vue Properties &amp;&amp; Properties"></a>Vue Properties &amp;&amp; Properties</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>Model for the Select Component.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Yes</td>
<td>Array of options (Object with <code>label</code> and <code>value</code> properties).</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Yes</td>
<td>One of <code>radio</code>, <code>checkbox</code> or <code>toggle</code> strings.</td>
</tr>
<tr>
<td><code>okLabel</code></td>
<td></td>
<td>Label for “OK” button on Dialog.</td>
</tr>
<tr>
<td><code>cancelLabel</code></td>
<td></td>
<td>Label for “Cancel” button on Dialog.</td>
</tr>
<tr>
<td><code>title</code></td>
<td></td>
<td>Title of Dialog.</td>
</tr>
<tr>
<td><code>message</code></td>
<td></td>
<td>Message of Dialog.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td></td>
<td>Placeholder to use.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td></td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pick()</code></td>
<td>Opens up the Dialog so user can pick options.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"toggle"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Double Range]]></title>
      <url>http://quasar-framework.org/components/double-range.html</url>
      <content type="html"><![CDATA[<p>Quasar Double Range is a great way to make the user specify an interval, with optional steps between valid values. Some example: select a price range.</p>
<p>Also check its “sibling”, the simple <a href="/components/range.html">Range</a> component.</p>
<input type="hidden" data-fullpage-demo="form/range/double">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Notice we are using two models, one for the beginning of the interval and one for the end of it.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-double-range</span></span></div><div class="line">  <span class="attr">:model-min.sync</span>=<span class="string">"modelMin"</span></div><div class="line">  <span class="attr">:model-max.sync</span>=<span class="string">"modelMax"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"1"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"7"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>modelMin</code></td>
<td>Number</td>
<td>Model for the beginning of interval</td>
</tr>
<tr>
<td><code>modelMax</code></td>
<td>Number</td>
<td>Model for the end of interval</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value for beginning of interval</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value for end of interval</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than walking freely; good to use along <code>step</code>; also displays step markers on the Range</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When <code>true</code> user cannot change interval.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> value correctly. <code>step</code> must be a divisor of <code>max - min</code>, of <code>modelMin - min</code> and of <code>modelMax - min</code> otherwise it might mess things up. This is because all valid steps must be able to hold an equal position within the <code>min</code>-<code>max</code> interval.</p>
</blockquote>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-double-range</span></span></div><div class="line">  <span class="attr">:model-min.sync</span>=<span class="string">"modelMin"</span></div><div class="line">  <span class="attr">:model-max.sync</span>=<span class="string">"modelMax"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"step"</span></div><div class="line">  <span class="attr">label</span></div><div class="line">  <span class="attr">snap</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-double-range</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">:model-min.sync</span>=<span class="string">"modelMin"</span></div><div class="line">  <span class="attr">:model-max.sync</span>=<span class="string">"modelMax"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>local_atm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-double-range</span></span></div><div class="line">        <span class="attr">:model-min.sync</span>=<span class="string">"modelMin"</span></div><div class="line">        <span class="attr">:model-max.sync</span>=<span class="string">"modelMax"</span></div><div class="line">        <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Dialog]]></title>
      <url>http://quasar-framework.org/components/dialog.html</url>
      <content type="html"><![CDATA[<p>Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).</p>
<p>From a UI perspective, you can think of Alerts as a type of “floating” modal, that covers only a portion of the screen. This means Alerts should only be used for quick actions like password verification, small App notifications, or quick options. More in depth user flows should be reserved for full screen ​Modals​.</p>
<input type="hidden" data-fullpage-demo="global/dialog">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Modal <span class="built_in">Object</span>) Dialog(configObj).show()</div></pre></td></tr></table></figure>
<p>You can access the Dialog’s VueModel through the returned <em>Modal Object</em>. Read about its properties on <a href="/components/modal.html#Basic-Usage">Quasar Modal</a> documentation page.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>When user hits the browser/phone/tablet back button, the Dialog will get closed automatically..<br><br>Also, when on a browser, hitting the &lt;ESCAPE&gt; key also closes the Dialog.</p>
</blockquote>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>The following components are properties of the <em>objectWithComponents</em> parameter from above and can be used for all Dialog types available.</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Title of the Dialog.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>String</td>
<td>Additional message below the title.</td>
</tr>
<tr>
<td><code>buttons</code></td>
<td>Array of Objects</td>
<td>Bottom buttons for the Dialog. Regardless of the <code>handler</code> that you specify, each button closes the Dialog. You can also specify a String instead of an Object as part of your Array for buttons that only close the Dialog. See <a href="#Confirm">Confirm</a> example.</td>
</tr>
<tr>
<td><code>stackButtons</code></td>
<td>Boolean</td>
<td>If you want your buttons placed one below the previous one instead of on the same row.</td>
</tr>
</tbody>
</table>
<p>The following properties set the type of the Dialog and you can only use one for each Dialog:</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inputs</code></td>
<td>Object</td>
<td>Set as Prompt type, requesting user to fill in input textboxes. See <a href="#Prompt">Prompt</a> example.</td>
</tr>
<tr>
<td><code>progress</code></td>
<td>Object</td>
<td>See <a href="#Progress">Progress</a> example.</td>
</tr>
<tr>
<td><code>radios</code></td>
<td>Object</td>
<td>See <a href="#Pick-One-Option-Radios">“Pick one option”</a> example.</td>
</tr>
<tr>
<td><code>checkboxes</code></td>
<td>Object</td>
<td>See <a href="#Pick-Multiple-Options-Checkboxes">“Pick multiple options” with Checkboxes</a> example.</td>
</tr>
<tr>
<td><code>toggles</code></td>
<td>Object</td>
<td>See <a href="#Pick-Multiple-Options-2-Toggles">“Pick multiple options” with Toggles</a> example.</td>
</tr>
</tbody>
</table>
<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>The type is determined by the object properties you instantiate a <code>Dialog.create()</code> with.</p>
<blockquote>
<p><strong>NOTE</strong><br><code>Dialog.create()</code> returns a Modal (which you can configure if you wish), so don’t forget to call <code>.show()</code></p>
</blockquote>
<h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Alert'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span></div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h3 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Prompt'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</div><div class="line">  inputs: [ <span class="comment">// &lt;&lt;&lt;&lt;--------</span></div><div class="line">    &#123;</div><div class="line">      name: <span class="string">'input1'</span>,</div><div class="line">      label: <span class="string">'Placeholder 1'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      name: <span class="string">'input2'</span>,</div><div class="line">      label: <span class="string">'Placeholder 2'</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<p>Also set <code>stackButtons</code> to <code>true</code> if you want your buttons one below the previous one. Useful when the label is verbose.</p>
<h3 id="Confirm"><a href="#Confirm" class="headerlink" title="Confirm"></a>Confirm</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Confirm'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Disagree'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Disagreed...'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Agree'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Agreed!'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h3 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h3><p>There are two types of progress you can display: determinate (when you can quantify the progress) or indeterminate (when you don’t know the moment you’re done).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// determinate mode</span></div><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> progress = &#123;</div><div class="line">  model: <span class="number">25</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dialog = Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Progress'</span>,</div><div class="line">  message: <span class="string">'Computing...'</span>,</div><div class="line">  progress: progress, <span class="comment">// &lt;&lt;&lt;----</span></div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        clearInterval(timeout)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Canceled on progress '</span> + data)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div><div class="line"></div><div class="line"><span class="keyword">var</span> timeout = setInterval(() =&gt; &#123;</div><div class="line">  progress.model++</div><div class="line">  <span class="keyword">if</span> (progress.model === <span class="number">50</span>) &#123;</div><div class="line">    clearInterval(timeout)</div><div class="line">    dialog.close()</div><div class="line">  &#125;</div><div class="line">&#125;, <span class="number">1000</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// indeterminate mode</span></div><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> dialog = Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Progress'</span>,</div><div class="line">  message: <span class="string">'Computing...'</span>,</div><div class="line">  progress: &#123;  <span class="comment">// &lt;&lt;&lt;---------</span></div><div class="line">    indeterminate: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        clearTimeout(timeout)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Canceled...'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div><div class="line"></div><div class="line"><span class="keyword">var</span> timeout = setTimeout(() =&gt; &#123;</div><div class="line">  clearInterval(timeout)</div><div class="line">  dialog.close()</div><div class="line">&#125;, <span class="number">3000</span>)</div></pre></td></tr></table></figure>
<h3 id="Pick-One-Option-Radios"><a href="#Pick-One-Option-Radios" class="headerlink" title="Pick One Option (Radios)"></a>Pick One Option (Radios)</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Radios'</span>,</div><div class="line">  message: <span class="string">'Message can be used for all types of Dialogs.'</span>,</div><div class="line">  radios: [ <span class="comment">// &lt;&lt;&lt;----</span></div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 1'</span>,</div><div class="line">      value: <span class="string">'opt1'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 2'</span>,</div><div class="line">      value: <span class="string">'opt2'</span>,</div><div class="line">      selected: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 3'</span>,</div><div class="line">      value: <span class="string">'opt3'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 4'</span>,</div><div class="line">      value: <span class="string">'opt4'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 5'</span>,</div><div class="line">      value: <span class="string">'opt5'</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h3 id="Pick-Multiple-Options-Checkboxes"><a href="#Pick-Multiple-Options-Checkboxes" class="headerlink" title="Pick Multiple Options (Checkboxes)"></a>Pick Multiple Options (Checkboxes)</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Checkboxes'</span>,</div><div class="line">  checkboxes: [ <span class="comment">// &lt;&lt;&lt;----</span></div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 1'</span>,</div><div class="line">      value: <span class="string">'opt1'</span>,</div><div class="line">      checked: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 2'</span>,</div><div class="line">      value: <span class="string">'opt2'</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ],</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler: $.noop</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h3 id="Pick-Multiple-Options-2-Toggles"><a href="#Pick-Multiple-Options-2-Toggles" class="headerlink" title="Pick Multiple Options #2 (Toggles)"></a>Pick Multiple Options #2 (Toggles)</h3><p>Same as previous but using Toggles instead of Checkboxes.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Toggles'</span>,</div><div class="line">  toggles: [ <span class="comment">// &lt;&lt;&lt;----</span></div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 1'</span>,</div><div class="line">      value: <span class="string">'opt1'</span>,</div><div class="line">      checked: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Option 2'</span>,</div><div class="line">      value: <span class="string">'opt2'</span></div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ],</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler () &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h3 id="Stacked-Buttons"><a href="#Stacked-Buttons" class="headerlink" title="Stacked Buttons"></a>Stacked Buttons</h3><p>If you have many buttons or buttons with lots of text, you can use set <code>stackButtons</code> property to <code>true</code> when creating your Dialog. This will make your buttons be displayed on separate rows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  stackButtons: <span class="literal">true</span>,</div><div class="line">  buttons: [......]</div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Floating Action Buttons]]></title>
      <url>http://quasar-framework.org/components/floating-action-buttons.html</url>
      <content type="html"><![CDATA[<p>A Quasar Floating Action Button (FAB) represents the primary action in an App Page. But it’s not limited to only that. It can contain sub-actions too, and more importantly it can also be used inline into your Pages or Layouts.</p>
<input type="hidden" data-fullpage-demo="web-components/fab">

<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>So there are two types: expandable (has sub-actions) and non-expandable. <strong>If not expandable, a simple circular button will suffice</strong>. Otherwise check the HTML tags below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Non-expandable --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary circular"</span> @<span class="attr">click</span>=<span class="string">"method()"</span>&gt;</span></div><div class="line">  Button label</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Expandable --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-fab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"someMethod()"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-fab</span>&gt;</span></div></pre></td></tr></table></figure>
<p>We’ll continue describing only the expandable ones, as the non-expandable are simple circular buttons and you can read about them in the Buttons documentation page.</p>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><blockquote>
<p>These properties and methods apply to <code>&lt;quasar-fab&gt;</code> only.</p>
</blockquote>
<p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>“primary”</td>
<td>One of the main colors in Quasar Color Palette; can also be an array of colors or CSS classes. Check second inline usage example below.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>“add”</td>
<td>Icon to use when not expanded</td>
</tr>
<tr>
<td><code>click</code></td>
<td><em>none</em></td>
<td>The method from VM to call when clicked/tapped.</td>
</tr>
<tr>
<td><code>direction</code></td>
<td>“right”</td>
<td>The direction in which to expand; one of the following values: “up”, “down”, “left”, “right”.</td>
</tr>
<tr>
<td><code>activeIcon</code></td>
<td>“close”</td>
<td>The icon to change to when expanded.</td>
</tr>
<tr>
<td><code>backdrop</code></td>
<td><em>none</em></td>
<td>Empty attribute; Use a backdrop behind it when expanded.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state</td>
</tr>
</tbody>
</table>
<h2 id="Inline-Usage"><a href="#Inline-Usage" class="headerlink" title="Inline Usage"></a>Inline Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-fab</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_right"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-fab</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">quasar-fab</span></span></div><div class="line">  <span class="attr">:type</span>=<span class="string">"['primary', 'glossy']"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_right"</span></div><div class="line">  <span class="attr">active-icon</span>=<span class="string">"mail"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"right"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"light-blue"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"purple"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-fab</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Absolute-Positioning-Usage"><a href="#Absolute-Positioning-Usage" class="headerlink" title="Absolute Positioning Usage"></a>Absolute Positioning Usage</h2><p>Simply use the <a href="/api/css-positioning.html">Quasar CSS Positioning</a> classes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"primary circular absolute-bottom-right"</span></div><div class="line">  @<span class="attr">click</span>=<span class="string">"method()"</span></div><div class="line">&gt;</div><div class="line">  Button label</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">quasar-fab</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"absolute-bottom-right"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"right: 20px; bottom: 20px;"</span></div><div class="line">  <span class="attr">:click</span>=<span class="string">"vmActionMethod"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-small-fab</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">quasar-small-fab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-fab</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Drawer]]></title>
      <url>http://quasar-framework.org/components/drawer.html</url>
      <content type="html"><![CDATA[<p>The Quasar Drawer (also known as a Sidebar) is the element on the left side or right side of your screen, usually used for Navigation, which gets hidden on smaller screens (and can be activated by swiping them into view from the edge of the screen or by clicking/tapping on menu buttons) and is shown alongside the page content on wide enough screens.</p>
<p>There are two types of Drawers: left-side or right-side. Check the HTML markup to learn how to declare each of them.</p>
<input type="hidden" data-fullpage-demo="layout/drawer">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In your Layout template, you can declare up to two drawers, but they must differ in type (one must be left-side and one right-side) otherwise they’ll be one on top of each other.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Left side Drawer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-drawer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></div><div class="line">        Left Side Drawer</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-drawer-link</span> <span class="attr">page</span>=<span class="string">"my-account"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-drawer-link</span> <span class="attr">page</span>=<span class="string">"shopping-cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Right side Drawer;</div><div class="line">    Notice the HTML Attributes on &lt;drawer&gt; element</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">quasar-drawer</span> <span class="attr">right-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></div><div class="line">        Right Side Drawer</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-drawer-link</span> <span class="attr">page</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-drawer-link</span> <span class="attr">page</span>=<span class="string">"typography"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Specifying <code>right-side</code> attribute only places the Drawer in the right side of screen when it is hidden and can be swiped in. If the window is wide enough your Drawer will be displayed along your page view, depending on where you’ve included <code>&lt;quasar-drawer&gt;</code> besides <code>&lt;router-view&gt;</code> or <code>&lt;div class=&quot;layout-view&quot;&gt;</code>, which is before or after (which translates to left or right to the page view). So it is possible to place Drawer content on the left side on wide enough windows and on right-side (waiting to be swiped in) on smaller windows.</p>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>right-side</code></td>
<td>User can swipe the Drawer into view from the right side of the screen.</td>
</tr>
<tr>
<td><code>swipe-only</code></td>
<td>By default, Drawers get hidden on smaller screens but they get displayed on wide enough ones. Adding <code>swipe-only</code> attribute makes the Drawer hidden on bigger screens too. Rest assured, in this case the user can still bring them into view by swiping on the edge of the screen or by clicking/tapping on menu buttons.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open()</code></td>
<td>Open Drawer (when on narrow window).</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close Drawer (when on narrow window).</td>
</tr>
</tbody>
</table>
<h2 id="Drawer-Content"><a href="#Drawer-Content" class="headerlink" title="Drawer Content"></a>Drawer Content</h2><p>The Drawer component gets along very well with <a href="/components/list.html">Quasar Lists</a>. You can use Lists to define the contents of the Drawer. To differentiate how a Drawer List looks like, use the special CSS class <code>platform-delimiter</code> on the list DOM node.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>There’s also a helper Web Component called <code>&lt;quasar-drawer-link&gt;</code> which generates under the covers the HTML for a List item that represents a link. Handle click/tap events with <code>v-link</code> Vue Router directive.</p>
<p>Best use <code>&lt;quasar-drawer-link&gt;</code> inside of a List.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-drawer-link</span></span></div><div class="line">  <span class="attr">v-link</span>=<span class="string">"&#123;path: '/home/help', exact: true&#125;"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"help"</span></div><div class="line">&gt;</div><div class="line">  Help!</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Notice the <code>icon</code> attribute which also adds an icon to your link list item.</p>
<h2 id="Ways-to-Open-the-Drawer"><a href="#Ways-to-Open-the-Drawer" class="headerlink" title="Ways to Open the Drawer"></a>Ways to Open the Drawer</h2><p>As you read above, the Drawer can be brought into view by either swiping from the edge of the screen or by clicking on menu buttons. A menu button is automatically added a click/tap event to open the Drawer if it has either <code>left-drawer-opener</code> or <code>right-drawer-opener</code> CSS classes added to it.</p>
<p>From a user’s perspective, it’s best to put those buttons in a Layout header Toolbar. Quick example below. Notice the <code>&lt;button&gt;</code> tag has <code>left-drawer-opener</code>.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-opener"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>The two CSS classes mentioned above can be used on any DOM element. Quasar will add click/tap events to them by default.</p>
<p>If <code>right-side</code> attribute is specified, then that Drawer will look for <code>right-drawer-opener</code> class on Layout DOM elements. Otherwise, it will look for <code>left-drawer-opener</code>.</p>
<blockquote>
<p>You also have the option to use a Vue reference and call <code>open()</code> method.<br><br>If you instead use the CSS class on a DOM Element then that element is going to get hidden when Drawer is visible on large windows.</p>
</blockquote>
<h2 id="Ways-to-Close-the-Drawer"><a href="#Ways-to-Close-the-Drawer" class="headerlink" title="Ways to Close the Drawer"></a>Ways to Close the Drawer</h2><p>Of course, user can swipe your Drawer out of view. But you also have the option to make specific DOM elements within your Drawer template to do this when clicked/tapped. Just add <code>drawer-closer</code> CSS class to them.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-drawer</span> <span class="attr">right-side</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"drawer-closer"</span>&gt;</span></div><div class="line">    Close Drawer</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>You also have the option to use a Vue reference and call <code>close()</code> method.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Grid Component]]></title>
      <url>http://quasar-framework.org/components/grid-component.html</url>
      <content type="html"><![CDATA[<p>Quasar Grid is a Vue Component which allows you to display data in a tabular manner. Best way to display a Grid is on a desktop so you might want to check that first.</p>
<input type="hidden" data-fullpage-demo="web-components/grid">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-grid</span></span></div><div class="line">  <span class="attr">:columns</span>=<span class="string">"columns"</span></div><div class="line">  <span class="attr">:data</span>=<span class="string">"data"</span></div><div class="line">  <span class="attr">:rows-per-page</span>=<span class="string">"rowsPerPage"</span></div><div class="line">  <span class="attr">:selection-mode</span>=<span class="string">"selectionMode"</span></div><div class="line">  <span class="attr">:selection-actions</span>=<span class="string">"selectionActions"</span></div><div class="line">  <span class="attr">:sortable</span>=<span class="string">"sortable"</span></div><div class="line">  <span class="attr">id-property</span>=<span class="string">"unique_id"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-grid</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    data,</div><div class="line">    rowsPerPage: <span class="number">5</span>,</div><div class="line">    sortable: <span class="literal">true</span>,</div><div class="line">    columns: [</div><div class="line">      &#123;</div><div class="line">        label: <span class="string">'Date'</span>,</div><div class="line">        field: <span class="string">'isodate'</span>,</div><div class="line">        style: <span class="string">'width: 100px'</span>,</div><div class="line">        formatter (value) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value).toLocaleString()</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        label: <span class="string">'Source'</span>,</div><div class="line">        field: <span class="string">'source'</span>,</div><div class="line">        style: <span class="string">'width: 100px'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        label: <span class="string">'Service'</span>,</div><div class="line">        field: <span class="string">'serviceable'</span>,</div><div class="line">        formatter (value) &#123;</div><div class="line">          <span class="keyword">if</span> (value === <span class="string">'Informational'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'&lt;i&gt;info&lt;/i&gt;'</span></div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> value</div><div class="line">        &#125;,</div><div class="line">        style: <span class="string">'color: green; width: 100px'</span>,</div><div class="line">        classes: <span class="string">'text-center'</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    selectionMode: <span class="string">'single'</span>,</div><div class="line">    selectionActions: [</div><div class="line">      &#123;</div><div class="line">        label: <span class="string">'View 1'</span>,</div><div class="line">        handler (selectedRows) &#123;</div><div class="line">          <span class="built_in">console</span>.dir(selectedRows)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        label: <span class="string">'View 2'</span>,</div><div class="line">        handler (selectedRows) &#123;</div><div class="line">          <span class="built_in">console</span>.dir(selectedRows)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>columns</code></td>
<td><em>none</em></td>
<td><em>(required)</em> Configure columns to be displayed.</td>
</tr>
<tr>
<td><code>data</code></td>
<td><em>none</em></td>
<td><em>(required)</em>  Data to display on Grid.</td>
</tr>
<tr>
<td><code>rows-per-page</code></td>
<td>5</td>
<td>Self explanatory. Value “0” disables pagination.</td>
</tr>
<tr>
<td><code>sortable</code></td>
<td>true</td>
<td>Data can or cannot be sorted by columns.</td>
</tr>
<tr>
<td><code>id-property</code></td>
<td><em>none</em></td>
<td>Help improve rendering performance when each row has a unique id as property. The value must be the name of that property in your data Object/Array.</td>
</tr>
<tr>
<td><code>selection-mode</code></td>
<td>‘none’</td>
<td>No selection (‘none’), single selection (‘single’) or multiple selection (‘multiple’).</td>
</tr>
<tr>
<td><code>selection-actions</code></td>
<td><em>none</em></td>
<td>Array of Objects (with <code>label</code> and <code>handler</code> properties) from which the user can choose with his/her selection.</td>
</tr>
<tr>
<td><code>no-data-label</code></td>
<td>‘No data to display.’</td>
<td>String to display when there’s no data or the selection is empty.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML Tables]]></title>
      <url>http://quasar-framework.org/components/html-tables.html</url>
      <content type="html"><![CDATA[<p>HTML tables don’t need to look bad. Quasar takes care of them by default if you add <code>quasar-table</code> CSS class to them.</p>
<input type="hidden" data-fullpage-demo="css/html-table">

<p>If the default table style is not enough, also add the following CSS classes to best suit your needs: <code>bordered</code>, <code>row-delimiter</code>, <code>cell-delimiter</code>, <code>striped</code>, <code>highlight</code>, <code>compact</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"quasar-table"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>In Stock<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$10.11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>101<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$8.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$0.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>1670<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Image Gallery]]></title>
      <url>http://quasar-framework.org/components/image-gallery.html</url>
      <content type="html"><![CDATA[<p>All Components below are responsive. They accommodate to the width of their container.</p>
<input type="hidden" data-fullpage-demo="web-components/image-gallery">

<h2 id="Responsive-Images"><a href="#Responsive-Images" class="headerlink" title="Responsive Images"></a>Responsive Images</h2><p>Just add the <code>responsive</code> CSS class to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/quasar.jpg"</span> <span class="attr">class</span>=<span class="string">"responsive"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Avatar-Images"><a href="#Avatar-Images" class="headerlink" title="Avatar Images"></a>Avatar Images</h2><p>Just add the <code>avatar</code> CSS class to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/quasar-avatar.jpg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Image-Gallery"><a href="#Image-Gallery" class="headerlink" title="Image Gallery"></a>Image Gallery</h2><p>Use this Web Component when you want to display multiple images together.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-gallery</span> <span class="attr">:src</span>=<span class="string">"gallery"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-gallery</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  data: &#123;</div><div class="line">    ...,</div><div class="line">    gallery: [</div><div class="line">      <span class="string">'assets/mountains.jpg'</span>,</div><div class="line">      <span class="string">'assets/parallax1.jpg'</span>,</div><div class="line">      <span class="string">'assets/parallax2.jpg'</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Image-Gallery-Slider"><a href="#Image-Gallery-Slider" class="headerlink" title="Image Gallery Slider"></a>Image Gallery Slider</h2><p>When the real estate of the Page is an issue, use this Web Component which displays multiple images using a Slider Component. Read more about Sliders <a href="/components/slider.html">here</a>.</p>
<p>Gallery Slider has two control buttons available: one which when clicked displays a list of thumbnails of all images in the gallery, and the other which can bring the slider to fullscreen.</p>
<p>User can switch between images using the arrow buttons or through swipe actions. When on desktop, user can also drag on images to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-gallery-slider</span> <span class="attr">:src</span>=<span class="string">"gallery"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-gallery-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  data: &#123;</div><div class="line">    ...,</div><div class="line">    gallery: [</div><div class="line">      <span class="string">'assets/mountains.jpg'</span>,</div><div class="line">      <span class="string">'assets/parallax1.jpg'</span>,</div><div class="line">      <span class="string">'assets/parallax2.jpg'</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/components/index.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are made of high-level building blocks called components. Components allow you to quickly construct an interface for your App. Quasar comes with a number of components, including modals, action sheets, collapsibles, cards, dialogs, FAB, lists and many more.</p>
<p>Quasar Components are written as Web Components, so they embed HTML, CSS and Javascript code that you can use by just including an HTML tag in your Page and Layout templates.</p>
<p>Check out the examples (text and live demos for each platform) to see what each component looks like and to learn how to use each one.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Infinite Scroll]]></title>
      <url>http://quasar-framework.org/components/infinite-scroll.html</url>
      <content type="html"><![CDATA[<p>When you want to progressively load new content as the user scrolls down your Page.</p>
<input type="hidden" data-fullpage-demo="web-components/infinite-scroll">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-infinite-scroll</span> <span class="attr">:handler</span>=<span class="string">"loadMore"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Content, in this case some &lt;p&gt; tags --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">    Lorem ipsum dolor sit amet...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    slot="message" for DOM element to display (in this example</div><div class="line">    a spinner) when loading additional content</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">spinner</span> <span class="attr">slot</span>=<span class="string">"message"</span> <span class="attr">name</span>=<span class="string">"dots"</span> <span class="attr">:size</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Infinite Scroll loads items in advance when less than one screen height is left to be seen. If the content you fetch has height less than the container’s height on screen then Infinite Scroll will continue loading more content. So make sure you load enough content.</p>
</blockquote>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td><em>Yes</em></td>
<td>Function</td>
<td>Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>inline</code></td>
<td></td>
<td><em>Empty</em></td>
<td>Use it when you place your infinite scroll within an overflowed DOM element</td>
</tr>
<tr>
<td><code>offset</code></td>
<td></td>
<td>Number</td>
<td>Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance. Default it’s one container height.</td>
</tr>
<tr>
<td><code>working</code></td>
<td></td>
<td>Boolean</td>
<td>Should Infinite Scroll be active and load more content or halt its activity.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>loadMore()</code></td>
<td>Tells Infinite Scroll to load more content, regardless of the scroll position.</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Resets calling index to 0.</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>Stops working, regardless of scroll position.</td>
</tr>
<tr>
<td><code>resume()</code></td>
<td>Starts working. Checks scroll position upon call and if trigger is hit, it loads more content.</td>
</tr>
<tr>
<td><code>scroll()</code></td>
<td>Checks scroll position and loads more content if necessary.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function takes two parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">loadMore: <span class="function"><span class="keyword">function</span>(<span class="params">index, done</span>) </span>&#123;</div><div class="line">  <span class="comment">// index - called for nth time</span></div><div class="line">  <span class="comment">// done - Function to call when you made all necessary updates.</span></div><div class="line">  <span class="comment">//        DO NOT forget to call it otherwise your loading message</span></div><div class="line">  <span class="comment">//        will continue to be displayed</span></div><div class="line"></div><div class="line">  <span class="comment">// make some Ajax call then call done()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>index</code> parameter can be used to make some sort of pagination on the content you load. It takes numeric values starting with 1 and incrementing with each call.</p>
<h2 id="Inline-Usage"><a href="#Inline-Usage" class="headerlink" title="Inline Usage"></a>Inline Usage</h2><p>Use it when you place your infinite scroll within an overflowed DOM element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-infinite-scroll</span></span></div><div class="line">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></div><div class="line">  <span class="attr">inline</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 400px; overflow: auto;"</span></div><div class="line">&gt;</div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Controlling-Infinite-Scroll"><a href="#Controlling-Infinite-Scroll" class="headerlink" title="Controlling Infinite Scroll"></a>Controlling Infinite Scroll</h2><p>If for some reason you need to control the working state of Infinite Scroll component, use a Vue reference and call methods from above.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-infinite-scroll</span></span></div><div class="line">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></div><div class="line">  <span class="attr">v-ref:infinite-scroll</span></div><div class="line">&gt;</div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$refs.infiniteScroll.stop()"</span>&gt;</span></div><div class="line">    Stop Loading More</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Input Textbox]]></title>
      <url>http://quasar-framework.org/components/input-textbox.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/text-input/textbox">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This is not a component per say. It’s the HTML <code>&lt;input&gt;</code> element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"Type something"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Check next sections to see how you can use a stacked or floating label for it.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lazy</code></td>
<td>Empty Attribute</td>
<td>Change model after input loses focus</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Change model with a debouncing timing</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td>Boolean</td>
<td>Disables input.</td>
</tr>
</tbody>
</table>
<h2 id="Stacked-Label"><a href="#Stacked-Label" class="headerlink" title="Stacked Label"></a>Stacked Label</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Floating-Label"><a href="#Floating-Label" class="headerlink" title="Floating Label"></a>Floating Label</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Placeholder"</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-center wrap"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Textbox and Textarea with No Borders<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines item-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Notice "no-border" CSS class --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"full-width no-border"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Inline Datetime]]></title>
      <url>http://quasar-framework.org/components/inline-datetime.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a way to manage dates and time through Datetime pickers. An inline as well as an input component are available. To see the input version, click/tap <a href="/components/datetime.html">here</a>.</p>
<p>The iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<input type="hidden" data-fullpage-demo="form/datetime/inline">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Only Date --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-inline-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-inline-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-inline-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"time"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-inline-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-inline-datetime</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"datetime"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-inline-datetime</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-inline-datetime</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-inline-datetime</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>Model for the Select Component.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Yes</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code> strings.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td></td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>setYear()</code></td>
<td>Sets the year.</td>
</tr>
<tr>
<td><code>setMonth()</code></td>
<td>Sets the month (1-12).</td>
</tr>
<tr>
<td><code>setDay()</code></td>
<td>Sets day of the month.</td>
</tr>
<tr>
<td><code>toggleAmPm()</code></td>
<td>Toggles between AM and PM.</td>
</tr>
<tr>
<td><code>setHour()</code></td>
<td>Sets hour (0-23).</td>
</tr>
<tr>
<td><code>setMinute()</code></td>
<td>Sets minute (0-59).</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Labels]]></title>
      <url>http://quasar-framework.org/components/label.html</url>
      <content type="html"><![CDATA[<p>Quasar Labels are small graphical elements used to indicate something like the number of likes an article has, the new or unread messages in an inbox and so on.</p>
<p>This component only has CSS code, so you just have to follow the below HTML syntax in your templates for it.</p>
<input type="hidden" data-fullpage-demo="css/label">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Basic Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-primary text-white"</span>&gt;</span>label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-secondary text-white shadow-1"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Floating Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"light relative-position"</span>&gt;</span></div><div class="line">  Inbox</div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"floating label circular bg-primary text-white"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"red relative-position"</span>&gt;</span></div><div class="line">  Inbox</div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"floating label bg-dark"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Chip Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"chip label bg-grey-4"</span>&gt;</span></div><div class="line">  John</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Chip Label with image/avatar --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"chip label bg-grey-4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">  John</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Chip Label with close button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"chip label bg-light"</span>&gt;</span></div><div class="line">  John</div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-right"</span>&gt;</span>close<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Tag Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tag label tag bg-light"</span>&gt;</span>New <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-right"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tag label bg-red text-white"</span>&gt;</span>Upcoming<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tag label bg-primary text-white"</span>&gt;</span>Featured<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Pointing Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label pointing-up bg-primary text-white"</span>&gt;</span>up<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label pointing-down bg-primary text-white"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label pointing-right bg-primary text-white"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label pointing-left bg-primary text-white"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With Icons --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-primary text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-left"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  10</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-tertiary text-white"</span>&gt;</span></div><div class="line">  10</div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"on-right"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With Text or Icon Detail --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-amber"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"left-detail"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Detail</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-secondary text-white"</span>&gt;</span></div><div class="line">  Right <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"right-detail"</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-orange text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"left-detail"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 10</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label bg-orange text-white"</span>&gt;</span></div><div class="line">  10 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"right-detail"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Circular/Oval Labels --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"circular label bg-primary text-white"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"circular label bg-secondary text-white shadow-1"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Play with colors from Quasar <a href="/api/css-color-palette.html">API &gt; CSS &gt; Color Palette</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lists]]></title>
      <url>http://quasar-framework.org/components/list.html</url>
      <content type="html"><![CDATA[<p>Quasar Lists are used to display rows of information, such as a contact list, a playlist, or menu. Each row is called an item. Items can also be used outside of a list.</p>
<p>Lists can also be used (and it’s also recommended) on Quasar Drawers. There’s even a <code>&lt;quasar-drawer-link&gt;</code> component based on List Items.</p>
<blockquote>
<p>We’ll learn to use Lists and List Items gradually. Make sure you don’t skip steps and follow this page.</p>
</blockquote>
<p>Scroll down to see the demos if on desktop.</p>
<h2 id="List-Basics"><a href="#List-Basics" class="headerlink" title="List Basics"></a>List Basics</h2><input type="hidden" data-demo="css/list/basic">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Basic List<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>No Border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list no-border"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Striped<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list striped"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Delimiter Between Items<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Delimiter within Items<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Platform Delimiter - changes based on Theme<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list platform-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Inset Delimiter within Items<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-inset-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>List Labels<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>List Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Another List Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Inset: Items, Delimiters and Labels<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label inset"</span>&gt;</span>Inset List Label<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">    Highlight (Desktop only)</div><div class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mobile-only"</span>&gt;</span></div><div class="line">        On desktop, hovering the list items will change their background</div><div class="line">        color temporarily.</div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desktop-only"</span>&gt;</span></div><div class="line">        Hover the list items to change their background color temporarily.</div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list highlight"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">    Link Items (Desktop only)</div><div class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mobile-only"</span>&gt;</span></div><div class="line">        On desktop, hovering the list items will change their background</div><div class="line">        color temporarily and the cursor will be a pointer.</div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desktop-only"</span>&gt;</span></div><div class="line">        Hover the list items to change their background color temporarily</div><div class="line">        and change cursor to pointer.</div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        List Item</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="List-Items"><a href="#List-Items" class="headerlink" title="List Items"></a>List Items</h2><input type="hidden" data-demo="css/list/item">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-inset-delimiter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>assignment_ind<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Icon as Primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Avatar as Primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Thumbnail as Primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>Q<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>One character as Primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Icon as Secondary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Avatar as Secondary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Thumbnail as Secondary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>One character as Secondary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>Q<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Example Items with Primary and Secondary<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-inset-delimiter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>chat_bubble<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/linux-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Jim's Photos<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>voice_chat<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>Voice Chat with Joe<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>J<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span> <span class="attr">:src</span>=<span class="string">"'statics/guy-avatar.png'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Stamp and Truncated Content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">style</span>=<span class="string">"max-width: 400px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend? Brunch this weekend? Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      1 week</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend? Brunch this weekend? Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      10 min</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend? Brunch this weekend? Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      2 years</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend? Brunch this weekend? Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      1 week ago</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Item with Actions<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-popover</span> <span class="attr">v-ref:popover</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">          more_vert</div><div class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Reply<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">quasar-popover</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Multi-line-Items"><a href="#Multi-line-Items" class="headerlink" title="Multi-line Items"></a>Multi-line Items</h2><input type="hidden" data-demo="css/list/multiline">

<p>Multiple line items are usually for some Form components that exceed the height of a predefined one, two or three lines item.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      One line item</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      1 week</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two line item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second line<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      10 min</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three line item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>Second &amp; Third line<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      2 years</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Multiple lines item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label item-smaller"</span>&gt;</span>Second line<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label item-smaller"</span>&gt;</span>Third line<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label item-smaller"</span>&gt;</span>Fourth line<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-label item-smaller"</span>&gt;</span>...as many as you need!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-popover</span> <span class="attr">v-ref:popover</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">          more_vert</div><div class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Reply<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">quasar-popover</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Collapsible-Items"><a href="#Collapsible-Items" class="headerlink" title="Collapsible Items"></a>Collapsible Items</h2><input type="hidden" data-demo="css/list/collapsible">

<p>Collapsible Items make use of the Collapsible Component. Read more about it <a href="/guide/collapsible.html">here</a>.</p>
<p>You can nest collapsibles within collapsibles within collapsibles within…<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"inbox"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        Email &#123;&#123; n + 1 &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"favorites"</span> <span class="attr">label</span>=<span class="string">"Favorites"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">          Favorite &#123;&#123; n + 1 &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"send"</span> <span class="attr">label</span>=<span class="string">"Sent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        Email &#123;&#123; n + 1 &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-collapsible</span> <span class="attr">icon</span>=<span class="string">"delete"</span> <span class="attr">label</span>=<span class="string">"Trash"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">        Email &#123;&#123; n + 1 &#125;&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-collapsible</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="List-with-Textfields"><a href="#List-with-Textfields" class="headerlink" title="List with Textfields"></a>List with Textfields</h2><input type="hidden" data-demo="css/list/example-textfields">

<p>Some predefined forumals you can use to nest Textfields in List Items.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Textboxes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Placeholder"</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-center wrap"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"auto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Textareas<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Numeric<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Number:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-numeric</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-numeric</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Number:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-numeric</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-numeric</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Chips Textbox<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-chips</span> <span class="attr">:model.sync</span>=<span class="string">"chips"</span> <span class="attr">placeholder</span>=<span class="string">"Type names"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-chips</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="List-with-Form-Components"><a href="#List-with-Form-Components" class="headerlink" title="List with Form Components"></a>List with Form Components</h2><input type="hidden" data-demo="css/list/example-form">

<p>Some predefined formulas you can use to nest Form Components within List Items.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Checkboxes<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Notifications</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Allow notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-checkbox</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Allow notifications Allow notifications Allow notifications Allow notifications Allow notifications <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Radios<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Option 1</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Allows notifications<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt3"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Toggles<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      Events and reminders</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"purple"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Select<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">:model.sync</span>=<span class="string">"select"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">cancel-label</span>=<span class="string">"Neah"</span> <span class="attr">title</span>=<span class="string">"Company"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">title</span>=<span class="string">"Companies"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">type</span>=<span class="string">"toggle"</span> <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">title</span>=<span class="string">"Companies"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Ranges<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>volume_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-range</span> <span class="attr">:model.sync</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>brightness_medium<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-range</span> <span class="attr">:model.sync</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Double Range<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>local_atm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-double-range</span> <span class="attr">:model-min.sync</span>=<span class="string">"standaloneMin"</span> <span class="attr">:model-max.sync</span>=<span class="string">"standaloneMax"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>euro_symbol<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-double-range</span> <span class="attr">:model-min.sync</span>=<span class="string">"standaloneMin"</span> <span class="attr">:model-max.sync</span>=<span class="string">"standaloneMax"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-double-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Date and Time<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Date or Time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>access_time<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">:model.sync</span>=<span class="string">"timestamp"</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-baseline"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">:model.sync</span>=<span class="string">"timestamp"</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Date &amp; Time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>notifications<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content row items-baseline"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-datetime</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">:model.sync</span>=<span class="string">"timestamp"</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-datetime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>Let’s explore some ready to use templates using what we’ve learned above.</p>
<h3 id="Simple-List"><a href="#Simple-List" class="headerlink" title="Simple List"></a>Simple List</h3><input type="hidden" data-demo="css/list/example-simple">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>inbox<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Inbox</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>send<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Sent</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Trash</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      Inbox</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      inbox</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      Sent</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      send</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      Trash</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      delete</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Persons-List"><a href="#Persons-List" class="headerlink" title="Persons List"></a>Persons List</h3><input type="hidden" data-demo="css/list/example-persons">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>People<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      John</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      chat_bubble</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Jim<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Javascript wiz kid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      chat_bubble</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Jake<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Passionate about Quasar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      chat_bubble</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Chat-List"><a href="#Chat-List" class="headerlink" title="Chat List"></a>Chat List</h3><input type="hidden" data-demo="css/list/example-chat">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Recent chats<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      John Doe</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      chat_bubble</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Previous chats<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/guy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Jack Doe</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Movies-List"><a href="#Movies-List" class="headerlink" title="Movies List"></a>Movies List</h3><input type="hidden" data-demo="css/list/example-movies">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Movies<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Mountains Documentary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      movie</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Mountains Documentary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>For passionates only<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      movie</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary thumbnail"</span> <span class="attr">:src</span>=<span class="string">"'statics/mountains.jpg'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Mountains Documentary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>For passionates only For passionates only For passionates only For passionates only For passionates only <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      movie</div><div class="line">    <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Contact-List"><a href="#Contact-List" class="headerlink" title="Contact List"></a>Contact List</h3><input type="hidden" data-demo="css/list/example-contacts">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">v-if</span>=<span class="string">"n === 0"</span>&gt;</span>star<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      John Joe</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">v-if</span>=<span class="string">"n === 0"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      John Joe</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Folder-List"><a href="#Folder-List" class="headerlink" title="Folder List"></a>Folder List</h3><input type="hidden" data-demo="css/list/example-folders">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label inset"</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary bg-grey-6 text-white"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>folder<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label inset"</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary bg-primary text-white"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>assignment<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Vacation<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Phonebook-List"><a href="#Phonebook-List" class="headerlink" title="Phonebook List"></a>Phonebook List</h3><input type="hidden" data-demo="css/list/example-phonebook">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">v-if</span>=<span class="string">"n === 0"</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>(650) 555 - 1234<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Mobile<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>chat_bubble<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>john@doe.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Personal<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Messages-List"><a href="#Messages-List" class="headerlink" title="Messages List"></a>Messages List</h3><input type="hidden" data-demo="css/list/example-messages">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Today<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      1 week</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Yesterday<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"item-primary"</span> <span class="attr">:src</span>=<span class="string">"'statics/boy-avatar.png'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content inset has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Brunch this weekend?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary stamp"</span>&gt;</span></div><div class="line">      1 week</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-popover</span> <span class="attr">v-ref:popover</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">          more_vert</div><div class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Reply<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Forward<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-link"</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">quasar-popover</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Overview]]></title>
      <url>http://quasar-framework.org/components/layout-overview.html</url>
      <content type="html"><![CDATA[<p>Layouts are the elements that wrap page content, like navigational bar or drawer. Multiple pages can share the same Layout, which is one of the main reason for their existence.</p>
<input type="hidden" data-fullpage-demo="layout">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Layout is constructed by <code>&lt;quasar-layout&gt;</code> Component. It is mandatory unless you really know what you are doing.</p>
<p>An example of Layout, containing all possible elements: toolbars (used on header and footer), navigational tabs, a drawer on the left side (which is shown alongside page content on wide screens) and a drawer on the right side (which is always hidden regardless of the screen width and can only be activated by swiping it into view or by clicking a button):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Header --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- opens left-side drawer --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-opener"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-toolbar-title</span> <span class="attr">:padding</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      Title</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- opens right-side drawer --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"right-drawer-opener"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Navigation Tabs --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/layout', exact: true&#125;"</span>&gt;</span>Mails<span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">v-link</span>=<span class="string">"'/layout/alarm'"</span>&gt;</span>Alarms<span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"help"</span> <span class="attr">v-link</span>=<span class="string">"'/layout/help'"</span>&gt;</span>Help<span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Left-side Drawer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-drawer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line">        Drawer Title</div><div class="line">      <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list no-border platform-delimiter"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-drawer-link</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/', exact: true&#125;"</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">        Link</div><div class="line">      <span class="tag">&lt;/<span class="name">quasar-drawer-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- IF USING subRoutes only: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- OR ELSE, IF NOT USING subRoutes: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Right-side Drawer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-drawer</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    ....</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Understanding-Layouts"><a href="#Understanding-Layouts" class="headerlink" title="Understanding Layouts"></a>Understanding Layouts</h2><ol>
<li><p>Make sure that your Layout template DOM elements are wrapped by one (and <strong>only one</strong>) DOM element, like for example <code>&lt;quasar-layout&gt;</code>. Do not add more than one DOM element at the highest hierarchical level of your Layout template.</p>
</li>
<li><p>If your layout uses subRoutes, then it makes sense to use <code>&lt;router-view&gt;</code> component (but with <code>layout-view</code> CSS class). Else use whatever element you want, as long as you also specify <code>layout-view</code> CSS class.</p>
</li>
<li><p>The <code>&lt;quasar-layout&gt;</code> Component uses the following slots: <code>header</code>, <code>footer</code> and <code>navigation</code>. You can specify your content for these slots with the <code>slot</code> HTML attribute: <code>slot=&quot;footer&quot;</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">  ...Your Content...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Note that you can use define multiple headers, footers and navigation elements. Specify <code>slot=&quot;header&quot;</code> or <code>slot=&quot;footer&quot;</code> multiple times if you need. The order in which you specify these DOM elements matter.</p>
<p>The <code>navigation</code> slot will be placed after header and before page view on Material Design theme, and after page view and before footer on iOS theme.</p>
</li>
<li><p>The place where the App pages’ content goes on the Layout is the one having <code>layout-view</code> CSS class. If you want your page content to have margins and padding calculated automatically (responsive) use CSS class <code>layout-padding</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding"</span>&gt;</span></div><div class="line">    ...page content...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or with <code>&lt;router-view&gt;</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- in the Layout: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- in each page --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- root node required for subRoutes --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding"</span>&gt;</span></div><div class="line">    ...page content...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    You can have as many &lt;div&gt;s with</div><div class="line">    "layout-padding" CSS class as you want</div><div class="line">  --&gt;</div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Also, anything placed outside of these &lt;div&gt;s with "layout-padding"</div><div class="line">    (so direct children of the root node) will have width 100% of your</div><div class="line">    page view</div><div class="line">  --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The reason why each subRoute template needs a root node is that <code>&lt;router-view&gt;</code> component gets replaced with DOM elements of the subRoute template. If you<br>have more than one node, Vue will treat this as a Document Fragment and<br>cannot add <code>layout-view</code> CSS class, which is required.</p>
</li>
<li><p>The order of inclusion of the drawers and <code>layout-view</code> classed DOM element matters on a desktop view (and even on wide screen tablets) where if the window is wide enough, drawers are displayed side by side with layout view content. For example, you can actually decide that your left-side drawer should be displayed on the right-side of your page content on a wide window by manipulating the order of<br>components:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-drawer</span>&gt;</span></div><div class="line">    ...Drawer Content...</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-drawer</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>A great place to use <a href="/components/toolbar.html">Toolbars</a> is for header and footer slots.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">  ... toolbar content ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>You can create Modals with Layout templates for great effect. Read about <a href="/components/modal.html">Modals</a>. Goes great with <code>*.vue</code> files.</p>
</li>
<li><p>You can make navigation Tabs work great with Vue Router if you register the routes correctly and specify <code>v-link</code> directive on each Tab. Read more about Tabs <a href="/components/tabs.html">here</a>.</p>
</li>
<li><p>Example of placing a Search bar on header:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-search</span> <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Knob]]></title>
      <url>http://quasar-framework.org/components/knob.html</url>
      <content type="html"><![CDATA[<p>Quasar Knob is another way of making the user select a Number value from a predefined range. With optional steps included. See demo.</p>
<input type="hidden" data-fullpage-demo="form/knob">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-knob</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-knob</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-knob</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">:placeholder</span>=<span class="string">"'$ ' + model"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-knob</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-knob</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-knob</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Model for the Knob Component.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number representing difference between two values that the model can take. Default: <code>1</code>.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Minimum value that the model can take.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Maximum value that the model can take.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>CSS String determining the width and height of the Knob. Examples: “120px”, “12rem”.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>Placeholder to use.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>Primary CSS color of the Knob. Example: “blue”, “#ccc”.</td>
</tr>
<tr>
<td><code>trackColor</code></td>
<td>Track CSS color of the Knob. Example: “#e4e4e4”, “rgb(224, 200, 200)”.</td>
</tr>
<tr>
<td><code>lineWidth</code></td>
<td>Line width of Knob.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Loading]]></title>
      <url>http://quasar-framework.org/components/loading.html</url>
      <content type="html"><![CDATA[<p>Loading is a feature that you can use to display an overlay with a spinner on top of your App’s content to inform the user that a background operation is taking place. No need to add complex logic within your Pages for global background operations.</p>
<input type="hidden" data-fullpage-demo="global/loading">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Loading uses a delay (500ms) to display itself so that quick operations won’t make the screen flicker. This happens by showing and then quickly hiding the progress spinner without the user having a chance to see what happens. The delay before showing it eliminates confusion.</p>
<p>The default spinner used is <code>tail</code> for Material Design theme and ‘ios’ for iOS one. Read more about Spinners <a href="/components/spinners.html">here</a>.</p>
<h3 id="Show-Loading"><a href="#Show-Loading" class="headerlink" title="Show Loading"></a>Show Loading</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// default options</span></div><div class="line">Loading.show()</div><div class="line"></div><div class="line"><span class="comment">// with a custom delay</span></div><div class="line">Loading.show(&#123;</div><div class="line">  delay: <span class="number">300</span> <span class="comment">// milliseconds</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// with a custom spinner</span></div><div class="line">Loading.show(&#123;</div><div class="line">  spinner: <span class="string">'dots'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Hide-Loading"><a href="#Hide-Loading" class="headerlink" title="Hide Loading"></a>Hide Loading</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Loading.hide()</div></pre></td></tr></table></figure>
<h3 id="Check-Status"><a href="#Check-Status" class="headerlink" title="Check Status"></a>Check Status</h3><p>Checking whether the Loading is active is easy:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Boolean</span>) Loading.isActive()</div></pre></td></tr></table></figure>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>There is one event triggered when showing or hiding Loading: <code>app:loading</code>. It is triggered with one Boolean parameter which is <code>true</code> when Loading is shown and <code>false</code> otherwise.</p>
<p> See <a href="/api/js-events.html#Loading">Quasar Events API</a> for more details.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Numeric]]></title>
      <url>http://quasar-framework.org/components/numeric.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/numeric">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-numeric</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"number"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"1"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"17"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-numeric</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-numeric</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"number"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"1"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"17"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-numeric</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>0</td>
<td>(<strong>Required</strong>) Model for Number Web Component</td>
</tr>
<tr>
<td><code>step</code></td>
<td>1</td>
<td>Value of increment / decrement</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td><em>none</em></td>
<td>Change model with a debouncing timing</td>
</tr>
<tr>
<td><code>min</code></td>
<td><em>none</em></td>
<td>Minimum value of the model</td>
</tr>
<tr>
<td><code>max</code></td>
<td><em>none</em></td>
<td>Maximum value of the model</td>
</tr>
<tr>
<td><code>disable</code></td>
<td><code>false</code></td>
<td>Disable input from user.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Number: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-numeric</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-numeric</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Modal]]></title>
      <url>http://quasar-framework.org/components/modal.html</url>
      <content type="html"><![CDATA[<p>Quasar Modals slide in off screen to display a temporary UI, often used for login or signup pages, message composition, and option selection.</p>
<input type="hidden" data-fullpage-demo="global/modal">

<blockquote>
<p>Check bottom of this page to learn about <code>&lt;quasar-modal&gt;</code> component for inlining a Modal into your Component’s template.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// syntax</span></div><div class="line">(Modal <span class="built_in">Object</span>) Modal.create(VueModel <span class="built_in">Object</span>)</div><div class="line"></div><div class="line"><span class="comment">// basic example:</span></div><div class="line"><span class="keyword">var</span> modal = Modal.create(&#123;</div><div class="line">  template: <span class="string">'This is a basic modal. &lt;button class="secondary" @click="close()"&gt;Close Me&lt;/button&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// do NOT forget to call:</span></div><div class="line">modal.show()</div></pre></td></tr></table></figure>
<p>Since Modal requires a VueModel object, you can also import a <code>*.vue</code> file and use it:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">import</span> LoginScreen <span class="keyword">from</span> <span class="string">'./login.vue'</span></div><div class="line"></div><div class="line">Modal.create(LoginScreen).show()</div></pre></td></tr></table></figure></p>
<p>The <em>Modal Object</em> returned has the following methods:</p>
<table>
<thead>
<tr>
<th>Modal Object Method</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>show</code></td>
<td>Function onShow</td>
<td>Shows Modal and optionally executes the parameter Function</td>
</tr>
<tr>
<td><code>close</code></td>
<td>Function onClose</td>
<td>Closes Modal and optionally executes the parameter Function; if <code>selfDestroy</code> is set to true it will also destroy the VueModel</td>
</tr>
<tr>
<td><code>onShow</code></td>
<td>Function</td>
<td>Triggers the Function when Modal is shown. Multiple calls allowed in which case a stack is built and executed in the order Functions were pushed.</td>
</tr>
<tr>
<td><code>onClose</code></td>
<td>Function</td>
<td>Triggers the Function when Modal is closed. Multiple calls allowed in which case a stack is built and executed in the order Functions were pushed.</td>
</tr>
<tr>
<td><code>css</code></td>
<td>Object</td>
<td>Object containing CSS properties as keys and their CSS values. CSS is applied to your Modal.</td>
</tr>
<tr>
<td><code>set</code></td>
<td>Object</td>
<td>Object containing Modal properties and their values. See explanations below at <a href="#Modal-Object-Properties">Modal Object Properties</a>.</td>
</tr>
<tr>
<td><code>destroy</code></td>
<td><em>none</em></td>
<td>Destroys your Modal and frees up the memory. Is called automatically if <code>selfDestroy</code> property is set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>When user hits the browser/phone/tablet back button, the Modal will get closed automatically. This behavior is disabled when running your App within an iframe though.<br><br>Also, when on a browser, hitting the &lt;ESCAPE&gt; key also closes the Modal.</p>
</blockquote>
<h3 id="Communicating-with-Modal-VM"><a href="#Communicating-with-Modal-VM" class="headerlink" title="Communicating with Modal VM"></a>Communicating with Modal VM</h3><p>The Modal VueModel can be accessed as <code>vm</code> property of the returned <em>Modal Object</em>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> modal = Modal.create(&#123;data: &#123;progress: <span class="number">1</span>&#125;&#125;)</div><div class="line">modal.show()</div><div class="line"><span class="comment">// ...do something ...</span></div><div class="line">modal.vm.progress = <span class="number">10</span></div></pre></td></tr></table></figure>
<p>It is recommended that you use Vuex to communicate between VueModels though.</p>
<h3 id="Closing-Modal"><a href="#Closing-Modal" class="headerlink" title="Closing Modal"></a>Closing Modal</h3><p>Of course, you saw the returned <em>Modal Object</em> has a <code>close()</code> method.<br>But there is also a faster and more convenient way to close the Modal: through one injected method to any Modal’s VueModel: <code>close()</code>. You can use it to close your Modal from within the Modal’s template:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Modal template --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"close()"</span>&gt;</span>Close Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Creating a Modal with VM object containing method <code>close()</code> is forbidden as Quasar will overwrite it when injecting it.</p>
</blockquote>
<p>Make you also understand the <code>selfDestroy</code> property. If set to <code>true</code>, whenever you close or destroy your Modal, its VueModel will also get destroyed. If you want to keep your Modal usable, set property to false:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> modal = Modal.create(...)</div><div class="line"></div><div class="line"><span class="comment">// we want to reuse the Modal after showing it,</span></div><div class="line"><span class="comment">// so we set "selfDestroy" to "false"</span></div><div class="line">modal.set(&#123;selfDestroy: <span class="literal">false</span>&#125;)</div><div class="line">modal.show()</div><div class="line"></div><div class="line"><span class="comment">// now we can close it and open it up again</span></div><div class="line"><span class="comment">// as many times as we want</span></div><div class="line">modal.close()</div><div class="line">modal.show()</div><div class="line">modal.close()</div><div class="line"></div><div class="line"><span class="comment">// IMPORTANT!</span></div><div class="line"><span class="comment">// But make sure you destroy it after you</span></div><div class="line"><span class="comment">// don't need it anymore:</span></div><div class="line">modal.destroy()</div></pre></td></tr></table></figure></p>
<h3 id="Modal-Object-Properties"><a href="#Modal-Object-Properties" class="headerlink" title="Modal Object Properties"></a>Modal Object Properties</h3><p>On the Modal Object you can use the <code>set()</code> method to change any of these properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>minimized</code></td>
<td>Boolean</td>
<td>Modal is always minimized</td>
</tr>
<tr>
<td><code>maximized</code></td>
<td>Boolean</td>
<td>Modal is always maximized</td>
</tr>
<tr>
<td><code>transitionIn</code></td>
<td>Object</td>
<td>VelocityJS effect when Modal is displayed. Example: <code>{translateX: [0, &#39;101%&#39;]}</code></td>
</tr>
<tr>
<td><code>transitionOut</code></td>
<td>Object</td>
<td>VelocityJS effect when Modal is displayed. Example: <code>{translateX: [&#39;101%&#39;, 0]}</code></td>
</tr>
<tr>
<td><code>selfDestroy</code></td>
<td>Boolean</td>
<td>Modal gets destroyed when closed and memory is freed up. Default value is <code>true</code>.</td>
</tr>
<tr>
<td><code>onBackButton</code></td>
<td>Function</td>
<td>Function to execute if user clicks on back browser/phone/tablet button.</td>
</tr>
<tr>
<td><code>onEscapeKey</code></td>
<td>Function</td>
<td>Function to execute if user is on desktop and hits &lt;ESCAPE&gt; key.</td>
</tr>
<tr>
<td><code>closeWithBackdrop</code></td>
<td>Boolean</td>
<td>Modal can be closed by clicking/tapping on the backdrop.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> modal = Modal.create(...)</div><div class="line"></div><div class="line">modal.set(&#123;minimized: <span class="literal">true</span>&#125;)</div><div class="line">modal.show()</div></pre></td></tr></table></figure></p>
<h2 id="Triggering-Events"><a href="#Triggering-Events" class="headerlink" title="Triggering Events"></a>Triggering Events</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: <span class="string">'...'</span></div><div class="line">&#125;)</div><div class="line">.onShow(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onShow triggered'</span>)</div><div class="line">&#125;)</div><div class="line">.onClose(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onClose triggered'</span>)</div><div class="line">&#125;)</div><div class="line">.show()</div></pre></td></tr></table></figure>
<h2 id="Styling-Modals"><a href="#Styling-Modals" class="headerlink" title="Styling Modals"></a>Styling Modals</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: <span class="string">'...'</span></div><div class="line">&#125;)</div><div class="line">.css(&#123;</div><div class="line">  padding: <span class="string">'50px'</span>,</div><div class="line">  minWidth: <span class="string">'50vw'</span></div><div class="line">&#125;)</div><div class="line">.show()</div></pre></td></tr></table></figure>
<h2 id="Layout-Modals"><a href="#Layout-Modals" class="headerlink" title="Layout Modals"></a>Layout Modals</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: <span class="string">'...'</span> <span class="comment">// see below for template</span></div><div class="line">&#125;).css(&#123;</div><div class="line">  minWidth: <span class="string">'80vw'</span>,</div><div class="line">  minHeight: <span class="string">'80vh'</span></div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- template for Screen Modal above --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"close()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>keyboard_arrow_left<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-toolbar-title</span> <span class="attr">:padding</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      Header</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"openModal()"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>open_in_new<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-toolbar-title</span> <span class="attr">:padding</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">      Footer</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-view"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Modal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"openModal()"</span>&gt;</span>Open Another Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span> <span class="attr">v-for</span>=<span class="string">"n in 15"</span>&gt;</span>This is a Modal presenting a Screen.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Always-Minimized-Modal"><a href="#Always-Minimized-Modal" class="headerlink" title="Always Minimized Modal"></a>Always Minimized Modal</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: <span class="string">'...'</span></div><div class="line">&#125;).set(&#123;</div><div class="line">  minimized: <span class="literal">true</span></div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h2 id="Always-Maximized-Modal"><a href="#Always-Maximized-Modal" class="headerlink" title="Always Maximized Modal"></a>Always Maximized Modal</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: <span class="string">'...'</span></div><div class="line">&#125;).set(&#123;</div><div class="line">  maximized: <span class="literal">true</span></div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<h2 id="Template-Inline-Modal"><a href="#Template-Inline-Modal" class="headerlink" title="Template Inline Modal"></a>Template Inline Modal</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-modal</span></span></div><div class="line">  <span class="attr">v-ref:modal</span></div><div class="line">  <span class="attr">:set</span>=<span class="string">"&#123;minimized: true&#125;"</span></div><div class="line">  <span class="attr">:css</span>=<span class="string">"&#123;minWidth: '30vw', minHeight: '30vh'&#125;"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 50px"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Template Inline Modal<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Variable from parent Vue scope: &#123;&#123; modalVariable &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"$refs.modal.close()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-modal</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Also inject a way to show it to the user.</div><div class="line">  In this case, a button. You can show/hide it from Vue methods too, obviously.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">button</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"primary"</span></div><div class="line">  @<span class="attr">click</span>=<span class="string">"$refs.modal.show()"</span></div><div class="line">&gt;</div><div class="line">  Show Inline Modal</div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pagination]]></title>
      <url>http://quasar-framework.org/components/pagination.html</url>
      <content type="html"><![CDATA[<p>Quasar Pagination is a Web Component ready to use where a pagination system is needed.</p>
<input type="hidden" data-fullpage-demo="web-components/pagination">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-pagination</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"page"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"17"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-pagination</span>&gt;</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Vue Properties</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>The model (a Number) used for Pagination</td>
</tr>
<tr>
<td><code>min</code></td>
<td></td>
<td>Number of the first page; Default: <code>1</code></td>
</tr>
<tr>
<td><code>max</code></td>
<td>Yes</td>
<td>Number of last page</td>
</tr>
<tr>
<td><code>disable</code></td>
<td></td>
<td>Boolean. If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Parallax]]></title>
      <url>http://quasar-framework.org/components/parallax.html</url>
      <content type="html"><![CDATA[<p>Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion.</p>
<p>Quasar provides an out of the box Vue Component you can use. It takes care of a lot of quirks, including image size which can actually be smaller than the window width/height.</p>
<input type="hidden" data-fullpage-demo="web-components/parallax">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-parallax</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Dom elements to display while loading image --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    The rest of Dom elements get displayed on</div><div class="line">    top of the Parallax image after it's loaded</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-parallax</span>&gt;</span></div></pre></td></tr></table></figure>
<p>While the underlying image is being loaded you can display a specific message through <code>&lt;div slot=&quot;loading&quot;&gt;...&lt;/div&gt;</code>. After image has loaded, you can also display some content on top of the Parallax image (in the example above an <code>&lt;h1&gt;</code> tag).</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>String</td>
<td>Source for the image.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>Number</td>
<td>Height of Parallax in pixels. Default value is 500.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- VueModel contains data property "imageURL" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-parallax</span> <span class="attr">:src</span>=<span class="string">"imageURL"</span> <span class="attr">:height</span>=<span class="string">"300"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-parallax</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Popover]]></title>
      <url>http://quasar-framework.org/components/popover.html</url>
      <content type="html"><![CDATA[<p>Quasar Popovers should be used when you want a menu/popup to be displayed when user clicks/taps on a DOM element.</p>
<input type="hidden" data-fullpage-demo="web-components/popover">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In the example below we use a Button (as a target) and when clicking/tapping on it Quasar will display a List.<br>You can replace the Button and the List with any DOM elements or Quasar Web Components you like.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-popover</span> <span class="attr">v-ref:popover</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    slot="target" for DOM element that when clicked</div><div class="line">    it will open the dropdown; in this case a button</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    The DOM element(s) that make up the Dropdown menu,</div><div class="line">    in this case a list</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list item-delimiter highlight"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"item item-link"</span></div><div class="line">      @<span class="attr">click</span>=<span class="string">"doSomething(), $refs.popover.close()"</span></div><div class="line">    &gt;</div><div class="line">      ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-popover</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>When on a browser, hitting the &lt;ESCAPE&gt; key also closes the Popover.</p>
</blockquote>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>touchPosition</code></td>
<td>Boolean</td>
<td>Open Popover from the position where user clicked/tapped.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, Popover won’t be triggered.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Force Popover to appear on <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code>. Examples: ‘top’, ‘top left’, ‘bottom right’.</td>
</tr>
<tr>
<td><code>cover</code></td>
<td>Boolean</td>
<td>Force Popover width to at least cover the Popover target when opened.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>open()</code></td>
<td>Open Popover.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close Popover.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Popover-Dismissal"><a href="#Handling-Popover-Dismissal" class="headerlink" title="Handling Popover Dismissal"></a>Handling Popover Dismissal</h2><p>Use a Vue reference on <code>&lt;quasar-popover&gt;</code> to call <code>close()</code> method if you want an element to be able to close the Popover, like on the example above.</p>
<h2 id="Handling-Positioning"><a href="#Handling-Positioning" class="headerlink" title="Handling Positioning"></a>Handling Positioning</h2><p>The position of the Popover popup is calculated so that it will be displayed on the available screen real estate, switching to right-side and/or top-side when necessary.</p>
<p>By default, the Popover position will be placed on top of your target, but there is also the Boolean <code>touch-position</code> DOM attribute that you can use if you want the Popover to popup right from the position where user clicked/tapped on screen:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-popover</span> <span class="attr">touch-position</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-popover</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>The demo has <code>touch-position</code> specified for the big image on the center of the page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Progress Button]]></title>
      <url>http://quasar-framework.org/components/progress-button.html</url>
      <content type="html"><![CDATA[<p>Show user a process is happening in the background when clicking/tapping on a Progress Button. There are two outcomes that this component can show the user: success or error. Also, there are two ways you can display the progress: determined and indetermined.</p>
<input type="hidden" data-fullpage-demo="web-components/progress-button">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Two examples below. Read about Vue properties in the next section.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Determined Progress Button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress-button</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">:percentage</span>=<span class="string">"model"</span></div><div class="line">  @<span class="attr">click</span>=<span class="string">"startWorking()"</span></div><div class="line">&gt;</div><div class="line">  Work it!</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-progress-button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Indetermined Progress Button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress-button</span></span></div><div class="line">  <span class="attr">indeterminate</span></div><div class="line">  <span class="attr">class</span>=<span class="string">"yellow"</span></div><div class="line">  <span class="attr">dark-filler</span></div><div class="line">  <span class="attr">:percentage</span>=<span class="string">"model"</span></div><div class="line">  @<span class="attr">click</span>=<span class="string">"startWorking()"</span></div><div class="line">&gt;</div><div class="line">  Work it!</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-progress-button</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td></td>
<td>(<strong>Required</strong>) Model to use to determine Progress Button’s state.</td>
</tr>
<tr>
<td><code>errorIcon</code></td>
<td>String</td>
<td><code>warning</code></td>
<td>Icon to use in case the outcome is an error.</td>
</tr>
<tr>
<td><code>successIcon</code></td>
<td>String</td>
<td><code>done</code></td>
<td>Icon to use in case the outcome is a success.</td>
</tr>
<tr>
<td><code>darkFiller</code></td>
<td>Boolean</td>
<td><code>false</code></td>
<td>In case your button has a light color, the filler should be darkened.</td>
</tr>
<tr>
<td><code>indeterminate</code></td>
<td>Boolean</td>
<td><code>false</code></td>
<td>Should we display an indeterminate state?</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Outcome"><a href="#Handling-Outcome" class="headerlink" title="Handling Outcome"></a>Handling Outcome</h2><p>The outcome is determined by the <code>percentage</code> property value. Changing the property will make the Progress Button change its state accordingly.</p>
<table>
<thead>
<tr>
<th>Percentage value</th>
<th>Outcome</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Default state. The label you’ve specified for your button is displayed.</td>
</tr>
<tr>
<td>1-99</td>
<td>Working state. The background filler is displayed.</td>
</tr>
<tr>
<td>&gt;= 100</td>
<td>Success state. The <code>successIcon</code> is displayed.</td>
</tr>
<tr>
<td>&lt; 0</td>
<td>Error state. The <code>errorIcon</code> is displayed.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Progress Bar]]></title>
      <url>http://quasar-framework.org/components/progress-bar.html</url>
      <content type="html"><![CDATA[<p>A Progress bar is used to show a user how far along he/she is in a process.</p>
<input type="hidden" data-fullpage-demo="web-components/progress">

<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progressModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Configure how your progress bar is shown. Add one of these CSS classes:</p>
<table>
<thead>
<tr>
<th>CSS Class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>indeterminate</code></td>
<td>Make its state as indeterminate.</td>
</tr>
<tr>
<td><code>stripe</code></td>
<td>Make it striped. Optionally use in conjunction with <code>animate</code></td>
</tr>
<tr>
<td><code>animate</code></td>
<td>Works only along <code>stripe</code>. It makes a nice animated stripe.</td>
</tr>
</tbody>
</table>
<p>For color, use one of the main colors. See <a href="/api/css-color-palette.html">API &gt; CSS &gt; Color Palette</a>.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"positive"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"warning"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"secondary"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"tertiary"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"dark"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span> <span class="attr">:model</span>=<span class="string">"progress"</span> <span class="attr">class</span>=<span class="string">"light-blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Specific height:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-progress</span></span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 45px"</span></div><div class="line">  <span class="attr">class</span>=<span class="string">"indeterminate stripe"</span></div><div class="line">  <span class="attr">:model</span>=<span class="string">"progress"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-progress</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pull Down to Refresh]]></title>
      <url>http://quasar-framework.org/components/pull-to-refresh.html</url>
      <content type="html"><![CDATA[<p>When you want to allow the user to refresh the content or add newest content.</p>
<input type="hidden" data-fullpage-demo="web-components/pull-to-refresh">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-pull-to-refresh</span> <span class="attr">:handler</span>=<span class="string">"refresher"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Content, whatever you like --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">    Lorem ipsum dolor sit amet...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-pull-to-refresh</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td>Function</td>
<td></td>
<td><strong>Required</strong> Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>distance</code></td>
<td>Number</td>
<td>35</td>
<td>Minimum threshold distance in pixels to determine if releasing will determine a refresh</td>
</tr>
<tr>
<td><code>pull-message</code></td>
<td>String</td>
<td>‘Pull down to refresh’</td>
<td>Message to display before hitting the threshold above</td>
</tr>
<tr>
<td><code>release-message</code></td>
<td>String</td>
<td>‘Release to refresh’</td>
<td>Message to display after hitting the threshold above and before releasing</td>
</tr>
<tr>
<td><code>refresh-message</code></td>
<td>String</td>
<td>‘Refreshing…’</td>
<td>Message to display when refreshing content</td>
</tr>
<tr>
<td><code>refresh-icon</code></td>
<td>String</td>
<td>‘refresh’</td>
<td>Icon to display when refreshing the content, besides the text above</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>false</td>
<td>When set to <code>true</code> it disables its functionality. If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function (specified as DOM element property) takes one parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  methods: &#123;</div><div class="line">    refresher (done) &#123;</div><div class="line">      <span class="comment">// done - Function to call when you made all necessary updates.</span></div><div class="line">      <span class="comment">//        DO NOT forget to call it otherwise the refresh message</span></div><div class="line">      <span class="comment">//        will continue to be displayed</span></div><div class="line"></div><div class="line">      <span class="comment">// make some Ajax call then call done()</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Radio]]></title>
      <url>http://quasar-framework.org/components/radio.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/radio">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">  Option 1</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">  Option 2</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With no label: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt3"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>String</td>
<td>Model holding the selected value.</td>
</tr>
<tr>
<td><code>value</code></td>
<td>String</td>
<td>Value for the respective option. When model holds this value, the Radio becomes selected.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled user can not change model to its value.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      Option 1</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-radio</span> <span class="attr">:model.sync</span>=<span class="string">"option"</span> <span class="attr">value</span>=<span class="string">"opt3"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Range]]></title>
      <url>http://quasar-framework.org/components/range.html</url>
      <content type="html"><![CDATA[<p>Quasar Range is a great way to make the user specify a Number value between an interval, with optional steps between valid values.</p>
<p>Also check its “sibling”, the <a href="/components/double-range.html">Double Range</a> component.</p>
<input type="hidden" data-fullpage-demo="form/range/basic">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-range</span> <span class="attr">:model.sync</span>=<span class="string">"number"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"7"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Number</td>
<td>Model for the Range Component</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value of the model</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value of the model</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than walking freely; good to use along <code>step</code>; also displays step markers on the Range</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When <code>true</code> user cannot change model value.</td>
</tr>
</tbody>
</table>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-range</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"number"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"step"</span></div><div class="line">  <span class="attr">label</span></div><div class="line">  <span class="attr">snap</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> value correctly. <code>step</code> must be a divisor of <code>max - min</code>, otherwise it might mess things up. This is because all valid steps must be able to hold an equal position within the <code>min</code>-<code>max</code> interval.</p>
</blockquote>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-range</span> <span class="attr">class</span>=<span class="string">"orange"</span> <span class="attr">:model.sync</span>=<span class="string">"model"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>volume_up<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-range</span></span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"standalone"</span></div><div class="line">        <span class="attr">:min</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">:max</span>=<span class="string">"50"</span></div><div class="line">        <span class="attr">label</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-range</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rating]]></title>
      <url>http://quasar-framework.org/components/rating.html</url>
      <content type="html"><![CDATA[<p>Quasar Rating is a Web Component which allows users to rate items, usually knows as “Star Rating”.</p>
<input type="hidden" data-fullpage-demo="form/rating">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-rating</span> <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span> <span class="attr">:max-grade</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-rating</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled State --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-rating</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span></div><div class="line">  <span class="attr">:max-grade</span>=<span class="string">"3"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-rating</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Number</td>
<td>Model for Rating Component.</td>
</tr>
<tr>
<td><code>max-grade</code></td>
<td>Number</td>
<td>Number of icons to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use as grade. Default value: <code>grade</code>.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> user can not change model value.</td>
</tr>
</tbody>
</table>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-rating</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"ratingModel"</span></div><div class="line">  <span class="attr">:max-grade</span>=<span class="string">"5"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-rating</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Fire]]></title>
      <url>http://quasar-framework.org/components/scroll-fire.html</url>
      <content type="html"><![CDATA[<p>“Scroll Fire” is a feature that enables a method to be called (once and only once) when user scrolls current page to a specific scroll position in pixels.</p>
<input type="hidden" data-fullpage-demo="web-components/scroll-fire">

<p>For ease of use, its implementation is through a Vue Directive called <code>v-scroll-fire</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a <code>v-scroll</code> directive which fires whenever user scrolls the page, available to read <a href="/api/js-vue-directives.html#Directive-“v-scroll”">here</a>.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line">....</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll-fire</span>=<span class="string">"bounceImage"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">....</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    bounceImage (element) &#123;</div><div class="line">      Velocity(element, <span class="string">'callout.tada'</span>, &#123;</div><div class="line">        display: <span class="literal">null</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>For performance purposes, the scroll listener function injected is by default debounced by 50ms. Read more about <code>debouncing</code> <a href="/api/js-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Search bar]]></title>
      <url>http://quasar-framework.org/components/search.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/search">

<p>Quasar Search bars lazy evaluate the input with a debounce of 300ms by default.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-search</span> <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-search</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Number</td>
<td>Model for Search Component.</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Number of ms to debounce input. Default to 300.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder to use.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> user can not change model value.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-search</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span></div><div class="line">  <span class="attr">:debounce</span>=<span class="string">"600"</span></div><div class="line">  <span class="attr">placeholder</span>=<span class="string">"Hotels"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"local_hotel"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-search</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Usage-with-Layout"><a href="#Usage-with-Layout" class="headerlink" title="Usage with Layout"></a>Usage with Layout</h2><p>If you want to place on Layout header or footer:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar orange"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-search</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">      <span class="attr">:model.sync</span>=<span class="string">"searchModel"</span></div><div class="line">    &gt;<span class="tag">&lt;/<span class="name">quasar-search</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Select]]></title>
      <url>http://quasar-framework.org/components/select.html</url>
      <content type="html"><![CDATA[<p>A Quasar Select box can be of two types: single selection (using Radios) or multiple selection (using Checkboxes or Toggles). This component opens up a Popover. If for some reason you want it to open a Dialog, use the “sibling” <a href="/components/dialog-select.html">Dialog Select</a> component.</p>
<input type="hidden" data-fullpage-demo="form/select/basic">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Single Selection using Radios --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Multiple Selection using Checkboxes--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Multiple Selection using Toggles--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"toggle"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Yes</td>
<td>Model for the Select Component.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Yes</td>
<td>Array of options (Object with <code>label</code> and <code>value</code> properties).</td>
</tr>
<tr>
<td><code>type</code></td>
<td>Yes</td>
<td>One of <code>radio</code>, <code>checkbox</code> or <code>toggle</code> strings.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td></td>
<td>Placeholder to use.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td></td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open()</code></td>
<td>Opens the Popover</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Closes the Popover</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"select"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-label"</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>supervisor_account<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"full-width"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"toggle"</span></div><div class="line">        <span class="attr">:model.sync</span>=<span class="string">"multipleSelect"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      &gt;<span class="tag">&lt;/<span class="name">quasar-select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Slider]]></title>
      <url>http://quasar-framework.org/components/slider.html</url>
      <content type="html"><![CDATA[<p>Quasar Slider is a Vue Component which you can use to display more information with less real estate, using slides.</p>
<p>The Slider height is determined by the slide with biggest height.</p>
<input type="hidden" data-fullpage-demo="web-components/slider">

<h2 id="Basic-Slider"><a href="#Basic-Slider" class="headerlink" title="Basic Slider"></a>Basic Slider</h2><p>Basic Slider. No controls. Just swipe between slides or<br>use you mouse to drag slides to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-slider</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></div><div class="line">    Slide 3</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>arrows</code></td>
<td>Boolean</td>
<td>Show arrows</td>
</tr>
<tr>
<td><code>dots</code></td>
<td>Boolean</td>
<td>Show dots at bottom</td>
</tr>
<tr>
<td><code>fullscreen</code></td>
<td>Boolean</td>
<td>Shows Fullscreen button</td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Boolean</td>
<td>Show Actions slot</td>
</tr>
</tbody>
</table>
<h2 id="Slider-with-Arrows-Dots-and-Fullscreen-Controls"><a href="#Slider-with-Arrows-Dots-and-Fullscreen-Controls" class="headerlink" title="Slider with Arrows, Dots and Fullscreen Controls"></a>Slider with Arrows, Dots and Fullscreen Controls</h2><p>Sliders can contain button controls, like:</p>
<ul>
<li>Arrows so user can switch between slides if swipe actions are not enough.</li>
<li>Clickable small dots to also quickly switch between slides and give a hint on the number of current slide.</li>
<li>Fullscreen button so Slider can be displayed over all screen real-estate.</li>
</ul>
<p>To show these controls simply add <code>arrows</code>, <code>dots</code> and/or <code>fullscreen</code> DOM node attributes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">fullscreen</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Slider-with-Centered-Content"><a href="#Slider-with-Centered-Content" class="headerlink" title="Slider with Centered Content"></a>Slider with Centered Content</h2><p>Add CSS class <code>centered</code> to the slide that you want to center its content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Slider-with-Custom-Actions"><a href="#Slider-with-Custom-Actions" class="headerlink" title="Slider with Custom Actions"></a>Slider with Custom Actions</h2><p>Put icons on the same DOM hierarchical level as the slides.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-slider</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">actions</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></div><div class="line">    Slide 3</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someMethod()"</span>&gt;</span></div><div class="line">    camera_enhance</div><div class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someOtherMethod()"</span>&gt;</span></div><div class="line">    bookmark_border</div><div class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"thirdMethod()"</span>&gt;</span></div><div class="line">    add_shopping_cart</div><div class="line">  <span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Launch-Slider-in-Fullscreen"><a href="#Launch-Slider-in-Fullscreen" class="headerlink" title="Launch Slider in Fullscreen"></a>Launch Slider in Fullscreen</h2><p>You can launch a Slider in Fullscreen by using <a href="/components/modal.html">Modals</a>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Modal.create(&#123;</div><div class="line">  template: modalTemplate</div><div class="line">&#125;).set(&#123;</div><div class="line">  maximized: <span class="literal">true</span></div><div class="line">&#125;).show()</div></pre></td></tr></table></figure>
<p>Your modal template should only contain at most one slider like ones above, and not more.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spinners]]></title>
      <url>http://quasar-framework.org/components/spinners.html</url>
      <content type="html"><![CDATA[<p>A Spinner is used to show the user a process is currently taking place. You can pick their size without a loss of quality due to the fact that SVGs are used.</p>
<input type="hidden" data-fullpage-demo="web-components/spinner">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Default platform spinner with no options--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spinner</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Specific spinner --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spinner</span> <span class="attr">name</span>=<span class="string">"bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spinner with options --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spinner</span> <span class="attr">color</span>=<span class="string">"#ff00ee"</span> <span class="attr">:size</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Following types are available: <code>audio</code>, <code>ball</code>, <code>bars</code>, <code>circles</code>, <code>dots</code>, <code>grid</code>, <code>hearts</code>, <code>ios</code>, <code>oval</code>, <code>puff</code>, <code>rings</code>, <code>tail</code>, <code>facebook</code>, <code>gears</code>, <code>hourglass</code>, <code>infinity</code>, <code>pie</code>, <code>radio</code>.</p>
<p>The size is in pixels.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[State Component]]></title>
      <url>http://quasar-framework.org/components/state.html</url>
      <content type="html"><![CDATA[<p>Quasar State Component helps you when you have two states (called “default” and “active”) to display using the same real estate of a page. Look at the demo which presents a button that when clicked it shifts to the “active” state and shows a spinner.</p>
<input type="hidden" data-fullpage-demo="web-components/state">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-state</span> <span class="attr">:model.sync</span>=<span class="string">"state"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"active"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spinner</span> <span class="attr">:size</span>=<span class="string">"51"</span>&gt;</span><span class="tag">&lt;/<span class="name">spinner</span>&gt;</span> Active State</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    any component outside of slot="active"</div><div class="line">    is displayed for the default state</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"changeState()"</span>&gt;</span></div><div class="line">    Default State - Hit me!</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-state</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...,</div><div class="line">      state: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    changeState () &#123;</div><div class="line">      <span class="keyword">this</span>.state = <span class="literal">true</span></div><div class="line"></div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.state = <span class="literal">false</span></div><div class="line">      &#125;, <span class="number">2000</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Boolean</td>
<td>Show default (when <code>false</code>) or “active” state (when <code>true</code>)</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Stepper]]></title>
      <url>http://quasar-framework.org/components/stepper.html</url>
      <content type="html"><![CDATA[<p>A Stepper is an interface for users to show numbered steps or for navigation. It’s usually useful when user has to follow steps to complete a process.</p>
<input type="hidden" data-fullpage-demo="web-components/stepper">

<p>The navigation is handled by Quasar. User is able to go forward, back and to finish the process.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-stepper</span> @<span class="attr">finish</span>=<span class="string">"finish()"</span> <span class="attr">v-ref:stepper</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-step</span> <span class="attr">title</span>=<span class="string">"Select campaign settings"</span>&gt;</span></div><div class="line">    Content, DOM Elements, Components, ...</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Step specifying when user should be able to jump to next step --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-step</span> <span class="attr">title</span>=<span class="string">"Create an ad group"</span> <span class="attr">:ready</span>=<span class="string">"ready"</span>&gt;</span></div><div class="line">    Content, DOM Elements, Components, ...</div><div class="line">    Do something and change 'ready' variable to boolean 'true'.</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-step</span> <span class="attr">title</span>=<span class="string">"Create an ad"</span>&gt;</span></div><div class="line">    Content, DOM Elements, Components, ...</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-step</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-stepper</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Container-Vue-Methods-amp-Events"><a href="#Container-Vue-Methods-amp-Events" class="headerlink" title="Container Vue Methods &amp; Events"></a>Container Vue Methods &amp; Events</h2><p><em>Applies to <code>&lt;quasar-stepper&gt;</code> only:</em></p>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>reset()</code></td>
<td>Resets progress</td>
</tr>
<tr>
<td><code>redraw()</code></td>
<td>When adding/removing steps in DOM, this method is automatically called</td>
</tr>
<tr>
<td><code>nextStep()</code></td>
<td>Stepper goes to next step.</td>
</tr>
<tr>
<td><code>previousStep()</code></td>
<td>Stepper goes to previous step.</td>
</tr>
<tr>
<td><code>finish()</code></td>
<td>Stepper goes to “complete” state.</td>
</tr>
</tbody>
</table>
<p>Events:</p>
<table>
<thead>
<tr>
<th>Vue Event</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>finish</code></td>
<td>Function</td>
<td>Function to call when user completes all steps.</td>
</tr>
</tbody>
</table>
<h2 id="Step-Vue-Properties-amp-Methods"><a href="#Step-Vue-Properties-amp-Methods" class="headerlink" title="Step Vue Properties &amp; Methods"></a>Step Vue Properties &amp; Methods</h2><p><em>Applies to <code>&lt;quasar-step&gt;</code>:</em></p>
<p>Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Step title</td>
</tr>
<tr>
<td><code>ready</code></td>
<td>Boolean</td>
<td>Can user continue with next step? Default is <code>true</code>.</td>
</tr>
</tbody>
</table>
<p>Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>nextStep()</code></td>
<td>Stepper goes to next step.</td>
</tr>
<tr>
<td><code>previousStep()</code></td>
<td>Stepper goes to previous step.</td>
</tr>
<tr>
<td><code>finish()</code></td>
<td>Stepper goes to “complete” state.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Jump-to-Next-Step"><a href="#Handling-Jump-to-Next-Step" class="headerlink" title="Handling Jump to Next Step"></a>Handling Jump to Next Step</h2><p>Specifying the <code>ready</code> dom attribute property (Boolean) makes Stepper activate or deactivate the <code>Next</code> or <code>Finish</code> button. See step #2 in the demo.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-step</span> <span class="attr">title</span>=<span class="string">"Create an ad group"</span> <span class="attr">:ready</span>=<span class="string">"ready"</span>&gt;</span></div><div class="line">  Content, DOM Elements, Components, ...</div><div class="line">  Do something and change 'ready' variable to boolean 'true'.</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-step</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Handling-Stepper-Finish"><a href="#Handling-Stepper-Finish" class="headerlink" title="Handling Stepper Finish"></a>Handling Stepper Finish</h2><p>Use <code>@finish</code> event on <code>&lt;quasar-stepper&gt;</code> to execute a method when user hits the <code>Finish</code> button.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-stepper</span> @<span class="attr">finish</span>=<span class="string">"doSomething()"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-stepper</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tabs]]></title>
      <url>http://quasar-framework.org/components/tabs.html</url>
      <content type="html"><![CDATA[<p>Quasar Tabs are a way of displaying more information using less window real-estate. This Component can especially be used in Layouts.</p>
<input type="hidden" data-fullpage-demo="layout/tabs">

<p>On desktop, Tabs will use clickable arrows to indicate to the user that they can scroll to see them all, if they don’t all fit on the screen. Tabs are responsive and on small screens (like on a phone) if they can all fit on the screen they will share all screen width, otherwise user can swipe through the Tabs.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Example of a <code>*.vue</code> file using Tabs.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Tabs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-tabs</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">target</span>=<span class="string">"#tab-1"</span>&gt;</span></div><div class="line">    Tab 1</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">target</span>=<span class="string">"#tab-2"</span>&gt;</span></div><div class="line">    Tab 2</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Targets --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab-1"</span>&gt;</span></div><div class="line">  ...tab content...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab-2"</span>&gt;</span></div><div class="line">  ...tab content...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties-amp-Methods"><a href="#Vue-Properties-amp-Methods" class="headerlink" title="Vue Properties &amp; Methods"></a>Vue Properties &amp; Methods</h2><blockquote>
<p>Please note that these properties and methods apply to <code>&lt;quasar-tab&gt;</code> and NOT their container <code>&lt;quasar-tabs&gt;</code>.</p>
</blockquote>
<p>Tab Properties:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hidden</code></td>
<td>Boolean</td>
<td>Show or hide it</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Make it disabled or not</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use for it</td>
</tr>
<tr>
<td><code>target</code></td>
<td>String</td>
<td>DOM element selector for target. It makes it be displayed when Tab is active and hides target when other Tab is selected instead.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>String</td>
<td>Possible values: <code>icon</code> (hides icon) or <code>label</code> (hides label and only displays icon)</td>
</tr>
<tr>
<td><code>active</code></td>
<td>Boolean</td>
<td>Just one Tab can be active. Use this attribute to auto-select a Tab by default.</td>
</tr>
</tbody>
</table>
<p>Tab Methods:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>activate()</code></td>
<td>Select the respective Tab</td>
</tr>
<tr>
<td><code>setTargetVisibility(Boolean)</code></td>
<td>Set target visibility. <code>true</code> means visible, <code>false</code> means hidden</td>
</tr>
</tbody>
</table>
<h2 id="Usage-with-Vue-Router"><a href="#Usage-with-Vue-Router" class="headerlink" title="Usage with Vue Router"></a>Usage with Vue Router</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Tabs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-tabs</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/mails', exact: true&#125;"</span>&gt;</span></div><div class="line">    Mails</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/alarms', exact: true&#125;"</span>&gt;</span></div><div class="line">    Alarms</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Your Tabs will be auto-selected when user navigates to the specified routes (through <code>v-link</code> Vue directive).</p>
<h2 id="Usage-on-a-Layout"><a href="#Usage-on-a-Layout" class="headerlink" title="Usage on a Layout"></a>Usage on a Layout</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">quasar-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/mails', exact: true&#125;"</span>&gt;</span></div><div class="line">      Mails</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-tab</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/alarms', exact: true&#125;"</span>&gt;</span></div><div class="line">      Alarms</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-tab</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Notice the <code>slot=&quot;navigation&quot;</code> attribute. This makes Quasar know where to place your Tabs depending on the theme. On Material Design theme it will place them between Layout header and page view, and on iOS theme between page view and Layout footer.</p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-tabs</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also invert the colors (see demo for example) by adding the color and <code>inverted</code> as CSS classes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-tabs</span> <span class="attr">class</span>=<span class="string">"inverted orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">quasar-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Timeline CSS]]></title>
      <url>http://quasar-framework.org/components/timeline.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies CSS classes for displaying a timeline. Loot at the syntax below.</p>
<input type="hidden" data-fullpage-demo="css/timeline">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- label --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"bg-white text-italic"</span>&gt;</span></div><div class="line">      Friday</div><div class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- item --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-badge"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- badge with avatar --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/demo-app/assets/linux-avatar.png"</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- ...or badge with icon --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- title --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-title"</span>&gt;</span></div><div class="line">      Trip to mountains</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- date timestamp --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-date text-italic"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>17:01<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>June 16th, 2016<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      content; any Web component or DOM elements,</div><div class="line">      in this particular case, a Card</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span></div><div class="line">        Card Title</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Positioning"><a href="#Positioning" class="headerlink" title="Positioning"></a>Positioning</h2><p>On wide-enough windows, Timelines display items on the left-side and right-side, alternating the position. To override the default position, use <code>on-left</code> or <code>on-right</code> CSS classes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- item on left-side regardless of default position --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-item on-left"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- item on right-side regardless of default position --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline-item on-right"</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>For overriding the default colors used on a Timeline, use <a href="/api/css-color-palette.html">Quasar CSS color classes</a> like <code>red</code>, <code>primary</code>, <code>teal</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timeline red"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Textarea]]></title>
      <url>http://quasar-framework.org/components/textarea.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/text-input/textarea">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This is not a component per say. It’s the HTML <code>&lt;textarea&gt;</code> element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"model"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"Placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Check next sections to see how you can use a stacked or floating label for it.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lazy</code></td>
<td>Empty Attribute</td>
<td>Change model after textarea loses focus</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Change model with a debouncing timing</td>
</tr>
<tr>
<td><code>disabled</code></td>
<td>Boolean</td>
<td>Disables input.</td>
</tr>
</tbody>
</table>
<h2 id="Stacked-Label"><a href="#Stacked-Label" class="headerlink" title="Stacked Label"></a>Stacked Label</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Floating-Label"><a href="#Floating-Label" class="headerlink" title="Floating Label"></a>Floating Label</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-right: 10px;"</span> <span class="attr">class</span>=<span class="string">"item-label"</span>&gt;</span>Label:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stacked-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Stacked Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"item-primary"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floating-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">required</span> <span class="attr">class</span>=<span class="string">"full-width"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Floating Label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Textbox and Textarea with No Borders<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item multiple-lines item-delimiter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Notice the "no-border" CSS class --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"full-width no-border"</span>&gt;</span></div><div class="line">        Textarea here with no border and full width.</div><div class="line">      <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toast]]></title>
      <url>http://quasar-framework.org/components/toast.html</url>
      <content type="html"><![CDATA[<p>Quasar Toasts appear on top of the screen above any other components to signal the user with a message and sometimes with an action too. They can be dismissed by clicking on the right side button.</p>
<blockquote>
<p>Toasts are displayed one at a time, but you can build up a queue of them.</p>
</blockquote>
<input type="hidden" data-fullpage-demo="global/toast">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Quasar App Toast is a message displayed to the user. Below is an example of a simple Toast containing only a message:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create(<span class="built_in">String</span> or <span class="built_in">Object</span>)</div></pre></td></tr></table></figure></p>
<p>When creating a Toast with a String, that String is the actual message going to be displayed. For more complex cases (like also displaying an icon or an image, or controlling the Toast’s color), use an Object instead of String and read below on <a href="#Toast-Options">Toast Options</a>.</p>
<h2 id="Toast-Options"><a href="#Toast-Options" class="headerlink" title="Toast Options"></a>Toast Options</h2><p>We saw how to display a Toast, but let’s go deeper and analize the required parameter at instantiation, which can be a String or an Object.</p>
<p>When a String, it simply displays that String as the content of your Toast.<br>When an Object, you can specify more options:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create(&#123;</div><div class="line">  html: <span class="string">'Message to display'</span>,</div><div class="line">  icon: <span class="string">'alarm_add'</span>,</div><div class="line">  timeout: <span class="number">2500</span>,</div><div class="line">  color: <span class="string">'#f8c1c1'</span>,</div><div class="line">  bgColor: <span class="string">'white'</span>,</div><div class="line">  button: &#123;</div><div class="line">    label: <span class="string">'Undo'</span>,</div><div class="line">    handler () &#123;</div><div class="line">      <span class="comment">// Specify what to do when button is clicked/tapped</span></div><div class="line">    &#125;,</div><div class="line">    color: <span class="string">'#000'</span></div><div class="line">  &#125;,</div><div class="line">  vm: &#123;</div><div class="line">    <span class="comment">// VueModel for the Toast</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>html</code></td>
<td><em>none</em></td>
<td>(<strong>Required</strong>) HTML to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td><em>none</em></td>
<td>Icon to use. See <a href="/api/css-icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>image</code></td>
<td><em>none</em></td>
<td>Image to include.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>7000</td>
<td>Timeout in milliseconds until being automatically dissmissed.</td>
</tr>
<tr>
<td><code>button</code></td>
<td><em>none</em></td>
<td>Place a button with an action, like “Undo”. Specify <code>label</code> (String) and <code>handler</code> (Function). Optionally, specify a CSS color.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>CSS color of Toast text</td>
</tr>
<tr>
<td><code>bgColor</code></td>
<td>String</td>
<td>CSS color of Toast background</td>
</tr>
<tr>
<td><code>onDismiss</code></td>
<td>Function</td>
<td>Function to execute when Toast gets dismissed.</td>
</tr>
</tbody>
</table>
<h2 id="Types-of-Toasts"><a href="#Types-of-Toasts" class="headerlink" title="Types of Toasts"></a>Types of Toasts</h2><p>Quasar offers the possibility to create out of the box Toasts for different types of success or failure messages. The Toast types have specific icons and colors.</p>
<p>The types of Toasts we are talking about are: <code>positive</code> (for success), <code>negative</code> (for errors), <code>warning</code> and <code>info</code>. Here’s how to create them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create.positive(&#123;...&#125;)</div><div class="line">Toast.create.negative(&#123;...&#125;)</div><div class="line">Toast.create.warning(&#123;...&#125;)</div><div class="line">Toast.create.info(&#123;...&#125;)</div></pre></td></tr></table></figure>
<h2 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h2><p>If you like to change the default Toast’s settings, like color of text, color of background or timeout, you can easily do so:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Call this only AFTER Vue.use(Quasar):</span></div><div class="line">Toast.setDefaults(&#123;</div><div class="line">  <span class="comment">// props from above</span></div><div class="line">  color: <span class="string">'#eee'</span>,</div><div class="line">  timeout: <span class="number">10000</span>,</div><div class="line">  ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Now all of the default Toasts will inherit these properties.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toggle]]></title>
      <url>http://quasar-framework.org/components/toggle.html</url>
      <content type="html"><![CDATA[<input type="hidden" data-fullpage-demo="form/toggle">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-toggle</span></span></div><div class="line">    <span class="attr">:model.sync</span>=<span class="string">"checked"</span></div><div class="line">  &gt;<span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">  Toggle Label</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With no label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-toggle</span></span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"checked"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With icon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-toggle</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"alarm"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"checked"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">quasar-toggle</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"checked"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-toggle</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">:model.sync</span>=<span class="string">"checked"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Boolean</td>
<td>Checked or not.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Optional icon to use.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled user can not change state.</td>
</tr>
</tbody>
</table>
<h2 id="Inside-of-a-List-Usage"><a href="#Inside-of-a-List-Usage" class="headerlink" title="Inside of a List Usage"></a>Inside of a List Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      Events and reminders</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item two-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"purple"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item three-lines"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content has-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-secondary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">quasar-toggle</span> <span class="attr">:model.sync</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">quasar-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tooltips]]></title>
      <url>http://quasar-framework.org/components/tooltip.html</url>
      <content type="html"><![CDATA[<p>Quasar Tooltips offer additional information to the user that otherwise would be hidden. The implementation is through a Quasar directive called <code>v-tooltip</code>.</p>
<input type="hidden" data-fullpage-demo="web-components/tooltip">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Some examples --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip.literal</span>=<span class="string">"Quasar Rulz!"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"indigo"</span> <span class="attr">v-tooltip.wrap.inline.literal</span>=<span class="string">"Tooltip"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"red"</span> <span class="attr">v-tooltip.wrap.literal</span>=<span class="string">"Tooltip for the user"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip</span>=<span class="string">"vmProperty"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-tooltip.inline.literal</span>=<span class="string">"Lorem Ipsum..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Tooltips use <code>:before</code> and <code>:after</code> CSS pseudo-elements. When used on a DOM element that already has these pseudo-elements, then add the <code>wrap</code> directive modifier so they won’t be overriden. If you need that wrapped element to be inline, then also add the <code>inline</code> directive modifier.</p>
<table>
<thead>
<tr>
<th>Directive Modifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>literal</code></td>
<td>Use the literal string instead of interpreting it as a variable name from VueModel.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Make the element inline.</td>
</tr>
<tr>
<td><code>wrap</code></td>
<td>Wrap the element so the <code>:before</code> and <code>:after</code> CSS pseudo-elements won’t be overriden.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tree]]></title>
      <url>http://quasar-framework.org/components/tree.html</url>
      <content type="html"><![CDATA[<p>Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure.</p>
<p>Trees are stripped out of any design by default so you can<br>easily stylize and turn them into anything you want.</p>
<input type="hidden" data-fullpage-demo="web-components/tree">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-tree</span></span></div><div class="line">  <span class="attr">:model</span>=<span class="string">"treeModel"</span></div><div class="line">  <span class="attr">contract-html</span>=<span class="string">"&lt;i&gt;remove_circle&lt;/i&gt;"</span></div><div class="line">  <span class="attr">expand-html</span>=<span class="string">"&lt;i&gt;add_circle&lt;/i&gt;"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-tree</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Tree-model-structure"><a href="#Tree-model-structure" class="headerlink" title="Tree model structure"></a>Tree model structure</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">treeModel: [</div><div class="line">  &#123;</div><div class="line">    title: <span class="string">'Item 1'</span>,</div><div class="line">    expanded: <span class="literal">true</span>,</div><div class="line">    children: [</div><div class="line">      &#123;</div><div class="line">        title: <span class="string">'Item 1.1'</span>,</div><div class="line">        expanded: <span class="literal">false</span>,</div><div class="line">        children: [</div><div class="line">          &#123;</div><div class="line">            title: <span class="string">'Item 1.1.1'</span>,</div><div class="line">            expanded: <span class="literal">false</span>,</div><div class="line">            children: [</div><div class="line">              &#123;</div><div class="line">                title: <span class="string">'Item 1.1.1.1'</span>,</div><div class="line">                expanded: <span class="literal">false</span>,</div><div class="line">                children: []</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            title: <span class="string">'Item 1.1.2'</span>,</div><div class="line">            expanded: <span class="literal">false</span>,</div><div class="line">            handler () &#123; <span class="built_in">console</span>.log(<span class="string">'Tapped on Item 1.1.2'</span>) &#125;,</div><div class="line">            children: []</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        title: <span class="string">'Item 1.2'</span>,</div><div class="line">        expanded: <span class="literal">false</span>,</div><div class="line">        children: []</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    title: <span class="string">'Item 2'</span>,</div><div class="line">    expanded: <span class="literal">false</span>,</div><div class="line">    children: []</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>Items containing a <code>handler</code> method will make those items trigger the handler method when clicked/tapped.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Vue model for the Tree</td>
</tr>
<tr>
<td><code>contract-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch contracts</td>
</tr>
<tr>
<td><code>expand-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch expands</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toolbar]]></title>
      <url>http://quasar-framework.org/components/toolbar.html</url>
      <content type="html"><![CDATA[<p>Quasar Toolbars are non-wrappable DOM elements which usually contain buttons and text.</p>
<p>A Quasar Layout can have have headers and/or footers (also called “marginals”), which will always be visible to the user at all times as long as the Layout is being used. This is a great place to use Toolbars, but you can also place Toolbars anywhere else you want.</p>
<input type="hidden" data-fullpage-demo="layout/toolbar">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Standalone example (within a page template, not on a Layout):<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Toolbar title --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">quasar-toolbar-title</span> <span class="attr">:padding</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    Title</div><div class="line">  <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Example on using a Toolbar on Layout header:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"toolbar"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- opens left-side drawer --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"left-drawer-opener"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Toolbar title/text --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">quasar-toolbar-title</span> <span class="attr">:padding</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">      Title</div><div class="line">    <span class="tag">&lt;/<span class="name">quasar-toolbar-title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>alarm<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">quasar-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Toolbar-Title-Text"><a href="#Toolbar-Title-Text" class="headerlink" title="Toolbar Title/Text"></a>Toolbar Title/Text</h2><p>As you’ve seen in the examples above, there’s the <code>&lt;quasar-toolbar-title&gt;</code> component which wraps the title/text of a Toolbar.</p>
<p>In order to successfully place it in the horizontal middle of your Toolbar on iOS theme (which is specific for iOS Apps), then you need to specify the maximum number of buttons on the left or right side of the title through the <code>padding</code> attribute.</p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also invert the colors (see demo for example) by adding the color and <code>inverted</code> as CSS classes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar inverted orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Video Embedding]]></title>
      <url>http://quasar-framework.org/components/video-embedding.html</url>
      <content type="html"><![CDATA[<p>Embedding a video like Youtube is easy. It also resizes to fit the container by default.</p>
<input type="hidden" data-fullpage-demo="web-components/video-embedding">

<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">quasar-video</span></span></div><div class="line">  <span class="attr">:src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"width: 853px; height: 480px"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">quasar-video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or, if you prefer the “raw” version:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></div><div class="line">    <span class="attr">width</span>=<span class="string">"853"</span></div><div class="line">    <span class="attr">height</span>=<span class="string">"480"</span></div><div class="line">    <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">    <span class="attr">frameborder</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">allowfullscreen</span></div><div class="line">  &gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Vue Transitions]]></title>
      <url>http://quasar-framework.org/components/vue-transitions.html</url>
      <content type="html"><![CDATA[<p>At the moment, Quasar provides only one ready to use Vue transition. If you don’t know what a transition is, read <a href="http://vuejs.org/guide/transitions.html" target="_blank" rel="external">here</a>.<br>Vue transitions work alongside <code>v-show</code>, <code>v-if</code> and <code>v-for</code> Vue directives.</p>
<input type="hidden" data-fullpage-demo="transitions">

<h3 id="“slide”-transition"><a href="#“slide”-transition" class="headerlink" title="“slide” transition"></a>“slide” transition</h3><p>Slide the DOM element up or down based on its visibility.</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- Template for VueModel below --&gt;</div><div class="line">&lt;img</div><div class="line">  v-show="visible" &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">  transition="slide" &lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">  src="assets/quasar.jpg"</div><div class="line">&gt;</div><div class="line">&lt;button @click="toggleVisibility()"&gt;Toggle&lt;/button&gt;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  ...,</div><div class="line">  data: &#123;</div><div class="line">    ...,</div><div class="line">    visible: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    toggleVisibility: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
