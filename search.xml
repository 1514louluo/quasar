<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>http://quasar-framework.org/2015/10/02/Working-On-The-First-Release/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Writing a Quasar App Page]]></title>
      <url>http://quasar-framework.org/guide/writing-quasar-page.html</url>
      <content type="html"><![CDATA[<p>Make sure you read and understand the <a href="/guide/quasar-app-structure.html">folder structure of a Quasar App</a> first. Read the <a href="/guide/quasar-app-structure.html#Pages">Pages</a> section closely.</p>
<p>Then use the <a href="/guide/cli-commands.html#Pages">Quasar CLI</a> to build a Page.</p>
<p>Also don’t forget to read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand how pages are precompiled and bundled, what files are considered an entry-point and many more.</p>
<p>Let’s dissect how Pages work.</p>
<h2 id="Javascript">Javascript</h2><p>The starting point of a Quasar Page is <em>script.page-name.js</em> file. Think of it as the Controller part of a Page.</p>
<p>It has a basic CommonJS structure that exports a Vue instantiation object or a function for doing asynchronous operations before calling a callback with a Vue instantiation object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 1. Supply Vue instantiation object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 2. Do some asynch ops first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Properties available:</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">  <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line">  <span class="keyword">this</span>.route <span class="comment">// [String] Route name (eg. '$' or ':chapter/:page')</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// asynchronous operations</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  done(&#123; <span class="comment">// Vue instance</span></span><br><span class="line">    template: html,</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tips">Tips</h3><ol>
<li><p>When exporting a function, make sure the callback is called, otherwise the Page will never load.</p>
</li>
<li><p>Include other JS files for modularity by <em>require()</em>-ing them. Take full advantage of Webpack.<br>Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
</li>
<li><p>Make sure you use <code>require(&#39;raw!.....&#39;)</code> syntax for the template so that it will get bundled automatically into your JS file with the help of the Build System. This saves one precious HTTP request. <strong>Do not require the template within the exporting function (if you use one) because Webpack won’t know it needs to be handled at compile time</strong>. So require it outside to avoid issues.</p>
</li>
<li><p>Make good use of the Vue component lifecycle methods (<code>created</code>, <code>beforeCompile</code>, <code>compiled</code>, <code>ready</code>, <code>beforeDestroy</code>, <code>destroyed</code>) and different props:<br><img src="/images/vue-lifecycle.png" alt="Vue Lifecycle Diagram" title="Vue Lifecycle Diagram"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example making use of Vue component lifecycle methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  beforeCompile: &#123;</span><br><span class="line">    <span class="comment">// Before template compiling</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ready: &#123;</span><br><span class="line">    <span class="comment">// Template has been rendered into view</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make sure you sanitize intervals, timeouts, requestAnimationFrames or anything else at <code>beforeDestroy</code> point, otherwise you may end up with bugs when user switches to another Page.</p>
</li>
</ol>
<h2 id="Page_Manifest">Page Manifest</h2><p>Provide page specific configuration (in YAML format), called <em>Manifest</em> in <code>/pages/*page-name*/config.*page-name*.yml</code>.</p>
<h3 id="CSS_Property">CSS Property</h3><p>These get computed by default if CSS main page file exists (<strong>so it is optional!</strong>), but it can be overridden to point to other files. The path must start with the folder where app root <em>index.html</em> file exists.<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">css: &#39;path/to/css&#39;</span><br></pre></td></tr></table></figure></p>
<h3 id="Page_Routes_Property">Page Routes Property</h3><p>One more important property is <code>hashes</code>, which is an array of hashes for the respective page. Example:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># config.book.yml&#10;&#10;hashes:&#10;  - &#39;$&#39; # registers #/book route (because &#39;book&#39; is the name of the page)&#10;  - &#39;:chapter/:page&#39; # adds this.params.chapter &#38; this.params.page to page&#39;s main script when using a function</span><br></pre></td></tr></table></figure></p>
<p>So now if we navigate to route <em>#/book/thinking/20</em>, we’ll trigger <em>book</em> page:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js/script.book.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.params.chapter <span class="comment">// is (String) 'thinking'</span></span><br><span class="line">  <span class="keyword">this</span>.params.page <span class="comment">// is (String) '20'</span></span><br><span class="line"></span><br><span class="line">  done(...);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="Your_Own_Properties">Your Own Properties</h3><p>Any other property that you write in the page manifest will be accessible under <code>this.manifest</code> property in page methods, and under the global <code>quasar.global.manifest</code> object.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># config.book.yml&#10;&#10;myprop: &#39;my-value&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js/script.book.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.manifest.myprop <span class="comment">// is 'my-value'</span></span><br><span class="line"></span><br><span class="line">  done(...);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Page_Events">Page Events</h2><p>There are global events registered for each step of the way when a user navigates to a page. See <a href="/api/core-js-events.html#Global_Events_Emitter">Quasar Events Global Emitter</a> if you haven’t already.</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:page:require</td>
<td>Triggered before requiring page JS file</td>
</tr>
<tr>
<td>app:page:post-require</td>
<td>Triggered after requiring page JS file</td>
</tr>
<tr>
<td>app:page:prepare</td>
<td>Triggered before solving page dependencies</td>
</tr>
<tr>
<td>app:page:post-prepare</td>
<td>Triggered after we have the page’s Vue instantiation object</td>
</tr>
<tr>
<td>app:page:render</td>
<td>Triggered before rendering page on screen</td>
</tr>
<tr>
<td>app:page:post-render</td>
<td>Triggered after rendering page on screen</td>
</tr>
<tr>
<td>app:page:ready</td>
<td>Triggered when page has fully loaded</td>
</tr>
</tbody>
</table>
<p>Usage example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.global.events.on(<span class="string">'app:page:ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// props.params, props.query, props.name, props.manifest, props.route, ... available</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="HTML">HTML</h2><p>The Quasar App Page HTML represents a Vue instance template. Read more about the <a href="/guide/quasar-build-system.html#HTML_Files">Build System</a> to understand.</p>
<h2 id="CSS">CSS</h2><p>Notice that all CSS files have the <em>.styl</em> extension. This is because you can use Stylus (with NIB extension). Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
<h2 id="Assets">Assets</h2><p>Place all your page assets (images, fonts, …) inside the <code>/pages/*page-name*/assets/</code> folder.<br>Images get optimized by default on a production build.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Writing a Quasar App Layout]]></title>
      <url>http://quasar-framework.org/guide/writing-quasar-layout.html</url>
      <content type="html"><![CDATA[<p>Make sure you read and understand the <a href="/guide/quasar-app-structure.html">folder structure of a Quasar App</a> first.<br>Read the <a href="/guide/quasar-app-structure.html#Layouts">Layouts</a> section closely. Then use the <a href="/guide/cli-commands.html#Layouts">Quasar CLI</a> to build a Layout.</p>
<p>Now let’s dissect how Layouts work.</p>
<h2 id="Javascript">Javascript</h2><p>The starting point of a Quasar Layout is <em>layout.layout-name.js</em> file. Think of it as the Controller of a Layout.</p>
<p>It has a basic CommonJS structure that exports a Vue instantiation object or a function for doing asynchronous operations before calling a callback with a Vue instantiation object.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 1. Supply Vue instantiation object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./layout.layout-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Option 2. Do some asynch ops first</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./layout.layout-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * Properties available regarding the page</span><br><span class="line">   * that gets loaded along this Layout</span><br><span class="line">   */</span></span><br><span class="line">  <span class="keyword">this</span>.params <span class="comment">// [Object] Route parameters -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.query <span class="comment">// [Object] Route query string -- see API &gt; Router</span></span><br><span class="line">  <span class="keyword">this</span>.name <span class="comment">// [String] Page name (eg. 'index')</span></span><br><span class="line">  <span class="keyword">this</span>.manifest <span class="comment">// [Object] Page manifest (config.page-name.yml)</span></span><br><span class="line">  <span class="keyword">this</span>.route <span class="comment">// [String] Route name (eg. '$' or ':chapter/:page')</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// asynchronous operations</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  done(&#123; <span class="comment">// Vue instance</span></span><br><span class="line">    template: html,</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tips">Tips</h3><ol>
<li><p>When exporting a function, make sure the callback is called, otherwise the Page will never load.</p>
</li>
<li><p>Include other JS files for modularity by <em>require()</em>-ing them. Take full advantage of Webpack.<br>Read more about the <a href="/guide/quasar-build-system.html">Build System</a> to understand.</p>
</li>
<li><p>Make sure you use <code>require(&#39;raw!.....&#39;)</code> syntax for the template so that it will get bundled automatically into your JS file with the help of the Build System. This saves one precious HTTP request. <strong>Do not require the template within the exporting function (if you use one) because Webpack won’t know it needs to be handled at compile time</strong>. So require it outside to avoid issues.</p>
</li>
<li><p>Make good use of the Vue component lifecycle methods (<code>created</code>, <code>beforeCompile</code>, <code>compiled</code>, <code>ready</code>, <code>beforeDestroy</code>, <code>destroyed</code>) and different props:<br><img src="/images/vue-lifecycle.png" alt="Vue Lifecycle Diagram" title="Vue Lifecycle Diagram"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example making use of Vue component lifecycle methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="built_in">require</span>(<span class="string">'raw!./view.page-name.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// Vue instance</span></span><br><span class="line">  template: html,</span><br><span class="line">  beforeCompile: &#123;</span><br><span class="line">    <span class="comment">// Before template compiling</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ready: &#123;</span><br><span class="line">    <span class="comment">// Template has been rendered into view</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make sure you sanitize intervals, timeouts, requestAnimationFrames or anything else at <code>beforeDestroy</code> point, otherwise you may end up with bugs when user switches to another Layout.</p>
</li>
</ol>
<h2 id="HTML">HTML</h2><p>The Quasar App Layout HTML representa a Vue instance template. Read more about the <a href="/guide/quasar-build-system.html#HTML_Files">Build System</a> to understand.</p>
<p>There are several Web Components that you can use. Some of them are mandatory. A quick example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout.example.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">quasar-layout</span> <span class="attribute">shrink-header</span> <span class="attribute">scroll-shadow</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">sidebar</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-title</span>&gt;</span>Text &#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="title">quasar-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">alarm</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">ellipsis</span> <span class="attribute">vertical</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">database</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 1<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">alarm</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 2<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">database</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 3<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">quasar-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-page</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-page</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-title</span>&gt;</span>Quasar Rocks!<span class="tag">&lt;/<span class="title">quasar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">quasar-footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">quasar-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Read more about the Components and how to use them in the <a href="/api/web-components-layout.html">Web Components - Layout</a> section.</p>
<h2 id="Layout_Events">Layout Events</h2><p>There are global events registered for each step of the way when a Layout is loaded/swapped. See <a href="/api/core-js-events.html#Global_Events_Emitter">Quasar Events Global Emitter</a> if you haven’t already.</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:layout:require</td>
<td>Triggered before requiring page JS file</td>
</tr>
<tr>
<td>app:layout:post-require</td>
<td>Triggered after requiring page JS file</td>
</tr>
<tr>
<td>app:layout:prepare</td>
<td>Triggered before solving page dependencies</td>
</tr>
<tr>
<td>app:layout:post-prepare</td>
<td>Triggered after we have the page’s Vue instantiation object</td>
</tr>
<tr>
<td>app:layout:render</td>
<td>Triggered before rendering page on screen</td>
</tr>
<tr>
<td>app:layout:post-render</td>
<td>Triggered after rendering page on screen</td>
</tr>
<tr>
<td>app:layout:ready</td>
<td>Triggered when page has fully loaded</td>
</tr>
</tbody>
</table>
<p>Usage example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.global.events.on(<span class="string">'app:layout:ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue State Management]]></title>
      <url>http://quasar-framework.org/guide/vue-state-management.html</url>
      <content type="html"><![CDATA[<p>As you should know, Pages and Layouts are essentially Vue instances. So they have a data object. It is good to learn how to efficiently share parts of the data object between components.</p>
<p><em>The following is an extract (and adaptation) from <a href="http://vuejs.org" target="_blank">VueJS official website</a></em>.</p>
<p>In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instances simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sourceOfTruth = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Extending this idea further, we would arrive at the <strong>store pattern</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    message: <span class="string">'Hello!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action A triggered'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action B triggered'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Notice we are putting all actions that mutate the store’s state inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen to the state, and how are they triggered. Each component can still own and manage its private state.</p>
<p><img src="/images/vue-state-management.png" alt="Vue State Management"></p>
<p>One thing to take note is that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for the mutations to be observed.</p>
<p>If we enforce a convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we’ve essentially arrived at the <a href="https://facebook.github.io/flux/" target="_blank">Flux</a> architecture. The benefits of this convention is we can record all state mutations happening to the store, and on top of that we can implement advanced debugging helpers such as mutation logs, snapshots, history re-rolls etc.</p>
<p>The Flux architecture is commonly used in React applications. Turns out the core idea behind Flux can be quite simply achieved in Vue.js, thanks to the unobtrusive reactivity system. Do note what we demonstrated here is just an example to introduce the concept - you may not need it at all for simple scenarios, and you should adapt the pattern to fit the real needs of your application.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Mobile Wrapper Tips]]></title>
      <url>http://quasar-framework.org/guide/quasar-mobile-wrapper-tips.html</url>
      <content type="html"><![CDATA[<p>Make sure you read the CLI section called <a href="/guide/cli-commands.html#Native_Mobile_App_Wrapper">Native Mobile App Wrapper</a> first. This will give you a starting point. But here are some tips:</p>
<h2 id="Browser_Simulator">Browser Simulator</h2><p>Use Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an <em>emulator</em> and not the real deal.</p>
<p><img src="/images/chrome.png" alt="Google Chrome emulator" title="Google Chrome emulator"></p>
<h2 id="Debug_on_Android">Debug on Android</h2><p>When something goes wrong with your App when running on a mobile platform, what do you do? Write a bunch of <code>console.log()s</code>? Where should this be displayed? Use <code>alert()s</code>? This may interfere with the application’s flow.</p>
<p>So what do you do? The solution is to make use of the <code>tools/monitor</code> tool from the SDK.</p>
<p><img src="/images/monitor.png" alt="tools/monitor screen" title="tools/monitor screen"></p>
<h2 id="Setting_Up_Device_on_Linux">Setting Up Device on Linux</h2><p>You may bump into <code>?????? no permissions</code> problem when trying to run your App directly on an Android phone/tablet.</p>
<p>Here’s how you fix this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create the .rules file and insert the content</span></span><br><span class="line"><span class="comment"># from below this example</span></span><br><span class="line">sudo vim /etc/udev/rules.d/<span class="number">51</span>-android.rules</span><br><span class="line">sudo chmod <span class="number">644</span>   /etc/udev/rules.d/<span class="number">51</span>-android.rules</span><br><span class="line">sudo chown root. /etc/udev/rules.d/<span class="number">51</span>-android.rules</span><br><span class="line">sudo service udev restart</span><br><span class="line">sudo killall adb</span><br></pre></td></tr></table></figure>
<p>The content for <code>51-android.rules</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0bb4&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0e79&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0502&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0b05&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;413c&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0489&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;091e&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;18d1&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0bb4&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;12d1&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;24e3&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;2116&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0482&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;17ef&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;1004&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;22b8&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0409&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;2080&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0955&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;2257&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;10a9&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;1d4d&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0471&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;04da&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;05c6&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;1f53&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;04e8&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;04dd&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0fce&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;0930&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;19d2&#34;, MODE=&#34;0666&#34;&#10;SUBSYSTEM==&#34;usb&#34;, ATTRS&#123;idVendor&#125;==&#34;1bbb&#34;, MODE=&#34;0666&#34;</span><br></pre></td></tr></table></figure></p>
<p>Now running <code>adb devices</code> should discover your device.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Build System]]></title>
      <url>http://quasar-framework.org/guide/quasar-build-system.html</url>
      <content type="html"><![CDATA[<p>The App must be built before deployment. Read more how to build (and test) in the <a href="/guide/cli-commands.html#Build_App">CLI Commands</a> section.</p>
<p>Following lines will describe how everything is glued together.</p>
<h2 id="Source_Files">Source Files</h2><h3 id="Javascript_Files">Javascript Files</h3><p>Javascript files are glued together using <a href="http://webpack.github.io/docs/" target="_blank">Webpack</a>. So you can use <em>require()</em> – and <em>require.resolve()</em> – for modularity. You must adhere to the <a href="/guide/commonjs-format.html">CommonJS format</a> because of its many advantages when writing <em>.js</em> files.</p>
<p>Take into consideration that the following files are taken as Webpack entry-points (take a good look at folders):</p>
<ul>
<li>/js/*.js (Note: directly under /js; no sub-folders)</li>
<li>/pages/<em>page-name</em>/script.<em>page-name</em>.js</li>
<li>/layouts/<em>layout-name</em>/layout.<em>layout-name</em>.js</li>
</ul>
<blockquote>
<p><strong>NOTE</strong><br>Subfolders should be used to modularize your JS code.</p>
</blockquote>
<h3 id="CSS_Files">CSS Files</h3><p>Notice that all CSS files are built using <a href="https://learnboost.github.io/stylus/" target="_blank">Stylus</a>, so they have the <em>.styl</em> extension. The Stylus NIB extension is also available.</p>
<p>Take into consideration that the following files are taken as Stylus entry-points (take a good look at folders):</p>
<ul>
<li>/css/*.styl (Note: directly under /css; no sub-folders)</li>
<li>/pages/<em>page-name</em>/css/<em>file-name</em>.styl</li>
</ul>
<blockquote>
<p><strong>NOTE</strong><br>Subfolders should be used to modularize your CSS code.</p>
</blockquote>
<h3 id="Image_Files">Image Files</h3><p>Image files should be placed under <code>assets</code> folders. By default, on a production build, <code>GIF</code>, <code>JPEG</code>, <code>PNG</code> and <code>SVG</code> image files get “minified” without losing noticeable quality.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Structure]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-structure.html</url>
      <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>This is what a new Quasar Framework App folder structure looks like. Some folders are creating after building the App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tree -I <span class="string">'node_modules|wrapper'</span> <span class="operator">-a</span> --dirsfirst</span><br><span class="line">.</span><br><span class="line">├── coverage</span><br><span class="line">│   ├── lcov-report</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── lcov.info</span><br><span class="line">├── dist</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── icons</span><br><span class="line">│   │   │   │   ├── ...</span><br><span class="line">│   │   │   │   └── ...</span><br><span class="line">│   │   │   └── roboto</span><br><span class="line">│   │   │       ├── ...</span><br><span class="line">│   │   │       └── ...</span><br><span class="line">│   │   └── favicon.ico</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   ├── app.css</span><br><span class="line">│   │   └── app-dependencies.css</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   ├── app-dependencies.js</span><br><span class="line">│   │   └── app.js</span><br><span class="line">│   ├── layouts</span><br><span class="line">│   │   └── main</span><br><span class="line">│   │       └── layout.main.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       │   └── assets-README.txt</span><br><span class="line">│   │       ├── style.index.css</span><br><span class="line">│   │       └── script.index.js</span><br><span class="line">│   ├── app.json</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── favicon.ico</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── app.styl</span><br><span class="line">│   ├── html</span><br><span class="line">│   │   └── html-README.txt</span><br><span class="line">│   ├── js</span><br><span class="line">│   │   └── app.js</span><br><span class="line">│   ├── layouts</span><br><span class="line">│   │   └── main</span><br><span class="line">│   │       ├── layout.main.html</span><br><span class="line">│   │       └── layout.main.js</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   └── index</span><br><span class="line">│   │       ├── assets</span><br><span class="line">│   │       │   └── assets-README.txt</span><br><span class="line">│   │       ├── config.index.yml</span><br><span class="line">│   │       ├── style.index.styl</span><br><span class="line">│   │       ├── script.index.js</span><br><span class="line">│   │       └── view.index.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">│   ├── .eslintrc</span><br><span class="line">│   ├── setup.js</span><br><span class="line">│   └── test.spec.js</span><br><span class="line">├── wrapper</span><br><span class="line">│   ├── ....</span><br><span class="line">│   ├── ....</span><br><span class="line">│   └── ....</span><br><span class="line">├── .eslintrc</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package.json</span><br><span class="line">├── quasar.build.yml</span><br><span class="line">├── README.md</span><br><span class="line">└── .stylintrc</span><br><span class="line"></span><br><span class="line"><span class="number">29</span> directories, <span class="number">55</span> files</span><br></pre></td></tr></table></figure></p>
<p>What each is used for:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/dist</td>
<td>Production build folder</td>
</tr>
<tr>
<td>/dist/app.json</td>
<td>Pages Manifests put together. Details <a href="/guide/quasar-app-configuration.html#app-json">here</a></td>
</tr>
<tr>
<td>/coverage</td>
<td>Code coverage after <a href="/guide/cli-commands.html#Running_Test_Suites">running tests with CLI</a></td>
</tr>
<tr>
<td>/src</td>
<td>App source files; see <a href="#Source_Folder">Source Folder</a></td>
</tr>
<tr>
<td>/test</td>
<td>Test source files used for <a href="/guide/cli-commands.html#Running_Test_Suites">running tests with CLI</a></td>
</tr>
<tr>
<td>/wrapper</td>
<td>Native mobile app wrapper; see <a href="/guide/cli-commands.html#Native_Mobile_App_Wrapper">Native_Mobile_App_Wrapper</a></td>
</tr>
<tr>
<td>/.eslintrc</td>
<td>Default ESLINT config for linting Javascript files</td>
</tr>
<tr>
<td>/.gitignore</td>
<td>Tells GIT what files to ignore</td>
</tr>
<tr>
<td>/package.json</td>
<td>App’s NPM management file</td>
</tr>
<tr>
<td>/quasar.build.yml</td>
<td>YAML file used to <a href="/guide/quasar-app-configuration.html#quasar-build-yml">configure App build</a></td>
</tr>
<tr>
<td>/.stylintrc</td>
<td>Default Stylus lint config for linting Stylus files</td>
</tr>
</tbody>
</table>
<h2 id="Source_Folder">Source Folder</h2><table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/src/css</td>
<td>Folder to store global/common CSS files</td>
</tr>
<tr>
<td>/src/html</td>
<td>Folder to store global/common HTML files</td>
</tr>
<tr>
<td>/src/js</td>
<td>Folder to store global/common JS files</td>
</tr>
<tr>
<td>/src/pages</td>
<td>Folder to store assets for each page</td>
</tr>
<tr>
<td>/src/layouts</td>
<td>Folder to store assets for each layout</td>
</tr>
<tr>
<td>/src/index.html</td>
<td>App starting point</td>
</tr>
</tbody>
</table>
<h2 id="Pages">Pages</h2><p>An App’s central working point is the Pages it is composed of.</p>
<p>Each page has its own folder (<code>/src/pages/&lt;page-name&gt;</code>) and has the structure below:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/assets</td>
<td>Folder to place images, fonts, … specific to the page only</td>
</tr>
<tr>
<td>/script.<strong>&lt;page-name&gt;</strong>.js</td>
<td>JS entry point for the page</td>
</tr>
<tr>
<td>/style.<strong>&lt;page-name&gt;</strong>.styl</td>
<td>CSS entry point for the page</td>
</tr>
<tr>
<td>/view.<strong>&lt;page-name&gt;</strong>.html</td>
<td>HTML template for the page</td>
</tr>
<tr>
<td>/config.<strong>&lt;page-name&gt;</strong>.yml</td>
<td>YAML file with page configuration (called <em>Manifest</em>)</td>
</tr>
</tbody>
</table>
<p>Read about page manifests (<code>config.*page-name*.yml</code>) in <a href="/guide/writing-quasar-page.html#Page_Manifest">Writing a Page</a> section.</p>
<h2 id="Layouts">Layouts</h2><p>Layouts are the elements that wrap page content, like navigational bar or sidebar. Multiple pages can share the same Layout, which is one of the main reason for their existence.</p>
<p>Each layout has its own folder (<code>/src/layouts/&lt;layout-name&gt;</code>) and has the following structure:</p>
<table>
<thead>
<tr>
<th>Asset</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.js</td>
<td><strong>[Required]</strong> Starting point of the Layout logic</td>
</tr>
<tr>
<td>layout.<strong>&lt;layout-name&gt;</strong>.html</td>
<td>Template for your Layout</td>
</tr>
</tbody>
</table>
<p>Read more about it in <a href="/guide/writing-quasar-layout.html">Writing a Layout</a> section.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar App Starting Point]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-starting-point.html</url>
      <content type="html"><![CDATA[<p>Kicking off a Quasar App is done so:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.app();</span><br></pre></td></tr></table></figure></p>
<p>This call is embedded by default in <code>js/app.js</code> file which is the first script to get executed after DOM load event.</p>
<p>The first Quasar Page that gets loaded is the one called <code>index</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configuring Quasar App]]></title>
      <url>http://quasar-framework.org/guide/quasar-app-configuration.html</url>
      <content type="html"><![CDATA[<p>As you’ve seen in <a href="/guide/quasar-app-structure.html">App Structure</a> page (read it if you haven’t already), there are a few key configuration files for your Quasar App.</p>
<h2 id="app-json">app.json</h2><p><em>Gets generated by the build system</em></p>
<p>This is the place that all App configuration gets merged in automatically by the Build System. All pages manifests, all routes, and many more. You can build a search widget based on this file.</p>
<p>Example:<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">pages</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">index</span>": <span class="value">&#123;</span><br><span class="line">      "<span class="attribute">hashes</span>": <span class="value">[</span><br><span class="line">        <span class="string">"$"</span>,</span><br><span class="line">        <span class="string">":article/:page"</span></span><br><span class="line">      ]</span><br><span class="line">    </span>&#125;</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="quasar-build-yml">quasar.build.yml</h2><p>This is the place where you configure how your App is built, what dependencies to inject, how your Quasar App is tested and more.</p>
<p>Example:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">deps:&#10;  js:&#10;    - &#39;node_modules/X/js/y.js&#39;&#10;    - &#39;node_modules/W/z.js&#39;&#10;  css:&#10;    - &#39;node_modules/X/css/y.css&#39;&#10;preview:&#10;  port: 3500&#10;previewResp:&#10;  port: 3600&#10;test:&#10;  exclude: []</span><br></pre></td></tr></table></figure></p>
<h3 id="‘deps’_object">‘deps’ object</h3><p>Specify the dependencies of your App. You can use NPM to install different packages, or Bower, or just download some file from somewhere and store it inside the App’s folder. In the end, all you need is a path. The Build System takes care of the rest. Mind the order as it may be important.</p>
<h3 id="‘preview’_object">‘preview’ object</h3><p><a href="/guide/cli-commands.html#Live_Preview">Live Preview</a> configuration. Read more about configuration properties  <a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">here</a>. Example of default configuration which is merged with user specific one:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">preview:&#10;  port: 3000&#10;  ui:&#10;    port: 3001&#10;  open: false&#10;  reloadOnRestart: true</span><br></pre></td></tr></table></figure></p>
<h3 id="‘previewResp’_object">‘previewResp’ object</h3><p><a href="/guide/cli-commands.html#Responsive_View">Live Preview with Responsive View</a> configuration. Read more about configuration properties <a href="http://www.browsersync.io/docs/options/" target="_blank" rel="external">here</a>. Example of default configuration which is merged with user specific one:<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">previewResp:&#10;  port: 3100&#10;  ui: false&#10;  open: false&#10;  ghostMode: true&#10;  reloadOnRestart: true</span><br></pre></td></tr></table></figure></p>
<h3 id="‘test’_object">‘test’ object</h3><p>This object’s properties override any of the <a href="https://github.com/rstoenescu/quasar-cli/blob/master/lib/gulp/gulp-config.js#L14-L103" target="_blank">default Karma configuration</a> options.<br>See the full list of <a href="http://karma-runner.github.io/0.8/config/configuration-file.html" target="_blank">Karma configuration properties</a> that you can use.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Installation]]></title>
      <url>http://quasar-framework.org/guide/installation.html</url>
      <content type="html"><![CDATA[<p>Use the <code>Quasar CLI</code> to generate or manage a Quasar App.</p>
<p>Make sure you have at least NodeJS 4.2.0 (latest always recommended) and latest NPM.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g quasar-cli</span><br></pre></td></tr></table></figure></p>
<p>Now you can create your first App. Let’s initialize a folder (for this example: <em>qApp</em>, but you can name it whatever you want) with all the boilerplating necessary:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new qApp</span><br><span class="line">$ <span class="built_in">cd</span> qApp</span><br></pre></td></tr></table></figure></p>
<p>You’re all set now. Read about the Quasar CLI <a href="/guide/cli-commands.html">here</a>. Get to know how powerful it is so you can leverage it.</p>
<h2 id="Generating_Native_Mobile_Apps">Generating Native Mobile Apps</h2><p>If you want to be able to wrap your Quasar App into a native mobile app, then you should install one more dependency:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cordova</span><br></pre></td></tr></table></figure></p>
<p>Now head on to a section from the Quasar CLI guide called <a href="/guide/cli-commands.html#Native_Mobile_App_Wrapper">Native Mobile App Wrapper</a> to see more details on how to manage the native app wrapper.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is Quasar?]]></title>
      <url>http://quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p>Quasar is a modern HTML5 SPA (Single Page Application) front-end framework on steroids.<br>Some of its features:</p>
<h3 id="Responsive_Website_&amp;_Mobile_App">Responsive Website &amp; Mobile App</h3><p><img src="/images/responsive-banner.png" alt="Build on one. Use it on all." title="Build on one. Use it on all."></p>
<p>Write code once and then deploy as a responsive website or as a native phone/tablet app. No need to waste time on HOW your content is displayed.. just focus on what your content is.</p>
<h3 id="CSS_Framework">CSS Framework</h3><p>Quasar uses its own full-featured CSS Framework. You can tweak it and build your own theme to make your App’s design distinctive.</p>
<h3 id="Focus_on_Content">Focus on Content</h3><p>Quasar is a time-saver from many perspectives. You don’t have to worry about a lot of things, including how your content is being displayed to best leverages the screen real-estate. The built-in components are responsive by default.</p>
<h3 id="Built_for_Speed">Built for Speed</h3><p>Quasar Framework has a lot of optimizations behind the scenes to make your App run really fast (and consume the lowest possible battery power) by using the integrated Build system described below.</p>
<h3 id="Build_System">Build System</h3><p>Build system out of the box to help you in managing an App folder, precompiling code, bundling it together, preparing it for deployment, running tests, live previewing of your code in browser(s). No need to write even a single line of code for this.</p>
<p>Trivial tasks like optimizing image files (and much more) are taken care of by default. Just issue Quasar CLI commands.</p>
<h3 id="Javascript_in_CommonJS_Format">Javascript in CommonJS Format</h3><p>As well as ensuring your code is encapsulated and modular, CommonJS modules give you dependency management, scope isolation, and namespacing. They should be used in any JavaScript application that spans more than a few files. This is why every Quasar App Javascript file must adhere to. Don’t worry about how code is compiled and bundled together because Quasar takes care of it.</p>
<h3 id="Two-Way_Data_Binding">Two-Way Data Binding</h3><p>Develop reactive UI with two-way data binding. No need to directly touch the DOM.</p>
<h3 id="Focus_on_Reusable_Code">Focus on Reusable Code</h3><p>Focus on writing reusable web components as (reactive) HTML tags.</p>
<h3 id="Web_Components">Web Components</h3><p><strong>There is a rich ecosystem of reactive HTML tags ready to be used provided by default.</strong> Head on to the API to get to know them and use them to write as few lines of code as possible and yet enrich your App with beautifully crafted functionality.</p>
<p>You want a swipe-responsive sidebar or a menu with tabs, or a card? Use an HTML tag provided by Quasar Framework.</p>
<h3 id="CLI_(Command_Line_Interface)">CLI (Command Line Interface)</h3><p>CLI available to help you in creating an App folder, building, testing, live previewing and ultimately managing App source code files.</p>
<h3 id="Enforced_Code_Quality">Enforced Code Quality</h3><p>Code quality is enforced by the built-in code linters and by test system available out of the box.</p>
<h3 id="Live_Preview">Live Preview</h3><p>Live Preview as you write your code. Open multiple browsers and get them synchronized for click/scroll/form input events. More than that, whenever you change your code, the browsers automatically get refreshed. So forget the F5 button.</p>
<p><img src="/images/preview-1.png" alt="Live Preview Screen" title="Live Preview Screen"></p>
<p>Even more, you have a “Responsive View” too which helps you to quickly switch between different screen sizes in your browser window.</p>
<p><img src="/images/preview-2.png" alt="Responsive Preview Screen" title="Responsive Preview Screen"></p>
<h3 id="Semantic_API">Semantic API</h3><p>The API syntax is intuitive as if you talk to someone and tell it what you want. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookies = quasar.get.all.cookies();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Contributing Guide]]></title>
      <url>http://quasar-framework.org/guide/contributing-to-quasar.html</url>
      <content type="html"><![CDATA[<p>I’m really excited if you are interested in contributing to Quasar Framework. Before submitting your contribution though, please make sure to take a moment and read through the following guidelines.</p>
<p>You can also help with the documentation if you catch a mistake or want to add a few lines to a page or write new pages. Use the link at the end of each page of this website (specifically the <em>Suggest an edit on Github</em>).</p>
<h2 id="Github_Repositories">Github Repositories</h2><ul>
<li><a href="https://github.com/rstoenescu/quasar-framework" target="_blank">Quasar Framework</a></li>
<li><a href="https://github.com/rstoenescu/quasar-cli" target="_blank">Quasar CLI</a></li>
</ul>
<h2 id="Issue_Reporting_Guidelines">Issue Reporting Guidelines</h2><ul>
<li><p>The issue list of the repository is <strong>exclusively</strong> for bug reports and feature requests.</p>
</li>
<li><p>Try to search for your issue, it may have already been fixed in the development branch or it may have a resolution.</p>
</li>
<li><p>Check if the issue is reproducible with the latest stable version of Quasar. If you are using a pre-release, please indicate the specific version you are using.</p>
</li>
<li><p>It is <strong>required</strong> that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled “need repro” receives no further input from the issue author for more than 5 days, it will be closed.</p>
</li>
<li><p>If your issue is resolved but still open, don’t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.</p>
</li>
</ul>
<h2 id="Pull_Request_Guidelines">Pull Request Guidelines</h2><ul>
<li><p>Checkout a topic branch from <code>master</code> and merge back against <code>master</code>.</p>
</li>
<li><p>Work in the <code>src</code> folder and <strong>DO NOT</strong> checkin <code>/dist</code> in the commits.</p>
</li>
<li><p>Squash the commit if there are too many small ones.</p>
</li>
<li><p>Follow the <a href="#Code_Style">code style</a>.</p>
</li>
<li><p>Make sure that running “npm test” passes all tests.</p>
</li>
<li><p>If adding new feature:</p>
<ul>
<li>Add accompanying test case.</li>
<li>Provide convincing reason to add this feature. Ideally you should open a suggestion issue first and have it greenlighted before working on it.</li>
</ul>
</li>
<li><p>If fixing a bug:</p>
<ul>
<li>Provide detailed description of the bug in the PR. Live demo preferred. Use <a href="http://http://plnkr.co" target="_blank">Plunker</a>.</li>
<li>Add appropriate test coverage if applicable.</li>
</ul>
</li>
</ul>
<h2 id="Code_Style">Code Style</h2><ul>
<li>Follow <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank">Google JavaScript Style Guide</a></li>
<li>2 spaces indentation (<em>NO</em> tabs).</li>
<li>Stroustrup brace style.</li>
<li><p>Multiple var declarations like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  first,</span><br><span class="line">  second,</span><br><span class="line">  ...,</span><br><span class="line">  last</span><br><span class="line">  ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return early.</p>
</li>
<li><p>Notice the spaces when declaring a <code>function</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params">param1, param2, ..., paramN</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>1 space between arguments, but not between parentheses.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (conditions) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">2</span> &amp;&amp; b === <span class="number">3</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>When in doubt, read the source code.</p>
</li>
<li><p>Break long ternary conditionals like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = superLongConditionalStatement</span><br><span class="line">  ? <span class="string">'yep'</span></span><br><span class="line">  : <span class="string">'nope'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Development_Setup">Development Setup</h2><p>You will need <a href="http://nodejs.org" target="_blank" rel="external">Node.js</a> along NPM.</p>
<p>Fork Quasar Framework Github repository. Then install all other dependencies.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>To monitor source code for changes and rebuild automatically:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp monitor</span><br></pre></td></tr></table></figure></p>
<p>To watch source code and rebuild automatically while previewing the UI:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># multiple browsers opened to the indicated link will</span></span><br><span class="line"><span class="comment"># have clicks/scrolls/form input events synchronized</span></span><br><span class="line"></span><br><span class="line">$ gulp preview</span><br></pre></td></tr></table></figure></p>
<p>There’s a <code>/preview</code> folder containing a demo Quasar App which gets previewed in the browser. Change its source to make use of a feature that’s of interest to you.</p>
<p>There’s also another type of previewing – with a Responsive View (browsers won’t be synchronized). Its purpose is for you to view the UI in a desktop browser and be able to quickly switch between different device screen sizes and orientation.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp preview-resp</span><br></pre></td></tr></table></figure></p>
<p>To make a development build:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># will create the /build and /dist folders</span></span><br><span class="line">$ gulp dev</span><br></pre></td></tr></table></figure></p>
<p>To make a production build (source minified and optimized for End-User):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># will create the /build and /dist folders</span></span><br><span class="line">$ gulp prod</span><br></pre></td></tr></table></figure></p>
<p>By default, you can create both development and production builds – this is the official Production build:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ gulp dist</span><br></pre></td></tr></table></figure></p>
<p>After you build the demo App (from <code>/preview</code>) you can see it in action as a native App:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp wrapper</span><br></pre></td></tr></table></figure></p>
<p>To clean folder from build artifacts:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp clean</span><br></pre></td></tr></table></figure></p>
<p>Testing (one single run only):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with all browsers:</span></span><br><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with PhantomJS only</span></span><br><span class="line">$ npm run pjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Chrome only</span></span><br><span class="line">$ npm run chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Firefox only</span></span><br><span class="line">$ npm run ff</span><br><span class="line"></span><br><span class="line"><span class="comment"># Then check the coverage in HTML coverage:</span></span><br><span class="line">$ npm run coverage</span><br><span class="line"><span class="comment"># --This opens Chrome browser--</span></span><br></pre></td></tr></table></figure></p>
<p>Watch source code and test on changes (browsers will remain opened):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with all browsers:</span></span><br><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with PhantomJS only</span></span><br><span class="line">$ npm run pjs-live</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Chrome only</span></span><br><span class="line">$ npm run chrome-live</span><br><span class="line"></span><br><span class="line"><span class="comment"># with Firefox only</span></span><br><span class="line">$ npm run ff-live</span><br></pre></td></tr></table></figure></p>
<h2 id="Commit_Message_Format">Commit Message Format</h2><p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>.  The header has a special<br>format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#60;type&#62;(&#60;scope&#62;): &#60;subject&#62;&#10;&#60;BLANK LINE&#62;&#10;&#60;body&#62;&#10;&#60;BLANK LINE&#62;&#10;&#60;footer&#62;</span><br></pre></td></tr></table></figure>
<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>
<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier<br>to read on GitHub as well as in various git tools.</p>
<h4 id="Revert">Revert</h4><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>
<h4 id="Type">Type</h4><p>Must be one of the following:</p>
<ul>
<li><strong>feat</strong>: A new feature</li>
<li><strong>fix</strong>: A bug fix</li>
<li><strong>docs</strong>: Documentation only changes</li>
<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing<br>semi-colons, etc)</li>
<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>
<li><strong>perf</strong>: A code change that improves performance</li>
<li><strong>test</strong>: Adding missing tests</li>
<li><strong>chore</strong>: Changes to the build process or auxiliary tools and libraries such as documentation<br>generation</li>
</ul>
<h4 id="Scope">Scope</h4><p>The scope could be anything specifying place of the commit change. For example use modules as scope name: <code>xhr</code>, <code>router</code>, <code>view</code> etc…</p>
<h4 id="Subject">Subject</h4><p>The subject contains succinct description of the change:</p>
<ul>
<li>use the imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul>
<h4 id="Body">Body</h4><p>Just as in the <strong>subject</strong>, use the imperative, present tense: “change” not “changed” nor “changes”.<br>The body should include the motivation for the change and contrast this with previous behavior.</p>
<h4 id="Footer">Footer</h4><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to<br>reference GitHub issues that this commit <strong>Closes</strong>.</p>
<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CommonJS Format]]></title>
      <url>http://quasar-framework.org/guide/commonjs-format.html</url>
      <content type="html"><![CDATA[<p>CommonJS modules are at the core of Quasar Framework and are the format that Quasar expects every module to adhere to. As well as ensuring your code is encapsulated and modular, CommonJS modules give you dependency management, scope isolation, and namespacing. They should be used in any JavaScript application that spans more than a few files.</p>
<p>The format is remarkably straightforward, but is something you’ll have to adhere to in every file to make it work. CommonJS uses explicit exporting, so to expose a property inside a module to other modules, you’ll need to do something like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.propName = ...;</span><br><span class="line"><span class="comment">// or export multiple props at once:</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  prop1: ...,</span><br><span class="line">  prop2: ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>The module dependency is also easy by using <code>require</code>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br></pre></td></tr></table></figure></p>
<p>One more example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'world'</span>;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// moduleB.js</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello '</span> + text + <span class="string">'!'</span>); <span class="comment">// Hello world!</span></span><br></pre></td></tr></table></figure>
<p>You can export anything: Functions, Strings, Numbers, Objects, Regexps, …</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CLI Commands]]></title>
      <url>http://quasar-framework.org/guide/cli-commands.html</url>
      <content type="html"><![CDATA[<h2 id="Options">Options</h2><h4 id="Version">Version</h4><p>Displays version information.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar -V</span><br><span class="line">$ quasar version</span><br></pre></td></tr></table></figure></p>
<h4 id="Help">Help</h4><p>Displays list of all commands and options.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar</span><br><span class="line">$ quasar -h</span><br></pre></td></tr></table></figure></p>
<h4 id="Verbose_Mode">Verbose Mode</h4><p>If you want to get more information on what’s going on (for example when building App), turn on the debug flag (<code>-d</code> option):<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar <span class="operator">-d</span> ..........</span><br></pre></td></tr></table></figure></p>
<h2 id="Create_App">Create App</h2><p>Initializes a project folder with everything necessary.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar new [folder-name]</span><br></pre></td></tr></table></figure></p>
<h2 id="Build_App">Build App</h2><h3 id="For_Development">For Development</h3><p>Generates a folder called <code>/dist</code> which contains sourcemaps and everything needed to debug.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure></p>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<h3 id="For_Production">For Production</h3><p>Generates a folder called <code>/dist</code>. Everything is compiled, minified, …<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar build -p</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ quasar build --production</span><br></pre></td></tr></table></figure></p>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<h3 id="Cleaning">Cleaning</h3><p>Cleans App folder from build artifacts.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar clean</span><br></pre></td></tr></table></figure></p>
<h3 id="Monitoring_&amp;_Auto-Rebuild">Monitoring &amp; Auto-Rebuild</h3><p>Monitors source code files (Javascript files, CSS files, assets, …) for changes and when that happens it auto-rebuilds to update the end-user code.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar monitor</span><br></pre></td></tr></table></figure></p>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<h2 id="Live_Preview">Live Preview</h2><p>You can even live preview the build in your browser(s). Whenever you modify anything in the source code (Javascript files, CSS files, assets, …), it gets rebuilt and the browser(s) refreshed.</p>
<p>Furthermore, clicks, scroll and form input are automatically synchronized between all opened browsers.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar preview</span><br></pre></td></tr></table></figure></p>
<p>For more details to see what this does go to <a href="/guide/quasar-build-system.html">Build System</a> and <a href="/guide/quasar-app-structure.html">App Structure</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>CSS is injected into the browser(s) so the page is not required to reload, which is really cool.</p>
</blockquote>
<h3 id="Responsive_View">Responsive View</h3><p>Want to quickly see how your App handles different device screen sizes? This is the command that you should use. Recommended (and designed) to be viewed from a desktop browser.</p>
<p>Watches the source code (and reloads if necessary or injects CSS without page reload) but clicks, scroll and form input are <em>NOT</em> automatically synchronized between all opened browsers as for previous command.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar preview -r</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ quasar preview --responsive</span><br></pre></td></tr></table></figure>
<p><img src="/images/preview-2.png" alt="Responsive Preview Screen" title="Responsive Preview Screen"></p>
<h2 id="Running_Test_Suites">Running Test Suites</h2><p>Write tests and run them with the out of the box test-pack which includes Karma, Mocha, Chai &amp; Sinon.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>For more details on how to tweak testing see <a href="/guide/quasar-app-configuration.html#quasar-build-yml">App Structure - quasar.build.yml</a> and look for <code>test</code> property description.</p>
<h2 id="Pages">Pages</h2><p>Pages are the core of any Quasar App. Think of a Quasar Page as a webpage which has its own View, Controller and Model.</p>
<h3 id="Create_Page">Create Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page [page-name]</span><br></pre></td></tr></table></figure>
<h3 id="Rename_Page">Rename Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar page [current-page-name] [new-page-name]</span><br></pre></td></tr></table></figure>
<h2 id="Layouts">Layouts</h2><p>Layouts are the elements that wrap one or multiple pages (like navigational bar).</p>
<h3 id="Create_Layout">Create Layout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout [layout-name]</span><br></pre></td></tr></table></figure>
<h3 id="Rename_Layout">Rename Layout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar layout [current-layout-name] [new-layout-name]</span><br></pre></td></tr></table></figure>
<h2 id="Native_Mobile_App_Wrapper">Native Mobile App Wrapper</h2><p>You can use Cordova to wrap your Quasar App into a native mobile App.</p>
<h3 id="Wrap_your_App">Wrap your App</h3><p>So you want to be able to produce native apps for the mobile platforms:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar wrap</span><br></pre></td></tr></table></figure></p>
<p>This command generates a folder inside your App called <code>/wrapper</code>. It contains the assets of a Cordova project mapped to your Quasar App’s source code.</p>
<h3 id="Execute_Cordova_Command">Execute Cordova Command</h3><p>You surely want to add a platform or perform useful Cordova commands:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar wrap [Cordova <span class="built_in">command</span> arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment"># examples:</span></span><br><span class="line">$ quasar wrap platform add android</span><br><span class="line">$ quasar wrap run</span><br><span class="line">$ quasar wrap build</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>TIP</strong><br>Use it in conjunction with <code>quasar build</code> when you frequently test on your mobile: <code>quasar build &amp;&amp; quasar wrap run</code></p>
</blockquote>
<h2 id="Runtime_Information">Runtime Information</h2><p>Display information about your runtime, including operating system, nodejs version, Quasar CLI version and more.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar info</span><br></pre></td></tr></table></figure>
<p>Output example:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ quasar info</span><br><span class="line"></span><br><span class="line"> Runtime</span><br><span class="line"> Quasar CLI:	 v0.<span class="number">0.17</span></span><br><span class="line"> Node JS:	 v4.<span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"> Operating System</span><br><span class="line"> Architecture:	 x64</span><br><span class="line"> Platform:	 linux</span><br><span class="line"> Release:	 <span class="number">3.19</span>.<span class="number">0</span>-<span class="number">33</span>-generic</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Built-in Technology Stack]]></title>
      <url>http://quasar-framework.org/guide/built-in-stack.html</url>
      <content type="html"><![CDATA[<p>You can take full advantage of the following dependencies that are provided by default:</p>
<h2 id="Vue">Vue</h2><p>Two-way data binding technology. Reactive Components for Modern Web Interfaces. A <em>must-use</em>. Read more <a href="http://vuejs.org" target="_blank">here</a>.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello Vue.js!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Changing the <em>input</em> element content automatically updates <code>data.message</code> (called <em>scope</em>). Works the other way around too if you programmatically change <code>data.message</code> property. But this is just the tip of the iceberg.</p>
<h2 id="Apache_Cordova">Apache Cordova</h2><p>Wrap your App in Cordova so it can be installed on a mobile phone. It offers access to native device APIs, which is awesome. It integrates perfectly with Quasar Framework.</p>
<p>Read more about it <a href="https://cordova.apache.org/" target="_blank">here</a>.</p>
<h2 id="Lodash">Lodash</h2><p>Inspired by Underscore (&amp; even has compatible API), but better. You have the global object <code>_</code> (underscore character) you can use.</p>
<p>Read more about it <a href="https://lodash.com/" target="_blank">here</a>.</p>
<h2 id="HammerJS">HammerJS</h2><p>Add touch gestures to your App. Hammer is a open-source library that can recognize gestures made by touch, mouse and pointer events. It doesn’t have any dependencies, and it’s small.</p>
<p>Read more about it <a href="http://hammerjs.github.io/" target="_blank">here</a>.</p>
<h2 id="VelocityJS">VelocityJS</h2><p>Add complex Javascript animations which make good use of <code>requestAnimationFrame()</code> under the hood. Note that requestAnimationFrame() is a browser API which enables for faster than CSS animations.</p>
<p>It’s incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling. It is the best of jQuery and CSS transitions combined.</p>
<p>The Velocity UI pack is included too. Read more about it <a href="http://julian.com/research/velocity/" target="_blank">here</a>.</p>
<h2 id="jQuery">jQuery</h2><p>No need for an introduction. Mind that you should not be required to use it though due to Vue. It is included by default just because Quasar Framework uses it under the cover.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Good Quasar App code <strong>DOES NOT</strong> uses jQuery and it <strong>DOES NOT</strong> touch DOM elements directly under any way. Vue should handle the DOM update for you through the data scope.</p>
</blockquote>
<h2 id="Fastclick">Fastclick</h2><p>FastClick is a simple, easy-to-use library for eliminating the 300ms delay between a physical tap and the firing of a click event on mobile browsers. The aim is to make your Quasar App feel less laggy and more responsive while avoiding any interference with your current logic.</p>
<p>Read more about it <a href="https://ftlabs.github.io/fastclick/" target="_blank">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/css/index.html</url>
      <content type="html"><![CDATA[<p>Quasar Framework has its own full-featured CSS Framework included. Learn how to make use of it here.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Icons]]></title>
      <url>http://quasar-framework.org/css/core-css-icons.html</url>
      <content type="html"><![CDATA[<p>To be written.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Helper Classes]]></title>
      <url>http://quasar-framework.org/css/core-css-helper-classes.html</url>
      <content type="html"><![CDATA[<h2 id="Container">Container</h2><p>A very important component for your Pages is the responsive <code>container</code> class which handles margins and padding relative to the screen width automatically so your content can make the best use of the real estate available.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">quasar-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span> ...... <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">quasar-page</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Visibility">Visibility</h2><p>There are CSS classes which you can use to hide or display content based on the screen size.</p>
<p>Display only on:</p>
<ul>
<li>class=”<code>only mobile</code>“</li>
<li>class=”<code>only tablet</code>“</li>
<li>class=”<code>only small monitor</code>“</li>
<li>class=”<code>only large monitor</code>“</li>
</ul>
<p>Hide on:</p>
<ul>
<li>class=”<code>hide mobile</code>“</li>
<li>class=”<code>hide tablet</code>“</li>
<li>class=”<code>hide small monitor</code>“</li>
<li>class=”<code>hide large monitor</code>“</li>
</ul>
<h3 id="Other_Classes">Other Classes</h3><p>Also there’s the <code>hidden</code> class which removes the element from the view. The <code>invisible</code> class just hides while the element will still occupy its space within the view.</p>
<p>The <code>transparent</code> class will add a default opacity to the element.</p>
<h2 id="Positioning">Positioning</h2><p>There are default classes for fixed and absolute positioning with regards to screen margins. Use <code>fixed-X</code> or <code>absolute-X</code> Quasar classes, where <em>X</em> can be <code>top</code>, <code>right</code>, <code>bottom</code> or <code>left</code>.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"fixed-top"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Text_Alignment">Text Alignment</h2><p>Use <code>text-center</code>, <code>text-right</code>, <code>text-left</code> or <code>text-justify</code> Quasar CSS classes to align text positioning.</p>
<h2 id="Shadows">Shadows</h2><p>You can use some default shadow classes which add depth to your elements:</p>
<ul>
<li>class=”<code>z-none</code>“</li>
<li>class=”<code>z-2</code>“</li>
<li>class=”<code>z-3</code>“</li>
<li>class=”<code>z-4</code>“</li>
<li>class=”<code>z-6</code>“</li>
<li>class=”<code>z-8</code>“</li>
<li>class=”<code>z-16</code>“</li>
</ul>
<p>There’s also the option to have a transition animation:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"z-transition z-2"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Scroll">Scroll</h2><p>There’s the <code>scroll</code> class that helps some browsers (like on iOS platform) to best handle scrolling by touch on an element’s that is overflowed (it adds the <code>overflow: auto</code> CSS property automatically).</p>
<h2 id="Window_Height">Window Height</h2><p>Whenever you need an item to have the height equivalent to the screen height, use <code>window-height</code> Quasar CSS class.</p>
<h2 id="User_Selection">User Selection</h2><p>There’s a way to avoid the user to be able to select a text (with mouse or through touch). Just add <code>non-selectable</code> class.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Flexbox Layout]]></title>
      <url>http://quasar-framework.org/css/core-css-flexbox-layout.html</url>
      <content type="html"><![CDATA[<p>The following is an extract (and adaptation for Quasar) from <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank">A Guide to Flexbox</a>.</p>
<h2 id="Background">Background</h2><p>The Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>
<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p>
<h2 id="Getting_Started">Getting Started</h2><p>Flexbox applies to either the Container (Parent) or the Container’s items (Children).<br><img src="/images/flexbox-container.svg" alt="Flexbox Container"><br><img src="/images/flexbox-items.svg" alt="Flexbox Items"></p>
<p>Following classes must be accompanied by the <code>layout</code> class, which adds the <code>display: flex</code> CSS property. If you’d like inline-flex, use <code>layout inline</code> class combo.</p>
<h2 id="Parent_Classes">Parent Classes</h2><h3 id="Direction">Direction</h3><p><strong>You need a direction</strong>. Use <code>horizontal</code>, <code>horizontal-reverse</code>, <code>vertical</code> or <code>vertical-reverse</code> classes.<br><img src="/images/flexbox-direction.svg" alt="Flexbox Direction"></p>
<h3 id="Wrap">Wrap</h3><p><strong>You can also wrap content</strong>. Use <code>wrap</code> or <code>wrap-reverse</code> classes. By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. Direction also plays a role here, determining the direction new lines are stacked in.<br><img src="/images/flexbox-wrap.svg" alt="Flexbox Direction"></p>
<p>If you explicitly do not want to wrap, use <code>nowrap</code> class.</p>
<h3 id="Justify_Alignment">Justify Alignment</h3><p><strong>For alignment along the main axis</strong>, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.<br><img src="/images/flexbox-justify.svg" alt="Flexbox Justify Content"></p>
<h3 id="Items_Alignment">Items Alignment</h3><p><strong>For alignment perpendicular to the main axis</strong>, use classes below. This defines the default behaviour for how flex items are laid out along the cross axis on the current line. Think of it as the justify-* version for the cross-axis (perpendicular to the main-axis).<br><img src="/images/flexbox-items-align.svg" alt="Flexbox Items Align"></p>
<h3 id="Content_Alignment">Content Alignment</h3><p>The next classes <strong>align a flex container’s lines</strong> within when there is extra space in the cross-axis, similar to how justify-* aligns individual items within the main-axis.<br><img src="/images/flexbox-content-align.svg" alt="Flexbox Content Align"></p>
<h2 id="Children_Classes">Children Classes</h2><h3 id="Order">Order</h3><p><strong>You can set the order</strong> by using <code>order-i</code> classes, where <em>i</em> is between 1-12. By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use <code>order</code> CSS property and assign the desired value.<br><img src="/images/flexbox-order.svg" alt="Flexbox Order"></p>
<h3 id="Grow">Grow</h3><p><strong>An item can grow if it’s enough space available</strong> by using <code>grow-i</code> classes, where <em>i</em> is between 1-12. This defines the ability for a flex item to grow if necessary. It accepts a unit-less value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.<br>If all items have <code>grow-1</code> class, the remaining space in the container will be distributed equally to all children. If one of the children has <code>grow-2</code>, the remaining space would take up twice as much space as the others (or it will try to, at least).<br><img src="/images/flexbox-grow.svg" alt="Flexbox Grow"></p>
<h3 id="Shrink">Shrink</h3><p><strong>An item can shrink if necessary</strong> by using <code>shrink-i</code> classes, where <em>i</em> is between 1-12.</p>
<h3 id="Self_Alignment">Self Alignment</h3><p><strong>An item can override the aligned specified on parent</strong>. This allows alignment to be overridden for individual flex items. Please see the <a href="#Items_Alignment">Items Alignment</a> explanation from Parent Classes to understand the available values.<br><img src="/images/flexbox-self.svg" alt="Flexbox Grow"></p>
<h3 id="Flex_Basis">Flex Basis</h3><p>This refers to the <code>flex-basis</code> CSS property (<em>Note: not a Quasar CSS class like the other ones</em>) and defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” - this keyword isn’t well supported yet, so it’s hard to test and harder to know what it’s brethren max-content, min-content, and fit-content do.</p>
<h3 id="Combo_flex_properties">Combo flex properties</h3><p>This refers to the Quasar CSS class <code>flex-i</code> where <em>i</em> is between 1-12. It sets <code>flex</code> CSS property to the respective number (defined by <em>i</em>) and the flex-basis to near 0.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Color Palette]]></title>
      <url>http://quasar-framework.org/css/core-css-color-palette.html</url>
      <content type="html"><![CDATA[<p>To be written.</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CSS Spinners]]></title>
      <url>http://quasar-framework.org/api/web-components-spinners.html</url>
      <content type="html"><![CDATA[<p>To be written.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Layout Web Components]]></title>
      <url>http://quasar-framework.org/api/web-components-layout.html</url>
      <content type="html"><![CDATA[<p>Layout example with all components available to get a feel of how to use them:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- layout.example.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">quasar-layout</span> <span class="attribute">shrink-header</span> <span class="attribute">scroll-shadow</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">sidebar</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-title</span>&gt;</span>Text &#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="title">quasar-title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">alarm</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-button</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">ellipsis</span> <span class="attribute">vertical</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-navigation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">database</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 1<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">alarm</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 2<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-tab</span>&gt;</span><span class="tag">&lt;<span class="title">quasar-icon</span> <span class="attribute">database</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-icon</span>&gt;</span>Tab 3<span class="tag">&lt;/<span class="title">quasar-tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-navigation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">quasar-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-page</span>&gt;</span><span class="tag">&lt;/<span class="title">quasar-page</span>&gt;</span> <span class="comment">&lt;!-- mandatory --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">quasar-footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">quasar-title</span>&gt;</span>Quasar Rocks!<span class="tag">&lt;/<span class="title">quasar-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">quasar-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">quasar-footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">quasar-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Let’s take each Web Component one by one. Make sure you close the opening tag.</p>
<h3 id="quasar-layout">quasar-layout</h3><p>Wraps the layout and is a mandatory tag for a Quasar Layout. There are a few behaviors that can be used (see them below). Use empty attributes on the quasar-layout tag.</p>
<ol>
<li><code>scroll-shadow</code> - When user scrolls the page a shadow appears on the top navigation bar.</li>
<li><code>keep-marginals</code> - Keep top navigation bar and footer visible at all times regardless of page scroll position.</li>
<li><code>shrink-header</code> - When user scrolls the page only the top row remains visible and all subsequent rows get hidden.</li>
<li><code>retract-header</code> - When user scrolls the page down the top navigation bar gets hidden. When scrolling up it slowly gets visible again regardless of page scroll position.</li>
</ol>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">quasar-layout</span> <span class="attribute">retract-header</span> <span class="attribute">scroll-shadow</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">quasar-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="quasar-page">quasar-page</h3><p>Wraps the page content and is a mandatory tag for a Quasar Layout.</p>
<h3 id="quasar-header">quasar-header</h3><p>Wraps the top navigation bar.</p>
<h3 id="quasar-row">quasar-row</h3><p>Wraps a header or footer row.</p>
<h3 id="quasar-title">quasar-title</h3><p>Wraps the main row item that grows horizontally to the available real estate.</p>
<h3 id="quasar-footer">quasar-footer</h3><p>Wraps the footer. Use rows as for the header.</p>
<h3 id="quasar-navigation">quasar-navigation</h3><p>Wraps the navigational tabs. Do not wrap in a <code>quasar-row</code>.</p>
<h3 id="quasar-tab">quasar-tab</h3><p>Wraps a tab for the navigational row.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://quasar-framework.org/api/index.html</url>
      <content type="html"><![CDATA[<p>Learn here the API specifications of every feature embedded in Quasar Framework. How to require a script, how to create a route, how to detect if the app is running within Cordova or on a desktop, and many more.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>http://quasar-framework.org/api/feat-web-storage.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over Web Storage API.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Getting_Started">Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.local.storage.item(key);</span><br><span class="line"></span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br><span class="line"><span class="keyword">var</span> value = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data_Types">Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods">Methods</h2><h3 id="Storing_Data">Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.local.storage.item(key, value);</span><br><span class="line">quasar.set.session.storage.item(key, value);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_Data">Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.item(key);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.all.local.storage.items();</span><br><span class="line"><span class="keyword">var</span> store = quasar.get.all.session.storage.items();</span><br></pre></td></tr></table></figure></p>
<h3 id="Iterating_through_Store">Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = quasar.get.local.storage.length();</span><br><span class="line"><span class="keyword">var</span> length = quasar.get.session.storage.length();</span><br></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item = quasar.get.local.storage.at.index(index);</span><br><span class="line"><span class="keyword">var</span> item = quasar.get.session.storage.at.index(index);</span><br></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing_Data">Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.local.storage.item(key);</span><br><span class="line">quasar.remove.session.storage.item(key);</span><br></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.local.storage();</span><br><span class="line">quasar.clear.session.storage();</span><br></pre></td></tr></table></figure></p>
<h3 id="Is_Store_Empty?">Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.local.storage.is.empty()</span><br><span class="line">(boolean) quasar.session.storage.is.empty()</span><br></pre></td></tr></table></figure>
<h3 id="Is_Key_in_Store?">Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.local.storage.item()</span><br><span class="line">(boolean) quasar.has.session.storage.item()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Cookies]]></title>
      <url>http://quasar-framework.org/api/feat-cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Read_a_Cookie">Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = quasar.get.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<h2 id="Read_All_Cookies">Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookies = quasar.get.all.cookies();</span><br></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<h2 id="Verify_if_Cookie_is_Set">Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Boolean</span>) quasar.has.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Write_a_Cookie">Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'cookie_name'</span>, cookie_value, options);</span><br></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expire</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.set.cookie(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</span><br><span class="line">  secure: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Option_expires">Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">expires: <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option_path">Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path: <span class="string">'/'</span></span><br></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option_domain">Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">domain: <span class="string">'quasar-framework.org'</span></span><br></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option_secure">Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">secure: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove_a_Cookie">Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.cookie(<span class="string">'cookie_name'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling Touch Events]]></title>
      <url>http://quasar-framework.org/api/core-js-touch-events.html</url>
      <content type="html"><![CDATA[<p>Quasar makes good use of <a href="http://hammerjs.github.io/" target="_blank">HammerJS</a> and has specific API to nicely wrap touch events.</p>
<h2 id="Vue_‘v-touch’_directive">Vue ‘v-touch’ directive</h2><p>Quasar has its own Vue directive written for handling touch events:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-touch:event</span>=<span class="value">"method_name"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ..where "event" is the name of the Touch action --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-touch:pan</span>=<span class="value">"panning"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Here’s the list of touch events supported by HammerJS: <code>pan</code>, <code>pinch</code>, <code>press</code>, <code>rotate</code>, <code>swipe</code>, <code>tap</code>. Basically, any touch action that HammerJS has, so visit their website to get updates.</p>
<blockquote>
<p>Just make sure that the method you supply to the directive is registered in your Vue, be that the Quasar Page Vue instance, the Quasar Layout Vue instance or any other Vue instance containing the respective node.</p>
</blockquote>
<p>Example of declaring the method used for the touch action:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="comment">// or in Page/Layout definition 'module.exports = &#123;...&#125;'</span></span><br><span class="line"></span><br><span class="line">  template: <span class="string">'&lt;div v-touch:pan="panning"&gt;Touch Enabled Node&lt;/div&gt;'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    panning: <span class="function"><span class="keyword">function</span>(<span class="params">hammer</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 'hammer' variable has the Hammer object</span></span><br><span class="line">      <span class="comment">// which describes the Touch Event</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// hammer.deltaX, hammer.deltaY, ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="Custom_Touch_Events">Custom Touch Events</h3><p>There’s a way to write your own custom Touch Events. Here’s an example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.register.custom.touch.event(&#123;</span><br><span class="line">  event: <span class="string">'doubletap'</span>,</span><br><span class="line">  type: <span class="string">'tap'</span>,</span><br><span class="line">  taps: <span class="number">2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-touch:doubletap</span>=<span class="value">"doubleTapped"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Through_jQuery">Through jQuery</h2><p>There are two methods you can use to manage Hammer:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = $(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize Hammer on DOM node</span></span><br><span class="line">node.hammer(hammerOptions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get Hammer instance from node</span></span><br><span class="line"><span class="keyword">var</span> hammer = node.getHammer();</span><br><span class="line">hammer.on(<span class="string">'pan'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Don’t worry, jQuery events are still emitted when using Hammer this way.</p>
<h2 id="Prevent_Ghost_Clicks">Prevent Ghost Clicks</h2><p>When using the <code>v-touch</code> directive there’s no need for you to bother with ghost-clicks as they are taken care of. But when dealing directly with jQuery and Hammer, you need to make the following call:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.prevent.ghost.click(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'node' can be a jQuery selector or a native DOM element</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Router]]></title>
      <url>http://quasar-framework.org/api/core-js-router.html</url>
      <content type="html"><![CDATA[<h2 id="Getting_Started">Getting Started</h2><p>Each route is an object defined like below:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  path: <span class="string">'#/'</span></span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Adding a route:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Initialize router to start listening to hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router();</span><br></pre></td></tr></table></figure></p>
<h2 id="Route_Definition">Route Definition</h2><p>A more detailed explanation of a route:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> route = &#123;</span><br><span class="line">  <span class="comment">// hash that gets matched</span></span><br><span class="line">  path: <span class="string">'#/'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// method to run when hash is matched</span></span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//The [this] object is a copy of the [route] object plus:</span></span><br><span class="line">    <span class="comment">//this.params containing the hash tokens</span></span><br><span class="line">    <span class="comment">//this.state containing state ('before', 'on', 'after')</span></span><br><span class="line">    <span class="comment">//this.next containing methods to pass parameters to the next state</span></span><br><span class="line">    <span class="comment">//this.url containing the original url hash</span></span><br><span class="line">    <span class="comment">//this.query containing the query string parameters</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>The path property can be a normal static hash like #/page/books or a parametrized string like #/article/:category/:date, in this case the route parameters will be completed with hash tokens.</p>
<p>For example, for <a href="">http://domain.com/#/article/science/20151010</a> you will have:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var route = &#123;&#10;  path: &#39;#/article/:category/:date&#39;,&#10;  trigger: function() &#123;&#10;    // this.params.category contains &#39;science&#39;&#10;    // this.params.date contains &#39;20151010&#39;&#10;  &#125;&#10;&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="Events">Events</h2><p>You can hook into some Router events easily:</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:route:change</td>
<td>(String) hash</td>
<td>Detected hash change</td>
</tr>
<tr>
<td>app:route:notfound</td>
<td>(Array) hash_parts</td>
<td>New hash does not match any route</td>
</tr>
<tr>
<td>app:route:trigger</td>
<td>(Object) route</td>
<td>Triggering execution of a route</td>
</tr>
<tr>
<td>app:router:started</td>
<td><em>None</em></td>
<td>Router has started listening</td>
</tr>
<tr>
<td>app:router:stopped</td>
<td><em>None</em></td>
<td>Router has stopped listening</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.global.events.on(<span class="string">'app:route:notfound'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">hashParts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hey, user navigated to a route, but we don't have</span></span><br><span class="line">  <span class="comment">// any route with such hash matched...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Router_Management">Router Management</h2><h3 id="Initializing_the_Router">Initializing the Router</h3><p>Router can be initialized with a config object:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.start.router();</span><br></pre></td></tr></table></figure></p>
<p>Once the router is initialized it will start listening for hash changes.</p>
<h3 id="Stopping_the_Router">Stopping the Router</h3><p>The router can be stopped so it won’t listen for hash changes:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.stop.router();</span><br></pre></td></tr></table></figure></p>
<h3 id="Checking_if_Router_is_running">Checking if Router is running</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.router.is.running();</span><br></pre></td></tr></table></figure>
<h3 id="Adding_Route">Adding Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.add.route(&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Overwriting_a_Route">Overwriting a Route</h3><p>Sometimes you may need to overwrite a route.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.overwrite.route(&#123;...new_route_obj...&#125;);</span><br></pre></td></tr></table></figure></p>
<p>It will look for the <code>hash</code> from new_route_obj and replace the current route with this new one.</p>
<h3 id="Removing_Route">Removing Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.remove.route(hash);</span><br><span class="line">Example: quasar.remove.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_All_Routes">Retrieving All Routes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = quasar.get.all.routes();</span><br></pre></td></tr></table></figure>
<h3 id="Checking_if_Route_Exists">Checking if Route Exists</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(boolean) quasar.has.route(hash);</span><br><span class="line">Example: quasar.has.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Retrieving_Current_Route">Retrieving Current Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.current.route();</span><br></pre></td></tr></table></figure>
<h3 id="Get_Route_By_Path">Get Route By Path</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(route_obj) quasar.get.route(hash);</span><br><span class="line">Example: quasar.get.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Reloading_Current_Route">Reloading Current Route</h3><p>This will trigger the route methods once again.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.reload.current.route();</span><br></pre></td></tr></table></figure></p>
<h3 id="Navigating_to_a_Route">Navigating to a Route</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.navigate.to.route(hash);</span><br><span class="line">Example: quasar.navigate.to.route(<span class="string">'#/article'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Require]]></title>
      <url>http://quasar-framework.org/api/core-js-require.html</url>
      <content type="html"><![CDATA[<p>This feature is used to dynamically include <code>.js</code> files or inject <code>.css</code> ones.</p>
<h2 id="Require_a_Script_file">Require a Script file</h2><p>You can require a CommonJS compliant .js file directly from your application. Subsequent require() calls within the files are going to also be fetched. Besides being able to use synchronous (but not browser blocking!) require() calls within the browser, you can also require scripts from your node_modules/ folder.</p>
<p>Features that you can take advantage of:</p>
<ul>
<li>Synchronous <code>require()</code> in modules, but without making synchronous Ajax calls nor freezing the browser.</li>
<li><code>exports</code> and <code>module.exports</code> objects just work.</li>
<li>Works with NPM; you can include files directly from your node_modules/ folder. Just make sure that the included libraries work well with the browser.</li>
<li><code>require()</code> paths are relative to the folder of each script in place. No need to write all paths using the same base.</li>
<li>Debugging works really well as required files appear in the Scripts section, each separately, with their real name not a hash or VM string.</li>
<li>Dependencies are loaded as well. Circular dependencies are not a problem as they are handled correctly.</li>
<li>There’s no need for a build step of your scripts.</li>
<li>Required modules are cached. Subsequent calls are resolved instantly.</li>
</ul>
<h3 id="Usage">Usage</h3><p>In your modules you can use the <code>require()</code> function, <code>exports</code> and <code>module.exports</code> objects as you would in NodeJS.</p>
<p>There are multiple ways to include a script file through <code>quasar.require.script()</code>, depending on your style. The syntax is:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using Callback Fn</span></span><br><span class="line">quasar.require.script(</span><br><span class="line">  &#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn,</span><br><span class="line">  &#123;<span class="built_in">Function</span>&#125; callback(err, exports)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Promises</span></span><br><span class="line">quasar.require.script(&#123;<span class="built_in">String</span>&#125; path | &#123;<span class="built_in">Function</span>&#125; fn)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we failed...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// we succeeded!</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying_Path">Specifying Path</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Requiring "module-file.js"</span></span><br><span class="line">quasar.require.script(<span class="string">"./module-file"</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// an error was encountered while loading the script file</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP code returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.status);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Message returned</span></span><br><span class="line">        <span class="built_in">console</span>.log(err.statusText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use the exports object as needed</span></span><br><span class="line">    exports.method();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Specifying_Factory_Function">Specifying Factory Function</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Requiring "./hello world.js"</span></span><br><span class="line">quasar.require.script(<span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">require</span>(<span class="string">"./hello-world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello(<span class="string">'World!'</span>));</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, exports</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err.statusText);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(exports.hello);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>The first parameter of the Factory function <strong>must</strong> be named exactly <code>require</code>, otherwise no file is going to get fetched.</p>
</blockquote>
<h3 id="Managing_Cache">Managing Cache</h3><p>By default, all modules that are loaded are cached. If at some point you want to clear out the cache, proceed as follows:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.require.cache();</span><br></pre></td></tr></table></figure></p>
<h3 id="Limitations">Limitations</h3><ul>
<li>If you load from <code>node_modules/</code> folder, specify full path to the entry point file; Quasar will not read the module’s <code>package.json</code> file, and so the “main” property is ignored. Modules inside packages must be requested by their full path, e.g. <code>var _ = require(&quot;underscore/underscore&quot;);</code></li>
<li>When using the Factory function, the first formal parameter must be exactly <code>require</code> and nothing else, otherwise no files are going to get fetched.</li>
<li>No cross-domain paths can be used when within a browser. Cross-domain paths work only when app is packaged with Cordova.</li>
</ul>
<h2 id="Injecting_CSS">Injecting CSS</h2><p>Injecting CSS means inserting a stylesheet DOM element which makes the browser request your <code>.css</code> file.</p>
<p>List of features:</p>
<ul>
<li>You have two methods of injecting CSS: globally and per-page. When using “per-page” option and navigating to another page, the injected CSS will be removed. Globally injected will not get removed when navigating away.</li>
<li>CSS is cached, so subsequent calls to the same resource are resolved without fetching file again.</li>
<li>Ability to remove global or per-page injected CSS at command.</li>
</ul>
<h3 id="Usage-1">Usage</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Injecting globally</span></span><br><span class="line">quasar.inject.css(URL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Injecting per-page</span></span><br><span class="line">quasar.inject.page.css(URL);</span><br></pre></td></tr></table></figure>
<p>Removing injected CSS:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Removing globally injected CSS</span></span><br><span class="line">quasar.clear.css();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Removing page injected CSS</span></span><br><span class="line">quasar.clear.page.css();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Events]]></title>
      <url>http://quasar-framework.org/api/core-js-events.html</url>
      <content type="html"><![CDATA[<p>Events are important for the inner workings of your App and also for writing Quasar Plugins.<br>Sometimes you need an event bus or a publish/subscribe channel. An emitter solves this need.</p>
<h2 id="Creating_an_Emitter">Creating an Emitter</h2><p>We call an emitter an object who is capable of registering and triggering events.</p>
<p>There are two ways to create one:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a new Object</span></span><br><span class="line"><span class="keyword">var</span> emitter = quasar.create.events.emitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// make existing Object an emitter</span></span><br><span class="line"><span class="keyword">var</span> object = &#123;...&#125;;</span><br><span class="line">quasar.make.events.emitter(object);</span><br></pre></td></tr></table></figure></p>
<h3 id="Check_if_Object_is_Emitter">Check if Object is Emitter</h3><p>You can also check if an object is an emitter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someObject = &#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> isEmitter = quasar.is.events.emitter(someObject);</span><br></pre></td></tr></table></figure></p>
<h3 id="Global_Events_Emitter">Global Events Emitter</h3><p>There is a global events emitter already available for you to use: <code>quasar.global.events</code>. Make sure you <em>DON’T</em> name your own events to match the ones that Quasar uses by default (see list <a href="/guide/writing-quasar-page.html#Page_Events">here</a>). It is recommended that you create your own global emitters to avoid event naming problems.</p>
<h2 id="Emitter_Methods">Emitter Methods</h2><blockquote>
<p><strong>NOTE</strong><br>Event name must <em>NOT</em> contain space characters, otherwise the string will be considered as containing multiple events names.</p>
</blockquote>
<h3 id="Registering_an_Event/Callback">Registering an Event/Callback</h3><p><code>emitter.on(String eventNames, Function callback [, Object context])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> context = &#123;...&#125;; <span class="comment">// will be used as *this* within callback</span></span><br><span class="line">emitter.on(<span class="string">'event-name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2, ...paramN</span>) </span>&#123; ... &#125;, context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The params that are used when triggering the event are passed on</span></span><br><span class="line"><span class="comment">// to each callback.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can register multiple events at once:</span></span><br><span class="line">emitter.on(<span class="string">'event1 event2 eventN'</span>, callback);</span><br></pre></td></tr></table></figure></p>
<h3 id="Removing_an_Event/Callback">Removing an Event/Callback</h3><p><code>emitter.off(String eventNames [, Function callback])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unregistering an event:</span></span><br><span class="line">emitter.off(<span class="string">'event-name'</span>);</span><br><span class="line"><span class="comment">// 'event-name' does no longer has any callbacks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unregistering a specific callback for an event:</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;;</span><br><span class="line">emitter.on(<span class="string">'event-name'</span>, callback);</span><br><span class="line">emitter.off(<span class="string">'event-name'</span>, callback);</span><br><span class="line"><span class="comment">// 'event-name' still exists (if other callbacks are registered to this event),</span></span><br><span class="line"><span class="comment">// but does not contain the above callback anymore</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can remove callback from multiple events at once:</span></span><br><span class="line">emitter.off(<span class="string">'event1 event2 eventN'</span>, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or we can remove all callbacks from multiple events at once:</span></span><br><span class="line">emitter.off(<span class="string">'event1 event2 eventN'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or we can remove all callbacks and all events at once:</span></span><br><span class="line">emitter.off();</span><br></pre></td></tr></table></figure>
<h3 id="Registering_a_Callback_to_Be_Run_Only_Once">Registering a Callback to Be Run Only Once</h3><p><code>emitter.once(String eventNames, Function callback [, Object context])</code></p>
<p>Sometimes you need to trigger a callback only once. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;;</span><br><span class="line">emitter.once(<span class="string">'event-name'</span>, callback);</span><br><span class="line"><span class="comment">// callback will be triggered only once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also register callback to be triggered once</span></span><br><span class="line"><span class="comment">// for multiple events at once:</span></span><br><span class="line">emitter.once(<span class="string">'event1 event2'</span>, callback);</span><br><span class="line"><span class="comment">// callback will be triggered only once for 'event1'</span></span><br><span class="line"><span class="comment">// AND only once more for 'event2'</span></span><br><span class="line"><span class="comment">// ... so triggering 'event1' and 'event2' multiple times</span></span><br><span class="line"><span class="comment">// will run callback a total of 2 times</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Triggering_an_Event">Triggering an Event</h3><p><code>emitter.trigger(String eventNames [, Anything *args])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">emitter.trigger(<span class="string">'event-name'</span>);</span><br><span class="line"><span class="comment">// All callbacks associated with 'event-name' will be triggered</span></span><br><span class="line"><span class="comment">// in the order that they were registered.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger with parameters (as many as you want):</span></span><br><span class="line">emitter.trigger(<span class="string">'event-name'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">// These parameters will be used when calling all registered</span></span><br><span class="line"><span class="comment">// callbacks for 'event-name' --&gt; callback(10, 'wow', &#123;obj: true&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also trigger multiple events at once:</span></span><br><span class="line">emitter.trigger(<span class="string">'event1 event2 event3'</span>);</span><br><span class="line">emitter.trigger(<span class="string">'event1 event2 event3'</span>, <span class="number">10</span>, <span class="string">'wow'</span>, &#123;obj: <span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We can also trigger ALL registered events at once:</span></span><br><span class="line">emitter.trigger();</span><br></pre></td></tr></table></figure></p>
<h3 id="Checking_for_Subscribers">Checking for Subscribers</h3><p><code>Boolean emitter.hasSubscriber(String eventNames [, Function callback])</code><br>or<br><code>Boolean emitter.hasSubscriber(Function callback)</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check if 'event-name' has any callbacks associated</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event-name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for an event:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event-name'</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for any of the specified events</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(<span class="string">'event1 event2'</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if a callback is registered for any events</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if an emitter has any events/callbacks at all:</span></span><br><span class="line"><span class="keyword">var</span> exists = emitter.hasSubscriber();</span><br></pre></td></tr></table></figure></p>
<h3 id="Getting_List_of_Events">Getting List of Events</h3><p><code>Array emitter.getEventsList()</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eventsList = emitter.getEventsList();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Environment]]></title>
      <url>http://quasar-framework.org/api/core-js-environment.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the environment in which the code is running:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>quasar.runs.on.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>quasar.runs.on.cordova</td>
<td>boolean</td>
<td>Is the code running within Cordova?</td>
</tr>
<tr>
<td>quasar.runs.on.desktop</td>
<td>boolean</td>
<td>Is the code running on a desktop browser?</td>
</tr>
<tr>
<td>quasar.runs.with.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper.</p>
</blockquote>
<p>Platform specific:</p>
<ul>
<li>android</li>
<li>lackberry</li>
<li>cros</li>
<li>ios</li>
<li>ipad</li>
<li>iphone</li>
<li>ipod</li>
<li>kindle</li>
<li>linux</li>
<li>mac</li>
<li>playbook</li>
<li>silk</li>
<li>chrome</li>
<li>opera</li>
<li>safari</li>
<li>win (Windows)</li>
<li>winphone (Windows Phone)</li>
<li>&amp; more…</li>
</ul>
<p>Example when running Chrome on a Linux desktop machine:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.runs.on = &#123;</span><br><span class="line">  chrome: <span class="literal">true</span>,</span><br><span class="line">  desktop: <span class="literal">true</span>,</span><br><span class="line">  linux: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">"chrome"</span>,</span><br><span class="line">  platform: <span class="string">"linux"</span>,</span><br><span class="line">  version: <span class="string">"47.0.2526.80"</span>,</span><br><span class="line">  versionNumber: <span class="number">47</span>,</span><br><span class="line">  webkit: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Debug Helpers]]></title>
      <url>http://quasar-framework.org/api/core-js-debug-helpers.html</url>
      <content type="html"><![CDATA[<p>The <code>quasar.debug</code> object has useful debugging methods.</p>
<h2 id="Javascript_Stack">Javascript Stack</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.printStack()</span><br></pre></td></tr></table></figure>
<p>Useful when stuck somewhere in the code and you’d like to see the Javascript stack outputted to the console.</p>
<h2 id="Profiling">Profiling</h2><p>Sometimes you want to know how much time did something take to get executed. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br><span class="line"><span class="comment">//run some code... then to output results:</span></span><br><span class="line">quasar.debug.profile(<span class="string">'xyz'</span>);</span><br></pre></td></tr></table></figure></p>
<p>You can have multiple profiles running at the same time.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Ajax Requests]]></title>
      <url>http://quasar-framework.org/api/core-js-ajax.html</url>
      <content type="html"><![CDATA[<p>Quasar Ajax Requests are a wrapper over jQuery’s <code>$.ajax()</code> method. There are many features added on top of it.</p>
<h2 id="Getting_Started">Getting Started</h2><h3 id="Making_a_Request">Making a Request</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET request:</span></span><br><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'...'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">jsonObject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data received: '</span>, jsonObject);</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'uh, oh... the request failed...'</span>, errorThrown);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Same for PUT, POST, DELETE:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.put.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line">quasar.make.a.post.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  data: &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notice `del` instead of `delete`</span></span><br><span class="line">quasar.make.a.del.request(&#123;...&#125;);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>DATA FORMAT</strong><br>By default, the response is treated as a JSON string and it’s parsed, unless specified otherwise with <code>dataType</code> property (see <a href="#Request_Properties">Request Properties</a>).</p>
</blockquote>
<h3 id="Request_Properties">Request Properties</h3><p>When making a request, you can use the properties below:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>String</td>
<td>URL or relative path to base URL (see <a href="#Configuring_Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>query</td>
<td>String or Object</td>
<td>Query String</td>
</tr>
<tr>
<td>data</td>
<td>Object</td>
<td>Data to be sent along with the request</td>
</tr>
<tr>
<td>cachable</td>
<td>Boolean</td>
<td>Should the response be cached? <em>Only for GET requests</em></td>
</tr>
<tr>
<td>requestName</td>
<td>String</td>
<td>See Request Name</td>
</tr>
<tr>
<td>persistent</td>
<td>Boolean</td>
<td>Cannot be aborted by <code>quasar.abort.all.requests()</code></td>
</tr>
<tr>
<td>local</td>
<td>Boolean</td>
<td>Ignore baseURL and make a request from App folder (see <a href="#Configuring_Requests">Configuring Requests</a>)</td>
</tr>
<tr>
<td>timeout</td>
<td>Number</td>
<td>Number of milliseconds before timeout</td>
</tr>
</tbody>
</table>
<p>… and any jQuery <a href="http://api.jquery.com/jquery.ajax/" target="_blank" rel="external">$.ajax() properties</a>. Some examples: <code>dataFilter</code>, <code>dataType</code>, <code>converters</code>, <code>contentType</code>, <code>headers</code>, <code>processData</code>, <code>xhrFields</code>. See <a href="#More_Request_Properties">More Request Properties</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Only the <code>url</code> property is mandatory.</p>
</blockquote>
<h3 id="Request_Outcome">Request Outcome</h3><p>There are multiple ways to see the request outcome, depending on the style that you prefer:</p>
<ol>
<li><p>Inside the configuration object</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  done: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;,</span><br><span class="line">  fail: <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;,</span><br><span class="line">  always: <span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Through <code>statusCode</code> property<br><code>statusCode</code> is an object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  statusCode: &#123;</span><br><span class="line">    <span class="number">404</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Page not found handler</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>If the request is successful, the status code functions take the same parameters as the success callback (<code>done</code>); if it results in an error (including 3xx redirect), they take the same parameters as the failure callback (<code>fail</code>).</p>
<ol>
<li>Using Promises <em>(recommended)</em><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;url: <span class="string">'/articles.php'</span>&#125;)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>) </span>&#123;...&#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .always(<span class="function"><span class="keyword">function</span>(<span class="params">data|jqXHR, textStatus, jqXHR|errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data,textStatus,jqXHR</span>) </span>&#123;...&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;...&#125;)</span><br><span class="line">  .abort();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Explanation of the methods are below:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>done</td>
<td>data, textStatus, jqXHR</td>
<td>Success handler</td>
</tr>
<tr>
<td>fail</td>
<td>jqXHR, textStatus, errorThrown</td>
<td>Failure handler</td>
</tr>
<tr>
<td>always</td>
<td>data/jqXHR, textStatus, jqXHR/errorThrown</td>
<td>Both success &amp; failure handler; is triggered regardless of the outcome</td>
</tr>
<tr>
<td>then</td>
<td>Function, Function</td>
<td>Alternative way to specify success handler (first param) and failure handler (second param)</td>
</tr>
<tr>
<td>abort</td>
<td><em>None</em></td>
<td>Halts the request before it is completed</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>All methods (including <code>quasar.make.a.&lt;TYPE&gt;.request</code>) return a Promise.</p>
</blockquote>
<h2 id="Configuring_Requests">Configuring Requests</h2><p>There are global configuration properties that apply to all requests through <code>quasar.config.requests</code> object. Its configurable properties are:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseURL</td>
<td>String</td>
<td>Base URL for all requests. Example: “<a href="http://quasar-framework.org/api/">http://quasar-framework.org/api/</a>“</td>
</tr>
<tr>
<td>failFnHandler</td>
<td>Function</td>
<td>Global failure handler. See <a href="#Global_Failure_Handler">Global Failure Handler</a></td>
</tr>
<tr>
<td>use.cache</td>
<td>Boolean</td>
<td>GET requests cache the response by default or not. See <a href="#Request_Cache">Request Cache</a></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.baseURL = <span class="string">"http://quasar-framework.org/api/"</span>;</span><br></pre></td></tr></table></figure></p>
<p>When wrapping your App with Cordova this provides very useful as your App may use a server somewhere on the Internet to get data. So in order to avoid specifying the host for each request, set the <code>baseURL</code> property.</p>
<p>If a request is made with <em>local</em> property set to <code>true</code> then baseURL is ignored.</p>
<h3 id="More_Request_Properties">More Request Properties</h3><p>The properties below are additions to <a href="#Request_Properties">Request Properties</a>.</p>
<h4 id="Filtering_Received_Data">Filtering Received Data</h4><p>Sometime you need to sanitize the received data with <code>dataFilter</code> method, which takes a function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the <code>dataType</code> parameter.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataFilter: <span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//include any conditions to filter data here...</span></span><br><span class="line">    <span class="comment">//some examples below...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 1 - remove all commas from returned data</span></span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">","</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//example 2 - if data is JSON process it in some way</span></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> parsed_data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        $.each(parsed_data, <span class="function"><span class="keyword">function</span>(<span class="params">i, item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//process the JSON data</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(parsed_data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Data_Type">Data Type</h4><p>By default, the response is considered to be a JSON string, but you can specify other data types if necessary through the <code>dataType</code> property.</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>json</td>
<td>Evaluates the response as JSON and returns a JavaScript object</td>
</tr>
<tr>
<td>xml</td>
<td>Returns an XML document</td>
</tr>
<tr>
<td>html</td>
<td>Return HTML as plain-text</td>
</tr>
<tr>
<td>script</td>
<td>Evaluates the response as JavaScript and returns it as plain text</td>
</tr>
<tr>
<td>text</td>
<td>Returns a plain text string</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: ...,</span><br><span class="line">  dataType: <span class="string">"text"</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">plainText</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Converters">Converters</h4><p>Converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g JSON), you must add a correspondence between the response Content-Type and the actual data type using the contents option:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</p>
<p>To convert from a supported type (e.g text, JSON) to a custom data type and back again, use another pass-through converter:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  contents: &#123;</span><br><span class="line">    mycustomtype: <span class="regexp">/mycustomtype/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  converters: &#123;</span><br><span class="line">    <span class="string">"text mycustomtype"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"mycustomtype json"</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> result </span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Do stuff</span></span><br><span class="line">      <span class="keyword">return</span> newresult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>The above now allows passing from text to mycustomtype and then mycustomtype to json.</p>
<h4 id="Content_Type">Content Type</h4><p>When sending data to the server, use <code>contentType</code> to specify Content Type.</p>
<p>Default is <strong>application/x-www-form-urlencoded; charset=UTF-8</strong>, which is fine for most cases. If you explicitly pass in a <code>contentType</code>, then it is always sent to the server (even if no data is sent). If set to <code>false</code> it will not set any content type header.</p>
<blockquote>
<p><strong>NOTE</strong><br>The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.</p>
</blockquote>
<h4 id="Headers">Headers</h4><p><code>headers</code> is an object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.</p>
<h4 id="Process_Data">Process Data</h4><p>This refers to the boolean <code>processData</code>. By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type “application/x-www-form-urlencoded”. If you want to send a DOMDocument, or other non-processed data, set this option to false.</p>
<h4 id="XHR_Fields">XHR Fields</h4><p>This refers to <code>xhrFields</code> which is an object of fieldName-fieldValue pairs to set on the native XHR object.</p>
<p>For example, you can use it to set withCredentials to true for cross-domain requests if needed, <em>which is the default behavior for Quasar out of the box</em>.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">   url: a_cross_domain_url,</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">      withCredentials: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Global_Failure_Handler">Global Failure Handler</h2><p>Specify a global failure handler for times when (as an example) you return a specific HTTP code if user is not authenticated.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.failFnHandler = <span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (jqXHR.status &amp;&amp; jqXHR.status == <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="comment">// user is not authenticated... give the user a message or redirect the UI</span></span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>You can <code>return true;</code> if you want to override the request’s own failure handler(s).</p>
<h2 id="Request_Cache">Request Cache</h2><p>Cache response for GET requests (only) using <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.get.request(&#123;</span><br><span class="line">  url: <span class="string">'/articles.php'</span>,</span><br><span class="line">  cachable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>You can also configure all GET requests to be cached by default, so you won’t have to specify <code>cachable</code> property:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.config.requests.use.cache = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></p>
<p>At some point you may want to clear the cache for all requests:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.clear.requests.cache();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>All GET requests are configured by default to cache their response, because <code>quasar.config.requests.use.cache</code> is by default set to <code>true</code>.</p>
</blockquote>
<h2 id="Group_Requests">Group Requests</h2><p>Sometimes you need to wait for multiple requests until you proceed further:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.make.a.group.request(</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.del.request(&#123;...&#125;).done(...),</span><br><span class="line">  quasar.make.a.get.request(&#123;...&#125;).done(...)</span><br><span class="line">).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// all calls ended with success</span></span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// at least one call failed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Request_Store">Request Store</h2><p>Sometimes you need to make multiple calls using the same request properties:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> store = quasar.get.store(&#123;...common...request...properties...&#125;);</span><br><span class="line"></span><br><span class="line">store.make.a.get.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.put.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.post.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br><span class="line">store.make.a.del.request(&#123;...override...some/all...of...the...common...request...properties...&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Aborting_Requests">Aborting Requests</h2><p>Sometimes you need to halt a request before it is finished:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = quasar.make.a.get.request(...);</span><br><span class="line">...</span><br><span class="line">request.abort();</span><br></pre></td></tr></table></figure></p>
<p>Or you may want to halt ALL requests in progress:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quasar.abort.all.requests();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When aborting all requests, you may want to exclude some of them. For this, use the <code>persistent</code> property when making those particular requests.</p>
</blockquote>
]]></content>
    </entry>
    
  
</search>
