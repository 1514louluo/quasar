/*!
 * jQuery JavaScript Library v3.0.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-06-09T18:02Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


var
	version = "3.0.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.0
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-04
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true;
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {
	// Known :disabled false positives:
	// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
	// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Check form elements and option elements for explicit disabling
		return "label" in elem && elem.disabled === disabled ||
			"form" in elem && elem.disabled === disabled ||

			// Check non-disabled form elements for fieldset[disabled] ancestors
			"form" in elem && elem.disabled === false && (
				// Support: IE6-11+
				// Ancestry is covered for us
				elem.isDisabled === disabled ||

				// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
				/* jshint -W018 */
				elem.isDisabled !== !disabled &&
					("label" in elem || !disabledAncestor( elem )) !== disabled
			);
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( /*jshint -W002 */ value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList.then( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnotwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) ),
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support: IE <=9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox <=42
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* jshint -W083 */
			anim.done( function() {

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		opt.duration = typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in uncached url if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rts, "" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}





var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}


return jQuery;
} ) );

/*!
 * Vue.js v1.0.24
 * (c) 2016 Evan You
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Vue = factory());
}(this, function () { 'use strict';

  function set(obj, key, val) {
    if (hasOwn(obj, key)) {
      obj[key] = val;
      return;
    }
    if (obj._isVue) {
      set(obj._data, key, val);
      return;
    }
    var ob = obj.__ob__;
    if (!ob) {
      obj[key] = val;
      return;
    }
    ob.convert(key, val);
    ob.dep.notify();
    if (ob.vms) {
      var i = ob.vms.length;
      while (i--) {
        var vm = ob.vms[i];
        vm._proxy(key);
        vm._digest();
      }
    }
    return val;
  }

  /**
   * Delete a property and trigger change if necessary.
   *
   * @param {Object} obj
   * @param {String} key
   */

  function del(obj, key) {
    if (!hasOwn(obj, key)) {
      return;
    }
    delete obj[key];
    var ob = obj.__ob__;
    if (!ob) {
      if (obj._isVue) {
        delete obj._data[key];
        obj._digest();
      }
      return;
    }
    ob.dep.notify();
    if (ob.vms) {
      var i = ob.vms.length;
      while (i--) {
        var vm = ob.vms[i];
        vm._unproxy(key);
        vm._digest();
      }
    }
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
   * Check whether the object has the property.
   *
   * @param {Object} obj
   * @param {String} key
   * @return {Boolean}
   */

  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }

  /**
   * Check if an expression is a literal value.
   *
   * @param {String} exp
   * @return {Boolean}
   */

  var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

  function isLiteral(exp) {
    return literalValueRE.test(exp);
  }

  /**
   * Check if a string starts with $ or _
   *
   * @param {String} str
   * @return {Boolean}
   */

  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }

  /**
   * Guard text output, make sure undefined outputs
   * empty string
   *
   * @param {*} value
   * @return {String}
   */

  function _toString(value) {
    return value == null ? '' : value.toString();
  }

  /**
   * Check and convert possible numeric strings to numbers
   * before setting back to data
   *
   * @param {*} value
   * @return {*|Number}
   */

  function toNumber(value) {
    if (typeof value !== 'string') {
      return value;
    } else {
      var parsed = Number(value);
      return isNaN(parsed) ? value : parsed;
    }
  }

  /**
   * Convert string boolean literals into real booleans.
   *
   * @param {*} value
   * @return {*|Boolean}
   */

  function toBoolean(value) {
    return value === 'true' ? true : value === 'false' ? false : value;
  }

  /**
   * Strip quotes from a string
   *
   * @param {String} str
   * @return {String | false}
   */

  function stripQuotes(str) {
    var a = str.charCodeAt(0);
    var b = str.charCodeAt(str.length - 1);
    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
  }

  /**
   * Camelize a hyphen-delmited string.
   *
   * @param {String} str
   * @return {String}
   */

  var camelizeRE = /-(\w)/g;

  function camelize(str) {
    return str.replace(camelizeRE, toUpper);
  }

  function toUpper(_, c) {
    return c ? c.toUpperCase() : '';
  }

  /**
   * Hyphenate a camelCase string.
   *
   * @param {String} str
   * @return {String}
   */

  var hyphenateRE = /([a-z\d])([A-Z])/g;

  function hyphenate(str) {
    return str.replace(hyphenateRE, '$1-$2').toLowerCase();
  }

  /**
   * Converts hyphen/underscore/slash delimitered names into
   * camelized classNames.
   *
   * e.g. my-component => MyComponent
   *      some_else    => SomeElse
   *      some/comp    => SomeComp
   *
   * @param {String} str
   * @return {String}
   */

  var classifyRE = /(?:^|[-_\/])(\w)/g;

  function classify(str) {
    return str.replace(classifyRE, toUpper);
  }

  /**
   * Simple bind, faster than native
   *
   * @param {Function} fn
   * @param {Object} ctx
   * @return {Function}
   */

  function bind(fn, ctx) {
    return function (a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    };
  }

  /**
   * Convert an Array-like object to a real Array.
   *
   * @param {Array-like} list
   * @param {Number} [start] - start index
   * @return {Array}
   */

  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret;
  }

  /**
   * Mix properties into target object.
   *
   * @param {Object} to
   * @param {Object} from
   */

  function extend(to, from) {
    var keys = Object.keys(from);
    var i = keys.length;
    while (i--) {
      to[keys[i]] = from[keys[i]];
    }
    return to;
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  function isObject(obj) {
    return obj !== null && typeof obj === 'object';
  }

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  var toString = Object.prototype.toString;
  var OBJECT_STRING = '[object Object]';

  function isPlainObject(obj) {
    return toString.call(obj) === OBJECT_STRING;
  }

  /**
   * Array type check.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  var isArray = Array.isArray;

  /**
   * Define a property.
   *
   * @param {Object} obj
   * @param {String} key
   * @param {*} val
   * @param {Boolean} [enumerable]
   */

  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Debounce a function so it only gets called after the
   * input stops arriving after the given wait period.
   *
   * @param {Function} func
   * @param {Number} wait
   * @return {Function} - the debounced function
   */

  function _debounce(func, wait) {
    var timeout, args, context, timestamp, result;
    var later = function later() {
      var last = Date.now() - timestamp;
      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    };
    return function () {
      context = this;
      args = arguments;
      timestamp = Date.now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      return result;
    };
  }

  /**
   * Manual indexOf because it's slightly faster than
   * native.
   *
   * @param {Array} arr
   * @param {*} obj
   */

  function indexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * Make a cancellable version of an async callback.
   *
   * @param {Function} fn
   * @return {Function}
   */

  function cancellable(fn) {
    var cb = function cb() {
      if (!cb.cancelled) {
        return fn.apply(this, arguments);
      }
    };
    cb.cancel = function () {
      cb.cancelled = true;
    };
    return cb;
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   *
   * @param {*} a
   * @param {*} b
   * @return {Boolean}
   */

  function looseEqual(a, b) {
    /* eslint-disable eqeqeq */
    return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
    /* eslint-enable eqeqeq */
  }

  var hasProto = ('__proto__' in {});

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  // UA sniffing for working around browser-specific quirks
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0;
  var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
  var isWechat = UA && UA.indexOf('micromessenger') > 0;

  var transitionProp = undefined;
  var transitionEndEvent = undefined;
  var animationProp = undefined;
  var animationEndEvent = undefined;

  // Transition property/event sniffing
  if (inBrowser && !isIE9) {
    var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
    var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
    transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
    transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
    animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
    animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
  }

  /**
   * Defer a task to execute it asynchronously. Ideally this
   * should be executed as a microtask, so we leverage
   * MutationObserver if it's available, and fallback to
   * setTimeout(0).
   *
   * @param {Function} cb
   * @param {Object} ctx
   */

  var nextTick = (function () {
    var callbacks = [];
    var pending = false;
    var timerFunc;
    function nextTickHandler() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks = [];
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }

    /* istanbul ignore if */
    if (typeof MutationObserver !== 'undefined' && !(isWechat && isIos)) {
      var counter = 1;
      var observer = new MutationObserver(nextTickHandler);
      var textNode = document.createTextNode(counter);
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function () {
        counter = (counter + 1) % 2;
        textNode.data = counter;
      };
    } else {
      // webpack attempts to inject a shim for setImmediate
      // if it is used as a global, so we have to work around that to
      // avoid bundling unnecessary code.
      var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
      timerFunc = context.setImmediate || setTimeout;
    }
    return function (cb, ctx) {
      var func = ctx ? function () {
        cb.call(ctx);
      } : cb;
      callbacks.push(func);
      if (pending) return;
      pending = true;
      timerFunc(nextTickHandler, 0);
    };
  })();

  var _Set = undefined;
  /* istanbul ignore if */
  if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = function () {
      this.set = Object.create(null);
    };
    _Set.prototype.has = function (key) {
      return this.set[key] !== undefined;
    };
    _Set.prototype.add = function (key) {
      this.set[key] = 1;
    };
    _Set.prototype.clear = function () {
      this.set = Object.create(null);
    };
  }

  function Cache(limit) {
    this.size = 0;
    this.limit = limit;
    this.head = this.tail = undefined;
    this._keymap = Object.create(null);
  }

  var p = Cache.prototype;

  /**
   * Put <value> into the cache associated with <key>.
   * Returns the entry which was removed to make room for
   * the new entry. Otherwise undefined is returned.
   * (i.e. if there was enough room already).
   *
   * @param {String} key
   * @param {*} value
   * @return {Entry|undefined}
   */

  p.put = function (key, value) {
    var removed;
    if (this.size === this.limit) {
      removed = this.shift();
    }

    var entry = this.get(key, true);
    if (!entry) {
      entry = {
        key: key
      };
      this._keymap[key] = entry;
      if (this.tail) {
        this.tail.newer = entry;
        entry.older = this.tail;
      } else {
        this.head = entry;
      }
      this.tail = entry;
      this.size++;
    }
    entry.value = value;

    return removed;
  };

  /**
   * Purge the least recently used (oldest) entry from the
   * cache. Returns the removed entry or undefined if the
   * cache was empty.
   */

  p.shift = function () {
    var entry = this.head;
    if (entry) {
      this.head = this.head.newer;
      this.head.older = undefined;
      entry.newer = entry.older = undefined;
      this._keymap[entry.key] = undefined;
      this.size--;
    }
    return entry;
  };

  /**
   * Get and register recent use of <key>. Returns the value
   * associated with <key> or undefined if not in cache.
   *
   * @param {String} key
   * @param {Boolean} returnEntry
   * @return {Entry|*}
   */

  p.get = function (key, returnEntry) {
    var entry = this._keymap[key];
    if (entry === undefined) return;
    if (entry === this.tail) {
      return returnEntry ? entry : entry.value;
    }
    // HEAD--------------TAIL
    //   <.older   .newer>
    //  <--- add direction --
    //   A  B  C  <D>  E
    if (entry.newer) {
      if (entry === this.head) {
        this.head = entry.newer;
      }
      entry.newer.older = entry.older; // C <-- E.
    }
    if (entry.older) {
      entry.older.newer = entry.newer; // C. --> E
    }
    entry.newer = undefined; // D --x
    entry.older = this.tail; // D. --> E
    if (this.tail) {
      this.tail.newer = entry; // E. <-- D
    }
    this.tail = entry;
    return returnEntry ? entry : entry.value;
  };

  var cache$1 = new Cache(1000);
  var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
  var reservedArgRE = /^in$|^-?\d+/;

  /**
   * Parser state
   */

  var str;
  var dir;
  var c;
  var prev;
  var i;
  var l;
  var lastFilterIndex;
  var inSingle;
  var inDouble;
  var curly;
  var square;
  var paren;
  /**
   * Push a filter to the current directive object
   */

  function pushFilter() {
    var exp = str.slice(lastFilterIndex, i).trim();
    var filter;
    if (exp) {
      filter = {};
      var tokens = exp.match(filterTokenRE);
      filter.name = tokens[0];
      if (tokens.length > 1) {
        filter.args = tokens.slice(1).map(processFilterArg);
      }
    }
    if (filter) {
      (dir.filters = dir.filters || []).push(filter);
    }
    lastFilterIndex = i + 1;
  }

  /**
   * Check if an argument is dynamic and strip quotes.
   *
   * @param {String} arg
   * @return {Object}
   */

  function processFilterArg(arg) {
    if (reservedArgRE.test(arg)) {
      return {
        value: toNumber(arg),
        dynamic: false
      };
    } else {
      var stripped = stripQuotes(arg);
      var dynamic = stripped === arg;
      return {
        value: dynamic ? arg : stripped,
        dynamic: dynamic
      };
    }
  }

  /**
   * Parse a directive value and extract the expression
   * and its filters into a descriptor.
   *
   * Example:
   *
   * "a + 1 | uppercase" will yield:
   * {
   *   expression: 'a + 1',
   *   filters: [
   *     { name: 'uppercase', args: null }
   *   ]
   * }
   *
   * @param {String} s
   * @return {Object}
   */

  function parseDirective(s) {
    var hit = cache$1.get(s);
    if (hit) {
      return hit;
    }

    // reset parser state
    str = s;
    inSingle = inDouble = false;
    curly = square = paren = 0;
    lastFilterIndex = 0;
    dir = {};

    for (i = 0, l = str.length; i < l; i++) {
      prev = c;
      c = str.charCodeAt(i);
      if (inSingle) {
        // check single quote
        if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
      } else if (inDouble) {
        // check double quote
        if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
      } else if (c === 0x7C && // pipe
      str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
        if (dir.expression == null) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          dir.expression = str.slice(0, i).trim();
        } else {
          // already has filter
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22:
            inDouble = true;break; // "
          case 0x27:
            inSingle = true;break; // '
          case 0x28:
            paren++;break; // (
          case 0x29:
            paren--;break; // )
          case 0x5B:
            square++;break; // [
          case 0x5D:
            square--;break; // ]
          case 0x7B:
            curly++;break; // {
          case 0x7D:
            curly--;break; // }
        }
      }
    }

    if (dir.expression == null) {
      dir.expression = str.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    cache$1.put(s, dir);
    return dir;
  }

var directive = Object.freeze({
    parseDirective: parseDirective
  });

  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
  var cache = undefined;
  var tagRE = undefined;
  var htmlRE = undefined;
  /**
   * Escape a string so it can be used in a RegExp
   * constructor.
   *
   * @param {String} str
   */

  function escapeRegex(str) {
    return str.replace(regexEscapeRE, '\\$&');
  }

  function compileRegex() {
    var open = escapeRegex(config.delimiters[0]);
    var close = escapeRegex(config.delimiters[1]);
    var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
    var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
    tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
    htmlRE = new RegExp('^' + unsafeOpen + '.*' + unsafeClose + '$');
    // reset cache
    cache = new Cache(1000);
  }

  /**
   * Parse a template text string into an array of tokens.
   *
   * @param {String} text
   * @return {Array<Object> | null}
   *               - {String} type
   *               - {String} value
   *               - {Boolean} [html]
   *               - {Boolean} [oneTime]
   */

  function parseText(text) {
    if (!cache) {
      compileRegex();
    }
    var hit = cache.get(text);
    if (hit) {
      return hit;
    }
    if (!tagRE.test(text)) {
      return null;
    }
    var tokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index, html, value, first, oneTime;
    /* eslint-disable no-cond-assign */
    while (match = tagRE.exec(text)) {
      /* eslint-enable no-cond-assign */
      index = match.index;
      // push text token
      if (index > lastIndex) {
        tokens.push({
          value: text.slice(lastIndex, index)
        });
      }
      // tag token
      html = htmlRE.test(match[0]);
      value = html ? match[1] : match[2];
      first = value.charCodeAt(0);
      oneTime = first === 42; // *
      value = oneTime ? value.slice(1) : value;
      tokens.push({
        tag: true,
        value: value.trim(),
        html: html,
        oneTime: oneTime
      });
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      tokens.push({
        value: text.slice(lastIndex)
      });
    }
    cache.put(text, tokens);
    return tokens;
  }

  /**
   * Format a list of tokens into an expression.
   * e.g. tokens parsed from 'a {{b}} c' can be serialized
   * into one single expression as '"a " + b + " c"'.
   *
   * @param {Array} tokens
   * @param {Vue} [vm]
   * @return {String}
   */

  function tokensToExp(tokens, vm) {
    if (tokens.length > 1) {
      return tokens.map(function (token) {
        return formatToken(token, vm);
      }).join('+');
    } else {
      return formatToken(tokens[0], vm, true);
    }
  }

  /**
   * Format a single token.
   *
   * @param {Object} token
   * @param {Vue} [vm]
   * @param {Boolean} [single]
   * @return {String}
   */

  function formatToken(token, vm, single) {
    return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
  }

  /**
   * For an attribute with multiple interpolation tags,
   * e.g. attr="some-{{thing | filter}}", in order to combine
   * the whole thing into a single watchable expression, we
   * have to inline those filters. This function does exactly
   * that. This is a bit hacky but it avoids heavy changes
   * to directive parser and watcher mechanism.
   *
   * @param {String} exp
   * @param {Boolean} single
   * @return {String}
   */

  var filterRE = /[^|]\|[^|]/;
  function inlineFilters(exp, single) {
    if (!filterRE.test(exp)) {
      return single ? exp : '(' + exp + ')';
    } else {
      var dir = parseDirective(exp);
      if (!dir.filters) {
        return '(' + exp + ')';
      } else {
        return 'this._applyFilters(' + dir.expression + // value
        ',null,' + // oldValue (null for read)
        JSON.stringify(dir.filters) + // filter descriptors
        ',false)'; // write?
      }
    }
  }

var text = Object.freeze({
    compileRegex: compileRegex,
    parseText: parseText,
    tokensToExp: tokensToExp
  });

  var delimiters = ['{{', '}}'];
  var unsafeDelimiters = ['{{{', '}}}'];

  var config = Object.defineProperties({

    /**
     * Whether to print debug messages.
     * Also enables stack trace for warnings.
     *
     * @type {Boolean}
     */

    debug: false,

    /**
     * Whether to suppress warnings.
     *
     * @type {Boolean}
     */

    silent: false,

    /**
     * Whether to use async rendering.
     */

    async: true,

    /**
     * Whether to warn against errors caught when evaluating
     * expressions.
     */

    warnExpressionErrors: true,

    /**
     * Whether to allow devtools inspection.
     * Disabled by default in production builds.
     */

    devtools: 'development' !== 'production',

    /**
     * Internal flag to indicate the delimiters have been
     * changed.
     *
     * @type {Boolean}
     */

    _delimitersChanged: true,

    /**
     * List of asset types that a component can own.
     *
     * @type {Array}
     */

    _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],

    /**
     * prop binding modes
     */

    _propBindingModes: {
      ONE_WAY: 0,
      TWO_WAY: 1,
      ONE_TIME: 2
    },

    /**
     * Max circular updates allowed in a batcher flush cycle.
     */

    _maxUpdateCount: 100

  }, {
    delimiters: { /**
                   * Interpolation delimiters. Changing these would trigger
                   * the text parser to re-compile the regular expressions.
                   *
                   * @type {Array<String>}
                   */

      get: function get() {
        return delimiters;
      },
      set: function set(val) {
        delimiters = val;
        compileRegex();
      },
      configurable: true,
      enumerable: true
    },
    unsafeDelimiters: {
      get: function get() {
        return unsafeDelimiters;
      },
      set: function set(val) {
        unsafeDelimiters = val;
        compileRegex();
      },
      configurable: true,
      enumerable: true
    }
  });

  var warn = undefined;
  var formatComponentName = undefined;

  if ('development' !== 'production') {
    (function () {
      var hasConsole = typeof console !== 'undefined';

      warn = function (msg, vm) {
        if (hasConsole && !config.silent) {
          console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
        }
      };

      formatComponentName = function (vm) {
        var name = vm._isVue ? vm.$options.name : vm.name;
        return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
      };
    })();
  }

  /**
   * Append with transition.
   *
   * @param {Element} el
   * @param {Element} target
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function appendWithTransition(el, target, vm, cb) {
    applyTransition(el, 1, function () {
      target.appendChild(el);
    }, vm, cb);
  }

  /**
   * InsertBefore with transition.
   *
   * @param {Element} el
   * @param {Element} target
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function beforeWithTransition(el, target, vm, cb) {
    applyTransition(el, 1, function () {
      before(el, target);
    }, vm, cb);
  }

  /**
   * Remove with transition.
   *
   * @param {Element} el
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function removeWithTransition(el, vm, cb) {
    applyTransition(el, -1, function () {
      remove(el);
    }, vm, cb);
  }

  /**
   * Apply transitions with an operation callback.
   *
   * @param {Element} el
   * @param {Number} direction
   *                  1: enter
   *                 -1: leave
   * @param {Function} op - the actual DOM operation
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function applyTransition(el, direction, op, vm, cb) {
    var transition = el.__v_trans;
    if (!transition ||
    // skip if there are no js hooks and CSS transition is
    // not supported
    !transition.hooks && !transitionEndEvent ||
    // skip transitions for initial compile
    !vm._isCompiled ||
    // if the vm is being manipulated by a parent directive
    // during the parent's compilation phase, skip the
    // animation.
    vm.$parent && !vm.$parent._isCompiled) {
      op();
      if (cb) cb();
      return;
    }
    var action = direction > 0 ? 'enter' : 'leave';
    transition[action](op, cb);
  }

var transition = Object.freeze({
    appendWithTransition: appendWithTransition,
    beforeWithTransition: beforeWithTransition,
    removeWithTransition: removeWithTransition,
    applyTransition: applyTransition
  });

  /**
   * Query an element selector if it's not an element already.
   *
   * @param {String|Element} el
   * @return {Element}
   */

  function query(el) {
    if (typeof el === 'string') {
      var selector = el;
      el = document.querySelector(el);
      if (!el) {
        'development' !== 'production' && warn('Cannot find element: ' + selector);
      }
    }
    return el;
  }

  /**
   * Check if a node is in the document.
   * Note: document.documentElement.contains should work here
   * but always returns false for comment nodes in phantomjs,
   * making unit tests difficult. This is fixed by doing the
   * contains() check on the node's parentNode instead of
   * the node itself.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function inDoc(node) {
    if (!node) return false;
    var doc = node.ownerDocument.documentElement;
    var parent = node.parentNode;
    return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
  }

  /**
   * Get and remove an attribute from a node.
   *
   * @param {Node} node
   * @param {String} _attr
   */

  function getAttr(node, _attr) {
    var val = node.getAttribute(_attr);
    if (val !== null) {
      node.removeAttribute(_attr);
    }
    return val;
  }

  /**
   * Get an attribute with colon or v-bind: prefix.
   *
   * @param {Node} node
   * @param {String} name
   * @return {String|null}
   */

  function getBindAttr(node, name) {
    var val = getAttr(node, ':' + name);
    if (val === null) {
      val = getAttr(node, 'v-bind:' + name);
    }
    return val;
  }

  /**
   * Check the presence of a bind attribute.
   *
   * @param {Node} node
   * @param {String} name
   * @return {Boolean}
   */

  function hasBindAttr(node, name) {
    return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function before(el, target) {
    target.parentNode.insertBefore(el, target);
  }

  /**
   * Insert el after target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function after(el, target) {
    if (target.nextSibling) {
      before(el, target.nextSibling);
    } else {
      target.parentNode.appendChild(el);
    }
  }

  /**
   * Remove el from DOM
   *
   * @param {Element} el
   */

  function remove(el) {
    el.parentNode.removeChild(el);
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function prepend(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild);
    } else {
      target.appendChild(el);
    }
  }

  /**
   * Replace target with el
   *
   * @param {Element} target
   * @param {Element} el
   */

  function replace(target, el) {
    var parent = target.parentNode;
    if (parent) {
      parent.replaceChild(el, target);
    }
  }

  /**
   * Add event listener shorthand.
   *
   * @param {Element} el
   * @param {String} event
   * @param {Function} cb
   * @param {Boolean} [useCapture]
   */

  function on(el, event, cb, useCapture) {
    el.addEventListener(event, cb, useCapture);
  }

  /**
   * Remove event listener shorthand.
   *
   * @param {Element} el
   * @param {String} event
   * @param {Function} cb
   */

  function off(el, event, cb) {
    el.removeEventListener(event, cb);
  }

  /**
   * For IE9 compat: when both class and :class are present
   * getAttribute('class') returns wrong value...
   *
   * @param {Element} el
   * @return {String}
   */

  function getClass(el) {
    var classname = el.className;
    if (typeof classname === 'object') {
      classname = classname.baseVal || '';
    }
    return classname;
  }

  /**
   * In IE9, setAttribute('class') will result in empty class
   * if the element also has the :class attribute; However in
   * PhantomJS, setting `className` does not work on SVG elements...
   * So we have to do a conditional check here.
   *
   * @param {Element} el
   * @param {String} cls
   */

  function setClass(el, cls) {
    /* istanbul ignore if */
    if (isIE9 && !/svg$/.test(el.namespaceURI)) {
      el.className = cls;
    } else {
      el.setAttribute('class', cls);
    }
  }

  /**
   * Add class with compatibility for IE & SVG
   *
   * @param {Element} el
   * @param {String} cls
   */

  function addClass(el, cls) {
    if (el.classList) {
      el.classList.add(cls);
    } else {
      var cur = ' ' + getClass(el) + ' ';
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        setClass(el, (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for IE & SVG
   *
   * @param {Element} el
   * @param {String} cls
   */

  function removeClass(el, cls) {
    if (el.classList) {
      el.classList.remove(cls);
    } else {
      var cur = ' ' + getClass(el) + ' ';
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      setClass(el, cur.trim());
    }
    if (!el.className) {
      el.removeAttribute('class');
    }
  }

  /**
   * Extract raw content inside an element into a temporary
   * container div
   *
   * @param {Element} el
   * @param {Boolean} asFragment
   * @return {Element|DocumentFragment}
   */

  function extractContent(el, asFragment) {
    var child;
    var rawContent;
    /* istanbul ignore if */
    if (isTemplate(el) && isFragment(el.content)) {
      el = el.content;
    }
    if (el.hasChildNodes()) {
      trimNode(el);
      rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
      /* eslint-disable no-cond-assign */
      while (child = el.firstChild) {
        /* eslint-enable no-cond-assign */
        rawContent.appendChild(child);
      }
    }
    return rawContent;
  }

  /**
   * Trim possible empty head/tail text and comment
   * nodes inside a parent.
   *
   * @param {Node} node
   */

  function trimNode(node) {
    var child;
    /* eslint-disable no-sequences */
    while ((child = node.firstChild, isTrimmable(child))) {
      node.removeChild(child);
    }
    while ((child = node.lastChild, isTrimmable(child))) {
      node.removeChild(child);
    }
    /* eslint-enable no-sequences */
  }

  function isTrimmable(node) {
    return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
  }

  /**
   * Check if an element is a template tag.
   * Note if the template appears inside an SVG its tagName
   * will be in lowercase.
   *
   * @param {Element} el
   */

  function isTemplate(el) {
    return el.tagName && el.tagName.toLowerCase() === 'template';
  }

  /**
   * Create an "anchor" for performing dom insertion/removals.
   * This is used in a number of scenarios:
   * - fragment instance
   * - v-html
   * - v-if
   * - v-for
   * - component
   *
   * @param {String} content
   * @param {Boolean} persist - IE trashes empty textNodes on
   *                            cloneNode(true), so in certain
   *                            cases the anchor needs to be
   *                            non-empty to be persisted in
   *                            templates.
   * @return {Comment|Text}
   */

  function createAnchor(content, persist) {
    var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
    anchor.__v_anchor = true;
    return anchor;
  }

  /**
   * Find a component ref attribute that starts with $.
   *
   * @param {Element} node
   * @return {String|undefined}
   */

  var refRE = /^v-ref:/;

  function findRef(node) {
    if (node.hasAttributes()) {
      var attrs = node.attributes;
      for (var i = 0, l = attrs.length; i < l; i++) {
        var name = attrs[i].name;
        if (refRE.test(name)) {
          return camelize(name.replace(refRE, ''));
        }
      }
    }
  }

  /**
   * Map a function to a range of nodes .
   *
   * @param {Node} node
   * @param {Node} end
   * @param {Function} op
   */

  function mapNodeRange(node, end, op) {
    var next;
    while (node !== end) {
      next = node.nextSibling;
      op(node);
      node = next;
    }
    op(end);
  }

  /**
   * Remove a range of nodes with transition, store
   * the nodes in a fragment with correct ordering,
   * and call callback when done.
   *
   * @param {Node} start
   * @param {Node} end
   * @param {Vue} vm
   * @param {DocumentFragment} frag
   * @param {Function} cb
   */

  function removeNodeRange(start, end, vm, frag, cb) {
    var done = false;
    var removed = 0;
    var nodes = [];
    mapNodeRange(start, end, function (node) {
      if (node === end) done = true;
      nodes.push(node);
      removeWithTransition(node, vm, onRemoved);
    });
    function onRemoved() {
      removed++;
      if (done && removed >= nodes.length) {
        for (var i = 0; i < nodes.length; i++) {
          frag.appendChild(nodes[i]);
        }
        cb && cb();
      }
    }
  }

  /**
   * Check if a node is a DocumentFragment.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function isFragment(node) {
    return node && node.nodeType === 11;
  }

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   *
   * @param {Element} el
   * @return {String}
   */

  function getOuterHTML(el) {
    if (el.outerHTML) {
      return el.outerHTML;
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML;
    }
  }

  var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
  var reservedTagRE = /^(slot|partial|component)$/i;

  var isUnknownElement = undefined;
  if ('development' !== 'production') {
    isUnknownElement = function (el, tag) {
      if (tag.indexOf('-') > -1) {
        // http://stackoverflow.com/a/28210364/1070244
        return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
      } else {
        return (/HTMLUnknownElement/.test(el.toString()) &&
          // Chrome returns unknown for several HTML5 elements.
          // https://code.google.com/p/chromium/issues/detail?id=540526
          !/^(data|time|rtc|rb)$/.test(tag)
        );
      }
    };
  }

  /**
   * Check if an element is a component, if yes return its
   * component id.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Object|undefined}
   */

  function checkComponentAttr(el, options) {
    var tag = el.tagName.toLowerCase();
    var hasAttrs = el.hasAttributes();
    if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
      if (resolveAsset(options, 'components', tag)) {
        return { id: tag };
      } else {
        var is = hasAttrs && getIsBinding(el, options);
        if (is) {
          return is;
        } else if ('development' !== 'production') {
          var expectedTag = options._componentNameMap && options._componentNameMap[tag];
          if (expectedTag) {
            warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
          } else if (isUnknownElement(el, tag)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
          }
        }
      }
    } else if (hasAttrs) {
      return getIsBinding(el, options);
    }
  }

  /**
   * Get "is" binding from an element.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Object|undefined}
   */

  function getIsBinding(el, options) {
    // dynamic syntax
    var exp = el.getAttribute('is');
    if (exp != null) {
      if (resolveAsset(options, 'components', exp)) {
        el.removeAttribute('is');
        return { id: exp };
      }
    } else {
      exp = getBindAttr(el, 'is');
      if (exp != null) {
        return { id: exp, dynamic: true };
      }
    }
  }

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   *
   * All strategy functions follow the same signature:
   *
   * @param {*} parentVal
   * @param {*} childVal
   * @param {Vue} [vm]
   */

  var strats = config.optionMergeStrategies = Object.create(null);

  /**
   * Helper that recursively merges two data objects together.
   */

  function mergeData(to, from) {
    var key, toVal, fromVal;
    for (key in from) {
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isObject(toVal) && isObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }

  /**
   * Data
   */

  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }
      if (typeof childVal !== 'function') {
        'development' !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn() {
        return mergeData(childVal.call(this), parentVal.call(this));
      };
    } else if (parentVal || childVal) {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  };

  /**
   * El
   */

  strats.el = function (parentVal, childVal, vm) {
    if (!vm && childVal && typeof childVal !== 'function') {
      'development' !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return;
    }
    var ret = childVal || parentVal;
    // invoke the element factory if this is instance merge
    return vm && typeof ret === 'function' ? ret.call(vm) : ret;
  };

  /**
   * Hooks and param attributes are merged as arrays.
   */

  strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
    return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
  };

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */

  function mergeAssets(parentVal, childVal) {
    var res = Object.create(parentVal || null);
    return childVal ? extend(res, guardArrayAssets(childVal)) : res;
  }

  config._assetTypes.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Events & Watchers.
   *
   * Events & watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */

  strats.watch = strats.events = function (parentVal, childVal) {
    if (!childVal) return parentVal;
    if (!parentVal) return childVal;
    var ret = {};
    extend(ret, parentVal);
    for (var key in childVal) {
      var parent = ret[key];
      var child = childVal[key];
      if (parent && !isArray(parent)) {
        parent = [parent];
      }
      ret[key] = parent ? parent.concat(child) : [child];
    }
    return ret;
  };

  /**
   * Other object hashes.
   */

  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
    if (!childVal) return parentVal;
    if (!parentVal) return childVal;
    var ret = Object.create(null);
    extend(ret, parentVal);
    extend(ret, childVal);
    return ret;
  };

  /**
   * Default strategy.
   */

  var defaultStrat = function defaultStrat(parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };

  /**
   * Make sure component options get converted to actual
   * constructors.
   *
   * @param {Object} options
   */

  function guardComponents(options) {
    if (options.components) {
      var components = options.components = guardArrayAssets(options.components);
      var ids = Object.keys(components);
      var def;
      if ('development' !== 'production') {
        var map = options._componentNameMap = {};
      }
      for (var i = 0, l = ids.length; i < l; i++) {
        var key = ids[i];
        if (commonTagRE.test(key) || reservedTagRE.test(key)) {
          'development' !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
          continue;
        }
        // record a all lowercase <-> kebab-case mapping for
        // possible custom element case error warning
        if ('development' !== 'production') {
          map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
        }
        def = components[key];
        if (isPlainObject(def)) {
          components[key] = Vue.extend(def);
        }
      }
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   *
   * @param {Object} options
   */

  function guardProps(options) {
    var props = options.props;
    var i, val;
    if (isArray(props)) {
      options.props = {};
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          options.props[val] = null;
        } else if (val.name) {
          options.props[val.name] = val;
        }
      }
    } else if (isPlainObject(props)) {
      var keys = Object.keys(props);
      i = keys.length;
      while (i--) {
        val = props[keys[i]];
        if (typeof val === 'function') {
          props[keys[i]] = { type: val };
        }
      }
    }
  }

  /**
   * Guard an Array-format assets option and converted it
   * into the key-value Object format.
   *
   * @param {Object|Array} assets
   * @return {Object}
   */

  function guardArrayAssets(assets) {
    if (isArray(assets)) {
      var res = {};
      var i = assets.length;
      var asset;
      while (i--) {
        asset = assets[i];
        var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
        if (!id) {
          'development' !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
        } else {
          res[id] = asset;
        }
      }
      return res;
    }
    return assets;
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   *
   * @param {Object} parent
   * @param {Object} child
   * @param {Vue} [vm] - if vm is present, indicates this is
   *                     an instantiation merge.
   */

  function mergeOptions(parent, child, vm) {
    guardComponents(child);
    guardProps(child);
    if ('development' !== 'production') {
      if (child.propsData && !vm) {
        warn('propsData can only be used as an instantiation option.');
      }
    }
    var options = {};
    var key;
    if (child['extends']) {
      parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   *
   * @param {Object} options
   * @param {String} type
   * @param {String} id
   * @param {Boolean} warnMissing
   * @return {Object|Function}
   */

  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }
    var assets = options[type];
    var camelizedId;
    var res = assets[id] ||
    // camelCase ID
    assets[camelizedId = camelize(id)] ||
    // Pascal Case ID
    assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
    if ('development' !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }
    return res;
  }

  var uid$1 = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   *
   * @constructor
   */
  function Dep() {
    this.id = uid$1++;
    this.subs = [];
  }

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;

  /**
   * Add a directive subscriber.
   *
   * @param {Directive} sub
   */

  Dep.prototype.addSub = function (sub) {
    this.subs.push(sub);
  };

  /**
   * Remove a directive subscriber.
   *
   * @param {Directive} sub
   */

  Dep.prototype.removeSub = function (sub) {
    this.subs.$remove(sub);
  };

  /**
   * Add self as a dependency to the target watcher.
   */

  Dep.prototype.depend = function () {
    Dep.target.addDep(this);
  };

  /**
   * Notify all subscribers of a new value.
   */

  Dep.prototype.notify = function () {
    // stablize the subscriber list first
    var subs = toArray(this.subs);
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto)

  /**
   * Intercept mutating methods and emit events
   */

  ;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      // avoid leaking arguments:
      // http://jsperf.com/closure-with-arguments
      var i = arguments.length;
      var args = new Array(i);
      while (i--) {
        args[i] = arguments[i];
      }
      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
          inserted = args;
          break;
        case 'unshift':
          inserted = args;
          break;
        case 'splice':
          inserted = args.slice(2);
          break;
      }
      if (inserted) ob.observeArray(inserted);
      // notify change
      ob.dep.notify();
      return result;
    });
  });

  /**
   * Swap the element at the given index with a new value
   * and emits corresponding event.
   *
   * @param {Number} index
   * @param {*} val
   * @return {*} - replaced element
   */

  def(arrayProto, '$set', function $set(index, val) {
    if (index >= this.length) {
      this.length = Number(index) + 1;
    }
    return this.splice(index, 1, val)[0];
  });

  /**
   * Convenience method to remove the element at given index or target element reference.
   *
   * @param {*} item
   */

  def(arrayProto, '$remove', function $remove(item) {
    /* istanbul ignore if */
    if (!this.length) return;
    var index = indexOf(this, item);
    if (index > -1) {
      return this.splice(index, 1);
    }
  });

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * By default, when a reactive property is set, the new value is
   * also converted to become reactive. However in certain cases, e.g.
   * v-for scope alias and props, we don't want to force conversion
   * because the value may be a nested value under a frozen data structure.
   *
   * So whenever we want to set a reactive property without forcing
   * conversion on the new value, we wrap that call inside this function.
   */

  var shouldConvert = true;

  function withoutConversion(fn) {
    shouldConvert = false;
    fn();
    shouldConvert = true;
  }

  /**
   * Observer class that are attached to each observed
   * object. Once attached, the observer converts target
   * object's property keys into getter/setters that
   * collect dependencies and dispatches updates.
   *
   * @param {Array|Object} value
   * @constructor
   */

  function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    def(value, '__ob__', this);
    if (isArray(value)) {
      var augment = hasProto ? protoAugment : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  }

  // Instance methods

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   *
   * @param {Object} obj
   */

  Observer.prototype.walk = function (obj) {
    var keys = Object.keys(obj);
    for (var i = 0, l = keys.length; i < l; i++) {
      this.convert(keys[i], obj[keys[i]]);
    }
  };

  /**
   * Observe a list of Array items.
   *
   * @param {Array} items
   */

  Observer.prototype.observeArray = function (items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  /**
   * Convert a property into getter/setter so we can emit
   * the events when the property is accessed/changed.
   *
   * @param {String} key
   * @param {*} val
   */

  Observer.prototype.convert = function (key, val) {
    defineReactive(this.value, key, val);
  };

  /**
   * Add an owner vm, so that when $set/$delete mutations
   * happen we can notify owner vms to proxy the keys and
   * digest the watchers. This is only called when the object
   * is observed as an instance's root $data.
   *
   * @param {Vue} vm
   */

  Observer.prototype.addVm = function (vm) {
    (this.vms || (this.vms = [])).push(vm);
  };

  /**
   * Remove an owner vm. This is called when the object is
   * swapped out as an instance's $data object.
   *
   * @param {Vue} vm
   */

  Observer.prototype.removeVm = function (vm) {
    this.vms.$remove(vm);
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   *
   * @param {Object|Array} target
   * @param {Object} src
   */

  function protoAugment(target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   *
   * @param {Object|Array} target
   * @param {Object} proto
   */

  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   *
   * @param {*} value
   * @param {Vue} [vm]
   * @return {Observer|undefined}
   * @static
   */

  function observe(value, vm) {
    if (!value || typeof value !== 'object') {
      return;
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }
    if (ob && vm) {
      ob.addVm(vm);
    }
    return ob;
  }

  /**
   * Define a reactive property on an Object.
   *
   * @param {Object} obj
   * @param {String} key
   * @param {*} val
   */

  function defineReactive(obj, key, val) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;

    var childOb = observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
          }
          if (isArray(value)) {
            for (var e, i = 0, l = value.length; i < l; i++) {
              e = value[i];
              e && e.__ob__ && e.__ob__.dep.depend();
            }
          }
        }
        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        if (newVal === value) {
          return;
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = observe(newVal);
        dep.notify();
      }
    });
  }



  var util = Object.freeze({
  	defineReactive: defineReactive,
  	set: set,
  	del: del,
  	hasOwn: hasOwn,
  	isLiteral: isLiteral,
  	isReserved: isReserved,
  	_toString: _toString,
  	toNumber: toNumber,
  	toBoolean: toBoolean,
  	stripQuotes: stripQuotes,
  	camelize: camelize,
  	hyphenate: hyphenate,
  	classify: classify,
  	bind: bind,
  	toArray: toArray,
  	extend: extend,
  	isObject: isObject,
  	isPlainObject: isPlainObject,
  	def: def,
  	debounce: _debounce,
  	indexOf: indexOf,
  	cancellable: cancellable,
  	looseEqual: looseEqual,
  	isArray: isArray,
  	hasProto: hasProto,
  	inBrowser: inBrowser,
  	devtools: devtools,
  	isIE9: isIE9,
  	isAndroid: isAndroid,
  	isIos: isIos,
  	isWechat: isWechat,
  	get transitionProp () { return transitionProp; },
  	get transitionEndEvent () { return transitionEndEvent; },
  	get animationProp () { return animationProp; },
  	get animationEndEvent () { return animationEndEvent; },
  	nextTick: nextTick,
  	get _Set () { return _Set; },
  	query: query,
  	inDoc: inDoc,
  	getAttr: getAttr,
  	getBindAttr: getBindAttr,
  	hasBindAttr: hasBindAttr,
  	before: before,
  	after: after,
  	remove: remove,
  	prepend: prepend,
  	replace: replace,
  	on: on,
  	off: off,
  	setClass: setClass,
  	addClass: addClass,
  	removeClass: removeClass,
  	extractContent: extractContent,
  	trimNode: trimNode,
  	isTemplate: isTemplate,
  	createAnchor: createAnchor,
  	findRef: findRef,
  	mapNodeRange: mapNodeRange,
  	removeNodeRange: removeNodeRange,
  	isFragment: isFragment,
  	getOuterHTML: getOuterHTML,
  	mergeOptions: mergeOptions,
  	resolveAsset: resolveAsset,
  	checkComponentAttr: checkComponentAttr,
  	commonTagRE: commonTagRE,
  	reservedTagRE: reservedTagRE,
  	get warn () { return warn; }
  });

  var uid = 0;

  function initMixin (Vue) {
    /**
     * The main init sequence. This is called for every
     * instance, including ones that are created from extended
     * constructors.
     *
     * @param {Object} options - this options object should be
     *                           the result of merging class
     *                           options and the options passed
     *                           in to the constructor.
     */

    Vue.prototype._init = function (options) {
      options = options || {};

      this.$el = null;
      this.$parent = options.parent;
      this.$root = this.$parent ? this.$parent.$root : this;
      this.$children = [];
      this.$refs = {}; // child vm references
      this.$els = {}; // element references
      this._watchers = []; // all watchers as an array
      this._directives = []; // all directives

      // a uid
      this._uid = uid++;

      // a flag to avoid this being observed
      this._isVue = true;

      // events bookkeeping
      this._events = {}; // registered callbacks
      this._eventsCount = {}; // for $broadcast optimization

      // fragment instance properties
      this._isFragment = false;
      this._fragment = // @type {DocumentFragment}
      this._fragmentStart = // @type {Text|Comment}
      this._fragmentEnd = null; // @type {Text|Comment}

      // lifecycle state
      this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
      this._unlinkFn = null;

      // context:
      // if this is a transcluded component, context
      // will be the common parent vm of this instance
      // and its host.
      this._context = options._context || this.$parent;

      // scope:
      // if this is inside an inline v-for, the scope
      // will be the intermediate scope created for this
      // repeat fragment. this is used for linking props
      // and container directives.
      this._scope = options._scope;

      // fragment:
      // if this instance is compiled inside a Fragment, it
      // needs to reigster itself as a child of that fragment
      // for attach/detach to work properly.
      this._frag = options._frag;
      if (this._frag) {
        this._frag.children.push(this);
      }

      // push self into parent / transclusion host
      if (this.$parent) {
        this.$parent.$children.push(this);
      }

      // merge options.
      options = this.$options = mergeOptions(this.constructor.options, options, this);

      // set ref
      this._updateRef();

      // initialize data as empty object.
      // it will be filled up in _initData().
      this._data = {};

      // call init hook
      this._callHook('init');

      // initialize data observation and scope inheritance.
      this._initState();

      // setup event system and option events.
      this._initEvents();

      // call created hook
      this._callHook('created');

      // if `el` option is passed, start compilation.
      if (options.el) {
        this.$mount(options.el);
      }
    };
  }

  var pathCache = new Cache(1000);

  // actions
  var APPEND = 0;
  var PUSH = 1;
  var INC_SUB_PATH_DEPTH = 2;
  var PUSH_SUB_PATH = 3;

  // states
  var BEFORE_PATH = 0;
  var IN_PATH = 1;
  var BEFORE_IDENT = 2;
  var IN_IDENT = 3;
  var IN_SUB_PATH = 4;
  var IN_SINGLE_QUOTE = 5;
  var IN_DOUBLE_QUOTE = 6;
  var AFTER_PATH = 7;
  var ERROR = 8;

  var pathStateMachine = [];

  pathStateMachine[BEFORE_PATH] = {
    'ws': [BEFORE_PATH],
    'ident': [IN_IDENT, APPEND],
    '[': [IN_SUB_PATH],
    'eof': [AFTER_PATH]
  };

  pathStateMachine[IN_PATH] = {
    'ws': [IN_PATH],
    '.': [BEFORE_IDENT],
    '[': [IN_SUB_PATH],
    'eof': [AFTER_PATH]
  };

  pathStateMachine[BEFORE_IDENT] = {
    'ws': [BEFORE_IDENT],
    'ident': [IN_IDENT, APPEND]
  };

  pathStateMachine[IN_IDENT] = {
    'ident': [IN_IDENT, APPEND],
    '0': [IN_IDENT, APPEND],
    'number': [IN_IDENT, APPEND],
    'ws': [IN_PATH, PUSH],
    '.': [BEFORE_IDENT, PUSH],
    '[': [IN_SUB_PATH, PUSH],
    'eof': [AFTER_PATH, PUSH]
  };

  pathStateMachine[IN_SUB_PATH] = {
    "'": [IN_SINGLE_QUOTE, APPEND],
    '"': [IN_DOUBLE_QUOTE, APPEND],
    '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
    ']': [IN_PATH, PUSH_SUB_PATH],
    'eof': ERROR,
    'else': [IN_SUB_PATH, APPEND]
  };

  pathStateMachine[IN_SINGLE_QUOTE] = {
    "'": [IN_SUB_PATH, APPEND],
    'eof': ERROR,
    'else': [IN_SINGLE_QUOTE, APPEND]
  };

  pathStateMachine[IN_DOUBLE_QUOTE] = {
    '"': [IN_SUB_PATH, APPEND],
    'eof': ERROR,
    'else': [IN_DOUBLE_QUOTE, APPEND]
  };

  /**
   * Determine the type of a character in a keypath.
   *
   * @param {Char} ch
   * @return {String} type
   */

  function getPathCharType(ch) {
    if (ch === undefined) {
      return 'eof';
    }

    var code = ch.charCodeAt(0);

    switch (code) {
      case 0x5B: // [
      case 0x5D: // ]
      case 0x2E: // .
      case 0x22: // "
      case 0x27: // '
      case 0x30:
        // 0
        return ch;

      case 0x5F: // _
      case 0x24:
        // $
        return 'ident';

      case 0x20: // Space
      case 0x09: // Tab
      case 0x0A: // Newline
      case 0x0D: // Return
      case 0xA0: // No-break space
      case 0xFEFF: // Byte Order Mark
      case 0x2028: // Line Separator
      case 0x2029:
        // Paragraph Separator
        return 'ws';
    }

    // a-z, A-Z
    if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
      return 'ident';
    }

    // 1-9
    if (code >= 0x31 && code <= 0x39) {
      return 'number';
    }

    return 'else';
  }

  /**
   * Format a subPath, return its plain form if it is
   * a literal string or number. Otherwise prepend the
   * dynamic indicator (*).
   *
   * @param {String} path
   * @return {String}
   */

  function formatSubPath(path) {
    var trimmed = path.trim();
    // invalid leading 0
    if (path.charAt(0) === '0' && isNaN(path)) {
      return false;
    }
    return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
  }

  /**
   * Parse a string path into an array of segments
   *
   * @param {String} path
   * @return {Array|undefined}
   */

  function parse(path) {
    var keys = [];
    var index = -1;
    var mode = BEFORE_PATH;
    var subPathDepth = 0;
    var c, newChar, key, type, transition, action, typeMap;

    var actions = [];

    actions[PUSH] = function () {
      if (key !== undefined) {
        keys.push(key);
        key = undefined;
      }
    };

    actions[APPEND] = function () {
      if (key === undefined) {
        key = newChar;
      } else {
        key += newChar;
      }
    };

    actions[INC_SUB_PATH_DEPTH] = function () {
      actions[APPEND]();
      subPathDepth++;
    };

    actions[PUSH_SUB_PATH] = function () {
      if (subPathDepth > 0) {
        subPathDepth--;
        mode = IN_SUB_PATH;
        actions[APPEND]();
      } else {
        subPathDepth = 0;
        key = formatSubPath(key);
        if (key === false) {
          return false;
        } else {
          actions[PUSH]();
        }
      }
    };

    function maybeUnescapeQuote() {
      var nextChar = path[index + 1];
      if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
        index++;
        newChar = '\\' + nextChar;
        actions[APPEND]();
        return true;
      }
    }

    while (mode != null) {
      index++;
      c = path[index];

      if (c === '\\' && maybeUnescapeQuote()) {
        continue;
      }

      type = getPathCharType(c);
      typeMap = pathStateMachine[mode];
      transition = typeMap[type] || typeMap['else'] || ERROR;

      if (transition === ERROR) {
        return; // parse error
      }

      mode = transition[0];
      action = actions[transition[1]];
      if (action) {
        newChar = transition[2];
        newChar = newChar === undefined ? c : newChar;
        if (action() === false) {
          return;
        }
      }

      if (mode === AFTER_PATH) {
        keys.raw = path;
        return keys;
      }
    }
  }

  /**
   * External parse that check for a cache hit first
   *
   * @param {String} path
   * @return {Array|undefined}
   */

  function parsePath(path) {
    var hit = pathCache.get(path);
    if (!hit) {
      hit = parse(path);
      if (hit) {
        pathCache.put(path, hit);
      }
    }
    return hit;
  }

  /**
   * Get from an object from a path string
   *
   * @param {Object} obj
   * @param {String} path
   */

  function getPath(obj, path) {
    return parseExpression(path).get(obj);
  }

  /**
   * Warn against setting non-existent root path on a vm.
   */

  var warnNonExistent;
  if ('development' !== 'production') {
    warnNonExistent = function (path, vm) {
      warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
    };
  }

  /**
   * Set on an object from a path
   *
   * @param {Object} obj
   * @param {String | Array} path
   * @param {*} val
   */

  function setPath(obj, path, val) {
    var original = obj;
    if (typeof path === 'string') {
      path = parse(path);
    }
    if (!path || !isObject(obj)) {
      return false;
    }
    var last, key;
    for (var i = 0, l = path.length; i < l; i++) {
      last = obj;
      key = path[i];
      if (key.charAt(0) === '*') {
        key = parseExpression(key.slice(1)).get.call(original, original);
      }
      if (i < l - 1) {
        obj = obj[key];
        if (!isObject(obj)) {
          obj = {};
          if ('development' !== 'production' && last._isVue) {
            warnNonExistent(path, last);
          }
          set(last, key, obj);
        }
      } else {
        if (isArray(obj)) {
          obj.$set(key, val);
        } else if (key in obj) {
          obj[key] = val;
        } else {
          if ('development' !== 'production' && obj._isVue) {
            warnNonExistent(path, obj);
          }
          set(obj, key, val);
        }
      }
    }
    return true;
  }

var path = Object.freeze({
    parsePath: parsePath,
    getPath: getPath,
    setPath: setPath
  });

  var expressionCache = new Cache(1000);

  var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
  var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');

  // keywords that don't make sense inside expressions
  var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
  var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');

  var wsRE = /\s/g;
  var newlineRE = /\n/g;
  var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
  var restoreRE = /"(\d+)"/g;
  var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
  var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
  var booleanLiteralRE = /^(?:true|false)$/;

  /**
   * Save / Rewrite / Restore
   *
   * When rewriting paths found in an expression, it is
   * possible for the same letter sequences to be found in
   * strings and Object literal property keys. Therefore we
   * remove and store these parts in a temporary array, and
   * restore them after the path rewrite.
   */

  var saved = [];

  /**
   * Save replacer
   *
   * The save regex can match two possible cases:
   * 1. An opening object literal
   * 2. A string
   * If matched as a plain string, we need to escape its
   * newlines, since the string needs to be preserved when
   * generating the function body.
   *
   * @param {String} str
   * @param {String} isString - str if matched as a string
   * @return {String} - placeholder with index
   */

  function save(str, isString) {
    var i = saved.length;
    saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
    return '"' + i + '"';
  }

  /**
   * Path rewrite replacer
   *
   * @param {String} raw
   * @return {String}
   */

  function rewrite(raw) {
    var c = raw.charAt(0);
    var path = raw.slice(1);
    if (allowedKeywordsRE.test(path)) {
      return raw;
    } else {
      path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
      return c + 'scope.' + path;
    }
  }

  /**
   * Restore replacer
   *
   * @param {String} str
   * @param {String} i - matched save index
   * @return {String}
   */

  function restore(str, i) {
    return saved[i];
  }

  /**
   * Rewrite an expression, prefixing all path accessors with
   * `scope.` and generate getter/setter functions.
   *
   * @param {String} exp
   * @return {Function}
   */

  function compileGetter(exp) {
    if (improperKeywordsRE.test(exp)) {
      'development' !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
    }
    // reset state
    saved.length = 0;
    // save strings and object literal keys
    var body = exp.replace(saveRE, save).replace(wsRE, '');
    // rewrite all paths
    // pad 1 space here becaue the regex matches 1 extra char
    body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
    return makeGetterFn(body);
  }

  /**
   * Build a getter function. Requires eval.
   *
   * We isolate the try/catch so it doesn't affect the
   * optimization of the parse function when it is not called.
   *
   * @param {String} body
   * @return {Function|undefined}
   */

  function makeGetterFn(body) {
    try {
      /* eslint-disable no-new-func */
      return new Function('scope', 'return ' + body + ';');
      /* eslint-enable no-new-func */
    } catch (e) {
      'development' !== 'production' && warn('Invalid expression. ' + 'Generated function body: ' + body);
    }
  }

  /**
   * Compile a setter function for the expression.
   *
   * @param {String} exp
   * @return {Function|undefined}
   */

  function compileSetter(exp) {
    var path = parsePath(exp);
    if (path) {
      return function (scope, val) {
        setPath(scope, path, val);
      };
    } else {
      'development' !== 'production' && warn('Invalid setter expression: ' + exp);
    }
  }

  /**
   * Parse an expression into re-written getter/setters.
   *
   * @param {String} exp
   * @param {Boolean} needSet
   * @return {Function}
   */

  function parseExpression(exp, needSet) {
    exp = exp.trim();
    // try cache
    var hit = expressionCache.get(exp);
    if (hit) {
      if (needSet && !hit.set) {
        hit.set = compileSetter(hit.exp);
      }
      return hit;
    }
    var res = { exp: exp };
    res.get = isSimplePath(exp) && exp.indexOf('[') < 0
    // optimized super simple getter
    ? makeGetterFn('scope.' + exp)
    // dynamic getter
    : compileGetter(exp);
    if (needSet) {
      res.set = compileSetter(exp);
    }
    expressionCache.put(exp, res);
    return res;
  }

  /**
   * Check if an expression is a simple path.
   *
   * @param {String} exp
   * @return {Boolean}
   */

  function isSimplePath(exp) {
    return pathTestRE.test(exp) &&
    // don't treat true/false as paths
    !booleanLiteralRE.test(exp) &&
    // Math constants e.g. Math.PI, Math.E etc.
    exp.slice(0, 5) !== 'Math.';
  }

var expression = Object.freeze({
    parseExpression: parseExpression,
    isSimplePath: isSimplePath
  });

  // we have two separate queues: one for directive updates
  // and one for user watcher registered via $watch().
  // we want to guarantee directive updates to be called
  // before user watchers so that when user watchers are
  // triggered, the DOM would have already been in updated
  // state.

  var queue = [];
  var userQueue = [];
  var has = {};
  var circular = {};
  var waiting = false;

  /**
   * Reset the batcher's state.
   */

  function resetBatcherState() {
    queue.length = 0;
    userQueue.length = 0;
    has = {};
    circular = {};
    waiting = false;
  }

  /**
   * Flush both queues and run the watchers.
   */

  function flushBatcherQueue() {
    var _again = true;

    _function: while (_again) {
      _again = false;

      runBatcherQueue(queue);
      runBatcherQueue(userQueue);
      // user watchers triggered more watchers,
      // keep flushing until it depletes
      if (queue.length) {
        _again = true;
        continue _function;
      }
      // dev tool hook
      /* istanbul ignore if */
      if (devtools && config.devtools) {
        devtools.emit('flush');
      }
      resetBatcherState();
    }
  }

  /**
   * Run the watchers in a single queue.
   *
   * @param {Array} queue
   */

  function runBatcherQueue(queue) {
    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (var i = 0; i < queue.length; i++) {
      var watcher = queue[i];
      var id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if ('development' !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > config._maxUpdateCount) {
          warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
          break;
        }
      }
    }
    queue.length = 0;
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   *
   * @param {Watcher} watcher
   *   properties:
   *   - {Number} id
   *   - {Function} run
   */

  function pushWatcher(watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      // push watcher into appropriate queue
      var q = watcher.user ? userQueue : queue;
      has[id] = q.length;
      q.push(watcher);
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushBatcherQueue);
      }
    }
  }

  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   *
   * @param {Vue} vm
   * @param {String|Function} expOrFn
   * @param {Function} cb
   * @param {Object} options
   *                 - {Array} filters
   *                 - {Boolean} twoWay
   *                 - {Boolean} deep
   *                 - {Boolean} user
   *                 - {Boolean} sync
   *                 - {Boolean} lazy
   *                 - {Function} [preProcess]
   *                 - {Function} [postProcess]
   * @constructor
   */
  function Watcher(vm, expOrFn, cb, options) {
    // mix in options
    if (options) {
      extend(this, options);
    }
    var isFn = typeof expOrFn === 'function';
    this.vm = vm;
    vm._watchers.push(this);
    this.expression = expOrFn;
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.prevError = null; // for async error stacks
    // parse expression for getter/setter
    if (isFn) {
      this.getter = expOrFn;
      this.setter = undefined;
    } else {
      var res = parseExpression(expOrFn, this.twoWay);
      this.getter = res.get;
      this.setter = res.set;
    }
    this.value = this.lazy ? undefined : this.get();
    // state for avoiding false triggers for deep and Array
    // watchers during vm._digest()
    this.queued = this.shallow = false;
  }

  /**
   * Evaluate the getter, and re-collect dependencies.
   */

  Watcher.prototype.get = function () {
    this.beforeGet();
    var scope = this.scope || this.vm;
    var value;
    try {
      value = this.getter.call(scope, scope);
    } catch (e) {
      if ('development' !== 'production' && config.warnExpressionErrors) {
        warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
      }
    }
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    if (this.preProcess) {
      value = this.preProcess(value);
    }
    if (this.filters) {
      value = scope._applyFilters(value, null, this.filters, false);
    }
    if (this.postProcess) {
      value = this.postProcess(value);
    }
    this.afterGet();
    return value;
  };

  /**
   * Set the corresponding value with the setter.
   *
   * @param {*} value
   */

  Watcher.prototype.set = function (value) {
    var scope = this.scope || this.vm;
    if (this.filters) {
      value = scope._applyFilters(value, this.value, this.filters, true);
    }
    try {
      this.setter.call(scope, scope, value);
    } catch (e) {
      if ('development' !== 'production' && config.warnExpressionErrors) {
        warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
      }
    }
    // two-way sync for v-for alias
    var forContext = scope.$forContext;
    if (forContext && forContext.alias === this.expression) {
      if (forContext.filters) {
        'development' !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
        return;
      }
      forContext._withLock(function () {
        if (scope.$key) {
          // original is an object
          forContext.rawValue[scope.$key] = value;
        } else {
          forContext.rawValue.$set(scope.$index, value);
        }
      });
    }
  };

  /**
   * Prepare for dependency collection.
   */

  Watcher.prototype.beforeGet = function () {
    Dep.target = this;
  };

  /**
   * Add a dependency to this directive.
   *
   * @param {Dep} dep
   */

  Watcher.prototype.addDep = function (dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */

  Watcher.prototype.afterGet = function () {
    Dep.target = null;
    var i = this.deps.length;
    while (i--) {
      var dep = this.deps[i];
      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   *
   * @param {Boolean} shallow
   */

  Watcher.prototype.update = function (shallow) {
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync || !config.async) {
      this.run();
    } else {
      // if queued, only overwrite shallow with non-shallow,
      // but not the other way around.
      this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
      this.queued = true;
      // record before-push error stack in debug mode
      /* istanbul ignore if */
      if ('development' !== 'production' && config.debug) {
        this.prevError = new Error('[vue] async stack trace');
      }
      pushWatcher(this);
    }
  };

  /**
   * Batcher job interface.
   * Will be called by the batcher.
   */

  Watcher.prototype.run = function () {
    if (this.active) {
      var value = this.get();
      if (value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated; but only do so if this is a
      // non-shallow update (caused by a vm digest).
      (isObject(value) || this.deep) && !this.shallow) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        // in debug + async mode, when a watcher callbacks
        // throws, we also throw the saved before-push error
        // so the full cross-tick stack trace is available.
        var prevError = this.prevError;
        /* istanbul ignore if */
        if ('development' !== 'production' && config.debug && prevError) {
          this.prevError = null;
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            nextTick(function () {
              throw prevError;
            }, 0);
            throw e;
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
      this.queued = this.shallow = false;
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */

  Watcher.prototype.evaluate = function () {
    // avoid overwriting another watcher that is being
    // collected.
    var current = Dep.target;
    this.value = this.get();
    this.dirty = false;
    Dep.target = current;
  };

  /**
   * Depend on all deps collected by this watcher.
   */

  Watcher.prototype.depend = function () {
    var i = this.deps.length;
    while (i--) {
      this.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subcriber list.
   */

  Watcher.prototype.teardown = function () {
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed or is performing a v-for
      // re-render (the watcher list is then filtered by v-for).
      if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
        this.vm._watchers.$remove(this);
      }
      var i = this.deps.length;
      while (i--) {
        this.deps[i].removeSub(this);
      }
      this.active = false;
      this.vm = this.cb = this.value = null;
    }
  };

  /**
   * Recrusively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   *
   * @param {*} val
   */

  var seenObjects = new _Set();
  function traverse(val, seen) {
    var i = undefined,
        keys = undefined;
    if (!seen) {
      seen = seenObjects;
      seen.clear();
    }
    var isA = isArray(val);
    var isO = isObject(val);
    if (isA || isO) {
      if (val.__ob__) {
        var depId = val.__ob__.dep.id;
        if (seen.has(depId)) {
          return;
        } else {
          seen.add(depId);
        }
      }
      if (isA) {
        i = val.length;
        while (i--) traverse(val[i], seen);
      } else if (isO) {
        keys = Object.keys(val);
        i = keys.length;
        while (i--) traverse(val[keys[i]], seen);
      }
    }
  }

  var text$1 = {

    bind: function bind() {
      this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
    },

    update: function update(value) {
      this.el[this.attr] = _toString(value);
    }
  };

  var templateCache = new Cache(1000);
  var idSelectorCache = new Cache(1000);

  var map = {
    efault: [0, '', ''],
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
  };

  map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];

  map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];

  /**
   * Check if a node is a supported template node with a
   * DocumentFragment content.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function isRealTemplate(node) {
    return isTemplate(node) && isFragment(node.content);
  }

  var tagRE$1 = /<([\w:-]+)/;
  var entityRE = /&#?\w+?;/;

  /**
   * Convert a string template to a DocumentFragment.
   * Determines correct wrapping by tag types. Wrapping
   * strategy found in jQuery & component/domify.
   *
   * @param {String} templateString
   * @param {Boolean} raw
   * @return {DocumentFragment}
   */

  function stringToFragment(templateString, raw) {
    // try a cache hit first
    var cacheKey = raw ? templateString : templateString.trim();
    var hit = templateCache.get(cacheKey);
    if (hit) {
      return hit;
    }

    var frag = document.createDocumentFragment();
    var tagMatch = templateString.match(tagRE$1);
    var entityMatch = entityRE.test(templateString);

    if (!tagMatch && !entityMatch) {
      // text only, return a single text node.
      frag.appendChild(document.createTextNode(templateString));
    } else {
      var tag = tagMatch && tagMatch[1];
      var wrap = map[tag] || map.efault;
      var depth = wrap[0];
      var prefix = wrap[1];
      var suffix = wrap[2];
      var node = document.createElement('div');

      node.innerHTML = prefix + templateString + suffix;
      while (depth--) {
        node = node.lastChild;
      }

      var child;
      /* eslint-disable no-cond-assign */
      while (child = node.firstChild) {
        /* eslint-enable no-cond-assign */
        frag.appendChild(child);
      }
    }
    if (!raw) {
      trimNode(frag);
    }
    templateCache.put(cacheKey, frag);
    return frag;
  }

  /**
   * Convert a template node to a DocumentFragment.
   *
   * @param {Node} node
   * @return {DocumentFragment}
   */

  function nodeToFragment(node) {
    // if its a template tag and the browser supports it,
    // its content is already a document fragment. However, iOS Safari has
    // bug when using directly cloned template content with touch
    // events and can cause crashes when the nodes are removed from DOM, so we
    // have to treat template elements as string templates. (#2805)
    /* istanbul ignore if */
    if (isRealTemplate(node)) {
      return stringToFragment(node.innerHTML);
    }
    // script template
    if (node.tagName === 'SCRIPT') {
      return stringToFragment(node.textContent);
    }
    // normal node, clone it to avoid mutating the original
    var clonedNode = cloneNode(node);
    var frag = document.createDocumentFragment();
    var child;
    /* eslint-disable no-cond-assign */
    while (child = clonedNode.firstChild) {
      /* eslint-enable no-cond-assign */
      frag.appendChild(child);
    }
    trimNode(frag);
    return frag;
  }

  // Test for the presence of the Safari template cloning bug
  // https://bugs.webkit.org/showug.cgi?id=137755
  var hasBrokenTemplate = (function () {
    /* istanbul ignore else */
    if (inBrowser) {
      var a = document.createElement('div');
      a.innerHTML = '<template>1</template>';
      return !a.cloneNode(true).firstChild.innerHTML;
    } else {
      return false;
    }
  })();

  // Test for IE10/11 textarea placeholder clone bug
  var hasTextareaCloneBug = (function () {
    /* istanbul ignore else */
    if (inBrowser) {
      var t = document.createElement('textarea');
      t.placeholder = 't';
      return t.cloneNode(true).value === 't';
    } else {
      return false;
    }
  })();

  /**
   * 1. Deal with Safari cloning nested <template> bug by
   *    manually cloning all template instances.
   * 2. Deal with IE10/11 textarea placeholder bug by setting
   *    the correct value after cloning.
   *
   * @param {Element|DocumentFragment} node
   * @return {Element|DocumentFragment}
   */

  function cloneNode(node) {
    /* istanbul ignore if */
    if (!node.querySelectorAll) {
      return node.cloneNode();
    }
    var res = node.cloneNode(true);
    var i, original, cloned;
    /* istanbul ignore if */
    if (hasBrokenTemplate) {
      var tempClone = res;
      if (isRealTemplate(node)) {
        node = node.content;
        tempClone = res.content;
      }
      original = node.querySelectorAll('template');
      if (original.length) {
        cloned = tempClone.querySelectorAll('template');
        i = cloned.length;
        while (i--) {
          cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
        }
      }
    }
    /* istanbul ignore if */
    if (hasTextareaCloneBug) {
      if (node.tagName === 'TEXTAREA') {
        res.value = node.value;
      } else {
        original = node.querySelectorAll('textarea');
        if (original.length) {
          cloned = res.querySelectorAll('textarea');
          i = cloned.length;
          while (i--) {
            cloned[i].value = original[i].value;
          }
        }
      }
    }
    return res;
  }

  /**
   * Process the template option and normalizes it into a
   * a DocumentFragment that can be used as a partial or a
   * instance template.
   *
   * @param {*} template
   *        Possible values include:
   *        - DocumentFragment object
   *        - Node object of type Template
   *        - id selector: '#some-template-id'
   *        - template string: '<div><span>{{msg}}</span></div>'
   * @param {Boolean} shouldClone
   * @param {Boolean} raw
   *        inline HTML interpolation. Do not check for id
   *        selector and keep whitespace in the string.
   * @return {DocumentFragment|undefined}
   */

  function parseTemplate(template, shouldClone, raw) {
    var node, frag;

    // if the template is already a document fragment,
    // do nothing
    if (isFragment(template)) {
      trimNode(template);
      return shouldClone ? cloneNode(template) : template;
    }

    if (typeof template === 'string') {
      // id selector
      if (!raw && template.charAt(0) === '#') {
        // id selector can be cached too
        frag = idSelectorCache.get(template);
        if (!frag) {
          node = document.getElementById(template.slice(1));
          if (node) {
            frag = nodeToFragment(node);
            // save selector to cache
            idSelectorCache.put(template, frag);
          }
        }
      } else {
        // normal string template
        frag = stringToFragment(template, raw);
      }
    } else if (template.nodeType) {
      // a direct node
      frag = nodeToFragment(template);
    }

    return frag && shouldClone ? cloneNode(frag) : frag;
  }

var template = Object.freeze({
    cloneNode: cloneNode,
    parseTemplate: parseTemplate
  });

  var html = {

    bind: function bind() {
      // a comment node means this is a binding for
      // {{{ inline unescaped html }}}
      if (this.el.nodeType === 8) {
        // hold nodes
        this.nodes = [];
        // replace the placeholder with proper anchor
        this.anchor = createAnchor('v-html');
        replace(this.el, this.anchor);
      }
    },

    update: function update(value) {
      value = _toString(value);
      if (this.nodes) {
        this.swap(value);
      } else {
        this.el.innerHTML = value;
      }
    },

    swap: function swap(value) {
      // remove old nodes
      var i = this.nodes.length;
      while (i--) {
        remove(this.nodes[i]);
      }
      // convert new value to a fragment
      // do not attempt to retrieve from id selector
      var frag = parseTemplate(value, true, true);
      // save a reference to these nodes so we can remove later
      this.nodes = toArray(frag.childNodes);
      before(frag, this.anchor);
    }
  };

  /**
   * Abstraction for a partially-compiled fragment.
   * Can optionally compile content with a child scope.
   *
   * @param {Function} linker
   * @param {Vue} vm
   * @param {DocumentFragment} frag
   * @param {Vue} [host]
   * @param {Object} [scope]
   * @param {Fragment} [parentFrag]
   */
  function Fragment(linker, vm, frag, host, scope, parentFrag) {
    this.children = [];
    this.childFrags = [];
    this.vm = vm;
    this.scope = scope;
    this.inserted = false;
    this.parentFrag = parentFrag;
    if (parentFrag) {
      parentFrag.childFrags.push(this);
    }
    this.unlink = linker(vm, frag, host, scope, this);
    var single = this.single = frag.childNodes.length === 1 &&
    // do not go single mode if the only node is an anchor
    !frag.childNodes[0].__v_anchor;
    if (single) {
      this.node = frag.childNodes[0];
      this.before = singleBefore;
      this.remove = singleRemove;
    } else {
      this.node = createAnchor('fragment-start');
      this.end = createAnchor('fragment-end');
      this.frag = frag;
      prepend(this.node, frag);
      frag.appendChild(this.end);
      this.before = multiBefore;
      this.remove = multiRemove;
    }
    this.node.__v_frag = this;
  }

  /**
   * Call attach/detach for all components contained within
   * this fragment. Also do so recursively for all child
   * fragments.
   *
   * @param {Function} hook
   */

  Fragment.prototype.callHook = function (hook) {
    var i, l;
    for (i = 0, l = this.childFrags.length; i < l; i++) {
      this.childFrags[i].callHook(hook);
    }
    for (i = 0, l = this.children.length; i < l; i++) {
      hook(this.children[i]);
    }
  };

  /**
   * Insert fragment before target, single node version
   *
   * @param {Node} target
   * @param {Boolean} withTransition
   */

  function singleBefore(target, withTransition) {
    this.inserted = true;
    var method = withTransition !== false ? beforeWithTransition : before;
    method(this.node, target, this.vm);
    if (inDoc(this.node)) {
      this.callHook(attach);
    }
  }

  /**
   * Remove fragment, single node version
   */

  function singleRemove() {
    this.inserted = false;
    var shouldCallRemove = inDoc(this.node);
    var self = this;
    this.beforeRemove();
    removeWithTransition(this.node, this.vm, function () {
      if (shouldCallRemove) {
        self.callHook(detach);
      }
      self.destroy();
    });
  }

  /**
   * Insert fragment before target, multi-nodes version
   *
   * @param {Node} target
   * @param {Boolean} withTransition
   */

  function multiBefore(target, withTransition) {
    this.inserted = true;
    var vm = this.vm;
    var method = withTransition !== false ? beforeWithTransition : before;
    mapNodeRange(this.node, this.end, function (node) {
      method(node, target, vm);
    });
    if (inDoc(this.node)) {
      this.callHook(attach);
    }
  }

  /**
   * Remove fragment, multi-nodes version
   */

  function multiRemove() {
    this.inserted = false;
    var self = this;
    var shouldCallRemove = inDoc(this.node);
    this.beforeRemove();
    removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
      if (shouldCallRemove) {
        self.callHook(detach);
      }
      self.destroy();
    });
  }

  /**
   * Prepare the fragment for removal.
   */

  Fragment.prototype.beforeRemove = function () {
    var i, l;
    for (i = 0, l = this.childFrags.length; i < l; i++) {
      // call the same method recursively on child
      // fragments, depth-first
      this.childFrags[i].beforeRemove(false);
    }
    for (i = 0, l = this.children.length; i < l; i++) {
      // Call destroy for all contained instances,
      // with remove:false and defer:true.
      // Defer is necessary because we need to
      // keep the children to call detach hooks
      // on them.
      this.children[i].$destroy(false, true);
    }
    var dirs = this.unlink.dirs;
    for (i = 0, l = dirs.length; i < l; i++) {
      // disable the watchers on all the directives
      // so that the rendered content stays the same
      // during removal.
      dirs[i]._watcher && dirs[i]._watcher.teardown();
    }
  };

  /**
   * Destroy the fragment.
   */

  Fragment.prototype.destroy = function () {
    if (this.parentFrag) {
      this.parentFrag.childFrags.$remove(this);
    }
    this.node.__v_frag = null;
    this.unlink();
  };

  /**
   * Call attach hook for a Vue instance.
   *
   * @param {Vue} child
   */

  function attach(child) {
    if (!child._isAttached && inDoc(child.$el)) {
      child._callHook('attached');
    }
  }

  /**
   * Call detach hook for a Vue instance.
   *
   * @param {Vue} child
   */

  function detach(child) {
    if (child._isAttached && !inDoc(child.$el)) {
      child._callHook('detached');
    }
  }

  var linkerCache = new Cache(5000);

  /**
   * A factory that can be used to create instances of a
   * fragment. Caches the compiled linker if possible.
   *
   * @param {Vue} vm
   * @param {Element|String} el
   */
  function FragmentFactory(vm, el) {
    this.vm = vm;
    var template;
    var isString = typeof el === 'string';
    if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
      template = parseTemplate(el, true);
    } else {
      template = document.createDocumentFragment();
      template.appendChild(el);
    }
    this.template = template;
    // linker can be cached, but only for components
    var linker;
    var cid = vm.constructor.cid;
    if (cid > 0) {
      var cacheId = cid + (isString ? el : getOuterHTML(el));
      linker = linkerCache.get(cacheId);
      if (!linker) {
        linker = compile(template, vm.$options, true);
        linkerCache.put(cacheId, linker);
      }
    } else {
      linker = compile(template, vm.$options, true);
    }
    this.linker = linker;
  }

  /**
   * Create a fragment instance with given host and scope.
   *
   * @param {Vue} host
   * @param {Object} scope
   * @param {Fragment} parentFrag
   */

  FragmentFactory.prototype.create = function (host, scope, parentFrag) {
    var frag = cloneNode(this.template);
    return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
  };

  var ON = 700;
  var MODEL = 800;
  var BIND = 850;
  var TRANSITION = 1100;
  var EL = 1500;
  var COMPONENT = 1500;
  var PARTIAL = 1750;
  var IF = 2100;
  var FOR = 2200;
  var SLOT = 2300;

  var uid$3 = 0;

  var vFor = {

    priority: FOR,
    terminal: true,

    params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],

    bind: function bind() {
      // support "item in/of items" syntax
      var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
      if (inMatch) {
        var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
        if (itMatch) {
          this.iterator = itMatch[1].trim();
          this.alias = itMatch[2].trim();
        } else {
          this.alias = inMatch[1].trim();
        }
        this.expression = inMatch[2];
      }

      if (!this.alias) {
        'development' !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
        return;
      }

      // uid as a cache identifier
      this.id = '__v-for__' + ++uid$3;

      // check if this is an option list,
      // so that we know if we need to update the <select>'s
      // v-model when the option list has changed.
      // because v-model has a lower priority than v-for,
      // the v-model is not bound here yet, so we have to
      // retrive it in the actual updateModel() function.
      var tag = this.el.tagName;
      this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';

      // setup anchor nodes
      this.start = createAnchor('v-for-start');
      this.end = createAnchor('v-for-end');
      replace(this.el, this.end);
      before(this.start, this.end);

      // cache
      this.cache = Object.create(null);

      // fragment factory
      this.factory = new FragmentFactory(this.vm, this.el);
    },

    update: function update(data) {
      this.diff(data);
      this.updateRef();
      this.updateModel();
    },

    /**
     * Diff, based on new data and old data, determine the
     * minimum amount of DOM manipulations needed to make the
     * DOM reflect the new data Array.
     *
     * The algorithm diffs the new data Array by storing a
     * hidden reference to an owner vm instance on previously
     * seen data. This allows us to achieve O(n) which is
     * better than a levenshtein distance based algorithm,
     * which is O(m * n).
     *
     * @param {Array} data
     */

    diff: function diff(data) {
      // check if the Array was converted from an Object
      var item = data[0];
      var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');

      var trackByKey = this.params.trackBy;
      var oldFrags = this.frags;
      var frags = this.frags = new Array(data.length);
      var alias = this.alias;
      var iterator = this.iterator;
      var start = this.start;
      var end = this.end;
      var inDocument = inDoc(start);
      var init = !oldFrags;
      var i, l, frag, key, value, primitive;

      // First pass, go through the new Array and fill up
      // the new frags array. If a piece of data has a cached
      // instance for it, we reuse it. Otherwise build a new
      // instance.
      for (i = 0, l = data.length; i < l; i++) {
        item = data[i];
        key = convertedFromObject ? item.$key : null;
        value = convertedFromObject ? item.$value : item;
        primitive = !isObject(value);
        frag = !init && this.getCachedFrag(value, i, key);
        if (frag) {
          // reusable fragment
          frag.reused = true;
          // update $index
          frag.scope.$index = i;
          // update $key
          if (key) {
            frag.scope.$key = key;
          }
          // update iterator
          if (iterator) {
            frag.scope[iterator] = key !== null ? key : i;
          }
          // update data for track-by, object repeat &
          // primitive values.
          if (trackByKey || convertedFromObject || primitive) {
            withoutConversion(function () {
              frag.scope[alias] = value;
            });
          }
        } else {
          // new isntance
          frag = this.create(value, alias, i, key);
          frag.fresh = !init;
        }
        frags[i] = frag;
        if (init) {
          frag.before(end);
        }
      }

      // we're done for the initial render.
      if (init) {
        return;
      }

      // Second pass, go through the old fragments and
      // destroy those who are not reused (and remove them
      // from cache)
      var removalIndex = 0;
      var totalRemoved = oldFrags.length - frags.length;
      // when removing a large number of fragments, watcher removal
      // turns out to be a perf bottleneck, so we batch the watcher
      // removals into a single filter call!
      this.vm._vForRemoving = true;
      for (i = 0, l = oldFrags.length; i < l; i++) {
        frag = oldFrags[i];
        if (!frag.reused) {
          this.deleteCachedFrag(frag);
          this.remove(frag, removalIndex++, totalRemoved, inDocument);
        }
      }
      this.vm._vForRemoving = false;
      if (removalIndex) {
        this.vm._watchers = this.vm._watchers.filter(function (w) {
          return w.active;
        });
      }

      // Final pass, move/insert new fragments into the
      // right place.
      var targetPrev, prevEl, currentPrev;
      var insertionIndex = 0;
      for (i = 0, l = frags.length; i < l; i++) {
        frag = frags[i];
        // this is the frag that we should be after
        targetPrev = frags[i - 1];
        prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
        if (frag.reused && !frag.staggerCb) {
          currentPrev = findPrevFrag(frag, start, this.id);
          if (currentPrev !== targetPrev && (!currentPrev ||
          // optimization for moving a single item.
          // thanks to suggestions by @livoras in #1807
          findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
            this.move(frag, prevEl);
          }
        } else {
          // new instance, or still in stagger.
          // insert with updated stagger index.
          this.insert(frag, insertionIndex++, prevEl, inDocument);
        }
        frag.reused = frag.fresh = false;
      }
    },

    /**
     * Create a new fragment instance.
     *
     * @param {*} value
     * @param {String} alias
     * @param {Number} index
     * @param {String} [key]
     * @return {Fragment}
     */

    create: function create(value, alias, index, key) {
      var host = this._host;
      // create iteration scope
      var parentScope = this._scope || this.vm;
      var scope = Object.create(parentScope);
      // ref holder for the scope
      scope.$refs = Object.create(parentScope.$refs);
      scope.$els = Object.create(parentScope.$els);
      // make sure point $parent to parent scope
      scope.$parent = parentScope;
      // for two-way binding on alias
      scope.$forContext = this;
      // define scope properties
      // important: define the scope alias without forced conversion
      // so that frozen data structures remain non-reactive.
      withoutConversion(function () {
        defineReactive(scope, alias, value);
      });
      defineReactive(scope, '$index', index);
      if (key) {
        defineReactive(scope, '$key', key);
      } else if (scope.$key) {
        // avoid accidental fallback
        def(scope, '$key', null);
      }
      if (this.iterator) {
        defineReactive(scope, this.iterator, key !== null ? key : index);
      }
      var frag = this.factory.create(host, scope, this._frag);
      frag.forId = this.id;
      this.cacheFrag(value, frag, index, key);
      return frag;
    },

    /**
     * Update the v-ref on owner vm.
     */

    updateRef: function updateRef() {
      var ref = this.descriptor.ref;
      if (!ref) return;
      var hash = (this._scope || this.vm).$refs;
      var refs;
      if (!this.fromObject) {
        refs = this.frags.map(findVmFromFrag);
      } else {
        refs = {};
        this.frags.forEach(function (frag) {
          refs[frag.scope.$key] = findVmFromFrag(frag);
        });
      }
      hash[ref] = refs;
    },

    /**
     * For option lists, update the containing v-model on
     * parent <select>.
     */

    updateModel: function updateModel() {
      if (this.isOption) {
        var parent = this.start.parentNode;
        var model = parent && parent.__v_model;
        if (model) {
          model.forceUpdate();
        }
      }
    },

    /**
     * Insert a fragment. Handles staggering.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Node} prevEl
     * @param {Boolean} inDocument
     */

    insert: function insert(frag, index, prevEl, inDocument) {
      if (frag.staggerCb) {
        frag.staggerCb.cancel();
        frag.staggerCb = null;
      }
      var staggerAmount = this.getStagger(frag, index, null, 'enter');
      if (inDocument && staggerAmount) {
        // create an anchor and insert it synchronously,
        // so that we can resolve the correct order without
        // worrying about some elements not inserted yet
        var anchor = frag.staggerAnchor;
        if (!anchor) {
          anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
          anchor.__v_frag = frag;
        }
        after(anchor, prevEl);
        var op = frag.staggerCb = cancellable(function () {
          frag.staggerCb = null;
          frag.before(anchor);
          remove(anchor);
        });
        setTimeout(op, staggerAmount);
      } else {
        var target = prevEl.nextSibling;
        /* istanbul ignore if */
        if (!target) {
          // reset end anchor position in case the position was messed up
          // by an external drag-n-drop library.
          after(this.end, prevEl);
          target = this.end;
        }
        frag.before(target);
      }
    },

    /**
     * Remove a fragment. Handles staggering.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Number} total
     * @param {Boolean} inDocument
     */

    remove: function remove(frag, index, total, inDocument) {
      if (frag.staggerCb) {
        frag.staggerCb.cancel();
        frag.staggerCb = null;
        // it's not possible for the same frag to be removed
        // twice, so if we have a pending stagger callback,
        // it means this frag is queued for enter but removed
        // before its transition started. Since it is already
        // destroyed, we can just leave it in detached state.
        return;
      }
      var staggerAmount = this.getStagger(frag, index, total, 'leave');
      if (inDocument && staggerAmount) {
        var op = frag.staggerCb = cancellable(function () {
          frag.staggerCb = null;
          frag.remove();
        });
        setTimeout(op, staggerAmount);
      } else {
        frag.remove();
      }
    },

    /**
     * Move a fragment to a new position.
     * Force no transition.
     *
     * @param {Fragment} frag
     * @param {Node} prevEl
     */

    move: function move(frag, prevEl) {
      // fix a common issue with Sortable:
      // if prevEl doesn't have nextSibling, this means it's
      // been dragged after the end anchor. Just re-position
      // the end anchor to the end of the container.
      /* istanbul ignore if */
      if (!prevEl.nextSibling) {
        this.end.parentNode.appendChild(this.end);
      }
      frag.before(prevEl.nextSibling, false);
    },

    /**
     * Cache a fragment using track-by or the object key.
     *
     * @param {*} value
     * @param {Fragment} frag
     * @param {Number} index
     * @param {String} [key]
     */

    cacheFrag: function cacheFrag(value, frag, index, key) {
      var trackByKey = this.params.trackBy;
      var cache = this.cache;
      var primitive = !isObject(value);
      var id;
      if (key || trackByKey || primitive) {
        id = getTrackByKey(index, key, value, trackByKey);
        if (!cache[id]) {
          cache[id] = frag;
        } else if (trackByKey !== '$index') {
          'development' !== 'production' && this.warnDuplicate(value);
        }
      } else {
        id = this.id;
        if (hasOwn(value, id)) {
          if (value[id] === null) {
            value[id] = frag;
          } else {
            'development' !== 'production' && this.warnDuplicate(value);
          }
        } else if (Object.isExtensible(value)) {
          def(value, id, frag);
        } else if ('development' !== 'production') {
          warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
        }
      }
      frag.raw = value;
    },

    /**
     * Get a cached fragment from the value/index/key
     *
     * @param {*} value
     * @param {Number} index
     * @param {String} key
     * @return {Fragment}
     */

    getCachedFrag: function getCachedFrag(value, index, key) {
      var trackByKey = this.params.trackBy;
      var primitive = !isObject(value);
      var frag;
      if (key || trackByKey || primitive) {
        var id = getTrackByKey(index, key, value, trackByKey);
        frag = this.cache[id];
      } else {
        frag = value[this.id];
      }
      if (frag && (frag.reused || frag.fresh)) {
        'development' !== 'production' && this.warnDuplicate(value);
      }
      return frag;
    },

    /**
     * Delete a fragment from cache.
     *
     * @param {Fragment} frag
     */

    deleteCachedFrag: function deleteCachedFrag(frag) {
      var value = frag.raw;
      var trackByKey = this.params.trackBy;
      var scope = frag.scope;
      var index = scope.$index;
      // fix #948: avoid accidentally fall through to
      // a parent repeater which happens to have $key.
      var key = hasOwn(scope, '$key') && scope.$key;
      var primitive = !isObject(value);
      if (trackByKey || key || primitive) {
        var id = getTrackByKey(index, key, value, trackByKey);
        this.cache[id] = null;
      } else {
        value[this.id] = null;
        frag.raw = null;
      }
    },

    /**
     * Get the stagger amount for an insertion/removal.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Number} total
     * @param {String} type
     */

    getStagger: function getStagger(frag, index, total, type) {
      type = type + 'Stagger';
      var trans = frag.node.__v_trans;
      var hooks = trans && trans.hooks;
      var hook = hooks && (hooks[type] || hooks.stagger);
      return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
    },

    /**
     * Pre-process the value before piping it through the
     * filters. This is passed to and called by the watcher.
     */

    _preProcess: function _preProcess(value) {
      // regardless of type, store the un-filtered raw value.
      this.rawValue = value;
      return value;
    },

    /**
     * Post-process the value after it has been piped through
     * the filters. This is passed to and called by the watcher.
     *
     * It is necessary for this to be called during the
     * wathcer's dependency collection phase because we want
     * the v-for to update when the source Object is mutated.
     */

    _postProcess: function _postProcess(value) {
      if (isArray(value)) {
        return value;
      } else if (isPlainObject(value)) {
        // convert plain object to array.
        var keys = Object.keys(value);
        var i = keys.length;
        var res = new Array(i);
        var key;
        while (i--) {
          key = keys[i];
          res[i] = {
            $key: key,
            $value: value[key]
          };
        }
        return res;
      } else {
        if (typeof value === 'number' && !isNaN(value)) {
          value = range(value);
        }
        return value || [];
      }
    },

    unbind: function unbind() {
      if (this.descriptor.ref) {
        (this._scope || this.vm).$refs[this.descriptor.ref] = null;
      }
      if (this.frags) {
        var i = this.frags.length;
        var frag;
        while (i--) {
          frag = this.frags[i];
          this.deleteCachedFrag(frag);
          frag.destroy();
        }
      }
    }
  };

  /**
   * Helper to find the previous element that is a fragment
   * anchor. This is necessary because a destroyed frag's
   * element could still be lingering in the DOM before its
   * leaving transition finishes, but its inserted flag
   * should have been set to false so we can skip them.
   *
   * If this is a block repeat, we want to make sure we only
   * return frag that is bound to this v-for. (see #929)
   *
   * @param {Fragment} frag
   * @param {Comment|Text} anchor
   * @param {String} id
   * @return {Fragment}
   */

  function findPrevFrag(frag, anchor, id) {
    var el = frag.node.previousSibling;
    /* istanbul ignore if */
    if (!el) return;
    frag = el.__v_frag;
    while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
      el = el.previousSibling;
      /* istanbul ignore if */
      if (!el) return;
      frag = el.__v_frag;
    }
    return frag;
  }

  /**
   * Find a vm from a fragment.
   *
   * @param {Fragment} frag
   * @return {Vue|undefined}
   */

  function findVmFromFrag(frag) {
    var node = frag.node;
    // handle multi-node frag
    if (frag.end) {
      while (!node.__vue__ && node !== frag.end && node.nextSibling) {
        node = node.nextSibling;
      }
    }
    return node.__vue__;
  }

  /**
   * Create a range array from given number.
   *
   * @param {Number} n
   * @return {Array}
   */

  function range(n) {
    var i = -1;
    var ret = new Array(Math.floor(n));
    while (++i < n) {
      ret[i] = i;
    }
    return ret;
  }

  /**
   * Get the track by key for an item.
   *
   * @param {Number} index
   * @param {String} key
   * @param {*} value
   * @param {String} [trackByKey]
   */

  function getTrackByKey(index, key, value, trackByKey) {
    return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
  }

  if ('development' !== 'production') {
    vFor.warnDuplicate = function (value) {
      warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
    };
  }

  var vIf = {

    priority: IF,
    terminal: true,

    bind: function bind() {
      var el = this.el;
      if (!el.__vue__) {
        // check else block
        var next = el.nextElementSibling;
        if (next && getAttr(next, 'v-else') !== null) {
          remove(next);
          this.elseEl = next;
        }
        // check main block
        this.anchor = createAnchor('v-if');
        replace(el, this.anchor);
      } else {
        'development' !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
        this.invalid = true;
      }
    },

    update: function update(value) {
      if (this.invalid) return;
      if (value) {
        if (!this.frag) {
          this.insert();
        }
      } else {
        this.remove();
      }
    },

    insert: function insert() {
      if (this.elseFrag) {
        this.elseFrag.remove();
        this.elseFrag = null;
      }
      // lazy init factory
      if (!this.factory) {
        this.factory = new FragmentFactory(this.vm, this.el);
      }
      this.frag = this.factory.create(this._host, this._scope, this._frag);
      this.frag.before(this.anchor);
    },

    remove: function remove() {
      if (this.frag) {
        this.frag.remove();
        this.frag = null;
      }
      if (this.elseEl && !this.elseFrag) {
        if (!this.elseFactory) {
          this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
        }
        this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
        this.elseFrag.before(this.anchor);
      }
    },

    unbind: function unbind() {
      if (this.frag) {
        this.frag.destroy();
      }
      if (this.elseFrag) {
        this.elseFrag.destroy();
      }
    }
  };

  var show = {

    bind: function bind() {
      // check else block
      var next = this.el.nextElementSibling;
      if (next && getAttr(next, 'v-else') !== null) {
        this.elseEl = next;
      }
    },

    update: function update(value) {
      this.apply(this.el, value);
      if (this.elseEl) {
        this.apply(this.elseEl, !value);
      }
    },

    apply: function apply(el, value) {
      if (inDoc(el)) {
        applyTransition(el, value ? 1 : -1, toggle, this.vm);
      } else {
        toggle();
      }
      function toggle() {
        el.style.display = value ? '' : 'none';
      }
    }
  };

  var text$2 = {

    bind: function bind() {
      var self = this;
      var el = this.el;
      var isRange = el.type === 'range';
      var lazy = this.params.lazy;
      var number = this.params.number;
      var debounce = this.params.debounce;

      // handle composition events.
      //   http://blog.evanyou.me/2014/01/03/composition-event/
      // skip this for Android because it handles composition
      // events quite differently. Android doesn't trigger
      // composition events for language input methods e.g.
      // Chinese, but instead triggers them for spelling
      // suggestions... (see Discussion/#162)
      var composing = false;
      if (!isAndroid && !isRange) {
        this.on('compositionstart', function () {
          composing = true;
        });
        this.on('compositionend', function () {
          composing = false;
          // in IE11 the "compositionend" event fires AFTER
          // the "input" event, so the input handler is blocked
          // at the end... have to call it here.
          //
          // #1327: in lazy mode this is unecessary.
          if (!lazy) {
            self.listener();
          }
        });
      }

      // prevent messing with the input when user is typing,
      // and force update on blur.
      this.focused = false;
      if (!isRange && !lazy) {
        this.on('focus', function () {
          self.focused = true;
        });
        this.on('blur', function () {
          self.focused = false;
          // do not sync value after fragment removal (#2017)
          if (!self._frag || self._frag.inserted) {
            self.rawListener();
          }
        });
      }

      // Now attach the main listener
      this.listener = this.rawListener = function () {
        if (composing || !self._bound) {
          return;
        }
        var val = number || isRange ? toNumber(el.value) : el.value;
        self.set(val);
        // force update on next tick to avoid lock & same value
        // also only update when user is not typing
        nextTick(function () {
          if (self._bound && !self.focused) {
            self.update(self._watcher.value);
          }
        });
      };

      // apply debounce
      if (debounce) {
        this.listener = _debounce(this.listener, debounce);
      }

      // Support jQuery events, since jQuery.trigger() doesn't
      // trigger native events in some cases and some plugins
      // rely on $.trigger()
      //
      // We want to make sure if a listener is attached using
      // jQuery, it is also removed with jQuery, that's why
      // we do the check for each directive instance and
      // store that check result on itself. This also allows
      // easier test coverage control by unsetting the global
      // jQuery variable in tests.
      this.hasjQuery = typeof jQuery === 'function';
      if (this.hasjQuery) {
        var method = jQuery.fn.on ? 'on' : 'bind';
        jQuery(el)[method]('change', this.rawListener);
        if (!lazy) {
          jQuery(el)[method]('input', this.listener);
        }
      } else {
        this.on('change', this.rawListener);
        if (!lazy) {
          this.on('input', this.listener);
        }
      }

      // IE9 doesn't fire input event on backspace/del/cut
      if (!lazy && isIE9) {
        this.on('cut', function () {
          nextTick(self.listener);
        });
        this.on('keyup', function (e) {
          if (e.keyCode === 46 || e.keyCode === 8) {
            self.listener();
          }
        });
      }

      // set initial value if present
      if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      this.el.value = _toString(value);
    },

    unbind: function unbind() {
      var el = this.el;
      if (this.hasjQuery) {
        var method = jQuery.fn.off ? 'off' : 'unbind';
        jQuery(el)[method]('change', this.listener);
        jQuery(el)[method]('input', this.listener);
      }
    }
  };

  var radio = {

    bind: function bind() {
      var self = this;
      var el = this.el;

      this.getValue = function () {
        // value overwrite via v-bind:value
        if (el.hasOwnProperty('_value')) {
          return el._value;
        }
        var val = el.value;
        if (self.params.number) {
          val = toNumber(val);
        }
        return val;
      };

      this.listener = function () {
        self.set(self.getValue());
      };
      this.on('change', this.listener);

      if (el.hasAttribute('checked')) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      this.el.checked = looseEqual(value, this.getValue());
    }
  };

  var select = {

    bind: function bind() {
      var self = this;
      var el = this.el;

      // method to force update DOM using latest value.
      this.forceUpdate = function () {
        if (self._watcher) {
          self.update(self._watcher.get());
        }
      };

      // check if this is a multiple select
      var multiple = this.multiple = el.hasAttribute('multiple');

      // attach listener
      this.listener = function () {
        var value = getValue(el, multiple);
        value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
        self.set(value);
      };
      this.on('change', this.listener);

      // if has initial value, set afterBind
      var initValue = getValue(el, multiple, true);
      if (multiple && initValue.length || !multiple && initValue !== null) {
        this.afterBind = this.listener;
      }

      // All major browsers except Firefox resets
      // selectedIndex with value -1 to 0 when the element
      // is appended to a new parent, therefore we have to
      // force a DOM update whenever that happens...
      this.vm.$on('hook:attached', this.forceUpdate);
    },

    update: function update(value) {
      var el = this.el;
      el.selectedIndex = -1;
      var multi = this.multiple && isArray(value);
      var options = el.options;
      var i = options.length;
      var op, val;
      while (i--) {
        op = options[i];
        val = op.hasOwnProperty('_value') ? op._value : op.value;
        /* eslint-disable eqeqeq */
        op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
        /* eslint-enable eqeqeq */
      }
    },

    unbind: function unbind() {
      /* istanbul ignore next */
      this.vm.$off('hook:attached', this.forceUpdate);
    }
  };

  /**
   * Get select value
   *
   * @param {SelectElement} el
   * @param {Boolean} multi
   * @param {Boolean} init
   * @return {Array|*}
   */

  function getValue(el, multi, init) {
    var res = multi ? [] : null;
    var op, val, selected;
    for (var i = 0, l = el.options.length; i < l; i++) {
      op = el.options[i];
      selected = init ? op.hasAttribute('selected') : op.selected;
      if (selected) {
        val = op.hasOwnProperty('_value') ? op._value : op.value;
        if (multi) {
          res.push(val);
        } else {
          return val;
        }
      }
    }
    return res;
  }

  /**
   * Native Array.indexOf uses strict equal, but in this
   * case we need to match string/numbers with custom equal.
   *
   * @param {Array} arr
   * @param {*} val
   */

  function indexOf$1(arr, val) {
    var i = arr.length;
    while (i--) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }
    return -1;
  }

  var checkbox = {

    bind: function bind() {
      var self = this;
      var el = this.el;

      this.getValue = function () {
        return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
      };

      function getBooleanValue() {
        var val = el.checked;
        if (val && el.hasOwnProperty('_trueValue')) {
          return el._trueValue;
        }
        if (!val && el.hasOwnProperty('_falseValue')) {
          return el._falseValue;
        }
        return val;
      }

      this.listener = function () {
        var model = self._watcher.value;
        if (isArray(model)) {
          var val = self.getValue();
          if (el.checked) {
            if (indexOf(model, val) < 0) {
              model.push(val);
            }
          } else {
            model.$remove(val);
          }
        } else {
          self.set(getBooleanValue());
        }
      };

      this.on('change', this.listener);
      if (el.hasAttribute('checked')) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      var el = this.el;
      if (isArray(value)) {
        el.checked = indexOf(value, this.getValue()) > -1;
      } else {
        if (el.hasOwnProperty('_trueValue')) {
          el.checked = looseEqual(value, el._trueValue);
        } else {
          el.checked = !!value;
        }
      }
    }
  };

  var handlers = {
    text: text$2,
    radio: radio,
    select: select,
    checkbox: checkbox
  };

  var model = {

    priority: MODEL,
    twoWay: true,
    handlers: handlers,
    params: ['lazy', 'number', 'debounce'],

    /**
     * Possible elements:
     *   <select>
     *   <textarea>
     *   <input type="*">
     *     - text
     *     - checkbox
     *     - radio
     *     - number
     */

    bind: function bind() {
      // friendly warning...
      this.checkFilters();
      if (this.hasRead && !this.hasWrite) {
        'development' !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
      }
      var el = this.el;
      var tag = el.tagName;
      var handler;
      if (tag === 'INPUT') {
        handler = handlers[el.type] || handlers.text;
      } else if (tag === 'SELECT') {
        handler = handlers.select;
      } else if (tag === 'TEXTAREA') {
        handler = handlers.text;
      } else {
        'development' !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
        return;
      }
      el.__v_model = this;
      handler.bind.call(this);
      this.update = handler.update;
      this._unbind = handler.unbind;
    },

    /**
     * Check read/write filter stats.
     */

    checkFilters: function checkFilters() {
      var filters = this.filters;
      if (!filters) return;
      var i = filters.length;
      while (i--) {
        var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
        if (typeof filter === 'function' || filter.read) {
          this.hasRead = true;
        }
        if (filter.write) {
          this.hasWrite = true;
        }
      }
    },

    unbind: function unbind() {
      this.el.__v_model = null;
      this._unbind && this._unbind();
    }
  };

  // keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    'delete': [8, 46],
    up: 38,
    left: 37,
    right: 39,
    down: 40
  };

  function keyFilter(handler, keys) {
    var codes = keys.map(function (key) {
      var charCode = key.charCodeAt(0);
      if (charCode > 47 && charCode < 58) {
        return parseInt(key, 10);
      }
      if (key.length === 1) {
        charCode = key.toUpperCase().charCodeAt(0);
        if (charCode > 64 && charCode < 91) {
          return charCode;
        }
      }
      return keyCodes[key];
    });
    codes = [].concat.apply([], codes);
    return function keyHandler(e) {
      if (codes.indexOf(e.keyCode) > -1) {
        return handler.call(this, e);
      }
    };
  }

  function stopFilter(handler) {
    return function stopHandler(e) {
      e.stopPropagation();
      return handler.call(this, e);
    };
  }

  function preventFilter(handler) {
    return function preventHandler(e) {
      e.preventDefault();
      return handler.call(this, e);
    };
  }

  function selfFilter(handler) {
    return function selfHandler(e) {
      if (e.target === e.currentTarget) {
        return handler.call(this, e);
      }
    };
  }

  var on$1 = {

    priority: ON,
    acceptStatement: true,
    keyCodes: keyCodes,

    bind: function bind() {
      // deal with iframes
      if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
        var self = this;
        this.iframeBind = function () {
          on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
        };
        this.on('load', this.iframeBind);
      }
    },

    update: function update(handler) {
      // stub a noop for v-on with no value,
      // e.g. @mousedown.prevent
      if (!this.descriptor.raw) {
        handler = function () {};
      }

      if (typeof handler !== 'function') {
        'development' !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
        return;
      }

      // apply modifiers
      if (this.modifiers.stop) {
        handler = stopFilter(handler);
      }
      if (this.modifiers.prevent) {
        handler = preventFilter(handler);
      }
      if (this.modifiers.self) {
        handler = selfFilter(handler);
      }
      // key filter
      var keys = Object.keys(this.modifiers).filter(function (key) {
        return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
      });
      if (keys.length) {
        handler = keyFilter(handler, keys);
      }

      this.reset();
      this.handler = handler;

      if (this.iframeBind) {
        this.iframeBind();
      } else {
        on(this.el, this.arg, this.handler, this.modifiers.capture);
      }
    },

    reset: function reset() {
      var el = this.iframeBind ? this.el.contentWindow : this.el;
      if (this.handler) {
        off(el, this.arg, this.handler);
      }
    },

    unbind: function unbind() {
      this.reset();
    }
  };

  var prefixes = ['-webkit-', '-moz-', '-ms-'];
  var camelPrefixes = ['Webkit', 'Moz', 'ms'];
  var importantRE = /!important;?$/;
  var propCache = Object.create(null);

  var testEl = null;

  var style = {

    deep: true,

    update: function update(value) {
      if (typeof value === 'string') {
        this.el.style.cssText = value;
      } else if (isArray(value)) {
        this.handleObject(value.reduce(extend, {}));
      } else {
        this.handleObject(value || {});
      }
    },

    handleObject: function handleObject(value) {
      // cache object styles so that only changed props
      // are actually updated.
      var cache = this.cache || (this.cache = {});
      var name, val;
      for (name in cache) {
        if (!(name in value)) {
          this.handleSingle(name, null);
          delete cache[name];
        }
      }
      for (name in value) {
        val = value[name];
        if (val !== cache[name]) {
          cache[name] = val;
          this.handleSingle(name, val);
        }
      }
    },

    handleSingle: function handleSingle(prop, value) {
      prop = normalize(prop);
      if (!prop) return; // unsupported prop
      // cast possible numbers/booleans into strings
      if (value != null) value += '';
      if (value) {
        var isImportant = importantRE.test(value) ? 'important' : '';
        if (isImportant) {
          /* istanbul ignore if */
          if ('development' !== 'production') {
            warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
          }
          value = value.replace(importantRE, '').trim();
          this.el.style.setProperty(prop.kebab, value, isImportant);
        } else {
          this.el.style[prop.camel] = value;
        }
      } else {
        this.el.style[prop.camel] = '';
      }
    }

  };

  /**
   * Normalize a CSS property name.
   * - cache result
   * - auto prefix
   * - camelCase -> dash-case
   *
   * @param {String} prop
   * @return {String}
   */

  function normalize(prop) {
    if (propCache[prop]) {
      return propCache[prop];
    }
    var res = prefix(prop);
    propCache[prop] = propCache[res] = res;
    return res;
  }

  /**
   * Auto detect the appropriate prefix for a CSS property.
   * https://gist.github.com/paulirish/523692
   *
   * @param {String} prop
   * @return {String}
   */

  function prefix(prop) {
    prop = hyphenate(prop);
    var camel = camelize(prop);
    var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
    if (!testEl) {
      testEl = document.createElement('div');
    }
    var i = prefixes.length;
    var prefixed;
    if (camel !== 'filter' && camel in testEl.style) {
      return {
        kebab: prop,
        camel: camel
      };
    }
    while (i--) {
      prefixed = camelPrefixes[i] + upper;
      if (prefixed in testEl.style) {
        return {
          kebab: prefixes[i] + prop,
          camel: prefixed
        };
      }
    }
  }

  // xlink
  var xlinkNS = 'http://www.w3.org/1999/xlink';
  var xlinkRE = /^xlink:/;

  // check for attributes that prohibit interpolations
  var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
  // these attributes should also set their corresponding properties
  // because they only affect the initial state of the element
  var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
  // these attributes expect enumrated values of "true" or "false"
  // but are not boolean attributes
  var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;

  // these attributes should set a hidden property for
  // binding v-model to object values
  var modelProps = {
    value: '_value',
    'true-value': '_trueValue',
    'false-value': '_falseValue'
  };

  var bind$1 = {

    priority: BIND,

    bind: function bind() {
      var attr = this.arg;
      var tag = this.el.tagName;
      // should be deep watch on object mode
      if (!attr) {
        this.deep = true;
      }
      // handle interpolation bindings
      var descriptor = this.descriptor;
      var tokens = descriptor.interp;
      if (tokens) {
        // handle interpolations with one-time tokens
        if (descriptor.hasOneTime) {
          this.expression = tokensToExp(tokens, this._scope || this.vm);
        }

        // only allow binding on native attributes
        if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
          'development' !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
          this.el.removeAttribute(attr);
          this.invalid = true;
        }

        /* istanbul ignore if */
        if ('development' !== 'production') {
          var raw = attr + '="' + descriptor.raw + '": ';
          // warn src
          if (attr === 'src') {
            warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
          }

          // warn style
          if (attr === 'style') {
            warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
          }
        }
      }
    },

    update: function update(value) {
      if (this.invalid) {
        return;
      }
      var attr = this.arg;
      if (this.arg) {
        this.handleSingle(attr, value);
      } else {
        this.handleObject(value || {});
      }
    },

    // share object handler with v-bind:class
    handleObject: style.handleObject,

    handleSingle: function handleSingle(attr, value) {
      var el = this.el;
      var interp = this.descriptor.interp;
      if (this.modifiers.camel) {
        attr = camelize(attr);
      }
      if (!interp && attrWithPropsRE.test(attr) && attr in el) {
        var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
        ? '' : value : value;

        if (el[attr] !== attrValue) {
          el[attr] = attrValue;
        }
      }
      // set model props
      var modelProp = modelProps[attr];
      if (!interp && modelProp) {
        el[modelProp] = value;
        // update v-model if present
        var model = el.__v_model;
        if (model) {
          model.listener();
        }
      }
      // do not set value attribute for textarea
      if (attr === 'value' && el.tagName === 'TEXTAREA') {
        el.removeAttribute(attr);
        return;
      }
      // update attribute
      if (enumeratedAttrRE.test(attr)) {
        el.setAttribute(attr, value ? 'true' : 'false');
      } else if (value != null && value !== false) {
        if (attr === 'class') {
          // handle edge case #1960:
          // class interpolation should not overwrite Vue transition class
          if (el.__v_trans) {
            value += ' ' + el.__v_trans.id + '-transition';
          }
          setClass(el, value);
        } else if (xlinkRE.test(attr)) {
          el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
        } else {
          el.setAttribute(attr, value === true ? '' : value);
        }
      } else {
        el.removeAttribute(attr);
      }
    }
  };

  var el = {

    priority: EL,

    bind: function bind() {
      /* istanbul ignore if */
      if (!this.arg) {
        return;
      }
      var id = this.id = camelize(this.arg);
      var refs = (this._scope || this.vm).$els;
      if (hasOwn(refs, id)) {
        refs[id] = this.el;
      } else {
        defineReactive(refs, id, this.el);
      }
    },

    unbind: function unbind() {
      var refs = (this._scope || this.vm).$els;
      if (refs[this.id] === this.el) {
        refs[this.id] = null;
      }
    }
  };

  var ref = {
    bind: function bind() {
      'development' !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
    }
  };

  var cloak = {
    bind: function bind() {
      var el = this.el;
      this.vm.$once('pre-hook:compiled', function () {
        el.removeAttribute('v-cloak');
      });
    }
  };

  // must export plain object
  var directives = {
    text: text$1,
    html: html,
    'for': vFor,
    'if': vIf,
    show: show,
    model: model,
    on: on$1,
    bind: bind$1,
    el: el,
    ref: ref,
    cloak: cloak
  };

  var vClass = {

    deep: true,

    update: function update(value) {
      if (!value) {
        this.cleanup();
      } else if (typeof value === 'string') {
        this.setClass(value.trim().split(/\s+/));
      } else {
        this.setClass(normalize$1(value));
      }
    },

    setClass: function setClass(value) {
      this.cleanup(value);
      for (var i = 0, l = value.length; i < l; i++) {
        var val = value[i];
        if (val) {
          apply(this.el, val, addClass);
        }
      }
      this.prevKeys = value;
    },

    cleanup: function cleanup(value) {
      var prevKeys = this.prevKeys;
      if (!prevKeys) return;
      var i = prevKeys.length;
      while (i--) {
        var key = prevKeys[i];
        if (!value || value.indexOf(key) < 0) {
          apply(this.el, key, removeClass);
        }
      }
    }
  };

  /**
   * Normalize objects and arrays (potentially containing objects)
   * into array of strings.
   *
   * @param {Object|Array<String|Object>} value
   * @return {Array<String>}
   */

  function normalize$1(value) {
    var res = [];
    if (isArray(value)) {
      for (var i = 0, l = value.length; i < l; i++) {
        var _key = value[i];
        if (_key) {
          if (typeof _key === 'string') {
            res.push(_key);
          } else {
            for (var k in _key) {
              if (_key[k]) res.push(k);
            }
          }
        }
      }
    } else if (isObject(value)) {
      for (var key in value) {
        if (value[key]) res.push(key);
      }
    }
    return res;
  }

  /**
   * Add or remove a class/classes on an element
   *
   * @param {Element} el
   * @param {String} key The class name. This may or may not
   *                     contain a space character, in such a
   *                     case we'll deal with multiple class
   *                     names at once.
   * @param {Function} fn
   */

  function apply(el, key, fn) {
    key = key.trim();
    if (key.indexOf(' ') === -1) {
      fn(el, key);
      return;
    }
    // The key contains one or more space characters.
    // Since a class name doesn't accept such characters, we
    // treat it as multiple classes.
    var keys = key.split(/\s+/);
    for (var i = 0, l = keys.length; i < l; i++) {
      fn(el, keys[i]);
    }
  }

  var component = {

    priority: COMPONENT,

    params: ['keep-alive', 'transition-mode', 'inline-template'],

    /**
     * Setup. Two possible usages:
     *
     * - static:
     *   <comp> or <div v-component="comp">
     *
     * - dynamic:
     *   <component :is="view">
     */

    bind: function bind() {
      if (!this.el.__vue__) {
        // keep-alive cache
        this.keepAlive = this.params.keepAlive;
        if (this.keepAlive) {
          this.cache = {};
        }
        // check inline-template
        if (this.params.inlineTemplate) {
          // extract inline template as a DocumentFragment
          this.inlineTemplate = extractContent(this.el, true);
        }
        // component resolution related state
        this.pendingComponentCb = this.Component = null;
        // transition related state
        this.pendingRemovals = 0;
        this.pendingRemovalCb = null;
        // create a ref anchor
        this.anchor = createAnchor('v-component');
        replace(this.el, this.anchor);
        // remove is attribute.
        // this is removed during compilation, but because compilation is
        // cached, when the component is used elsewhere this attribute
        // will remain at link time.
        this.el.removeAttribute('is');
        this.el.removeAttribute(':is');
        // remove ref, same as above
        if (this.descriptor.ref) {
          this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
        }
        // if static, build right now.
        if (this.literal) {
          this.setComponent(this.expression);
        }
      } else {
        'development' !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
      }
    },

    /**
     * Public update, called by the watcher in the dynamic
     * literal scenario, e.g. <component :is="view">
     */

    update: function update(value) {
      if (!this.literal) {
        this.setComponent(value);
      }
    },

    /**
     * Switch dynamic components. May resolve the component
     * asynchronously, and perform transition based on
     * specified transition mode. Accepts a few additional
     * arguments specifically for vue-router.
     *
     * The callback is called when the full transition is
     * finished.
     *
     * @param {String} value
     * @param {Function} [cb]
     */

    setComponent: function setComponent(value, cb) {
      this.invalidatePending();
      if (!value) {
        // just remove current
        this.unbuild(true);
        this.remove(this.childVM, cb);
        this.childVM = null;
      } else {
        var self = this;
        this.resolveComponent(value, function () {
          self.mountComponent(cb);
        });
      }
    },

    /**
     * Resolve the component constructor to use when creating
     * the child vm.
     *
     * @param {String|Function} value
     * @param {Function} cb
     */

    resolveComponent: function resolveComponent(value, cb) {
      var self = this;
      this.pendingComponentCb = cancellable(function (Component) {
        self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
        self.Component = Component;
        cb();
      });
      this.vm._resolveComponent(value, this.pendingComponentCb);
    },

    /**
     * Create a new instance using the current constructor and
     * replace the existing instance. This method doesn't care
     * whether the new component and the old one are actually
     * the same.
     *
     * @param {Function} [cb]
     */

    mountComponent: function mountComponent(cb) {
      // actual mount
      this.unbuild(true);
      var self = this;
      var activateHooks = this.Component.options.activate;
      var cached = this.getCached();
      var newComponent = this.build();
      if (activateHooks && !cached) {
        this.waitingFor = newComponent;
        callActivateHooks(activateHooks, newComponent, function () {
          if (self.waitingFor !== newComponent) {
            return;
          }
          self.waitingFor = null;
          self.transition(newComponent, cb);
        });
      } else {
        // update ref for kept-alive component
        if (cached) {
          newComponent._updateRef();
        }
        this.transition(newComponent, cb);
      }
    },

    /**
     * When the component changes or unbinds before an async
     * constructor is resolved, we need to invalidate its
     * pending callback.
     */

    invalidatePending: function invalidatePending() {
      if (this.pendingComponentCb) {
        this.pendingComponentCb.cancel();
        this.pendingComponentCb = null;
      }
    },

    /**
     * Instantiate/insert a new child vm.
     * If keep alive and has cached instance, insert that
     * instance; otherwise build a new one and cache it.
     *
     * @param {Object} [extraOptions]
     * @return {Vue} - the created instance
     */

    build: function build(extraOptions) {
      var cached = this.getCached();
      if (cached) {
        return cached;
      }
      if (this.Component) {
        // default options
        var options = {
          name: this.ComponentName,
          el: cloneNode(this.el),
          template: this.inlineTemplate,
          // make sure to add the child with correct parent
          // if this is a transcluded component, its parent
          // should be the transclusion host.
          parent: this._host || this.vm,
          // if no inline-template, then the compiled
          // linker can be cached for better performance.
          _linkerCachable: !this.inlineTemplate,
          _ref: this.descriptor.ref,
          _asComponent: true,
          _isRouterView: this._isRouterView,
          // if this is a transcluded component, context
          // will be the common parent vm of this instance
          // and its host.
          _context: this.vm,
          // if this is inside an inline v-for, the scope
          // will be the intermediate scope created for this
          // repeat fragment. this is used for linking props
          // and container directives.
          _scope: this._scope,
          // pass in the owner fragment of this component.
          // this is necessary so that the fragment can keep
          // track of its contained components in order to
          // call attach/detach hooks for them.
          _frag: this._frag
        };
        // extra options
        // in 1.0.0 this is used by vue-router only
        /* istanbul ignore if */
        if (extraOptions) {
          extend(options, extraOptions);
        }
        var child = new this.Component(options);
        if (this.keepAlive) {
          this.cache[this.Component.cid] = child;
        }
        /* istanbul ignore if */
        if ('development' !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
          warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
        }
        return child;
      }
    },

    /**
     * Try to get a cached instance of the current component.
     *
     * @return {Vue|undefined}
     */

    getCached: function getCached() {
      return this.keepAlive && this.cache[this.Component.cid];
    },

    /**
     * Teardown the current child, but defers cleanup so
     * that we can separate the destroy and removal steps.
     *
     * @param {Boolean} defer
     */

    unbuild: function unbuild(defer) {
      if (this.waitingFor) {
        if (!this.keepAlive) {
          this.waitingFor.$destroy();
        }
        this.waitingFor = null;
      }
      var child = this.childVM;
      if (!child || this.keepAlive) {
        if (child) {
          // remove ref
          child._inactive = true;
          child._updateRef(true);
        }
        return;
      }
      // the sole purpose of `deferCleanup` is so that we can
      // "deactivate" the vm right now and perform DOM removal
      // later.
      child.$destroy(false, defer);
    },

    /**
     * Remove current destroyed child and manually do
     * the cleanup after removal.
     *
     * @param {Function} cb
     */

    remove: function remove(child, cb) {
      var keepAlive = this.keepAlive;
      if (child) {
        // we may have a component switch when a previous
        // component is still being transitioned out.
        // we want to trigger only one lastest insertion cb
        // when the existing transition finishes. (#1119)
        this.pendingRemovals++;
        this.pendingRemovalCb = cb;
        var self = this;
        child.$remove(function () {
          self.pendingRemovals--;
          if (!keepAlive) child._cleanup();
          if (!self.pendingRemovals && self.pendingRemovalCb) {
            self.pendingRemovalCb();
            self.pendingRemovalCb = null;
          }
        });
      } else if (cb) {
        cb();
      }
    },

    /**
     * Actually swap the components, depending on the
     * transition mode. Defaults to simultaneous.
     *
     * @param {Vue} target
     * @param {Function} [cb]
     */

    transition: function transition(target, cb) {
      var self = this;
      var current = this.childVM;
      // for devtool inspection
      if (current) current._inactive = true;
      target._inactive = false;
      this.childVM = target;
      switch (self.params.transitionMode) {
        case 'in-out':
          target.$before(self.anchor, function () {
            self.remove(current, cb);
          });
          break;
        case 'out-in':
          self.remove(current, function () {
            target.$before(self.anchor, cb);
          });
          break;
        default:
          self.remove(current);
          target.$before(self.anchor, cb);
      }
    },

    /**
     * Unbind.
     */

    unbind: function unbind() {
      this.invalidatePending();
      // Do not defer cleanup when unbinding
      this.unbuild();
      // destroy all keep-alive cached instances
      if (this.cache) {
        for (var key in this.cache) {
          this.cache[key].$destroy();
        }
        this.cache = null;
      }
    }
  };

  /**
   * Call activate hooks in order (asynchronous)
   *
   * @param {Array} hooks
   * @param {Vue} vm
   * @param {Function} cb
   */

  function callActivateHooks(hooks, vm, cb) {
    var total = hooks.length;
    var called = 0;
    hooks[0].call(vm, next);
    function next() {
      if (++called >= total) {
        cb();
      } else {
        hooks[called].call(vm, next);
      }
    }
  }

  var propBindingModes = config._propBindingModes;
  var empty = {};

  // regexes
  var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
  var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;

  /**
   * Compile props on a root element and return
   * a props link function.
   *
   * @param {Element|DocumentFragment} el
   * @param {Array} propOptions
   * @param {Vue} vm
   * @return {Function} propsLinkFn
   */

  function compileProps(el, propOptions, vm) {
    var props = [];
    var names = Object.keys(propOptions);
    var i = names.length;
    var options, name, attr, value, path, parsed, prop;
    while (i--) {
      name = names[i];
      options = propOptions[name] || empty;

      if ('development' !== 'production' && name === '$data') {
        warn('Do not use $data as prop.', vm);
        continue;
      }

      // props could contain dashes, which will be
      // interpreted as minus calculations by the parser
      // so we need to camelize the path here
      path = camelize(name);
      if (!identRE$1.test(path)) {
        'development' !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
        continue;
      }

      prop = {
        name: name,
        path: path,
        options: options,
        mode: propBindingModes.ONE_WAY,
        raw: null
      };

      attr = hyphenate(name);
      // first check dynamic version
      if ((value = getBindAttr(el, attr)) === null) {
        if ((value = getBindAttr(el, attr + '.sync')) !== null) {
          prop.mode = propBindingModes.TWO_WAY;
        } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
          prop.mode = propBindingModes.ONE_TIME;
        }
      }
      if (value !== null) {
        // has dynamic binding!
        prop.raw = value;
        parsed = parseDirective(value);
        value = parsed.expression;
        prop.filters = parsed.filters;
        // check binding type
        if (isLiteral(value) && !parsed.filters) {
          // for expressions containing literal numbers and
          // booleans, there's no need to setup a prop binding,
          // so we can optimize them as a one-time set.
          prop.optimizedLiteral = true;
        } else {
          prop.dynamic = true;
          // check non-settable path for two-way bindings
          if ('development' !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
            prop.mode = propBindingModes.ONE_WAY;
            warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
          }
        }
        prop.parentPath = value;

        // warn required two-way
        if ('development' !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
          warn('Prop "' + name + '" expects a two-way binding type.', vm);
        }
      } else if ((value = getAttr(el, attr)) !== null) {
        // has literal binding!
        prop.raw = value;
      } else if ('development' !== 'production') {
        // check possible camelCase prop usage
        var lowerCaseName = path.toLowerCase();
        value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
        if (value) {
          warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
        } else if (options.required) {
          // warn missing required
          warn('Missing required prop: ' + name, vm);
        }
      }
      // push prop
      props.push(prop);
    }
    return makePropsLinkFn(props);
  }

  /**
   * Build a function that applies props to a vm.
   *
   * @param {Array} props
   * @return {Function} propsLinkFn
   */

  function makePropsLinkFn(props) {
    return function propsLinkFn(vm, scope) {
      // store resolved props info
      vm._props = {};
      var inlineProps = vm.$options.propsData;
      var i = props.length;
      var prop, path, options, value, raw;
      while (i--) {
        prop = props[i];
        raw = prop.raw;
        path = prop.path;
        options = prop.options;
        vm._props[path] = prop;
        if (inlineProps && hasOwn(inlineProps, path)) {
          initProp(vm, prop, inlineProps[path]);
        }if (raw === null) {
          // initialize absent prop
          initProp(vm, prop, undefined);
        } else if (prop.dynamic) {
          // dynamic prop
          if (prop.mode === propBindingModes.ONE_TIME) {
            // one time binding
            value = (scope || vm._context || vm).$get(prop.parentPath);
            initProp(vm, prop, value);
          } else {
            if (vm._context) {
              // dynamic binding
              vm._bindDir({
                name: 'prop',
                def: propDef,
                prop: prop
              }, null, null, scope); // el, host, scope
            } else {
                // root instance
                initProp(vm, prop, vm.$get(prop.parentPath));
              }
          }
        } else if (prop.optimizedLiteral) {
          // optimized literal, cast it and just set once
          var stripped = stripQuotes(raw);
          value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
          initProp(vm, prop, value);
        } else {
          // string literal, but we need to cater for
          // Boolean props with no value, or with same
          // literal value (e.g. disabled="disabled")
          // see https://github.com/vuejs/vue-loader/issues/182
          value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
          initProp(vm, prop, value);
        }
      }
    };
  }

  /**
   * Process a prop with a rawValue, applying necessary coersions,
   * default values & assertions and call the given callback with
   * processed value.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} rawValue
   * @param {Function} fn
   */

  function processPropValue(vm, prop, rawValue, fn) {
    var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
    var value = rawValue;
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop);
    }
    value = coerceProp(prop, value);
    var coerced = value !== rawValue;
    if (!assertProp(prop, value, vm)) {
      value = undefined;
    }
    if (isSimple && !coerced) {
      withoutConversion(function () {
        fn(value);
      });
    } else {
      fn(value);
    }
  }

  /**
   * Set a prop's initial value on a vm and its data object.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} value
   */

  function initProp(vm, prop, value) {
    processPropValue(vm, prop, value, function (value) {
      defineReactive(vm, prop.path, value);
    });
  }

  /**
   * Update a prop's value on a vm.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} value
   */

  function updateProp(vm, prop, value) {
    processPropValue(vm, prop, value, function (value) {
      vm[prop.path] = value;
    });
  }

  /**
   * Get the default value of a prop.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @return {*}
   */

  function getPropDefaultValue(vm, prop) {
    // no default, return undefined
    var options = prop.options;
    if (!hasOwn(options, 'default')) {
      // absent boolean value defaults to false
      return options.type === Boolean ? false : undefined;
    }
    var def = options['default'];
    // warn against non-factory defaults for Object & Array
    if (isObject(def)) {
      'development' !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    }
    // call factory function for non-Function types
    return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
  }

  /**
   * Assert whether a prop is valid.
   *
   * @param {Object} prop
   * @param {*} value
   * @param {Vue} vm
   */

  function assertProp(prop, value, vm) {
    if (!prop.options.required && ( // non-required
    prop.raw === null || // abscent
    value == null) // null or undefined
    ) {
        return true;
      }
    var options = prop.options;
    var type = options.type;
    var valid = !type;
    var expectedTypes = [];
    if (type) {
      if (!isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType);
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      if ('development' !== 'production') {
        warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
      }
      return false;
    }
    var validator = options.validator;
    if (validator) {
      if (!validator(value)) {
        'development' !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
        return false;
      }
    }
    return true;
  }

  /**
   * Force parsing value with coerce option.
   *
   * @param {*} value
   * @param {Object} options
   * @return {*}
   */

  function coerceProp(prop, value) {
    var coerce = prop.options.coerce;
    if (!coerce) {
      return value;
    }
    // coerce is a function
    return coerce(value);
  }

  /**
   * Assert the type of a value
   *
   * @param {*} value
   * @param {Function} type
   * @return {Object}
   */

  function assertType(value, type) {
    var valid;
    var expectedType;
    if (type === String) {
      expectedType = 'string';
      valid = typeof value === expectedType;
    } else if (type === Number) {
      expectedType = 'number';
      valid = typeof value === expectedType;
    } else if (type === Boolean) {
      expectedType = 'boolean';
      valid = typeof value === expectedType;
    } else if (type === Function) {
      expectedType = 'function';
      valid = typeof value === expectedType;
    } else if (type === Object) {
      expectedType = 'object';
      valid = isPlainObject(value);
    } else if (type === Array) {
      expectedType = 'array';
      valid = isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    };
  }

  /**
   * Format type for output
   *
   * @param {String} type
   * @return {String}
   */

  function formatType(type) {
    return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
  }

  /**
   * Format value
   *
   * @param {*} value
   * @return {String}
   */

  function formatValue(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
  }

  var bindingModes = config._propBindingModes;

  var propDef = {

    bind: function bind() {
      var child = this.vm;
      var parent = child._context;
      // passed in from compiler directly
      var prop = this.descriptor.prop;
      var childKey = prop.path;
      var parentKey = prop.parentPath;
      var twoWay = prop.mode === bindingModes.TWO_WAY;

      var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
        updateProp(child, prop, val);
      }, {
        twoWay: twoWay,
        filters: prop.filters,
        // important: props need to be observed on the
        // v-for scope if present
        scope: this._scope
      });

      // set the child initial value.
      initProp(child, prop, parentWatcher.value);

      // setup two-way binding
      if (twoWay) {
        // important: defer the child watcher creation until
        // the created hook (after data observation)
        var self = this;
        child.$once('pre-hook:created', function () {
          self.childWatcher = new Watcher(child, childKey, function (val) {
            parentWatcher.set(val);
          }, {
            // ensure sync upward before parent sync down.
            // this is necessary in cases e.g. the child
            // mutates a prop array, then replaces it. (#1683)
            sync: true
          });
        });
      }
    },

    unbind: function unbind() {
      this.parentWatcher.teardown();
      if (this.childWatcher) {
        this.childWatcher.teardown();
      }
    }
  };

  var queue$1 = [];
  var queued = false;

  /**
   * Push a job into the queue.
   *
   * @param {Function} job
   */

  function pushJob(job) {
    queue$1.push(job);
    if (!queued) {
      queued = true;
      nextTick(flush);
    }
  }

  /**
   * Flush the queue, and do one forced reflow before
   * triggering transitions.
   */

  function flush() {
    // Force layout
    var f = document.documentElement.offsetHeight;
    for (var i = 0; i < queue$1.length; i++) {
      queue$1[i]();
    }
    queue$1 = [];
    queued = false;
    // dummy return, so js linters don't complain about
    // unused variable f
    return f;
  }

  var TYPE_TRANSITION = 'transition';
  var TYPE_ANIMATION = 'animation';
  var transDurationProp = transitionProp + 'Duration';
  var animDurationProp = animationProp + 'Duration';

  /**
   * If a just-entered element is applied the
   * leave class while its enter transition hasn't started yet,
   * and the transitioned property has the same value for both
   * enter/leave, then the leave transition will be skipped and
   * the transitionend event never fires. This function ensures
   * its callback to be called after a transition has started
   * by waiting for double raf.
   *
   * It falls back to setTimeout on devices that support CSS
   * transitions but not raf (e.g. Android 4.2 browser) - since
   * these environments are usually slow, we are giving it a
   * relatively large timeout.
   */

  var raf = inBrowser && window.requestAnimationFrame;
  var waitForTransitionStart = raf
  /* istanbul ignore next */
  ? function (fn) {
    raf(function () {
      raf(fn);
    });
  } : function (fn) {
    setTimeout(fn, 50);
  };

  /**
   * A Transition object that encapsulates the state and logic
   * of the transition.
   *
   * @param {Element} el
   * @param {String} id
   * @param {Object} hooks
   * @param {Vue} vm
   */
  function Transition(el, id, hooks, vm) {
    this.id = id;
    this.el = el;
    this.enterClass = hooks && hooks.enterClass || id + '-enter';
    this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
    this.hooks = hooks;
    this.vm = vm;
    // async state
    this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
    this.justEntered = false;
    this.entered = this.left = false;
    this.typeCache = {};
    // check css transition type
    this.type = hooks && hooks.type;
    /* istanbul ignore if */
    if ('development' !== 'production') {
      if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
        warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
      }
    }
    // bind
    var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
      self[m] = bind(self[m], self);
    });
  }

  var p$1 = Transition.prototype;

  /**
   * Start an entering transition.
   *
   * 1. enter transition triggered
   * 2. call beforeEnter hook
   * 3. add enter class
   * 4. insert/show element
   * 5. call enter hook (with possible explicit js callback)
   * 6. reflow
   * 7. based on transition type:
   *    - transition:
   *        remove class now, wait for transitionend,
   *        then done if there's no explicit js callback.
   *    - animation:
   *        wait for animationend, remove class,
   *        then done if there's no explicit js callback.
   *    - no css transition:
   *        done now if there's no explicit js callback.
   * 8. wait for either done or js callback, then call
   *    afterEnter hook.
   *
   * @param {Function} op - insert/show the element
   * @param {Function} [cb]
   */

  p$1.enter = function (op, cb) {
    this.cancelPending();
    this.callHook('beforeEnter');
    this.cb = cb;
    addClass(this.el, this.enterClass);
    op();
    this.entered = false;
    this.callHookWithCb('enter');
    if (this.entered) {
      return; // user called done synchronously.
    }
    this.cancel = this.hooks && this.hooks.enterCancelled;
    pushJob(this.enterNextTick);
  };

  /**
   * The "nextTick" phase of an entering transition, which is
   * to be pushed into a queue and executed after a reflow so
   * that removing the class can trigger a CSS transition.
   */

  p$1.enterNextTick = function () {
    var _this = this;

    // prevent transition skipping
    this.justEntered = true;
    waitForTransitionStart(function () {
      _this.justEntered = false;
    });
    var enterDone = this.enterDone;
    var type = this.getCssTransitionType(this.enterClass);
    if (!this.pendingJsCb) {
      if (type === TYPE_TRANSITION) {
        // trigger transition by removing enter class now
        removeClass(this.el, this.enterClass);
        this.setupCssCb(transitionEndEvent, enterDone);
      } else if (type === TYPE_ANIMATION) {
        this.setupCssCb(animationEndEvent, enterDone);
      } else {
        enterDone();
      }
    } else if (type === TYPE_TRANSITION) {
      removeClass(this.el, this.enterClass);
    }
  };

  /**
   * The "cleanup" phase of an entering transition.
   */

  p$1.enterDone = function () {
    this.entered = true;
    this.cancel = this.pendingJsCb = null;
    removeClass(this.el, this.enterClass);
    this.callHook('afterEnter');
    if (this.cb) this.cb();
  };

  /**
   * Start a leaving transition.
   *
   * 1. leave transition triggered.
   * 2. call beforeLeave hook
   * 3. add leave class (trigger css transition)
   * 4. call leave hook (with possible explicit js callback)
   * 5. reflow if no explicit js callback is provided
   * 6. based on transition type:
   *    - transition or animation:
   *        wait for end event, remove class, then done if
   *        there's no explicit js callback.
   *    - no css transition:
   *        done if there's no explicit js callback.
   * 7. wait for either done or js callback, then call
   *    afterLeave hook.
   *
   * @param {Function} op - remove/hide the element
   * @param {Function} [cb]
   */

  p$1.leave = function (op, cb) {
    this.cancelPending();
    this.callHook('beforeLeave');
    this.op = op;
    this.cb = cb;
    addClass(this.el, this.leaveClass);
    this.left = false;
    this.callHookWithCb('leave');
    if (this.left) {
      return; // user called done synchronously.
    }
    this.cancel = this.hooks && this.hooks.leaveCancelled;
    // only need to handle leaveDone if
    // 1. the transition is already done (synchronously called
    //    by the user, which causes this.op set to null)
    // 2. there's no explicit js callback
    if (this.op && !this.pendingJsCb) {
      // if a CSS transition leaves immediately after enter,
      // the transitionend event never fires. therefore we
      // detect such cases and end the leave immediately.
      if (this.justEntered) {
        this.leaveDone();
      } else {
        pushJob(this.leaveNextTick);
      }
    }
  };

  /**
   * The "nextTick" phase of a leaving transition.
   */

  p$1.leaveNextTick = function () {
    var type = this.getCssTransitionType(this.leaveClass);
    if (type) {
      var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
      this.setupCssCb(event, this.leaveDone);
    } else {
      this.leaveDone();
    }
  };

  /**
   * The "cleanup" phase of a leaving transition.
   */

  p$1.leaveDone = function () {
    this.left = true;
    this.cancel = this.pendingJsCb = null;
    this.op();
    removeClass(this.el, this.leaveClass);
    this.callHook('afterLeave');
    if (this.cb) this.cb();
    this.op = null;
  };

  /**
   * Cancel any pending callbacks from a previously running
   * but not finished transition.
   */

  p$1.cancelPending = function () {
    this.op = this.cb = null;
    var hasPending = false;
    if (this.pendingCssCb) {
      hasPending = true;
      off(this.el, this.pendingCssEvent, this.pendingCssCb);
      this.pendingCssEvent = this.pendingCssCb = null;
    }
    if (this.pendingJsCb) {
      hasPending = true;
      this.pendingJsCb.cancel();
      this.pendingJsCb = null;
    }
    if (hasPending) {
      removeClass(this.el, this.enterClass);
      removeClass(this.el, this.leaveClass);
    }
    if (this.cancel) {
      this.cancel.call(this.vm, this.el);
      this.cancel = null;
    }
  };

  /**
   * Call a user-provided synchronous hook function.
   *
   * @param {String} type
   */

  p$1.callHook = function (type) {
    if (this.hooks && this.hooks[type]) {
      this.hooks[type].call(this.vm, this.el);
    }
  };

  /**
   * Call a user-provided, potentially-async hook function.
   * We check for the length of arguments to see if the hook
   * expects a `done` callback. If true, the transition's end
   * will be determined by when the user calls that callback;
   * otherwise, the end is determined by the CSS transition or
   * animation.
   *
   * @param {String} type
   */

  p$1.callHookWithCb = function (type) {
    var hook = this.hooks && this.hooks[type];
    if (hook) {
      if (hook.length > 1) {
        this.pendingJsCb = cancellable(this[type + 'Done']);
      }
      hook.call(this.vm, this.el, this.pendingJsCb);
    }
  };

  /**
   * Get an element's transition type based on the
   * calculated styles.
   *
   * @param {String} className
   * @return {Number}
   */

  p$1.getCssTransitionType = function (className) {
    /* istanbul ignore if */
    if (!transitionEndEvent ||
    // skip CSS transitions if page is not visible -
    // this solves the issue of transitionend events not
    // firing until the page is visible again.
    // pageVisibility API is supported in IE10+, same as
    // CSS transitions.
    document.hidden ||
    // explicit js-only transition
    this.hooks && this.hooks.css === false ||
    // element is hidden
    isHidden(this.el)) {
      return;
    }
    var type = this.type || this.typeCache[className];
    if (type) return type;
    var inlineStyles = this.el.style;
    var computedStyles = window.getComputedStyle(this.el);
    var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
    if (transDuration && transDuration !== '0s') {
      type = TYPE_TRANSITION;
    } else {
      var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
      if (animDuration && animDuration !== '0s') {
        type = TYPE_ANIMATION;
      }
    }
    if (type) {
      this.typeCache[className] = type;
    }
    return type;
  };

  /**
   * Setup a CSS transitionend/animationend callback.
   *
   * @param {String} event
   * @param {Function} cb
   */

  p$1.setupCssCb = function (event, cb) {
    this.pendingCssEvent = event;
    var self = this;
    var el = this.el;
    var onEnd = this.pendingCssCb = function (e) {
      if (e.target === el) {
        off(el, event, onEnd);
        self.pendingCssEvent = self.pendingCssCb = null;
        if (!self.pendingJsCb && cb) {
          cb();
        }
      }
    };
    on(el, event, onEnd);
  };

  /**
   * Check if an element is hidden - in that case we can just
   * skip the transition alltogether.
   *
   * @param {Element} el
   * @return {Boolean}
   */

  function isHidden(el) {
    if (/svg$/.test(el.namespaceURI)) {
      // SVG elements do not have offset(Width|Height)
      // so we need to check the client rect
      var rect = el.getBoundingClientRect();
      return !(rect.width || rect.height);
    } else {
      return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
    }
  }

  var transition$1 = {

    priority: TRANSITION,

    update: function update(id, oldId) {
      var el = this.el;
      // resolve on owner vm
      var hooks = resolveAsset(this.vm.$options, 'transitions', id);
      id = id || 'v';
      el.__v_trans = new Transition(el, id, hooks, this.vm);
      if (oldId) {
        removeClass(el, oldId + '-transition');
      }
      addClass(el, id + '-transition');
    }
  };

  var internalDirectives = {
    style: style,
    'class': vClass,
    component: component,
    prop: propDef,
    transition: transition$1
  };

  // special binding prefixes
  var bindRE = /^v-bind:|^:/;
  var onRE = /^v-on:|^@/;
  var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
  var modifierRE = /\.[^\.]+/g;
  var transitionRE = /^(v-bind:|:)?transition$/;

  // default directive priority
  var DEFAULT_PRIORITY = 1000;
  var DEFAULT_TERMINAL_PRIORITY = 2000;

  /**
   * Compile a template and return a reusable composite link
   * function, which recursively contains more link functions
   * inside. This top level compile function would normally
   * be called on instance root nodes, but can also be used
   * for partial compilation if the partial argument is true.
   *
   * The returned composite link function, when called, will
   * return an unlink function that tearsdown all directives
   * created during the linking phase.
   *
   * @param {Element|DocumentFragment} el
   * @param {Object} options
   * @param {Boolean} partial
   * @return {Function}
   */

  function compile(el, options, partial) {
    // link function for the node itself.
    var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
    // link function for the childNodes
    var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;

    /**
     * A composite linker function to be called on a already
     * compiled piece of DOM, which instantiates all directive
     * instances.
     *
     * @param {Vue} vm
     * @param {Element|DocumentFragment} el
     * @param {Vue} [host] - host vm of transcluded content
     * @param {Object} [scope] - v-for scope
     * @param {Fragment} [frag] - link context fragment
     * @return {Function|undefined}
     */

    return function compositeLinkFn(vm, el, host, scope, frag) {
      // cache childNodes before linking parent, fix #657
      var childNodes = toArray(el.childNodes);
      // link
      var dirs = linkAndCapture(function compositeLinkCapturer() {
        if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
        if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
      }, vm);
      return makeUnlinkFn(vm, dirs);
    };
  }

  /**
   * Apply a linker to a vm/element pair and capture the
   * directives created during the process.
   *
   * @param {Function} linker
   * @param {Vue} vm
   */

  function linkAndCapture(linker, vm) {
    /* istanbul ignore if */
    if ('development' === 'production') {}
    var originalDirCount = vm._directives.length;
    linker();
    var dirs = vm._directives.slice(originalDirCount);
    dirs.sort(directiveComparator);
    for (var i = 0, l = dirs.length; i < l; i++) {
      dirs[i]._bind();
    }
    return dirs;
  }

  /**
   * Directive priority sort comparator
   *
   * @param {Object} a
   * @param {Object} b
   */

  function directiveComparator(a, b) {
    a = a.descriptor.def.priority || DEFAULT_PRIORITY;
    b = b.descriptor.def.priority || DEFAULT_PRIORITY;
    return a > b ? -1 : a === b ? 0 : 1;
  }

  /**
   * Linker functions return an unlink function that
   * tearsdown all directives instances generated during
   * the process.
   *
   * We create unlink functions with only the necessary
   * information to avoid retaining additional closures.
   *
   * @param {Vue} vm
   * @param {Array} dirs
   * @param {Vue} [context]
   * @param {Array} [contextDirs]
   * @return {Function}
   */

  function makeUnlinkFn(vm, dirs, context, contextDirs) {
    function unlink(destroying) {
      teardownDirs(vm, dirs, destroying);
      if (context && contextDirs) {
        teardownDirs(context, contextDirs);
      }
    }
    // expose linked directives
    unlink.dirs = dirs;
    return unlink;
  }

  /**
   * Teardown partial linked directives.
   *
   * @param {Vue} vm
   * @param {Array} dirs
   * @param {Boolean} destroying
   */

  function teardownDirs(vm, dirs, destroying) {
    var i = dirs.length;
    while (i--) {
      dirs[i]._teardown();
      if ('development' !== 'production' && !destroying) {
        vm._directives.$remove(dirs[i]);
      }
    }
  }

  /**
   * Compile link props on an instance.
   *
   * @param {Vue} vm
   * @param {Element} el
   * @param {Object} props
   * @param {Object} [scope]
   * @return {Function}
   */

  function compileAndLinkProps(vm, el, props, scope) {
    var propsLinkFn = compileProps(el, props, vm);
    var propDirs = linkAndCapture(function () {
      propsLinkFn(vm, scope);
    }, vm);
    return makeUnlinkFn(vm, propDirs);
  }

  /**
   * Compile the root element of an instance.
   *
   * 1. attrs on context container (context scope)
   * 2. attrs on the component template root node, if
   *    replace:true (child scope)
   *
   * If this is a fragment instance, we only need to compile 1.
   *
   * @param {Element} el
   * @param {Object} options
   * @param {Object} contextOptions
   * @return {Function}
   */

  function compileRoot(el, options, contextOptions) {
    var containerAttrs = options._containerAttrs;
    var replacerAttrs = options._replacerAttrs;
    var contextLinkFn, replacerLinkFn;

    // only need to compile other attributes for
    // non-fragment instances
    if (el.nodeType !== 11) {
      // for components, container and replacer need to be
      // compiled separately and linked in different scopes.
      if (options._asComponent) {
        // 2. container attributes
        if (containerAttrs && contextOptions) {
          contextLinkFn = compileDirectives(containerAttrs, contextOptions);
        }
        if (replacerAttrs) {
          // 3. replacer attributes
          replacerLinkFn = compileDirectives(replacerAttrs, options);
        }
      } else {
        // non-component, just compile as a normal element.
        replacerLinkFn = compileDirectives(el.attributes, options);
      }
    } else if ('development' !== 'production' && containerAttrs) {
      // warn container directives for fragment instances
      var names = containerAttrs.filter(function (attr) {
        // allow vue-loader/vueify scoped css attributes
        return attr.name.indexOf('_v-') < 0 &&
        // allow event listeners
        !onRE.test(attr.name) &&
        // allow slots
        attr.name !== 'slot';
      }).map(function (attr) {
        return '"' + attr.name + '"';
      });
      if (names.length) {
        var plural = names.length > 1;
        warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
      }
    }

    options._containerAttrs = options._replacerAttrs = null;
    return function rootLinkFn(vm, el, scope) {
      // link context scope dirs
      var context = vm._context;
      var contextDirs;
      if (context && contextLinkFn) {
        contextDirs = linkAndCapture(function () {
          contextLinkFn(context, el, null, scope);
        }, context);
      }

      // link self
      var selfDirs = linkAndCapture(function () {
        if (replacerLinkFn) replacerLinkFn(vm, el);
      }, vm);

      // return the unlink function that tearsdown context
      // container directives.
      return makeUnlinkFn(vm, selfDirs, context, contextDirs);
    };
  }

  /**
   * Compile a node and return a nodeLinkFn based on the
   * node type.
   *
   * @param {Node} node
   * @param {Object} options
   * @return {Function|null}
   */

  function compileNode(node, options) {
    var type = node.nodeType;
    if (type === 1 && !isScript(node)) {
      return compileElement(node, options);
    } else if (type === 3 && node.data.trim()) {
      return compileTextNode(node, options);
    } else {
      return null;
    }
  }

  /**
   * Compile an element and return a nodeLinkFn.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Function|null}
   */

  function compileElement(el, options) {
    // preprocess textareas.
    // textarea treats its text content as the initial value.
    // just bind it as an attr directive for value.
    if (el.tagName === 'TEXTAREA') {
      var tokens = parseText(el.value);
      if (tokens) {
        el.setAttribute(':value', tokensToExp(tokens));
        el.value = '';
      }
    }
    var linkFn;
    var hasAttrs = el.hasAttributes();
    var attrs = hasAttrs && toArray(el.attributes);
    // check terminal directives (for & if)
    if (hasAttrs) {
      linkFn = checkTerminalDirectives(el, attrs, options);
    }
    // check element directives
    if (!linkFn) {
      linkFn = checkElementDirectives(el, options);
    }
    // check component
    if (!linkFn) {
      linkFn = checkComponent(el, options);
    }
    // normal directives
    if (!linkFn && hasAttrs) {
      linkFn = compileDirectives(attrs, options);
    }
    return linkFn;
  }

  /**
   * Compile a textNode and return a nodeLinkFn.
   *
   * @param {TextNode} node
   * @param {Object} options
   * @return {Function|null} textNodeLinkFn
   */

  function compileTextNode(node, options) {
    // skip marked text nodes
    if (node._skip) {
      return removeText;
    }

    var tokens = parseText(node.wholeText);
    if (!tokens) {
      return null;
    }

    // mark adjacent text nodes as skipped,
    // because we are using node.wholeText to compile
    // all adjacent text nodes together. This fixes
    // issues in IE where sometimes it splits up a single
    // text node into multiple ones.
    var next = node.nextSibling;
    while (next && next.nodeType === 3) {
      next._skip = true;
      next = next.nextSibling;
    }

    var frag = document.createDocumentFragment();
    var el, token;
    for (var i = 0, l = tokens.length; i < l; i++) {
      token = tokens[i];
      el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
      frag.appendChild(el);
    }
    return makeTextNodeLinkFn(tokens, frag, options);
  }

  /**
   * Linker for an skipped text node.
   *
   * @param {Vue} vm
   * @param {Text} node
   */

  function removeText(vm, node) {
    remove(node);
  }

  /**
   * Process a single text token.
   *
   * @param {Object} token
   * @param {Object} options
   * @return {Node}
   */

  function processTextToken(token, options) {
    var el;
    if (token.oneTime) {
      el = document.createTextNode(token.value);
    } else {
      if (token.html) {
        el = document.createComment('v-html');
        setTokenType('html');
      } else {
        // IE will clean up empty textNodes during
        // frag.cloneNode(true), so we have to give it
        // something here...
        el = document.createTextNode(' ');
        setTokenType('text');
      }
    }
    function setTokenType(type) {
      if (token.descriptor) return;
      var parsed = parseDirective(token.value);
      token.descriptor = {
        name: type,
        def: directives[type],
        expression: parsed.expression,
        filters: parsed.filters
      };
    }
    return el;
  }

  /**
   * Build a function that processes a textNode.
   *
   * @param {Array<Object>} tokens
   * @param {DocumentFragment} frag
   */

  function makeTextNodeLinkFn(tokens, frag) {
    return function textNodeLinkFn(vm, el, host, scope) {
      var fragClone = frag.cloneNode(true);
      var childNodes = toArray(fragClone.childNodes);
      var token, value, node;
      for (var i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];
        value = token.value;
        if (token.tag) {
          node = childNodes[i];
          if (token.oneTime) {
            value = (scope || vm).$eval(value);
            if (token.html) {
              replace(node, parseTemplate(value, true));
            } else {
              node.data = value;
            }
          } else {
            vm._bindDir(token.descriptor, node, host, scope);
          }
        }
      }
      replace(el, fragClone);
    };
  }

  /**
   * Compile a node list and return a childLinkFn.
   *
   * @param {NodeList} nodeList
   * @param {Object} options
   * @return {Function|undefined}
   */

  function compileNodeList(nodeList, options) {
    var linkFns = [];
    var nodeLinkFn, childLinkFn, node;
    for (var i = 0, l = nodeList.length; i < l; i++) {
      node = nodeList[i];
      nodeLinkFn = compileNode(node, options);
      childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
      linkFns.push(nodeLinkFn, childLinkFn);
    }
    return linkFns.length ? makeChildLinkFn(linkFns) : null;
  }

  /**
   * Make a child link function for a node's childNodes.
   *
   * @param {Array<Function>} linkFns
   * @return {Function} childLinkFn
   */

  function makeChildLinkFn(linkFns) {
    return function childLinkFn(vm, nodes, host, scope, frag) {
      var node, nodeLinkFn, childrenLinkFn;
      for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
        node = nodes[n];
        nodeLinkFn = linkFns[i++];
        childrenLinkFn = linkFns[i++];
        // cache childNodes before linking parent, fix #657
        var childNodes = toArray(node.childNodes);
        if (nodeLinkFn) {
          nodeLinkFn(vm, node, host, scope, frag);
        }
        if (childrenLinkFn) {
          childrenLinkFn(vm, childNodes, host, scope, frag);
        }
      }
    };
  }

  /**
   * Check for element directives (custom elements that should
   * be resovled as terminal directives).
   *
   * @param {Element} el
   * @param {Object} options
   */

  function checkElementDirectives(el, options) {
    var tag = el.tagName.toLowerCase();
    if (commonTagRE.test(tag)) {
      return;
    }
    var def = resolveAsset(options, 'elementDirectives', tag);
    if (def) {
      return makeTerminalNodeLinkFn(el, tag, '', options, def);
    }
  }

  /**
   * Check if an element is a component. If yes, return
   * a component link function.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Function|undefined}
   */

  function checkComponent(el, options) {
    var component = checkComponentAttr(el, options);
    if (component) {
      var ref = findRef(el);
      var descriptor = {
        name: 'component',
        ref: ref,
        expression: component.id,
        def: internalDirectives.component,
        modifiers: {
          literal: !component.dynamic
        }
      };
      var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
        if (ref) {
          defineReactive((scope || vm).$refs, ref, null);
        }
        vm._bindDir(descriptor, el, host, scope, frag);
      };
      componentLinkFn.terminal = true;
      return componentLinkFn;
    }
  }

  /**
   * Check an element for terminal directives in fixed order.
   * If it finds one, return a terminal link function.
   *
   * @param {Element} el
   * @param {Array} attrs
   * @param {Object} options
   * @return {Function} terminalLinkFn
   */

  function checkTerminalDirectives(el, attrs, options) {
    // skip v-pre
    if (getAttr(el, 'v-pre') !== null) {
      return skip;
    }
    // skip v-else block, but only if following v-if
    if (el.hasAttribute('v-else')) {
      var prev = el.previousElementSibling;
      if (prev && prev.hasAttribute('v-if')) {
        return skip;
      }
    }

    var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
    for (var i = 0, j = attrs.length; i < j; i++) {
      attr = attrs[i];
      name = attr.name.replace(modifierRE, '');
      if (matched = name.match(dirAttrRE)) {
        def = resolveAsset(options, 'directives', matched[1]);
        if (def && def.terminal) {
          if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
            termDef = def;
            rawName = attr.name;
            modifiers = parseModifiers(attr.name);
            value = attr.value;
            dirName = matched[1];
            arg = matched[2];
          }
        }
      }
    }

    if (termDef) {
      return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
    }
  }

  function skip() {}
  skip.terminal = true;

  /**
   * Build a node link function for a terminal directive.
   * A terminal link function terminates the current
   * compilation recursion and handles compilation of the
   * subtree in the directive.
   *
   * @param {Element} el
   * @param {String} dirName
   * @param {String} value
   * @param {Object} options
   * @param {Object} def
   * @param {String} [rawName]
   * @param {String} [arg]
   * @param {Object} [modifiers]
   * @return {Function} terminalLinkFn
   */

  function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
    var parsed = parseDirective(value);
    var descriptor = {
      name: dirName,
      arg: arg,
      expression: parsed.expression,
      filters: parsed.filters,
      raw: value,
      attr: rawName,
      modifiers: modifiers,
      def: def
    };
    // check ref for v-for and router-view
    if (dirName === 'for' || dirName === 'router-view') {
      descriptor.ref = findRef(el);
    }
    var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
      if (descriptor.ref) {
        defineReactive((scope || vm).$refs, descriptor.ref, null);
      }
      vm._bindDir(descriptor, el, host, scope, frag);
    };
    fn.terminal = true;
    return fn;
  }

  /**
   * Compile the directives on an element and return a linker.
   *
   * @param {Array|NamedNodeMap} attrs
   * @param {Object} options
   * @return {Function}
   */

  function compileDirectives(attrs, options) {
    var i = attrs.length;
    var dirs = [];
    var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
    while (i--) {
      attr = attrs[i];
      name = rawName = attr.name;
      value = rawValue = attr.value;
      tokens = parseText(value);
      // reset arg
      arg = null;
      // check modifiers
      modifiers = parseModifiers(name);
      name = name.replace(modifierRE, '');

      // attribute interpolations
      if (tokens) {
        value = tokensToExp(tokens);
        arg = name;
        pushDir('bind', directives.bind, tokens);
        // warn against mixing mustaches with v-bind
        if ('development' !== 'production') {
          if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
            return attr.name === ':class' || attr.name === 'v-bind:class';
          })) {
            warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
          }
        }
      } else

        // special attribute: transition
        if (transitionRE.test(name)) {
          modifiers.literal = !bindRE.test(name);
          pushDir('transition', internalDirectives.transition);
        } else

          // event handlers
          if (onRE.test(name)) {
            arg = name.replace(onRE, '');
            pushDir('on', directives.on);
          } else

            // attribute bindings
            if (bindRE.test(name)) {
              dirName = name.replace(bindRE, '');
              if (dirName === 'style' || dirName === 'class') {
                pushDir(dirName, internalDirectives[dirName]);
              } else {
                arg = dirName;
                pushDir('bind', directives.bind);
              }
            } else

              // normal directives
              if (matched = name.match(dirAttrRE)) {
                dirName = matched[1];
                arg = matched[2];

                // skip v-else (when used with v-show)
                if (dirName === 'else') {
                  continue;
                }

                dirDef = resolveAsset(options, 'directives', dirName, true);
                if (dirDef) {
                  pushDir(dirName, dirDef);
                }
              }
    }

    /**
     * Push a directive.
     *
     * @param {String} dirName
     * @param {Object|Function} def
     * @param {Array} [interpTokens]
     */

    function pushDir(dirName, def, interpTokens) {
      var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
      var parsed = !hasOneTimeToken && parseDirective(value);
      dirs.push({
        name: dirName,
        attr: rawName,
        raw: rawValue,
        def: def,
        arg: arg,
        modifiers: modifiers,
        // conversion from interpolation strings with one-time token
        // to expression is differed until directive bind time so that we
        // have access to the actual vm context for one-time bindings.
        expression: parsed && parsed.expression,
        filters: parsed && parsed.filters,
        interp: interpTokens,
        hasOneTime: hasOneTimeToken
      });
    }

    if (dirs.length) {
      return makeNodeLinkFn(dirs);
    }
  }

  /**
   * Parse modifiers from directive attribute name.
   *
   * @param {String} name
   * @return {Object}
   */

  function parseModifiers(name) {
    var res = Object.create(null);
    var match = name.match(modifierRE);
    if (match) {
      var i = match.length;
      while (i--) {
        res[match[i].slice(1)] = true;
      }
    }
    return res;
  }

  /**
   * Build a link function for all directives on a single node.
   *
   * @param {Array} directives
   * @return {Function} directivesLinkFn
   */

  function makeNodeLinkFn(directives) {
    return function nodeLinkFn(vm, el, host, scope, frag) {
      // reverse apply because it's sorted low to high
      var i = directives.length;
      while (i--) {
        vm._bindDir(directives[i], el, host, scope, frag);
      }
    };
  }

  /**
   * Check if an interpolation string contains one-time tokens.
   *
   * @param {Array} tokens
   * @return {Boolean}
   */

  function hasOneTime(tokens) {
    var i = tokens.length;
    while (i--) {
      if (tokens[i].oneTime) return true;
    }
  }

  function isScript(el) {
    return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
  }

  var specialCharRE = /[^\w\-:\.]/;

  /**
   * Process an element or a DocumentFragment based on a
   * instance option object. This allows us to transclude
   * a template node/fragment before the instance is created,
   * so the processed fragment can then be cloned and reused
   * in v-for.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Element|DocumentFragment}
   */

  function transclude(el, options) {
    // extract container attributes to pass them down
    // to compiler, because they need to be compiled in
    // parent scope. we are mutating the options object here
    // assuming the same object will be used for compile
    // right after this.
    if (options) {
      options._containerAttrs = extractAttrs(el);
    }
    // for template tags, what we want is its content as
    // a documentFragment (for fragment instances)
    if (isTemplate(el)) {
      el = parseTemplate(el);
    }
    if (options) {
      if (options._asComponent && !options.template) {
        options.template = '<slot></slot>';
      }
      if (options.template) {
        options._content = extractContent(el);
        el = transcludeTemplate(el, options);
      }
    }
    if (isFragment(el)) {
      // anchors for fragment instance
      // passing in `persist: true` to avoid them being
      // discarded by IE during template cloning
      prepend(createAnchor('v-start', true), el);
      el.appendChild(createAnchor('v-end', true));
    }
    return el;
  }

  /**
   * Process the template option.
   * If the replace option is true this will swap the $el.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Element|DocumentFragment}
   */

  function transcludeTemplate(el, options) {
    var template = options.template;
    var frag = parseTemplate(template, true);
    if (frag) {
      var replacer = frag.firstChild;
      var tag = replacer.tagName && replacer.tagName.toLowerCase();
      if (options.replace) {
        /* istanbul ignore if */
        if (el === document.body) {
          'development' !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
        }
        // there are many cases where the instance must
        // become a fragment instance: basically anything that
        // can create more than 1 root nodes.
        if (
        // multi-children template
        frag.childNodes.length > 1 ||
        // non-element template
        replacer.nodeType !== 1 ||
        // single nested component
        tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
        // element directive
        resolveAsset(options, 'elementDirectives', tag) ||
        // for block
        replacer.hasAttribute('v-for') ||
        // if block
        replacer.hasAttribute('v-if')) {
          return frag;
        } else {
          options._replacerAttrs = extractAttrs(replacer);
          mergeAttrs(el, replacer);
          return replacer;
        }
      } else {
        el.appendChild(frag);
        return el;
      }
    } else {
      'development' !== 'production' && warn('Invalid template option: ' + template);
    }
  }

  /**
   * Helper to extract a component container's attributes
   * into a plain object array.
   *
   * @param {Element} el
   * @return {Array}
   */

  function extractAttrs(el) {
    if (el.nodeType === 1 && el.hasAttributes()) {
      return toArray(el.attributes);
    }
  }

  /**
   * Merge the attributes of two elements, and make sure
   * the class names are merged properly.
   *
   * @param {Element} from
   * @param {Element} to
   */

  function mergeAttrs(from, to) {
    var attrs = from.attributes;
    var i = attrs.length;
    var name, value;
    while (i--) {
      name = attrs[i].name;
      value = attrs[i].value;
      if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
        to.setAttribute(name, value);
      } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
        value.split(/\s+/).forEach(function (cls) {
          addClass(to, cls);
        });
      }
    }
  }

  /**
   * Scan and determine slot content distribution.
   * We do this during transclusion instead at compile time so that
   * the distribution is decoupled from the compilation order of
   * the slots.
   *
   * @param {Element|DocumentFragment} template
   * @param {Element} content
   * @param {Vue} vm
   */

  function resolveSlots(vm, content) {
    if (!content) {
      return;
    }
    var contents = vm._slotContents = Object.create(null);
    var el, name;
    for (var i = 0, l = content.children.length; i < l; i++) {
      el = content.children[i];
      /* eslint-disable no-cond-assign */
      if (name = el.getAttribute('slot')) {
        (contents[name] || (contents[name] = [])).push(el);
      }
      /* eslint-enable no-cond-assign */
      if ('development' !== 'production' && getBindAttr(el, 'slot')) {
        warn('The "slot" attribute must be static.', vm.$parent);
      }
    }
    for (name in contents) {
      contents[name] = extractFragment(contents[name], content);
    }
    if (content.hasChildNodes()) {
      var nodes = content.childNodes;
      if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
        return;
      }
      contents['default'] = extractFragment(content.childNodes, content);
    }
  }

  /**
   * Extract qualified content nodes from a node list.
   *
   * @param {NodeList} nodes
   * @return {DocumentFragment}
   */

  function extractFragment(nodes, parent) {
    var frag = document.createDocumentFragment();
    nodes = toArray(nodes);
    for (var i = 0, l = nodes.length; i < l; i++) {
      var node = nodes[i];
      if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
        parent.removeChild(node);
        node = parseTemplate(node, true);
      }
      frag.appendChild(node);
    }
    return frag;
  }



  var compiler = Object.freeze({
  	compile: compile,
  	compileAndLinkProps: compileAndLinkProps,
  	compileRoot: compileRoot,
  	transclude: transclude,
  	resolveSlots: resolveSlots
  });

  function stateMixin (Vue) {
    /**
     * Accessor for `$data` property, since setting $data
     * requires observing the new object and updating
     * proxied properties.
     */

    Object.defineProperty(Vue.prototype, '$data', {
      get: function get() {
        return this._data;
      },
      set: function set(newData) {
        if (newData !== this._data) {
          this._setData(newData);
        }
      }
    });

    /**
     * Setup the scope of an instance, which contains:
     * - observed data
     * - computed properties
     * - user methods
     * - meta properties
     */

    Vue.prototype._initState = function () {
      this._initProps();
      this._initMeta();
      this._initMethods();
      this._initData();
      this._initComputed();
    };

    /**
     * Initialize props.
     */

    Vue.prototype._initProps = function () {
      var options = this.$options;
      var el = options.el;
      var props = options.props;
      if (props && !el) {
        'development' !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
      }
      // make sure to convert string selectors into element now
      el = options.el = query(el);
      this._propsUnlinkFn = el && el.nodeType === 1 && props
      // props must be linked in proper scope if inside v-for
      ? compileAndLinkProps(this, el, props, this._scope) : null;
    };

    /**
     * Initialize the data.
     */

    Vue.prototype._initData = function () {
      var dataFn = this.$options.data;
      var data = this._data = dataFn ? dataFn() : {};
      if (!isPlainObject(data)) {
        data = {};
        'development' !== 'production' && warn('data functions should return an object.', this);
      }
      var props = this._props;
      // proxy data on instance
      var keys = Object.keys(data);
      var i, key;
      i = keys.length;
      while (i--) {
        key = keys[i];
        // there are two scenarios where we can proxy a data key:
        // 1. it's not already defined as a prop
        // 2. it's provided via a instantiation option AND there are no
        //    template prop present
        if (!props || !hasOwn(props, key)) {
          this._proxy(key);
        } else if ('development' !== 'production') {
          warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
        }
      }
      // observe data
      observe(data, this);
    };

    /**
     * Swap the instance's $data. Called in $data's setter.
     *
     * @param {Object} newData
     */

    Vue.prototype._setData = function (newData) {
      newData = newData || {};
      var oldData = this._data;
      this._data = newData;
      var keys, key, i;
      // unproxy keys not present in new data
      keys = Object.keys(oldData);
      i = keys.length;
      while (i--) {
        key = keys[i];
        if (!(key in newData)) {
          this._unproxy(key);
        }
      }
      // proxy keys not already proxied,
      // and trigger change for changed values
      keys = Object.keys(newData);
      i = keys.length;
      while (i--) {
        key = keys[i];
        if (!hasOwn(this, key)) {
          // new property
          this._proxy(key);
        }
      }
      oldData.__ob__.removeVm(this);
      observe(newData, this);
      this._digest();
    };

    /**
     * Proxy a property, so that
     * vm.prop === vm._data.prop
     *
     * @param {String} key
     */

    Vue.prototype._proxy = function (key) {
      if (!isReserved(key)) {
        // need to store ref to self here
        // because these getter/setters might
        // be called by child scopes via
        // prototype inheritance.
        var self = this;
        Object.defineProperty(self, key, {
          configurable: true,
          enumerable: true,
          get: function proxyGetter() {
            return self._data[key];
          },
          set: function proxySetter(val) {
            self._data[key] = val;
          }
        });
      }
    };

    /**
     * Unproxy a property.
     *
     * @param {String} key
     */

    Vue.prototype._unproxy = function (key) {
      if (!isReserved(key)) {
        delete this[key];
      }
    };

    /**
     * Force update on every watcher in scope.
     */

    Vue.prototype._digest = function () {
      for (var i = 0, l = this._watchers.length; i < l; i++) {
        this._watchers[i].update(true); // shallow updates
      }
    };

    /**
     * Setup computed properties. They are essentially
     * special getter/setters
     */

    function noop() {}
    Vue.prototype._initComputed = function () {
      var computed = this.$options.computed;
      if (computed) {
        for (var key in computed) {
          var userDef = computed[key];
          var def = {
            enumerable: true,
            configurable: true
          };
          if (typeof userDef === 'function') {
            def.get = makeComputedGetter(userDef, this);
            def.set = noop;
          } else {
            def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
            def.set = userDef.set ? bind(userDef.set, this) : noop;
          }
          Object.defineProperty(this, key, def);
        }
      }
    };

    function makeComputedGetter(getter, owner) {
      var watcher = new Watcher(owner, getter, null, {
        lazy: true
      });
      return function computedGetter() {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value;
      };
    }

    /**
     * Setup instance methods. Methods must be bound to the
     * instance since they might be passed down as a prop to
     * child components.
     */

    Vue.prototype._initMethods = function () {
      var methods = this.$options.methods;
      if (methods) {
        for (var key in methods) {
          this[key] = bind(methods[key], this);
        }
      }
    };

    /**
     * Initialize meta information like $index, $key & $value.
     */

    Vue.prototype._initMeta = function () {
      var metas = this.$options._meta;
      if (metas) {
        for (var key in metas) {
          defineReactive(this, key, metas[key]);
        }
      }
    };
  }

  var eventRE = /^v-on:|^@/;

  function eventsMixin (Vue) {
    /**
     * Setup the instance's option events & watchers.
     * If the value is a string, we pull it from the
     * instance's methods by name.
     */

    Vue.prototype._initEvents = function () {
      var options = this.$options;
      if (options._asComponent) {
        registerComponentEvents(this, options.el);
      }
      registerCallbacks(this, '$on', options.events);
      registerCallbacks(this, '$watch', options.watch);
    };

    /**
     * Register v-on events on a child component
     *
     * @param {Vue} vm
     * @param {Element} el
     */

    function registerComponentEvents(vm, el) {
      var attrs = el.attributes;
      var name, value, handler;
      for (var i = 0, l = attrs.length; i < l; i++) {
        name = attrs[i].name;
        if (eventRE.test(name)) {
          name = name.replace(eventRE, '');
          // force the expression into a statement so that
          // it always dynamically resolves the method to call (#2670)
          // kinda ugly hack, but does the job.
          value = attrs[i].value;
          if (isSimplePath(value)) {
            value += '.apply(this, $arguments)';
          }
          handler = (vm._scope || vm._context).$eval(value, true);
          handler._fromParent = true;
          vm.$on(name.replace(eventRE), handler);
        }
      }
    }

    /**
     * Register callbacks for option events and watchers.
     *
     * @param {Vue} vm
     * @param {String} action
     * @param {Object} hash
     */

    function registerCallbacks(vm, action, hash) {
      if (!hash) return;
      var handlers, key, i, j;
      for (key in hash) {
        handlers = hash[key];
        if (isArray(handlers)) {
          for (i = 0, j = handlers.length; i < j; i++) {
            register(vm, action, key, handlers[i]);
          }
        } else {
          register(vm, action, key, handlers);
        }
      }
    }

    /**
     * Helper to register an event/watch callback.
     *
     * @param {Vue} vm
     * @param {String} action
     * @param {String} key
     * @param {Function|String|Object} handler
     * @param {Object} [options]
     */

    function register(vm, action, key, handler, options) {
      var type = typeof handler;
      if (type === 'function') {
        vm[action](key, handler, options);
      } else if (type === 'string') {
        var methods = vm.$options.methods;
        var method = methods && methods[handler];
        if (method) {
          vm[action](key, method, options);
        } else {
          'development' !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
        }
      } else if (handler && type === 'object') {
        register(vm, action, key, handler.handler, handler);
      }
    }

    /**
     * Setup recursive attached/detached calls
     */

    Vue.prototype._initDOMHooks = function () {
      this.$on('hook:attached', onAttached);
      this.$on('hook:detached', onDetached);
    };

    /**
     * Callback to recursively call attached hook on children
     */

    function onAttached() {
      if (!this._isAttached) {
        this._isAttached = true;
        this.$children.forEach(callAttach);
      }
    }

    /**
     * Iterator to call attached hook
     *
     * @param {Vue} child
     */

    function callAttach(child) {
      if (!child._isAttached && inDoc(child.$el)) {
        child._callHook('attached');
      }
    }

    /**
     * Callback to recursively call detached hook on children
     */

    function onDetached() {
      if (this._isAttached) {
        this._isAttached = false;
        this.$children.forEach(callDetach);
      }
    }

    /**
     * Iterator to call detached hook
     *
     * @param {Vue} child
     */

    function callDetach(child) {
      if (child._isAttached && !inDoc(child.$el)) {
        child._callHook('detached');
      }
    }

    /**
     * Trigger all handlers for a hook
     *
     * @param {String} hook
     */

    Vue.prototype._callHook = function (hook) {
      this.$emit('pre-hook:' + hook);
      var handlers = this.$options[hook];
      if (handlers) {
        for (var i = 0, j = handlers.length; i < j; i++) {
          handlers[i].call(this);
        }
      }
      this.$emit('hook:' + hook);
    };
  }

  function noop() {}

  /**
   * A directive links a DOM element with a piece of data,
   * which is the result of evaluating an expression.
   * It registers a watcher with the expression and calls
   * the DOM update function when a change is triggered.
   *
   * @param {Object} descriptor
   *                 - {String} name
   *                 - {Object} def
   *                 - {String} expression
   *                 - {Array<Object>} [filters]
   *                 - {Object} [modifiers]
   *                 - {Boolean} literal
   *                 - {String} attr
   *                 - {String} arg
   *                 - {String} raw
   *                 - {String} [ref]
   *                 - {Array<Object>} [interp]
   *                 - {Boolean} [hasOneTime]
   * @param {Vue} vm
   * @param {Node} el
   * @param {Vue} [host] - transclusion host component
   * @param {Object} [scope] - v-for scope
   * @param {Fragment} [frag] - owner fragment
   * @constructor
   */
  function Directive(descriptor, vm, el, host, scope, frag) {
    this.vm = vm;
    this.el = el;
    // copy descriptor properties
    this.descriptor = descriptor;
    this.name = descriptor.name;
    this.expression = descriptor.expression;
    this.arg = descriptor.arg;
    this.modifiers = descriptor.modifiers;
    this.filters = descriptor.filters;
    this.literal = this.modifiers && this.modifiers.literal;
    // private
    this._locked = false;
    this._bound = false;
    this._listeners = null;
    // link context
    this._host = host;
    this._scope = scope;
    this._frag = frag;
    // store directives on node in dev mode
    if ('development' !== 'production' && this.el) {
      this.el._vue_directives = this.el._vue_directives || [];
      this.el._vue_directives.push(this);
    }
  }

  /**
   * Initialize the directive, mixin definition properties,
   * setup the watcher, call definition bind() and update()
   * if present.
   */

  Directive.prototype._bind = function () {
    var name = this.name;
    var descriptor = this.descriptor;

    // remove attribute
    if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
      var attr = descriptor.attr || 'v-' + name;
      this.el.removeAttribute(attr);
    }

    // copy def properties
    var def = descriptor.def;
    if (typeof def === 'function') {
      this.update = def;
    } else {
      extend(this, def);
    }

    // setup directive params
    this._setupParams();

    // initial bind
    if (this.bind) {
      this.bind();
    }
    this._bound = true;

    if (this.literal) {
      this.update && this.update(descriptor.raw);
    } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
      // wrapped updater for context
      var dir = this;
      if (this.update) {
        this._update = function (val, oldVal) {
          if (!dir._locked) {
            dir.update(val, oldVal);
          }
        };
      } else {
        this._update = noop;
      }
      var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
      var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
      var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
      {
        filters: this.filters,
        twoWay: this.twoWay,
        deep: this.deep,
        preProcess: preProcess,
        postProcess: postProcess,
        scope: this._scope
      });
      // v-model with inital inline value need to sync back to
      // model instead of update to DOM on init. They would
      // set the afterBind hook to indicate that.
      if (this.afterBind) {
        this.afterBind();
      } else if (this.update) {
        this.update(watcher.value);
      }
    }
  };

  /**
   * Setup all param attributes, e.g. track-by,
   * transition-mode, etc...
   */

  Directive.prototype._setupParams = function () {
    if (!this.params) {
      return;
    }
    var params = this.params;
    // swap the params array with a fresh object.
    this.params = Object.create(null);
    var i = params.length;
    var key, val, mappedKey;
    while (i--) {
      key = hyphenate(params[i]);
      mappedKey = camelize(key);
      val = getBindAttr(this.el, key);
      if (val != null) {
        // dynamic
        this._setupParamWatcher(mappedKey, val);
      } else {
        // static
        val = getAttr(this.el, key);
        if (val != null) {
          this.params[mappedKey] = val === '' ? true : val;
        }
      }
    }
  };

  /**
   * Setup a watcher for a dynamic param.
   *
   * @param {String} key
   * @param {String} expression
   */

  Directive.prototype._setupParamWatcher = function (key, expression) {
    var self = this;
    var called = false;
    var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
      self.params[key] = val;
      // since we are in immediate mode,
      // only call the param change callbacks if this is not the first update.
      if (called) {
        var cb = self.paramWatchers && self.paramWatchers[key];
        if (cb) {
          cb.call(self, val, oldVal);
        }
      } else {
        called = true;
      }
    }, {
      immediate: true,
      user: false
    });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
  };

  /**
   * Check if the directive is a function caller
   * and if the expression is a callable one. If both true,
   * we wrap up the expression and use it as the event
   * handler.
   *
   * e.g. on-click="a++"
   *
   * @return {Boolean}
   */

  Directive.prototype._checkStatement = function () {
    var expression = this.expression;
    if (expression && this.acceptStatement && !isSimplePath(expression)) {
      var fn = parseExpression(expression).get;
      var scope = this._scope || this.vm;
      var handler = function handler(e) {
        scope.$event = e;
        fn.call(scope, scope);
        scope.$event = null;
      };
      if (this.filters) {
        handler = scope._applyFilters(handler, null, this.filters);
      }
      this.update(handler);
      return true;
    }
  };

  /**
   * Set the corresponding value with the setter.
   * This should only be used in two-way directives
   * e.g. v-model.
   *
   * @param {*} value
   * @public
   */

  Directive.prototype.set = function (value) {
    /* istanbul ignore else */
    if (this.twoWay) {
      this._withLock(function () {
        this._watcher.set(value);
      });
    } else if ('development' !== 'production') {
      warn('Directive.set() can only be used inside twoWay' + 'directives.');
    }
  };

  /**
   * Execute a function while preventing that function from
   * triggering updates on this directive instance.
   *
   * @param {Function} fn
   */

  Directive.prototype._withLock = function (fn) {
    var self = this;
    self._locked = true;
    fn.call(self);
    nextTick(function () {
      self._locked = false;
    });
  };

  /**
   * Convenience method that attaches a DOM event listener
   * to the directive element and autometically tears it down
   * during unbind.
   *
   * @param {String} event
   * @param {Function} handler
   * @param {Boolean} [useCapture]
   */

  Directive.prototype.on = function (event, handler, useCapture) {
    on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
  };

  /**
   * Teardown the watcher and call unbind.
   */

  Directive.prototype._teardown = function () {
    if (this._bound) {
      this._bound = false;
      if (this.unbind) {
        this.unbind();
      }
      if (this._watcher) {
        this._watcher.teardown();
      }
      var listeners = this._listeners;
      var i;
      if (listeners) {
        i = listeners.length;
        while (i--) {
          off(this.el, listeners[i][0], listeners[i][1]);
        }
      }
      var unwatchFns = this._paramUnwatchFns;
      if (unwatchFns) {
        i = unwatchFns.length;
        while (i--) {
          unwatchFns[i]();
        }
      }
      if ('development' !== 'production' && this.el) {
        this.el._vue_directives.$remove(this);
      }
      this.vm = this.el = this._watcher = this._listeners = null;
    }
  };

  function lifecycleMixin (Vue) {
    /**
     * Update v-ref for component.
     *
     * @param {Boolean} remove
     */

    Vue.prototype._updateRef = function (remove) {
      var ref = this.$options._ref;
      if (ref) {
        var refs = (this._scope || this._context).$refs;
        if (remove) {
          if (refs[ref] === this) {
            refs[ref] = null;
          }
        } else {
          refs[ref] = this;
        }
      }
    };

    /**
     * Transclude, compile and link element.
     *
     * If a pre-compiled linker is available, that means the
     * passed in element will be pre-transcluded and compiled
     * as well - all we need to do is to call the linker.
     *
     * Otherwise we need to call transclude/compile/link here.
     *
     * @param {Element} el
     */

    Vue.prototype._compile = function (el) {
      var options = this.$options;

      // transclude and init element
      // transclude can potentially replace original
      // so we need to keep reference; this step also injects
      // the template and caches the original attributes
      // on the container node and replacer node.
      var original = el;
      el = transclude(el, options);
      this._initElement(el);

      // handle v-pre on root node (#2026)
      if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
        return;
      }

      // root is always compiled per-instance, because
      // container attrs and props can be different every time.
      var contextOptions = this._context && this._context.$options;
      var rootLinker = compileRoot(el, options, contextOptions);

      // resolve slot distribution
      resolveSlots(this, options._content);

      // compile and link the rest
      var contentLinkFn;
      var ctor = this.constructor;
      // component compilation can be cached
      // as long as it's not using inline-template
      if (options._linkerCachable) {
        contentLinkFn = ctor.linker;
        if (!contentLinkFn) {
          contentLinkFn = ctor.linker = compile(el, options);
        }
      }

      // link phase
      // make sure to link root with prop scope!
      var rootUnlinkFn = rootLinker(this, el, this._scope);
      var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);

      // register composite unlink function
      // to be called during instance destruction
      this._unlinkFn = function () {
        rootUnlinkFn();
        // passing destroying: true to avoid searching and
        // splicing the directives
        contentUnlinkFn(true);
      };

      // finally replace original
      if (options.replace) {
        replace(original, el);
      }

      this._isCompiled = true;
      this._callHook('compiled');
    };

    /**
     * Initialize instance element. Called in the public
     * $mount() method.
     *
     * @param {Element} el
     */

    Vue.prototype._initElement = function (el) {
      if (isFragment(el)) {
        this._isFragment = true;
        this.$el = this._fragmentStart = el.firstChild;
        this._fragmentEnd = el.lastChild;
        // set persisted text anchors to empty
        if (this._fragmentStart.nodeType === 3) {
          this._fragmentStart.data = this._fragmentEnd.data = '';
        }
        this._fragment = el;
      } else {
        this.$el = el;
      }
      this.$el.__vue__ = this;
      this._callHook('beforeCompile');
    };

    /**
     * Create and bind a directive to an element.
     *
     * @param {Object} descriptor - parsed directive descriptor
     * @param {Node} node   - target node
     * @param {Vue} [host] - transclusion host component
     * @param {Object} [scope] - v-for scope
     * @param {Fragment} [frag] - owner fragment
     */

    Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
      this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
    };

    /**
     * Teardown an instance, unobserves the data, unbind all the
     * directives, turn off all the event listeners, etc.
     *
     * @param {Boolean} remove - whether to remove the DOM node.
     * @param {Boolean} deferCleanup - if true, defer cleanup to
     *                                 be called later
     */

    Vue.prototype._destroy = function (remove, deferCleanup) {
      if (this._isBeingDestroyed) {
        if (!deferCleanup) {
          this._cleanup();
        }
        return;
      }

      var destroyReady;
      var pendingRemoval;

      var self = this;
      // Cleanup should be called either synchronously or asynchronoysly as
      // callback of this.$remove(), or if remove and deferCleanup are false.
      // In any case it should be called after all other removing, unbinding and
      // turning of is done
      var cleanupIfPossible = function cleanupIfPossible() {
        if (destroyReady && !pendingRemoval && !deferCleanup) {
          self._cleanup();
        }
      };

      // remove DOM element
      if (remove && this.$el) {
        pendingRemoval = true;
        this.$remove(function () {
          pendingRemoval = false;
          cleanupIfPossible();
        });
      }

      this._callHook('beforeDestroy');
      this._isBeingDestroyed = true;
      var i;
      // remove self from parent. only necessary
      // if parent is not being destroyed as well.
      var parent = this.$parent;
      if (parent && !parent._isBeingDestroyed) {
        parent.$children.$remove(this);
        // unregister ref (remove: true)
        this._updateRef(true);
      }
      // destroy all children.
      i = this.$children.length;
      while (i--) {
        this.$children[i].$destroy();
      }
      // teardown props
      if (this._propsUnlinkFn) {
        this._propsUnlinkFn();
      }
      // teardown all directives. this also tearsdown all
      // directive-owned watchers.
      if (this._unlinkFn) {
        this._unlinkFn();
      }
      i = this._watchers.length;
      while (i--) {
        this._watchers[i].teardown();
      }
      // remove reference to self on $el
      if (this.$el) {
        this.$el.__vue__ = null;
      }

      destroyReady = true;
      cleanupIfPossible();
    };

    /**
     * Clean up to ensure garbage collection.
     * This is called after the leave transition if there
     * is any.
     */

    Vue.prototype._cleanup = function () {
      if (this._isDestroyed) {
        return;
      }
      // remove self from owner fragment
      // do it in cleanup so that we can call $destroy with
      // defer right when a fragment is about to be removed.
      if (this._frag) {
        this._frag.children.$remove(this);
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (this._data && this._data.__ob__) {
        this._data.__ob__.removeVm(this);
      }
      // Clean up references to private properties and other
      // instances. preserve reference to _data so that proxy
      // accessors still work. The only potential side effect
      // here is that mutating the instance after it's destroyed
      // may affect the state of other components that are still
      // observing the same object, but that seems to be a
      // reasonable responsibility for the user rather than
      // always throwing an error on them.
      this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
      // call the last hook...
      this._isDestroyed = true;
      this._callHook('destroyed');
      // turn off all instance listeners.
      this.$off();
    };
  }

  function miscMixin (Vue) {
    /**
     * Apply a list of filter (descriptors) to a value.
     * Using plain for loops here because this will be called in
     * the getter of any watcher with filters so it is very
     * performance sensitive.
     *
     * @param {*} value
     * @param {*} [oldValue]
     * @param {Array} filters
     * @param {Boolean} write
     * @return {*}
     */

    Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
      var filter, fn, args, arg, offset, i, l, j, k;
      for (i = 0, l = filters.length; i < l; i++) {
        filter = filters[write ? l - i - 1 : i];
        fn = resolveAsset(this.$options, 'filters', filter.name, true);
        if (!fn) continue;
        fn = write ? fn.write : fn.read || fn;
        if (typeof fn !== 'function') continue;
        args = write ? [value, oldValue] : [value];
        offset = write ? 2 : 1;
        if (filter.args) {
          for (j = 0, k = filter.args.length; j < k; j++) {
            arg = filter.args[j];
            args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
          }
        }
        value = fn.apply(this, args);
      }
      return value;
    };

    /**
     * Resolve a component, depending on whether the component
     * is defined normally or using an async factory function.
     * Resolves synchronously if already resolved, otherwise
     * resolves asynchronously and caches the resolved
     * constructor on the factory.
     *
     * @param {String|Function} value
     * @param {Function} cb
     */

    Vue.prototype._resolveComponent = function (value, cb) {
      var factory;
      if (typeof value === 'function') {
        factory = value;
      } else {
        factory = resolveAsset(this.$options, 'components', value, true);
      }
      /* istanbul ignore if */
      if (!factory) {
        return;
      }
      // async component factory
      if (!factory.options) {
        if (factory.resolved) {
          // cached
          cb(factory.resolved);
        } else if (factory.requested) {
          // pool callbacks
          factory.pendingCallbacks.push(cb);
        } else {
          factory.requested = true;
          var cbs = factory.pendingCallbacks = [cb];
          factory.call(this, function resolve(res) {
            if (isPlainObject(res)) {
              res = Vue.extend(res);
            }
            // cache resolved
            factory.resolved = res;
            // invoke callbacks
            for (var i = 0, l = cbs.length; i < l; i++) {
              cbs[i](res);
            }
          }, function reject(reason) {
            'development' !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
          });
        }
      } else {
        // normal component
        cb(factory);
      }
    };
  }

  var filterRE$1 = /[^|]\|[^|]/;

  function dataAPI (Vue) {
    /**
     * Get the value from an expression on this vm.
     *
     * @param {String} exp
     * @param {Boolean} [asStatement]
     * @return {*}
     */

    Vue.prototype.$get = function (exp, asStatement) {
      var res = parseExpression(exp);
      if (res) {
        if (asStatement) {
          var self = this;
          return function statementHandler() {
            self.$arguments = toArray(arguments);
            var result = res.get.call(self, self);
            self.$arguments = null;
            return result;
          };
        } else {
          try {
            return res.get.call(this, this);
          } catch (e) {}
        }
      }
    };

    /**
     * Set the value from an expression on this vm.
     * The expression must be a valid left-hand
     * expression in an assignment.
     *
     * @param {String} exp
     * @param {*} val
     */

    Vue.prototype.$set = function (exp, val) {
      var res = parseExpression(exp, true);
      if (res && res.set) {
        res.set.call(this, this, val);
      }
    };

    /**
     * Delete a property on the VM
     *
     * @param {String} key
     */

    Vue.prototype.$delete = function (key) {
      del(this._data, key);
    };

    /**
     * Watch an expression, trigger callback when its
     * value changes.
     *
     * @param {String|Function} expOrFn
     * @param {Function} cb
     * @param {Object} [options]
     *                 - {Boolean} deep
     *                 - {Boolean} immediate
     * @return {Function} - unwatchFn
     */

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;
      var parsed;
      if (typeof expOrFn === 'string') {
        parsed = parseDirective(expOrFn);
        expOrFn = parsed.expression;
      }
      var watcher = new Watcher(vm, expOrFn, cb, {
        deep: options && options.deep,
        sync: options && options.sync,
        filters: parsed && parsed.filters,
        user: !options || options.user !== false
      });
      if (options && options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };

    /**
     * Evaluate a text directive, including filters.
     *
     * @param {String} text
     * @param {Boolean} [asStatement]
     * @return {String}
     */

    Vue.prototype.$eval = function (text, asStatement) {
      // check for filters.
      if (filterRE$1.test(text)) {
        var dir = parseDirective(text);
        // the filter regex check might give false positive
        // for pipes inside strings, so it's possible that
        // we don't get any filters here
        var val = this.$get(dir.expression, asStatement);
        return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
      } else {
        // no filter
        return this.$get(text, asStatement);
      }
    };

    /**
     * Interpolate a piece of template text.
     *
     * @param {String} text
     * @return {String}
     */

    Vue.prototype.$interpolate = function (text) {
      var tokens = parseText(text);
      var vm = this;
      if (tokens) {
        if (tokens.length === 1) {
          return vm.$eval(tokens[0].value) + '';
        } else {
          return tokens.map(function (token) {
            return token.tag ? vm.$eval(token.value) : token.value;
          }).join('');
        }
      } else {
        return text;
      }
    };

    /**
     * Log instance data as a plain JS object
     * so that it is easier to inspect in console.
     * This method assumes console is available.
     *
     * @param {String} [path]
     */

    Vue.prototype.$log = function (path) {
      var data = path ? getPath(this._data, path) : this._data;
      if (data) {
        data = clean(data);
      }
      // include computed fields
      if (!path) {
        var key;
        for (key in this.$options.computed) {
          data[key] = clean(this[key]);
        }
        if (this._props) {
          for (key in this._props) {
            data[key] = clean(this[key]);
          }
        }
      }
      console.log(data);
    };

    /**
     * "clean" a getter/setter converted object into a plain
     * object copy.
     *
     * @param {Object} - obj
     * @return {Object}
     */

    function clean(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
  }

  function domAPI (Vue) {
    /**
     * Convenience on-instance nextTick. The callback is
     * auto-bound to the instance, and this avoids component
     * modules having to rely on the global Vue.
     *
     * @param {Function} fn
     */

    Vue.prototype.$nextTick = function (fn) {
      nextTick(fn, this);
    };

    /**
     * Append instance to target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$appendTo = function (target, cb, withTransition) {
      return insert(this, target, cb, withTransition, append, appendWithTransition);
    };

    /**
     * Prepend instance to target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$prependTo = function (target, cb, withTransition) {
      target = query(target);
      if (target.hasChildNodes()) {
        this.$before(target.firstChild, cb, withTransition);
      } else {
        this.$appendTo(target, cb, withTransition);
      }
      return this;
    };

    /**
     * Insert instance before target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$before = function (target, cb, withTransition) {
      return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
    };

    /**
     * Insert instance after target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$after = function (target, cb, withTransition) {
      target = query(target);
      if (target.nextSibling) {
        this.$before(target.nextSibling, cb, withTransition);
      } else {
        this.$appendTo(target.parentNode, cb, withTransition);
      }
      return this;
    };

    /**
     * Remove instance from DOM
     *
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$remove = function (cb, withTransition) {
      if (!this.$el.parentNode) {
        return cb && cb();
      }
      var inDocument = this._isAttached && inDoc(this.$el);
      // if we are not in document, no need to check
      // for transitions
      if (!inDocument) withTransition = false;
      var self = this;
      var realCb = function realCb() {
        if (inDocument) self._callHook('detached');
        if (cb) cb();
      };
      if (this._isFragment) {
        removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
      } else {
        var op = withTransition === false ? removeWithCb : removeWithTransition;
        op(this.$el, this, realCb);
      }
      return this;
    };

    /**
     * Shared DOM insertion function.
     *
     * @param {Vue} vm
     * @param {Element} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition]
     * @param {Function} op1 - op for non-transition insert
     * @param {Function} op2 - op for transition insert
     * @return vm
     */

    function insert(vm, target, cb, withTransition, op1, op2) {
      target = query(target);
      var targetIsDetached = !inDoc(target);
      var op = withTransition === false || targetIsDetached ? op1 : op2;
      var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
      if (vm._isFragment) {
        mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
          op(node, target, vm);
        });
        cb && cb();
      } else {
        op(vm.$el, target, vm, cb);
      }
      if (shouldCallHook) {
        vm._callHook('attached');
      }
      return vm;
    }

    /**
     * Check for selectors
     *
     * @param {String|Element} el
     */

    function query(el) {
      return typeof el === 'string' ? document.querySelector(el) : el;
    }

    /**
     * Append operation that takes a callback.
     *
     * @param {Node} el
     * @param {Node} target
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function append(el, target, vm, cb) {
      target.appendChild(el);
      if (cb) cb();
    }

    /**
     * InsertBefore operation that takes a callback.
     *
     * @param {Node} el
     * @param {Node} target
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function beforeWithCb(el, target, vm, cb) {
      before(el, target);
      if (cb) cb();
    }

    /**
     * Remove operation that takes a callback.
     *
     * @param {Node} el
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function removeWithCb(el, vm, cb) {
      remove(el);
      if (cb) cb();
    }
  }

  function eventsAPI (Vue) {
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$on = function (event, fn) {
      (this._events[event] || (this._events[event] = [])).push(fn);
      modifyListenerCount(this, event, 1);
      return this;
    };

    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$once = function (event, fn) {
      var self = this;
      function on() {
        self.$off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.$on(event, on);
      return this;
    };

    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$off = function (event, fn) {
      var cbs;
      // all
      if (!arguments.length) {
        if (this.$parent) {
          for (event in this._events) {
            cbs = this._events[event];
            if (cbs) {
              modifyListenerCount(this, event, -cbs.length);
            }
          }
        }
        this._events = {};
        return this;
      }
      // specific event
      cbs = this._events[event];
      if (!cbs) {
        return this;
      }
      if (arguments.length === 1) {
        modifyListenerCount(this, event, -cbs.length);
        this._events[event] = null;
        return this;
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          modifyListenerCount(this, event, -1);
          cbs.splice(i, 1);
          break;
        }
      }
      return this;
    };

    /**
     * Trigger an event on self.
     *
     * @param {String|Object} event
     * @return {Boolean} shouldPropagate
     */

    Vue.prototype.$emit = function (event) {
      var isSource = typeof event === 'string';
      event = isSource ? event : event.name;
      var cbs = this._events[event];
      var shouldPropagate = isSource || !cbs;
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        // this is a somewhat hacky solution to the question raised
        // in #2102: for an inline component listener like <comp @test="doThis">,
        // the propagation handling is somewhat broken. Therefore we
        // need to treat these inline callbacks differently.
        var hasParentCbs = isSource && cbs.some(function (cb) {
          return cb._fromParent;
        });
        if (hasParentCbs) {
          shouldPropagate = false;
        }
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          var cb = cbs[i];
          var res = cb.apply(this, args);
          if (res === true && (!hasParentCbs || cb._fromParent)) {
            shouldPropagate = true;
          }
        }
      }
      return shouldPropagate;
    };

    /**
     * Recursively broadcast an event to all children instances.
     *
     * @param {String|Object} event
     * @param {...*} additional arguments
     */

    Vue.prototype.$broadcast = function (event) {
      var isSource = typeof event === 'string';
      event = isSource ? event : event.name;
      // if no child has registered for this event,
      // then there's no need to broadcast.
      if (!this._eventsCount[event]) return;
      var children = this.$children;
      var args = toArray(arguments);
      if (isSource) {
        // use object event to indicate non-source emit
        // on children
        args[0] = { name: event, source: this };
      }
      for (var i = 0, l = children.length; i < l; i++) {
        var child = children[i];
        var shouldPropagate = child.$emit.apply(child, args);
        if (shouldPropagate) {
          child.$broadcast.apply(child, args);
        }
      }
      return this;
    };

    /**
     * Recursively propagate an event up the parent chain.
     *
     * @param {String} event
     * @param {...*} additional arguments
     */

    Vue.prototype.$dispatch = function (event) {
      var shouldPropagate = this.$emit.apply(this, arguments);
      if (!shouldPropagate) return;
      var parent = this.$parent;
      var args = toArray(arguments);
      // use object event to indicate non-source emit
      // on parents
      args[0] = { name: event, source: this };
      while (parent) {
        shouldPropagate = parent.$emit.apply(parent, args);
        parent = shouldPropagate ? parent.$parent : null;
      }
      return this;
    };

    /**
     * Modify the listener counts on all parents.
     * This bookkeeping allows $broadcast to return early when
     * no child has listened to a certain event.
     *
     * @param {Vue} vm
     * @param {String} event
     * @param {Number} count
     */

    var hookRE = /^hook:/;
    function modifyListenerCount(vm, event, count) {
      var parent = vm.$parent;
      // hooks do not get broadcasted so no need
      // to do bookkeeping for them
      if (!parent || !count || hookRE.test(event)) return;
      while (parent) {
        parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
        parent = parent.$parent;
      }
    }
  }

  function lifecycleAPI (Vue) {
    /**
     * Set instance target element and kick off the compilation
     * process. The passed in `el` can be a selector string, an
     * existing Element, or a DocumentFragment (for block
     * instances).
     *
     * @param {Element|DocumentFragment|string} el
     * @public
     */

    Vue.prototype.$mount = function (el) {
      if (this._isCompiled) {
        'development' !== 'production' && warn('$mount() should be called only once.', this);
        return;
      }
      el = query(el);
      if (!el) {
        el = document.createElement('div');
      }
      this._compile(el);
      this._initDOMHooks();
      if (inDoc(this.$el)) {
        this._callHook('attached');
        ready.call(this);
      } else {
        this.$once('hook:attached', ready);
      }
      return this;
    };

    /**
     * Mark an instance as ready.
     */

    function ready() {
      this._isAttached = true;
      this._isReady = true;
      this._callHook('ready');
    }

    /**
     * Teardown the instance, simply delegate to the internal
     * _destroy.
     *
     * @param {Boolean} remove
     * @param {Boolean} deferCleanup
     */

    Vue.prototype.$destroy = function (remove, deferCleanup) {
      this._destroy(remove, deferCleanup);
    };

    /**
     * Partially compile a piece of DOM and return a
     * decompile function.
     *
     * @param {Element|DocumentFragment} el
     * @param {Vue} [host]
     * @param {Object} [scope]
     * @param {Fragment} [frag]
     * @return {Function}
     */

    Vue.prototype.$compile = function (el, host, scope, frag) {
      return compile(el, this.$options, true)(this, el, host, scope, frag);
    };
  }

  /**
   * The exposed Vue constructor.
   *
   * API conventions:
   * - public API methods/properties are prefixed with `$`
   * - internal methods/properties are prefixed with `_`
   * - non-prefixed properties are assumed to be proxied user
   *   data.
   *
   * @constructor
   * @param {Object} [options]
   * @public
   */

  function Vue(options) {
    this._init(options);
  }

  // install internals
  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  miscMixin(Vue);

  // install instance APIs
  dataAPI(Vue);
  domAPI(Vue);
  eventsAPI(Vue);
  lifecycleAPI(Vue);

  var slot = {

    priority: SLOT,
    params: ['name'],

    bind: function bind() {
      // this was resolved during component transclusion
      var name = this.params.name || 'default';
      var content = this.vm._slotContents && this.vm._slotContents[name];
      if (!content || !content.hasChildNodes()) {
        this.fallback();
      } else {
        this.compile(content.cloneNode(true), this.vm._context, this.vm);
      }
    },

    compile: function compile(content, context, host) {
      if (content && context) {
        if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
          // if the inserted slot has v-if
          // inject fallback content as the v-else
          var elseBlock = document.createElement('template');
          elseBlock.setAttribute('v-else', '');
          elseBlock.innerHTML = this.el.innerHTML;
          // the else block should be compiled in child scope
          elseBlock._context = this.vm;
          content.appendChild(elseBlock);
        }
        var scope = host ? host._scope : this._scope;
        this.unlink = context.$compile(content, host, scope, this._frag);
      }
      if (content) {
        replace(this.el, content);
      } else {
        remove(this.el);
      }
    },

    fallback: function fallback() {
      this.compile(extractContent(this.el, true), this.vm);
    },

    unbind: function unbind() {
      if (this.unlink) {
        this.unlink();
      }
    }
  };

  var partial = {

    priority: PARTIAL,

    params: ['name'],

    // watch changes to name for dynamic partials
    paramWatchers: {
      name: function name(value) {
        vIf.remove.call(this);
        if (value) {
          this.insert(value);
        }
      }
    },

    bind: function bind() {
      this.anchor = createAnchor('v-partial');
      replace(this.el, this.anchor);
      this.insert(this.params.name);
    },

    insert: function insert(id) {
      var partial = resolveAsset(this.vm.$options, 'partials', id, true);
      if (partial) {
        this.factory = new FragmentFactory(this.vm, partial);
        vIf.insert.call(this);
      }
    },

    unbind: function unbind() {
      if (this.frag) {
        this.frag.destroy();
      }
    }
  };

  var elementDirectives = {
    slot: slot,
    partial: partial
  };

  var convertArray = vFor._postProcess;

  /**
   * Limit filter for arrays
   *
   * @param {Number} n
   * @param {Number} offset (Decimal expected)
   */

  function limitBy(arr, n, offset) {
    offset = offset ? parseInt(offset, 10) : 0;
    n = toNumber(n);
    return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
  }

  /**
   * Filter filter for arrays
   *
   * @param {String} search
   * @param {String} [delimiter]
   * @param {String} ...dataKeys
   */

  function filterBy(arr, search, delimiter) {
    arr = convertArray(arr);
    if (search == null) {
      return arr;
    }
    if (typeof search === 'function') {
      return arr.filter(search);
    }
    // cast to lowercase string
    search = ('' + search).toLowerCase();
    // allow optional `in` delimiter
    // because why not
    var n = delimiter === 'in' ? 3 : 2;
    // extract and flatten keys
    var keys = Array.prototype.concat.apply([], toArray(arguments, n));
    var res = [];
    var item, key, val, j;
    for (var i = 0, l = arr.length; i < l; i++) {
      item = arr[i];
      val = item && item.$value || item;
      j = keys.length;
      if (j) {
        while (j--) {
          key = keys[j];
          if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
            res.push(item);
            break;
          }
        }
      } else if (contains(item, search)) {
        res.push(item);
      }
    }
    return res;
  }

  /**
   * Filter filter for arrays
   *
   * @param {String|Array<String>|Function} ...sortKeys
   * @param {Number} [order]
   */

  function orderBy(arr) {
    var comparator = null;
    var sortKeys = undefined;
    arr = convertArray(arr);

    // determine order (last argument)
    var args = toArray(arguments, 1);
    var order = args[args.length - 1];
    if (typeof order === 'number') {
      order = order < 0 ? -1 : 1;
      args = args.length > 1 ? args.slice(0, -1) : args;
    } else {
      order = 1;
    }

    // determine sortKeys & comparator
    var firstArg = args[0];
    if (!firstArg) {
      return arr;
    } else if (typeof firstArg === 'function') {
      // custom comparator
      comparator = function (a, b) {
        return firstArg(a, b) * order;
      };
    } else {
      // string keys. flatten first
      sortKeys = Array.prototype.concat.apply([], args);
      comparator = function (a, b, i) {
        i = i || 0;
        return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
      };
    }

    function baseCompare(a, b, sortKeyIndex) {
      var sortKey = sortKeys[sortKeyIndex];
      if (sortKey) {
        if (sortKey !== '$key') {
          if (isObject(a) && '$value' in a) a = a.$value;
          if (isObject(b) && '$value' in b) b = b.$value;
        }
        a = isObject(a) ? getPath(a, sortKey) : a;
        b = isObject(b) ? getPath(b, sortKey) : b;
      }
      return a === b ? 0 : a > b ? order : -order;
    }

    // sort on a copy to avoid mutating original array
    return arr.slice().sort(comparator);
  }

  /**
   * String contain helper
   *
   * @param {*} val
   * @param {String} search
   */

  function contains(val, search) {
    var i;
    if (isPlainObject(val)) {
      var keys = Object.keys(val);
      i = keys.length;
      while (i--) {
        if (contains(val[keys[i]], search)) {
          return true;
        }
      }
    } else if (isArray(val)) {
      i = val.length;
      while (i--) {
        if (contains(val[i], search)) {
          return true;
        }
      }
    } else if (val != null) {
      return val.toString().toLowerCase().indexOf(search) > -1;
    }
  }

  var digitsRE = /(\d{3})(?=\d)/g;

  // asset collections must be a plain object.
  var filters = {

    orderBy: orderBy,
    filterBy: filterBy,
    limitBy: limitBy,

    /**
     * Stringify value.
     *
     * @param {Number} indent
     */

    json: {
      read: function read(value, indent) {
        return typeof value === 'string' ? value : JSON.stringify(value, null, Number(indent) || 2);
      },
      write: function write(value) {
        try {
          return JSON.parse(value);
        } catch (e) {
          return value;
        }
      }
    },

    /**
     * 'abc' => 'Abc'
     */

    capitalize: function capitalize(value) {
      if (!value && value !== 0) return '';
      value = value.toString();
      return value.charAt(0).toUpperCase() + value.slice(1);
    },

    /**
     * 'abc' => 'ABC'
     */

    uppercase: function uppercase(value) {
      return value || value === 0 ? value.toString().toUpperCase() : '';
    },

    /**
     * 'AbC' => 'abc'
     */

    lowercase: function lowercase(value) {
      return value || value === 0 ? value.toString().toLowerCase() : '';
    },

    /**
     * 12345 => $12,345.00
     *
     * @param {String} sign
     * @param {Number} decimals Decimal places
     */

    currency: function currency(value, _currency, decimals) {
      value = parseFloat(value);
      if (!isFinite(value) || !value && value !== 0) return '';
      _currency = _currency != null ? _currency : '$';
      decimals = decimals != null ? decimals : 2;
      var stringified = Math.abs(value).toFixed(decimals);
      var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
      var i = _int.length % 3;
      var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
      var _float = decimals ? stringified.slice(-1 - decimals) : '';
      var sign = value < 0 ? '-' : '';
      return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
    },

    /**
     * 'item' => 'items'
     *
     * @params
     *  an array of strings corresponding to
     *  the single, double, triple ... forms of the word to
     *  be pluralized. When the number to be pluralized
     *  exceeds the length of the args, it will use the last
     *  entry in the array.
     *
     *  e.g. ['single', 'double', 'triple', 'multiple']
     */

    pluralize: function pluralize(value) {
      var args = toArray(arguments, 1);
      return args.length > 1 ? args[value % 10 - 1] || args[args.length - 1] : args[0] + (value === 1 ? '' : 's');
    },

    /**
     * Debounce a handler function.
     *
     * @param {Function} handler
     * @param {Number} delay = 300
     * @return {Function}
     */

    debounce: function debounce(handler, delay) {
      if (!handler) return;
      if (!delay) {
        delay = 300;
      }
      return _debounce(handler, delay);
    }
  };

  function installGlobalAPI (Vue) {
    /**
     * Vue and every constructor that extends Vue has an
     * associated options object, which can be accessed during
     * compilation steps as `this.constructor.options`.
     *
     * These can be seen as the default options of every
     * Vue instance.
     */

    Vue.options = {
      directives: directives,
      elementDirectives: elementDirectives,
      filters: filters,
      transitions: {},
      components: {},
      partials: {},
      replace: true
    };

    /**
     * Expose useful internals
     */

    Vue.util = util;
    Vue.config = config;
    Vue.set = set;
    Vue['delete'] = del;
    Vue.nextTick = nextTick;

    /**
     * The following are exposed for advanced usage / plugins
     */

    Vue.compiler = compiler;
    Vue.FragmentFactory = FragmentFactory;
    Vue.internalDirectives = internalDirectives;
    Vue.parsers = {
      path: path,
      text: text,
      template: template,
      directive: directive,
      expression: expression
    };

    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */

    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     *
     * @param {Object} extendOptions
     */

    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var isFirstExtend = Super.cid === 0;
      if (isFirstExtend && extendOptions._Ctor) {
        return extendOptions._Ctor;
      }
      var name = extendOptions.name || Super.options.name;
      if ('development' !== 'production') {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
          name = null;
        }
      }
      var Sub = createClass(name || 'VueComponent');
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super;
      // allow further extension
      Sub.extend = Super.extend;
      // create asset registers, so extended classes
      // can have their private assets too.
      config._assetTypes.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }
      // cache constructor
      if (isFirstExtend) {
        extendOptions._Ctor = Sub;
      }
      return Sub;
    };

    /**
     * A function that returns a sub-class constructor with the
     * given name. This gives us much nicer output when
     * logging instances in the console.
     *
     * @param {String} name
     * @return {Function}
     */

    function createClass(name) {
      /* eslint-disable no-new-func */
      return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
      /* eslint-enable no-new-func */
    }

    /**
     * Plugin system
     *
     * @param {Object} plugin
     */

    Vue.use = function (plugin) {
      /* istanbul ignore if */
      if (plugin.installed) {
        return;
      }
      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else {
        plugin.apply(null, args);
      }
      plugin.installed = true;
      return this;
    };

    /**
     * Apply a global mixin by merging it into the default
     * options.
     */

    Vue.mixin = function (mixin) {
      Vue.options = mergeOptions(Vue.options, mixin);
    };

    /**
     * Create asset registration methods with the following
     * signature:
     *
     * @param {String} id
     * @param {*} definition
     */

    config._assetTypes.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          if ('development' !== 'production') {
            if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
            }
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = id;
            definition = Vue.extend(definition);
          }
          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });

    // expose internal transition API
    extend(Vue.transition, transition);
  }

  installGlobalAPI(Vue);

  Vue.version = '1.0.24';

  // devtools global hook
  /* istanbul ignore next */
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ('development' !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
        console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
  }, 0);

  return Vue;

}));
;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());

/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
(function(window, document, exportName, undefined) {
  'use strict';

var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
var TEST_ELEMENT = document.createElement('div');

var TYPE_FUNCTION = 'function';

var round = Math.round;
var abs = Math.abs;
var now = Date.now;

/**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */
function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
}

/**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */
function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
        each(arg, context[fn], context);
        return true;
    }
    return false;
}

/**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */
function each(obj, iterator, context) {
    var i;

    if (!obj) {
        return;
    }

    if (obj.forEach) {
        obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
        i = 0;
        while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
        }
    } else {
        for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
        }
    }
}

/**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */
function deprecate(method, name, message) {
    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
    return function() {
        var e = new Error('get-stack-trace');
        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

        var log = window.console && (window.console.warn || window.console.log);
        if (log) {
            log.call(window.console, deprecationMessage, stack);
        }
        return method.apply(this, arguments);
    };
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */
var assign;
if (typeof Object.assign !== 'function') {
    assign = function assign(target) {
        if (target === undefined || target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var output = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for (var nextKey in source) {
                    if (source.hasOwnProperty(nextKey)) {
                        output[nextKey] = source[nextKey];
                    }
                }
            }
        }
        return output;
    };
} else {
    assign = Object.assign;
}

/**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */
var extend = deprecate(function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
        if (!merge || (merge && dest[keys[i]] === undefined)) {
            dest[keys[i]] = src[keys[i]];
        }
        i++;
    }
    return dest;
}, 'extend', 'Use `assign`.');

/**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */
var merge = deprecate(function merge(dest, src) {
    return extend(dest, src, true);
}, 'merge', 'Use `assign`.');

/**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */
function inherit(child, base, properties) {
    var baseP = base.prototype,
        childP;

    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;

    if (properties) {
        assign(childP, properties);
    }
}

/**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */
function bindFn(fn, context) {
    return function boundFn() {
        return fn.apply(context, arguments);
    };
}

/**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */
function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
        return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
}

/**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */
function ifUndefined(val1, val2) {
    return (val1 === undefined) ? val2 : val1;
}

/**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function addEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.addEventListener(type, handler, false);
    });
}

/**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */
function removeEventListeners(target, types, handler) {
    each(splitStr(types), function(type) {
        target.removeEventListener(type, handler, false);
    });
}

/**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */
function hasParent(node, parent) {
    while (node) {
        if (node == parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}

/**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */
function inStr(str, find) {
    return str.indexOf(find) > -1;
}

/**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */
function splitStr(str) {
    return str.trim().split(/\s+/g);
}

/**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */
function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
        return src.indexOf(find);
    } else {
        var i = 0;
        while (i < src.length) {
            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                return i;
            }
            i++;
        }
        return -1;
    }
}

/**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */
function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
}

/**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */
function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;

    while (i < src.length) {
        var val = key ? src[i][key] : src[i];
        if (inArray(values, val) < 0) {
            results.push(src[i]);
        }
        values[i] = val;
        i++;
    }

    if (sort) {
        if (!key) {
            results = results.sort();
        } else {
            results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
    }

    return results;
}

/**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */
function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);

    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
        prefix = VENDOR_PREFIXES[i];
        prop = (prefix) ? prefix + camelProp : property;

        if (prop in obj) {
            return prop;
        }
        i++;
    }
    return undefined;
}

/**
 * get a unique id
 * @returns {number} uniqueId
 */
var _uniqueId = 1;
function uniqueId() {
    return _uniqueId++;
}

/**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */
function getWindowForElement(element) {
    var doc = element.ownerDocument || element;
    return (doc.defaultView || doc.parentWindow || window);
}

var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

var SUPPORT_TOUCH = ('ontouchstart' in window);
var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

var INPUT_TYPE_TOUCH = 'touch';
var INPUT_TYPE_PEN = 'pen';
var INPUT_TYPE_MOUSE = 'mouse';
var INPUT_TYPE_KINECT = 'kinect';

var COMPUTE_INTERVAL = 25;

var INPUT_START = 1;
var INPUT_MOVE = 2;
var INPUT_END = 4;
var INPUT_CANCEL = 8;

var DIRECTION_NONE = 1;
var DIRECTION_LEFT = 2;
var DIRECTION_RIGHT = 4;
var DIRECTION_UP = 8;
var DIRECTION_DOWN = 16;

var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

var PROPS_XY = ['x', 'y'];
var PROPS_CLIENT_XY = ['clientX', 'clientY'];

/**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;

    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function(ev) {
        if (boolOrFn(manager.options.enable, [manager])) {
            self.handler(ev);
        }
    };

    this.init();

}

Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function() { },

    /**
     * bind the events
     */
    init: function() {
        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },

    /**
     * unbind the events
     */
    destroy: function() {
        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
};

/**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */
function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;

    if (inputClass) {
        Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
        Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
        Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
        Type = MouseInput;
    } else {
        Type = TouchMouseInput;
    }
    return new (Type)(manager, inputHandler);
}

/**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;

    if (isFirst) {
        manager.session = {};
    }

    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;

    // compute scale, rotation etc
    computeInputData(manager, input);

    // emit secret event
    manager.emit('hammer.input', input);

    manager.recognize(input);
    manager.session.prevInput = input;
}

/**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */
function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;

    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
        session.firstInput = simpleCloneInputData(input);
    }

    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
        session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
        session.firstMultiple = false;
    }

    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;

    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);

    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
    input.overallVelocityX = overallVelocity.x;
    input.overallVelocityY = overallVelocity.y;
    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

    computeIntervalInputData(session, input);

    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
        target = input.srcEvent.target;
    }
    input.target = target;
}

function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};

    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
        prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
        };

        offset = session.offsetDelta = {
            x: center.x,
            y: center.y
        };
    }

    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
}

/**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input,
        deltaTime = input.timeStamp - last.timeStamp,
        velocity, velocityX, velocityY, direction;

    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
        var deltaX = input.deltaX - last.deltaX;
        var deltaY = input.deltaY - last.deltaY;

        var v = getVelocity(deltaTime, deltaX, deltaY);
        velocityX = v.x;
        velocityY = v.y;
        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
        direction = getDirection(deltaX, deltaY);

        session.lastInterval = input;
    } else {
        // use latest velocity info if it doesn't overtake a minimum period
        velocity = last.velocity;
        velocityX = last.velocityX;
        velocityY = last.velocityY;
        direction = last.direction;
    }

    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
}

/**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */
function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
        pointers[i] = {
            clientX: round(input.pointers[i].clientX),
            clientY: round(input.pointers[i].clientY)
        };
        i++;
    }

    return {
        timeStamp: now(),
        pointers: pointers,
        center: getCenter(pointers),
        deltaX: input.deltaX,
        deltaY: input.deltaY
    };
}

/**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */
function getCenter(pointers) {
    var pointersLength = pointers.length;

    // no need to loop when only one touch
    if (pointersLength === 1) {
        return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
    }

    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
        x += pointers[i].clientX;
        y += pointers[i].clientY;
        i++;
    }

    return {
        x: round(x / pointersLength),
        y: round(y / pointersLength)
    };
}

/**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */
function getVelocity(deltaTime, x, y) {
    return {
        x: x / deltaTime || 0,
        y: y / deltaTime || 0
    };
}

/**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */
function getDirection(x, y) {
    if (x === y) {
        return DIRECTION_NONE;
    }

    if (abs(x) >= abs(y)) {
        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
}

/**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */
function getDistance(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];

    return Math.sqrt((x * x) + (y * y));
}

/**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */
function getAngle(p1, p2, props) {
    if (!props) {
        props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]],
        y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
}

/**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */
function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
}

/**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */
function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
}

var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
};

var MOUSE_ELEMENT_EVENTS = 'mousedown';
var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

/**
 * Mouse events input
 * @constructor
 * @extends Input
 */
function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;

    this.pressed = false; // mousedown state

    Input.apply(this, arguments);
}

inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
        var eventType = MOUSE_INPUT_MAP[ev.type];

        // on start we want to have the left mouse button down
        if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
        }

        if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
        }

        // mouse must be down
        if (!this.pressed) {
            return;
        }

        if (eventType & INPUT_END) {
            this.pressed = false;
        }

        this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
        });
    }
});

var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
};

// in IE10 the pointer types is defined as an enum
var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
};

var POINTER_ELEMENT_EVENTS = 'pointerdown';
var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
if (window.MSPointerEvent && !window.PointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
}

/**
 * Pointer events input
 * @constructor
 * @extends Input
 */
function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;

    Input.apply(this, arguments);

    this.store = (this.manager.session.pointerEvents = []);
}

inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
        var store = this.store;
        var removePointer = false;

        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

        // get index of the event in the store
        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

        // start and mouse must be down
        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
            }
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
        }

        // it not found, so the pointer hasn't been down (so it's probably a hover)
        if (storeIndex < 0) {
            return;
        }

        // update the event in the store
        store[storeIndex] = ev;

        this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType: pointerType,
            srcEvent: ev
        });

        if (removePointer) {
            // remove from the store
            store.splice(storeIndex, 1);
        }
    }
});

var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Touch events input
 * @constructor
 * @extends Input
 */
function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;

    Input.apply(this, arguments);
}

inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

        // should we handle the touch events?
        if (type === INPUT_START) {
            this.started = true;
        }

        if (!this.started) {
            return;
        }

        var touches = normalizeSingleTouches.call(this, ev, type);

        // when done, reset the started state
        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);

    if (type & (INPUT_END | INPUT_CANCEL)) {
        all = uniqueArray(all.concat(changed), 'identifier', true);
    }

    return [all, changed];
}

var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
};

var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

/**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */
function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};

    Input.apply(this, arguments);
}

inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
        var type = TOUCH_INPUT_MAP[ev.type];
        var touches = getTouches.call(this, ev, type);
        if (!touches) {
            return;
        }

        this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
        });
    }
});

/**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */
function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;

    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
        targetIds[allTouches[0].identifier] = true;
        return [allTouches, allTouches];
    }

    var i,
        targetTouches,
        changedTouches = toArray(ev.changedTouches),
        changedTargetTouches = [],
        target = this.target;

    // get target touches from touches
    targetTouches = allTouches.filter(function(touch) {
        return hasParent(touch.target, target);
    });

    // collect touches
    if (type === INPUT_START) {
        i = 0;
        while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
        }
    }

    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
        if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
        }

        // cleanup removed touches
        if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
        }
        i++;
    }

    if (!changedTargetTouches.length) {
        return;
    }

    return [
        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
        changedTargetTouches
    ];
}

/**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */

var DEDUP_TIMEOUT = 2500;
var DEDUP_DISTANCE = 25;

function TouchMouseInput() {
    Input.apply(this, arguments);

    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);

    this.primaryTouch = null;
    this.lastTouches = [];
}

inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
        }

        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
        if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
        }

        this.callback(manager, inputEvent, inputData);
    },

    /**
     * remove the event listeners
     */
    destroy: function destroy() {
        this.touch.destroy();
        this.mouse.destroy();
    }
});

function recordTouches(eventType, eventData) {
    if (eventType & INPUT_START) {
        this.primaryTouch = eventData.changedPointers[0].identifier;
        setLastTouch.call(this, eventData);
    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        setLastTouch.call(this, eventData);
    }
}

function setLastTouch(eventData) {
    var touch = eventData.changedPointers[0];

    if (touch.identifier === this.primaryTouch) {
        var lastTouch = {x: touch.clientX, y: touch.clientY};
        this.lastTouches.push(lastTouch);
        var lts = this.lastTouches;
        var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
                lts.splice(i, 1);
            }
        };
        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
    }
}

function isSyntheticEvent(eventData) {
    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
    for (var i = 0; i < this.lastTouches.length; i++) {
        var t = this.lastTouches[i];
        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
        }
    }
    return false;
}

var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
var TOUCH_ACTION_COMPUTE = 'compute';
var TOUCH_ACTION_AUTO = 'auto';
var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
var TOUCH_ACTION_NONE = 'none';
var TOUCH_ACTION_PAN_X = 'pan-x';
var TOUCH_ACTION_PAN_Y = 'pan-y';
var TOUCH_ACTION_MAP = getTouchActionProps();

/**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */
function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
}

TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function(value) {
        // find out the touch-action by the event handlers
        if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
        }

        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
        }
        this.actions = value.toLowerCase().trim();
    },

    /**
     * just re-set the touchAction value
     */
    update: function() {
        this.set(this.manager.options.touchAction);
    },

    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function() {
        var actions = [];
        each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
            }
        });
        return cleanTouchActions(actions.join(' '));
    },

    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function(input) {
        var srcEvent = input.srcEvent;
        var direction = input.offsetDirection;

        // if the touch action did prevented once this session
        if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
        }

        var actions = this.actions;
        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

        if (hasNone) {
            //do not prevent defaults if this is a tap gesture

            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;

            if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
            }
        }

        if (hasPanX && hasPanY) {
            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
        }

        if (hasNone ||
            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
            (hasPanX && direction & DIRECTION_VERTICAL)) {
            return this.preventSrc(srcEvent);
        }
    },

    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function(srcEvent) {
        this.manager.session.prevented = true;
        srcEvent.preventDefault();
    }
};

/**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */
function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
        return TOUCH_ACTION_NONE;
    }

    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

    // if both pan-x and pan-y are set (different recognizers
    // for different directions, e.g. horizontal pan but vertical swipe?)
    // we need none (as otherwise with pan-x pan-y combined none of these
    // recognizers will work, since the browser would handle all panning
    if (hasPanX && hasPanY) {
        return TOUCH_ACTION_NONE;
    }

    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }

    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
        return TOUCH_ACTION_MANIPULATION;
    }

    return TOUCH_ACTION_AUTO;
}

function getTouchActionProps() {
    if (!NATIVE_TOUCH_ACTION) {
        return false;
    }
    var touchMap = {};
    var cssSupports = window.CSS && window.CSS.supports;
    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

        // If css.supports is not supported but there is native touch-action assume it supports
        // all values. This is the case for IE 10 and 11.
        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
    });
    return touchMap;
}

/**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */
var STATE_POSSIBLE = 1;
var STATE_BEGAN = 2;
var STATE_CHANGED = 4;
var STATE_ENDED = 8;
var STATE_RECOGNIZED = STATE_ENDED;
var STATE_CANCELLED = 16;
var STATE_FAILED = 32;

/**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */
function Recognizer(options) {
    this.options = assign({}, this.defaults, options || {});

    this.id = uniqueId();

    this.manager = null;

    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);

    this.state = STATE_POSSIBLE;

    this.simultaneous = {};
    this.requireFail = [];
}

Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},

    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function(options) {
        assign(this.options, options);

        // also update the touchAction, in case something changed about the directions/enabled state
        this.manager && this.manager.touchAction.update();
        return this;
    },

    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
            return this;
        }

        var simultaneous = this.simultaneous;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
        }
        return this;
    },

    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        delete this.simultaneous[otherRecognizer.id];
        return this;
    },

    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
            return this;
        }

        var requireFail = this.requireFail;
        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
        }
        return this;
    },

    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function(otherRecognizer) {
        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
            return this;
        }

        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
        var index = inArray(this.requireFail, otherRecognizer);
        if (index > -1) {
            this.requireFail.splice(index, 1);
        }
        return this;
    },

    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function() {
        return this.requireFail.length > 0;
    },

    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function(otherRecognizer) {
        return !!this.simultaneous[otherRecognizer.id];
    },

    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function(input) {
        var self = this;
        var state = this.state;

        function emit(event) {
            self.manager.emit(event, input);
        }

        // 'panstart' and 'panmove'
        if (state < STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }

        emit(self.options.event); // simple 'eventName' events

        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
            emit(input.additionalEvent);
        }

        // panend and pancancel
        if (state >= STATE_ENDED) {
            emit(self.options.event + stateStr(state));
        }
    },

    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function(input) {
        if (this.canEmit()) {
            return this.emit(input);
        }
        // it's failing anyway
        this.state = STATE_FAILED;
    },

    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function() {
        var i = 0;
        while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
            }
            i++;
        }
        return true;
    },

    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        // make a new copy of the inputData
        // so we can change the inputData without messing up the other recognizers
        var inputDataClone = assign({}, inputData);

        // is is enabled and allow recognizing?
        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
        }

        // reset when we've reached the end
        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
        }

        this.state = this.process(inputDataClone);

        // the recognizer has recognized a gesture
        // so trigger an event
        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
        }
    },

    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function(inputData) { }, // jshint ignore:line

    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function() { },

    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function() { }
};

/**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */
function stateStr(state) {
    if (state & STATE_CANCELLED) {
        return 'cancel';
    } else if (state & STATE_ENDED) {
        return 'end';
    } else if (state & STATE_CHANGED) {
        return 'move';
    } else if (state & STATE_BEGAN) {
        return 'start';
    }
    return '';
}

/**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */
function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
        return 'down';
    } else if (direction == DIRECTION_UP) {
        return 'up';
    } else if (direction == DIRECTION_LEFT) {
        return 'left';
    } else if (direction == DIRECTION_RIGHT) {
        return 'right';
    }
    return '';
}

/**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */
function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
        return manager.get(otherRecognizer);
    }
    return otherRecognizer;
}

/**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
function AttrRecognizer() {
    Recognizer.apply(this, arguments);
}

inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
        /**
         * @type {Number}
         * @default 1
         */
        pointers: 1
    },

    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function(input) {
        var optionPointers = this.options.pointers;
        return optionPointers === 0 || input.pointers.length === optionPointers;
    },

    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function(input) {
        var state = this.state;
        var eventType = input.eventType;

        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attrTest(input);

        // on cancel input and we've recognized before, return STATE_CANCELLED
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
        }
        return STATE_FAILED;
    }
});

/**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);

    this.pX = null;
    this.pY = null;
}

inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
        event: 'pan',
        threshold: 10,
        pointers: 1,
        direction: DIRECTION_ALL
    },

    getTouchAction: function() {
        var direction = this.options.direction;
        var actions = [];
        if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
        }
        if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
        }
        return actions;
    },

    directionTest: function(input) {
        var options = this.options;
        var hasMoved = true;
        var distance = input.distance;
        var direction = input.direction;
        var x = input.deltaX;
        var y = input.deltaY;

        // lock to axis?
        if (!(direction & options.direction)) {
            if (options.direction & DIRECTION_HORIZONTAL) {
                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
            } else {
                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
            }
        }
        input.direction = direction;
        return hasMoved && distance > options.threshold && direction & options.direction;
    },

    attrTest: function(input) {
        return AttrRecognizer.prototype.attrTest.call(this, input) &&
            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
    },

    emit: function(input) {

        this.pX = input.deltaX;
        this.pY = input.deltaY;

        var direction = directionStr(input.direction);

        if (direction) {
            input.additionalEvent = this.options.event + direction;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'pinch',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },

    emit: function(input) {
        if (input.scale !== 1) {
            var inOut = input.scale < 1 ? 'in' : 'out';
            input.additionalEvent = this.options.event + inOut;
        }
        this._super.emit.call(this, input);
    }
});

/**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
function PressRecognizer() {
    Recognizer.apply(this, arguments);

    this._timer = null;
    this._input = null;
}

inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
        event: 'press',
        pointers: 1,
        time: 251, // minimal time of the pointer to be pressed
        threshold: 9 // a minimal movement is ok, but keep it low
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_AUTO];
    },

    process: function(input) {
        var options = this.options;
        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTime = input.deltaTime > options.time;

        this._input = input;

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, options.time, this);
        } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function(input) {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }

        if (input && (input.eventType & INPUT_END)) {
            this.manager.emit(this.options.event + 'up', input);
        } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */
function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
        event: 'rotate',
        threshold: 0,
        pointers: 2
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_NONE];
    },

    attrTest: function(input) {
        return this._super.attrTest.call(this, input) &&
            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
});

/**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
}

inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
        event: 'swipe',
        threshold: 10,
        velocity: 0.3,
        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
        pointers: 1
    },

    getTouchAction: function() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    },

    attrTest: function(input) {
        var direction = this.options.direction;
        var velocity;

        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
        } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
        } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
        }

        return this._super.attrTest.call(this, input) &&
            direction & input.offsetDirection &&
            input.distance > this.options.threshold &&
            input.maxPointers == this.options.pointers &&
            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },

    emit: function(input) {
        var direction = directionStr(input.offsetDirection);
        if (direction) {
            this.manager.emit(this.options.event + direction, input);
        }

        this.manager.emit(this.options.event, input);
    }
});

/**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */
function TapRecognizer() {
    Recognizer.apply(this, arguments);

    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;

    this._timer = null;
    this._input = null;
    this.count = 0;
}

inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
        event: 'tap',
        pointers: 1,
        taps: 1,
        interval: 300, // max time between the multi-tap taps
        time: 250, // max time of the pointer to be down (like finger on the screen)
        threshold: 9, // a minimal movement is ok, but keep it low
        posThreshold: 10 // a multi-tap can be a bit off the initial position
    },

    getTouchAction: function() {
        return [TOUCH_ACTION_MANIPULATION];
    },

    process: function(input) {
        var options = this.options;

        var validPointers = input.pointers.length === options.pointers;
        var validMovement = input.distance < options.threshold;
        var validTouchTime = input.deltaTime < options.time;

        this.reset();

        if ((input.eventType & INPUT_START) && (this.count === 0)) {
            return this.failTimeout();
        }

        // we only allow little movement
        // and we've reached an end event, so a tap is possible
        if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
                return this.failTimeout();
            }

            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

            this.pTime = input.timeStamp;
            this.pCenter = input.center;

            if (!validMultiTap || !validInterval) {
                this.count = 1;
            } else {
                this.count += 1;
            }

            this._input = input;

            // if tap count matches we have recognized it,
            // else it has began recognizing...
            var tapCount = this.count % options.taps;
            if (tapCount === 0) {
                // no failing requirements, immediately trigger the tap event
                // or wait as long as the multitap interval to trigger
                if (!this.hasRequireFailures()) {
                    return STATE_RECOGNIZED;
                } else {
                    this._timer = setTimeoutContext(function() {
                        this.state = STATE_RECOGNIZED;
                        this.tryEmit();
                    }, options.interval, this);
                    return STATE_BEGAN;
                }
            }
        }
        return STATE_FAILED;
    },

    failTimeout: function() {
        this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
        }, this.options.interval, this);
        return STATE_FAILED;
    },

    reset: function() {
        clearTimeout(this._timer);
    },

    emit: function() {
        if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
        }
    }
});

/**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
}

/**
 * @const {string}
 */
Hammer.VERSION = '2.0.7';

/**
 * default settings
 * @namespace
 */
Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,

    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,

    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,

    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,

    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,

    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
        [RotateRecognizer, {enable: false}],
        [PinchRecognizer, {enable: false}, ['rotate']],
        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
        [TapRecognizer],
        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
        [PressRecognizer]
    ],

    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
        /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userSelect: 'none',

        /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */
        touchSelect: 'none',

        /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */
        touchCallout: 'none',

        /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */
        contentZooming: 'none',

        /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */
        userDrag: 'none',

        /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */
        tapHighlightColor: 'rgba(0,0,0,0)'
    }
};

var STOP = 1;
var FORCED_STOP = 2;

/**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */
function Manager(element, options) {
    this.options = assign({}, Hammer.defaults, options || {});

    this.options.inputTarget = this.options.inputTarget || element;

    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};

    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);

    toggleCssProps(this, true);

    each(this.options.recognizers, function(item) {
        var recognizer = this.add(new (item[0])(item[1]));
        item[2] && recognizer.recognizeWith(item[2]);
        item[3] && recognizer.requireFailure(item[3]);
    }, this);
}

Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function(options) {
        assign(this.options, options);

        // Options that need a little more setup
        if (options.touchAction) {
            this.touchAction.update();
        }
        if (options.inputTarget) {
            // Clean up existing event listeners and reinitialize
            this.input.destroy();
            this.input.target = options.inputTarget;
            this.input.init();
        }
        return this;
    },

    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function(force) {
        this.session.stopped = force ? FORCED_STOP : STOP;
    },

    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function(inputData) {
        var session = this.session;
        if (session.stopped) {
            return;
        }

        // run the touch-action polyfill
        this.touchAction.preventDefaults(inputData);

        var recognizer;
        var recognizers = this.recognizers;

        // this holds the recognizer that is being recognized.
        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
        // if no recognizer is detecting a thing, it is set to `null`
        var curRecognizer = session.curRecognizer;

        // reset when the last recognizer is recognized
        // or when we're in a new session
        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
            curRecognizer = session.curRecognizer = null;
        }

        var i = 0;
        while (i < recognizers.length) {
            recognizer = recognizers[i];

            // find out if we are allowed try to recognize the input for this one.
            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
            //      that is being recognized.
            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
            //      this can be setup with the `recognizeWith()` method on the recognizer.
            if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                recognizer.recognize(inputData);
            } else {
                recognizer.reset();
            }

            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
            // current active recognizer. but only if we don't already have an active recognizer
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
        }
    },

    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function(recognizer) {
        if (recognizer instanceof Recognizer) {
            return recognizer;
        }

        var recognizers = this.recognizers;
        for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
            }
        }
        return null;
    },

    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function(recognizer) {
        if (invokeArrayArg(recognizer, 'add', this)) {
            return this;
        }

        // remove existing
        var existing = this.get(recognizer.options.event);
        if (existing) {
            this.remove(existing);
        }

        this.recognizers.push(recognizer);
        recognizer.manager = this;

        this.touchAction.update();
        return recognizer;
    },

    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function(recognizer) {
        if (invokeArrayArg(recognizer, 'remove', this)) {
            return this;
        }

        recognizer = this.get(recognizer);

        // let's make sure this recognizer exists
        if (recognizer) {
            var recognizers = this.recognizers;
            var index = inArray(recognizers, recognizer);

            if (index !== -1) {
                recognizers.splice(index, 1);
                this.touchAction.update();
            }
        }

        return this;
    },

    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function(events, handler) {
        if (events === undefined) {
            return;
        }
        if (handler === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            handlers[event] = handlers[event] || [];
            handlers[event].push(handler);
        });
        return this;
    },

    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function(events, handler) {
        if (events === undefined) {
            return;
        }

        var handlers = this.handlers;
        each(splitStr(events), function(event) {
            if (!handler) {
                delete handlers[event];
            } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            }
        });
        return this;
    },

    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function(event, data) {
        // we also want to trigger dom events
        if (this.options.domEvents) {
            triggerDomEvent(event, data);
        }

        // no handlers, so skip it all
        var handlers = this.handlers[event] && this.handlers[event].slice();
        if (!handlers || !handlers.length) {
            return;
        }

        data.type = event;
        data.preventDefault = function() {
            data.srcEvent.preventDefault();
        };

        var i = 0;
        while (i < handlers.length) {
            handlers[i](data);
            i++;
        }
    },

    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function() {
        this.element && toggleCssProps(this, false);

        this.handlers = {};
        this.session = {};
        this.input.destroy();
        this.element = null;
    }
};

/**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */
function toggleCssProps(manager, add) {
    var element = manager.element;
    if (!element.style) {
        return;
    }
    var prop;
    each(manager.options.cssProps, function(value, name) {
        prop = prefixed(element.style, name);
        if (add) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
        } else {
            element.style[prop] = manager.oldCssProps[prop] || '';
        }
    });
    if (!add) {
        manager.oldCssProps = {};
    }
}

/**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */
function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
}

assign(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,

    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,

    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,

    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,

    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,

    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,

    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    assign: assign,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
});

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.
var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
freeGlobal.Hammer = Hammer;

if (typeof define === 'function' && define.amd) {
    define(function() {
        return Hammer;
    });
} else if (typeof module != 'undefined' && module.exports) {
    module.exports = Hammer;
} else {
    window[exportName] = Hammer;
}

})(window, document, 'Hammer');

/*! VelocityJS.org (1.2.3). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */

/*************************
   Velocity jQuery Shim
*************************/

/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */

/* This file contains the jQuery functions that Velocity relies on, thereby removing Velocity's dependency on a full copy of jQuery, and allowing it to work in any environment. */
/* These shimmed functions are only used if jQuery isn't present. If both this shim and jQuery are loaded, Velocity defaults to jQuery proper. */
/* Browser support: Using this shim instead of jQuery proper removes support for IE8. */

;(function (window) {
    /***************
         Setup
    ***************/

    /* If jQuery is already loaded, there's no point in loading this shim. */
    if (window.jQuery) {
        return;
    }

    /* jQuery base. */
    var $ = function (selector, context) {
        return new $.fn.init(selector, context);
    };

    /********************
       Private Methods
    ********************/

    /* jQuery */
    $.isWindow = function (obj) {
        /* jshint eqeqeq: false */
        return obj != null && obj == obj.window;
    };

    /* jQuery */
    $.type = function (obj) {
        if (obj == null) {
            return obj + "";
        }

        return typeof obj === "object" || typeof obj === "function" ?
            class2type[toString.call(obj)] || "object" :
            typeof obj;
    };

    /* jQuery */
    $.isArray = Array.isArray || function (obj) {
        return $.type(obj) === "array";
    };

    /* jQuery */
    function isArraylike (obj) {
        var length = obj.length,
            type = $.type(obj);

        if (type === "function" || $.isWindow(obj)) {
            return false;
        }

        if (obj.nodeType === 1 && length) {
            return true;
        }

        return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
    }

    /***************
       $ Methods
    ***************/

    /* jQuery: Support removed for IE<9. */
    $.isPlainObject = function (obj) {
        var key;

        if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
            return false;
        }

        try {
            if (obj.constructor &&
                !hasOwn.call(obj, "constructor") &&
                !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }
        } catch (e) {
            return false;
        }

        for (key in obj) {}

        return key === undefined || hasOwn.call(obj, key);
    };

    /* jQuery */
    $.each = function(obj, callback, args) {
        var value,
            i = 0,
            length = obj.length,
            isArray = isArraylike(obj);

        if (args) {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.apply(obj[i], args);

                    if (value === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.apply(obj[i], args);

                    if (value === false) {
                        break;
                    }
                }
            }

        } else {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.call(obj[i], i, obj[i]);

                    if (value === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.call(obj[i], i, obj[i]);

                    if (value === false) {
                        break;
                    }
                }
            }
        }

        return obj;
    };

    /* Custom */
    $.data = function (node, key, value) {
        /* $.getData() */
        if (value === undefined) {
            var id = node[$.expando],
                store = id && cache[id];

            if (key === undefined) {
                return store;
            } else if (store) {
                if (key in store) {
                    return store[key];
                }
            }
        /* $.setData() */
        } else if (key !== undefined) {
            var id = node[$.expando] || (node[$.expando] = ++$.uuid);

            cache[id] = cache[id] || {};
            cache[id][key] = value;

            return value;
        }
    };

    /* Custom */
    $.removeData = function (node, keys) {
        var id = node[$.expando],
            store = id && cache[id];

        if (store) {
            $.each(keys, function(_, key) {
                delete store[key];
            });
        }
    };

    /* jQuery */
    $.extend = function () {
        var src, copyIsArray, copy, name, options, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        if (typeof target === "boolean") {
            deep = target;

            target = arguments[i] || {};
            i++;
        }

        if (typeof target !== "object" && $.type(target) !== "function") {
            target = {};
        }

        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    if (target === copy) {
                        continue;
                    }

                    if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && $.isArray(src) ? src : [];

                        } else {
                            clone = src && $.isPlainObject(src) ? src : {};
                        }

                        target[name] = $.extend(deep, clone, copy);

                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        return target;
    };

    /* jQuery 1.4.3 */
    $.queue = function (elem, type, data) {
        function $makeArray (arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    /* $.merge */
                    (function(first, second) {
                        var len = +second.length,
                            j = 0,
                            i = first.length;

                        while (j < len) {
                            first[i++] = second[j++];
                        }

                        if (len !== len) {
                            while (second[j] !== undefined) {
                                first[i++] = second[j++];
                            }
                        }

                        first.length = i;

                        return first;
                    })(ret, typeof arr === "string" ? [arr] : arr);
                } else {
                    [].push.call(ret, arr);
                }
            }

            return ret;
        }

        if (!elem) {
            return;
        }

        type = (type || "fx") + "queue";

        var q = $.data(elem, type);

        if (!data) {
            return q || [];
        }

        if (!q || $.isArray(data)) {
            q = $.data(elem, type, $makeArray(data));
        } else {
            q.push(data);
        }

        return q;
    };

    /* jQuery 1.4.3 */
    $.dequeue = function (elems, type) {
        /* Custom: Embed element iteration. */
        $.each(elems.nodeType ? [ elems ] : elems, function(i, elem) {
            type = type || "fx";

            var queue = $.queue(elem, type),
                fn = queue.shift();

            if (fn === "inprogress") {
                fn = queue.shift();
            }

            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                fn.call(elem, function() {
                    $.dequeue(elem, type);
                });
            }
        });
    };

    /******************
       $.fn Methods
    ******************/

    /* jQuery */
    $.fn = $.prototype = {
        init: function (selector) {
            /* Just return the element wrapped inside an array; don't proceed with the actual jQuery node wrapping process. */
            if (selector.nodeType) {
                this[0] = selector;

                return this;
            } else {
                throw new Error("Not a DOM node.");
            }
        },

        offset: function () {
            /* jQuery altered code: Dropped disconnected DOM node checking. */
            var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : { top: 0, left: 0 };

            return {
                top: box.top + (window.pageYOffset || document.scrollTop  || 0)  - (document.clientTop  || 0),
                left: box.left + (window.pageXOffset || document.scrollLeft  || 0) - (document.clientLeft || 0)
            };
        },

        position: function () {
            /* jQuery */
            function offsetParent() {
                var offsetParent = this.offsetParent || document;

                while (offsetParent && (!offsetParent.nodeType.toLowerCase === "html" && offsetParent.style.position === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || document;
            }

            /* Zepto */
            var elem = this[0],
                offsetParent = offsetParent.apply(elem),
                offset = this.offset(),
                parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? { top: 0, left: 0 } : $(offsetParent).offset()

            offset.top -= parseFloat(elem.style.marginTop) || 0;
            offset.left -= parseFloat(elem.style.marginLeft) || 0;

            if (offsetParent.style) {
                parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0
                parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0
            }

            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            };
        }
    };

    /**********************
       Private Variables
    **********************/

    /* For $.data() */
    var cache = {};
    $.expando = "velocity" + (new Date().getTime());
    $.uuid = 0;

    /* For $.queue() */
    var class2type = {},
        hasOwn = class2type.hasOwnProperty,
        toString = class2type.toString;

    var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
    for (var i = 0; i < types.length; i++) {
        class2type["[object " + types[i] + "]"] = types[i].toLowerCase();
    }

    /* Makes $(node) possible, without having to call init. */
    $.fn.init.prototype = $.fn;

    /* Globalize Velocity onto the window, and assign its Utilities property. */
    window.Velocity = { Utilities: $ };
})(window);

/******************
    Velocity.js
******************/

;(function (factory) {
    /* CommonJS module. */
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = factory();
    /* AMD module. */
    } else if (typeof define === "function" && define.amd) {
        define(factory);
    /* Browser globals. */
    } else {
        factory();
    }
}(function() {
return function (global, window, document, undefined) {

    /***************
        Summary
    ***************/

    /*
    - CSS: CSS stack that works independently from the rest of Velocity.
    - animate(): Core animation method that iterates over the targeted elements and queues the incoming call onto each element individually.
      - Pre-Queueing: Prepare the element for animation by instantiating its data cache and processing the call's options.
      - Queueing: The logic that runs once the call has reached its point of execution in the element's $.queue() stack.
                  Most logic is placed here to avoid risking it becoming stale (if the element's properties have changed).
      - Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
    - tick(): The single requestAnimationFrame loop responsible for tweening all in-progress calls.
    - completeCall(): Handles the cleanup process for each Velocity call.
    */

    /*********************
       Helper Functions
    *********************/

    /* IE detection. Gist: https://gist.github.com/julianshapiro/9098609 */
    var IE = (function() {
        if (document.documentMode) {
            return document.documentMode;
        } else {
            for (var i = 7; i > 4; i--) {
                var div = document.createElement("div");

                div.innerHTML = "<!--[if IE " + i + "]><span></span><![endif]-->";

                if (div.getElementsByTagName("span").length) {
                    div = null;

                    return i;
                }
            }
        }

        return undefined;
    })();

    /* rAF shim. Gist: https://gist.github.com/julianshapiro/9497513 */
    var rAFShim = (function() {
        var timeLast = 0;

        return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
            var timeCurrent = (new Date()).getTime(),
                timeDelta;

            /* Dynamically set delay on a per-tick basis to match 60fps. */
            /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
            timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
            timeLast = timeCurrent + timeDelta;

            return setTimeout(function() { callback(timeCurrent + timeDelta); }, timeDelta);
        };
    })();

    /* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
    function compactSparseArray (array) {
        var index = -1,
            length = array ? array.length : 0,
            result = [];

        while (++index < length) {
            var value = array[index];

            if (value) {
                result.push(value);
            }
        }

        return result;
    }

    function sanitizeElements (elements) {
        /* Unwrap jQuery/Zepto objects. */
        if (Type.isWrapped(elements)) {
            elements = [].slice.call(elements);
        /* Wrap a single element in an array so that $.each() can iterate with the element instead of its node's children. */
        } else if (Type.isNode(elements)) {
            elements = [ elements ];
        }

        return elements;
    }

    var Type = {
        isString: function (variable) {
            return (typeof variable === "string");
        },
        isArray: Array.isArray || function (variable) {
            return Object.prototype.toString.call(variable) === "[object Array]";
        },
        isFunction: function (variable) {
            return Object.prototype.toString.call(variable) === "[object Function]";
        },
        isNode: function (variable) {
            return variable && variable.nodeType;
        },
        /* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
        isNodeList: function (variable) {
            return typeof variable === "object" &&
                /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(variable)) &&
                variable.length !== undefined &&
                (variable.length === 0 || (typeof variable[0] === "object" && variable[0].nodeType > 0));
        },
        /* Determine if variable is a wrapped jQuery or Zepto element. */
        isWrapped: function (variable) {
            return variable && (variable.jquery || (window.Zepto && window.Zepto.zepto.isZ(variable)));
        },
        isSVG: function (variable) {
            return window.SVGElement && (variable instanceof window.SVGElement);
        },
        isEmptyObject: function (variable) {
            for (var name in variable) {
                return false;
            }

            return true;
        }
    };

    /*****************
       Dependencies
    *****************/

    var $,
        isJQuery = false;

    if (global.fn && global.fn.jquery) {
        $ = global;
        isJQuery = true;
    } else {
        $ = window.Velocity.Utilities;
    }

    if (IE <= 8 && !isJQuery) {
        throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");
    } else if (IE <= 7) {
        /* Revert to jQuery's $.animate(), and lose Velocity's extra features. */
        jQuery.fn.velocity = jQuery.fn.animate;

        /* Now that $.fn.velocity is aliased, abort this Velocity declaration. */
        return;
    }

    /*****************
        Constants
    *****************/

    var DURATION_DEFAULT = 400,
        EASING_DEFAULT = "swing";

    /*************
        State
    *************/

    var Velocity = {
        /* Container for page-wide Velocity state data. */
        State: {
            /* Detect mobile devices to determine if mobileHA should be turned on. */
            isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
            /* The mobileHA option's behavior changes on older Android devices (Gingerbread, versions 2.3.3-2.3.7). */
            isAndroid: /Android/i.test(navigator.userAgent),
            isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
            isChrome: window.chrome,
            isFirefox: /Firefox/i.test(navigator.userAgent),
            /* Create a cached element for re-use when checking for CSS property prefixes. */
            prefixElement: document.createElement("div"),
            /* Cache every prefix match to avoid repeating lookups. */
            prefixMatches: {},
            /* Cache the anchor used for animating window scrolling. */
            scrollAnchor: null,
            /* Cache the browser-specific property names associated with the scroll anchor. */
            scrollPropertyLeft: null,
            scrollPropertyTop: null,
            /* Keep track of whether our RAF tick is running. */
            isTicking: false,
            /* Container for every in-progress call to Velocity. */
            calls: []
        },
        /* Velocity's custom CSS stack. Made global for unit testing. */
        CSS: { /* Defined below. */ },
        /* A shim of the jQuery utility functions used by Velocity -- provided by Velocity's optional jQuery shim. */
        Utilities: $,
        /* Container for the user's custom animation redirects that are referenced by name in place of the properties map argument. */
        Redirects: { /* Manually registered by the user. */ },
        Easings: { /* Defined below. */ },
        /* Attempt to use ES6 Promises by default. Users can override this with a third-party promises library. */
        Promise: window.Promise,
        /* Velocity option defaults, which can be overriden by the user. */
        defaults: {
            queue: "",
            duration: DURATION_DEFAULT,
            easing: EASING_DEFAULT,
            begin: undefined,
            complete: undefined,
            progress: undefined,
            display: undefined,
            visibility: undefined,
            loop: false,
            delay: false,
            mobileHA: true,
            /* Advanced: Set to false to prevent property values from being cached between consecutive Velocity-initiated chain calls. */
            _cacheValues: true
        },
        /* A design goal of Velocity is to cache data wherever possible in order to avoid DOM requerying. Accordingly, each element has a data cache. */
        init: function (element) {
            $.data(element, "velocity", {
                /* Store whether this is an SVG element, since its properties are retrieved and updated differently than standard HTML elements. */
                isSVG: Type.isSVG(element),
                /* Keep track of whether the element is currently being animated by Velocity.
                   This is used to ensure that property values are not transferred between non-consecutive (stale) calls. */
                isAnimating: false,
                /* A reference to the element's live computedStyle object. Learn more here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
                computedStyle: null,
                /* Tween data is cached for each animation on the element so that data can be passed across calls --
                   in particular, end values are used as subsequent start values in consecutive Velocity calls. */
                tweensContainer: null,
                /* The full root property values of each CSS hook being animated on this element are cached so that:
                   1) Concurrently-animating hooks sharing the same root can have their root values' merged into one while tweening.
                   2) Post-hook-injection root values can be transferred over to consecutively chained Velocity calls as starting root values. */
                rootPropertyValueCache: {},
                /* A cache for transform updates, which must be manually flushed via CSS.flushTransformCache(). */
                transformCache: {}
            });
        },
        /* A parallel to jQuery's $.css(), used for getting/setting Velocity's hooked CSS properties. */
        hook: null, /* Defined below. */
        /* Velocity-wide animation time remapping for testing purposes. */
        mock: false,
        version: { major: 1, minor: 2, patch: 2 },
        /* Set to 1 or 2 (most verbose) to output debug info to console. */
        debug: false
    };

    /* Retrieve the appropriate scroll anchor and property name for the browser: https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY */
    if (window.pageYOffset !== undefined) {
        Velocity.State.scrollAnchor = window;
        Velocity.State.scrollPropertyLeft = "pageXOffset";
        Velocity.State.scrollPropertyTop = "pageYOffset";
    } else {
        Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
        Velocity.State.scrollPropertyLeft = "scrollLeft";
        Velocity.State.scrollPropertyTop = "scrollTop";
    }

    /* Shorthand alias for jQuery's $.data() utility. */
    function Data (element) {
        /* Hardcode a reference to the plugin name. */
        var response = $.data(element, "velocity");

        /* jQuery <=1.4.2 returns null instead of undefined when no match is found. We normalize this behavior. */
        return response === null ? undefined : response;
    };

    /**************
        Easing
    **************/

    /* Step easing generator. */
    function generateStep (steps) {
        return function (p) {
            return Math.round(p * steps) * (1 / steps);
        };
    }

    /* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    function generateBezier (mX1, mY1, mX2, mY2) {
        var NEWTON_ITERATIONS = 4,
            NEWTON_MIN_SLOPE = 0.001,
            SUBDIVISION_PRECISION = 0.0000001,
            SUBDIVISION_MAX_ITERATIONS = 10,
            kSplineTableSize = 11,
            kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
            float32ArraySupported = "Float32Array" in window;

        /* Must contain four arguments. */
        if (arguments.length !== 4) {
            return false;
        }

        /* Arguments must be numbers. */
        for (var i = 0; i < 4; ++i) {
            if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
                return false;
            }
        }

        /* X values must be in the [0, 1] range. */
        mX1 = Math.min(mX1, 1);
        mX2 = Math.min(mX2, 1);
        mX1 = Math.max(mX1, 0);
        mX2 = Math.max(mX2, 0);

        var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

        function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
        function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
        function C (aA1)      { return 3.0 * aA1; }

        function calcBezier (aT, aA1, aA2) {
            return ((A(aA1, aA2)*aT + B(aA1, aA2))*aT + C(aA1))*aT;
        }

        function getSlope (aT, aA1, aA2) {
            return 3.0 * A(aA1, aA2)*aT*aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
        }

        function newtonRaphsonIterate (aX, aGuessT) {
            for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                var currentSlope = getSlope(aGuessT, mX1, mX2);

                if (currentSlope === 0.0) return aGuessT;

                var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                aGuessT -= currentX / currentSlope;
            }

            return aGuessT;
        }

        function calcSampleValues () {
            for (var i = 0; i < kSplineTableSize; ++i) {
                mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
            }
        }

        function binarySubdivide (aX, aA, aB) {
            var currentX, currentT, i = 0;

            do {
                currentT = aA + (aB - aA) / 2.0;
                currentX = calcBezier(currentT, mX1, mX2) - aX;
                if (currentX > 0.0) {
                  aB = currentT;
                } else {
                  aA = currentT;
                }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

            return currentT;
        }

        function getTForX (aX) {
            var intervalStart = 0.0,
                currentSample = 1,
                lastSample = kSplineTableSize - 1;

            for (; currentSample != lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                intervalStart += kSampleStepSize;
            }

            --currentSample;

            var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample+1] - mSampleValues[currentSample]),
                guessForT = intervalStart + dist * kSampleStepSize,
                initialSlope = getSlope(guessForT, mX1, mX2);

            if (initialSlope >= NEWTON_MIN_SLOPE) {
                return newtonRaphsonIterate(aX, guessForT);
            } else if (initialSlope == 0.0) {
                return guessForT;
            } else {
                return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
            }
        }

        var _precomputed = false;

        function precompute() {
            _precomputed = true;
            if (mX1 != mY1 || mX2 != mY2) calcSampleValues();
        }

        var f = function (aX) {
            if (!_precomputed) precompute();
            if (mX1 === mY1 && mX2 === mY2) return aX;
            if (aX === 0) return 0;
            if (aX === 1) return 1;

            return calcBezier(getTForX(aX), mY1, mY2);
        };

        f.getControlPoints = function() { return [{ x: mX1, y: mY1 }, { x: mX2, y: mY2 }]; };

        var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
        f.toString = function () { return str; };

        return f;
    }

    /* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
    /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
    var generateSpringRK4 = (function () {
        function springAccelerationForState (state) {
            return (-state.tension * state.x) - (state.friction * state.v);
        }

        function springEvaluateStateWithDerivative (initialState, dt, derivative) {
            var state = {
                x: initialState.x + derivative.dx * dt,
                v: initialState.v + derivative.dv * dt,
                tension: initialState.tension,
                friction: initialState.friction
            };

            return { dx: state.v, dv: springAccelerationForState(state) };
        }

        function springIntegrateState (state, dt) {
            var a = {
                    dx: state.v,
                    dv: springAccelerationForState(state)
                },
                b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
                c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
                d = springEvaluateStateWithDerivative(state, dt, c),
                dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
                dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

            state.x = state.x + dxdt * dt;
            state.v = state.v + dvdt * dt;

            return state;
        }

        return function springRK4Factory (tension, friction, duration) {

            var initState = {
                    x: -1,
                    v: 0,
                    tension: null,
                    friction: null
                },
                path = [0],
                time_lapsed = 0,
                tolerance = 1 / 10000,
                DT = 16 / 1000,
                have_duration, dt, last_state;

            tension = parseFloat(tension) || 500;
            friction = parseFloat(friction) || 20;
            duration = duration || null;

            initState.tension = tension;
            initState.friction = friction;

            have_duration = duration !== null;

            /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
            if (have_duration) {
                /* Run the simulation without a duration. */
                time_lapsed = springRK4Factory(tension, friction);
                /* Compute the adjusted time delta. */
                dt = time_lapsed / duration * DT;
            } else {
                dt = DT;
            }

            while (true) {
                /* Next/step function .*/
                last_state = springIntegrateState(last_state || initState, dt);
                /* Store the position. */
                path.push(1 + last_state.x);
                time_lapsed += 16;
                /* If the change threshold is reached, break. */
                if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
                    break;
                }
            }

            /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
               computed path and returns a snapshot of the position according to a given percentComplete. */
            return !have_duration ? time_lapsed : function(percentComplete) { return path[ (percentComplete * (path.length - 1)) | 0 ]; };
        };
    }());

    /* jQuery easings. */
    Velocity.Easings = {
        linear: function(p) { return p; },
        swing: function(p) { return 0.5 - Math.cos( p * Math.PI ) / 2 },
        /* Bonus "spring" easing, which is a less exaggerated version of easeInOutElastic. */
        spring: function(p) { return 1 - (Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6)); }
    };

    /* CSS3 and Robert Penner easings. */
    $.each(
        [
            [ "ease", [ 0.25, 0.1, 0.25, 1.0 ] ],
            [ "ease-in", [ 0.42, 0.0, 1.00, 1.0 ] ],
            [ "ease-out", [ 0.00, 0.0, 0.58, 1.0 ] ],
            [ "ease-in-out", [ 0.42, 0.0, 0.58, 1.0 ] ],
            [ "easeInSine", [ 0.47, 0, 0.745, 0.715 ] ],
            [ "easeOutSine", [ 0.39, 0.575, 0.565, 1 ] ],
            [ "easeInOutSine", [ 0.445, 0.05, 0.55, 0.95 ] ],
            [ "easeInQuad", [ 0.55, 0.085, 0.68, 0.53 ] ],
            [ "easeOutQuad", [ 0.25, 0.46, 0.45, 0.94 ] ],
            [ "easeInOutQuad", [ 0.455, 0.03, 0.515, 0.955 ] ],
            [ "easeInCubic", [ 0.55, 0.055, 0.675, 0.19 ] ],
            [ "easeOutCubic", [ 0.215, 0.61, 0.355, 1 ] ],
            [ "easeInOutCubic", [ 0.645, 0.045, 0.355, 1 ] ],
            [ "easeInQuart", [ 0.895, 0.03, 0.685, 0.22 ] ],
            [ "easeOutQuart", [ 0.165, 0.84, 0.44, 1 ] ],
            [ "easeInOutQuart", [ 0.77, 0, 0.175, 1 ] ],
            [ "easeInQuint", [ 0.755, 0.05, 0.855, 0.06 ] ],
            [ "easeOutQuint", [ 0.23, 1, 0.32, 1 ] ],
            [ "easeInOutQuint", [ 0.86, 0, 0.07, 1 ] ],
            [ "easeInExpo", [ 0.95, 0.05, 0.795, 0.035 ] ],
            [ "easeOutExpo", [ 0.19, 1, 0.22, 1 ] ],
            [ "easeInOutExpo", [ 1, 0, 0, 1 ] ],
            [ "easeInCirc", [ 0.6, 0.04, 0.98, 0.335 ] ],
            [ "easeOutCirc", [ 0.075, 0.82, 0.165, 1 ] ],
            [ "easeInOutCirc", [ 0.785, 0.135, 0.15, 0.86 ] ]
        ], function(i, easingArray) {
            Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1]);
        });

    /* Determine the appropriate easing type given an easing input. */
    function getEasing(value, duration) {
        var easing = value;

        /* The easing option can either be a string that references a pre-registered easing,
           or it can be a two-/four-item array of integers to be converted into a bezier/spring function. */
        if (Type.isString(value)) {
            /* Ensure that the easing has been assigned to jQuery's Velocity.Easings object. */
            if (!Velocity.Easings[value]) {
                easing = false;
            }
        } else if (Type.isArray(value) && value.length === 1) {
            easing = generateStep.apply(null, value);
        } else if (Type.isArray(value) && value.length === 2) {
            /* springRK4 must be passed the animation's duration. */
            /* Note: If the springRK4 array contains non-numbers, generateSpringRK4() returns an easing
               function generated with default tension and friction values. */
            easing = generateSpringRK4.apply(null, value.concat([ duration ]));
        } else if (Type.isArray(value) && value.length === 4) {
            /* Note: If the bezier array contains non-numbers, generateBezier() returns false. */
            easing = generateBezier.apply(null, value);
        } else {
            easing = false;
        }

        /* Revert to the Velocity-wide default easing type, or fall back to "swing" (which is also jQuery's default)
           if the Velocity-wide default has been incorrectly modified. */
        if (easing === false) {
            if (Velocity.Easings[Velocity.defaults.easing]) {
                easing = Velocity.defaults.easing;
            } else {
                easing = EASING_DEFAULT;
            }
        }

        return easing;
    }

    /*****************
        CSS Stack
    *****************/

    /* The CSS object is a highly condensed and performant CSS stack that fully replaces jQuery's.
       It handles the validation, getting, and setting of both standard CSS properties and CSS property hooks. */
    /* Note: A "CSS" shorthand is aliased so that our code is easier to read. */
    var CSS = Velocity.CSS = {

        /*************
            RegEx
        *************/

        RegEx: {
            isHex: /^#([A-f\d]{3}){1,2}$/i,
            /* Unwrap a property value's surrounding text, e.g. "rgba(4, 3, 2, 1)" ==> "4, 3, 2, 1" and "rect(4px 3px 2px 1px)" ==> "4px 3px 2px 1px". */
            valueUnwrap: /^[A-z]+\((.*)\)$/i,
            wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
            /* Split a multi-value property into an array of subvalues, e.g. "rgba(4, 3, 2, 1) 4px 3px 2px 1px" ==> [ "rgba(4, 3, 2, 1)", "4px", "3px", "2px", "1px" ]. */
            valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/ig
        },

        /************
            Lists
        ************/

        Lists: {
            colors: [ "fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor" ],
            transformsBase: [ "translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ" ],
            transforms3D: [ "transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY" ]
        },

        /************
            Hooks
        ************/

        /* Hooks allow a subproperty (e.g. "boxShadowBlur") of a compound-value CSS property
           (e.g. "boxShadow: X Y Blur Spread Color") to be animated as if it were a discrete property. */
        /* Note: Beyond enabling fine-grained property animation, hooking is necessary since Velocity only
           tweens properties with single numeric values; unlike CSS transitions, Velocity does not interpolate compound-values. */
        Hooks: {
            /********************
                Registration
            ********************/

            /* Templates are a concise way of indicating which subproperties must be individually registered for each compound-value CSS property. */
            /* Each template consists of the compound-value's base name, its constituent subproperty names, and those subproperties' default values. */
            templates: {
                "textShadow": [ "Color X Y Blur", "black 0px 0px 0px" ],
                "boxShadow": [ "Color X Y Blur Spread", "black 0px 0px 0px 0px" ],
                "clip": [ "Top Right Bottom Left", "0px 0px 0px 0px" ],
                "backgroundPosition": [ "X Y", "0% 0%" ],
                "transformOrigin": [ "X Y Z", "50% 50% 0px" ],
                "perspectiveOrigin": [ "X Y", "50% 50%" ]
            },

            /* A "registered" hook is one that has been converted from its template form into a live,
               tweenable property. It contains data to associate it with its root property. */
            registered: {
                /* Note: A registered hook looks like this ==> textShadowBlur: [ "textShadow", 3 ],
                   which consists of the subproperty's name, the associated root property's name,
                   and the subproperty's position in the root's value. */
            },
            /* Convert the templates into individual hooks then append them to the registered object above. */
            register: function () {
                /* Color hooks registration: Colors are defaulted to white -- as opposed to black -- since colors that are
                   currently set to "transparent" default to their respective template below when color-animated,
                   and white is typically a closer match to transparent than black is. An exception is made for text ("color"),
                   which is almost always set closer to black than white. */
                for (var i = 0; i < CSS.Lists.colors.length; i++) {
                    var rgbComponents = (CSS.Lists.colors[i] === "color") ? "0 0 0 1" : "255 255 255 1";
                    CSS.Hooks.templates[CSS.Lists.colors[i]] = [ "Red Green Blue Alpha", rgbComponents ];
                }

                var rootProperty,
                    hookTemplate,
                    hookNames;

                /* In IE, color values inside compound-value properties are positioned at the end the value instead of at the beginning.
                   Thus, we re-arrange the templates accordingly. */
                if (IE) {
                    for (rootProperty in CSS.Hooks.templates) {
                        hookTemplate = CSS.Hooks.templates[rootProperty];
                        hookNames = hookTemplate[0].split(" ");

                        var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);

                        if (hookNames[0] === "Color") {
                            /* Reposition both the hook's name and its default value to the end of their respective strings. */
                            hookNames.push(hookNames.shift());
                            defaultValues.push(defaultValues.shift());

                            /* Replace the existing template for the hook's root property. */
                            CSS.Hooks.templates[rootProperty] = [ hookNames.join(" "), defaultValues.join(" ") ];
                        }
                    }
                }

                /* Hook registration. */
                for (rootProperty in CSS.Hooks.templates) {
                    hookTemplate = CSS.Hooks.templates[rootProperty];
                    hookNames = hookTemplate[0].split(" ");

                    for (var i in hookNames) {
                        var fullHookName = rootProperty + hookNames[i],
                            hookPosition = i;

                        /* For each hook, register its full name (e.g. textShadowBlur) with its root property (e.g. textShadow)
                           and the hook's position in its template's default value string. */
                        CSS.Hooks.registered[fullHookName] = [ rootProperty, hookPosition ];
                    }
                }
            },

            /*****************************
               Injection and Extraction
            *****************************/

            /* Look up the root property associated with the hook (e.g. return "textShadow" for "textShadowBlur"). */
            /* Since a hook cannot be set directly (the browser won't recognize it), style updating for hooks is routed through the hook's root property. */
            getRoot: function (property) {
                var hookData = CSS.Hooks.registered[property];

                if (hookData) {
                    return hookData[0];
                } else {
                    /* If there was no hook match, return the property name untouched. */
                    return property;
                }
            },
            /* Convert any rootPropertyValue, null or otherwise, into a space-delimited list of hook values so that
               the targeted hook can be injected or extracted at its standard position. */
            cleanRootPropertyValue: function(rootProperty, rootPropertyValue) {
                /* If the rootPropertyValue is wrapped with "rgb()", "clip()", etc., remove the wrapping to normalize the value before manipulation. */
                if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
                    rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1];
                }

                /* If rootPropertyValue is a CSS null-value (from which there's inherently no hook value to extract),
                   default to the root's default value as defined in CSS.Hooks.templates. */
                /* Note: CSS null-values include "none", "auto", and "transparent". They must be converted into their
                   zero-values (e.g. textShadow: "none" ==> textShadow: "0px 0px 0px black") for hook manipulation to proceed. */
                if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
                    rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
                }

                return rootPropertyValue;
            },
            /* Extracted the hook's value from its root property's value. This is used to get the starting value of an animating hook. */
            extractValue: function (fullHookName, rootPropertyValue) {
                var hookData = CSS.Hooks.registered[fullHookName];

                if (hookData) {
                    var hookRoot = hookData[0],
                        hookPosition = hookData[1];

                    rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

                    /* Split rootPropertyValue into its constituent hook values then grab the desired hook at its standard position. */
                    return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition];
                } else {
                    /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                    return rootPropertyValue;
                }
            },
            /* Inject the hook's value into its root property's value. This is used to piece back together the root property
               once Velocity has updated one of its individually hooked values through tweening. */
            injectValue: function (fullHookName, hookValue, rootPropertyValue) {
                var hookData = CSS.Hooks.registered[fullHookName];

                if (hookData) {
                    var hookRoot = hookData[0],
                        hookPosition = hookData[1],
                        rootPropertyValueParts,
                        rootPropertyValueUpdated;

                    rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);

                    /* Split rootPropertyValue into its individual hook values, replace the targeted value with hookValue,
                       then reconstruct the rootPropertyValue string. */
                    rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
                    rootPropertyValueParts[hookPosition] = hookValue;
                    rootPropertyValueUpdated = rootPropertyValueParts.join(" ");

                    return rootPropertyValueUpdated;
                } else {
                    /* If the provided fullHookName isn't a registered hook, return the rootPropertyValue that was passed in. */
                    return rootPropertyValue;
                }
            }
        },

        /*******************
           Normalizations
        *******************/

        /* Normalizations standardize CSS property manipulation by pollyfilling browser-specific implementations (e.g. opacity)
           and reformatting special properties (e.g. clip, rgba) to look like standard ones. */
        Normalizations: {
            /* Normalizations are passed a normalization target (either the property's name, its extracted value, or its injected value),
               the targeted element (which may need to be queried), and the targeted property value. */
            registered: {
                clip: function (type, element, propertyValue) {
                    switch (type) {
                        case "name":
                            return "clip";
                        /* Clip needs to be unwrapped and stripped of its commas during extraction. */
                        case "extract":
                            var extracted;

                            /* If Velocity also extracted this value, skip extraction. */
                            if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                extracted = propertyValue;
                            } else {
                                /* Remove the "rect()" wrapper. */
                                extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);

                                /* Strip off commas. */
                                extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue;
                            }

                            return extracted;
                        /* Clip needs to be re-wrapped during injection. */
                        case "inject":
                            return "rect(" + propertyValue + ")";
                    }
                },

                blur: function(type, element, propertyValue) {
                    switch (type) {
                        case "name":
                            return Velocity.State.isFirefox ? "filter" : "-webkit-filter";
                        case "extract":
                            var extracted = parseFloat(propertyValue);

                            /* If extracted is NaN, meaning the value isn't already extracted. */
                            if (!(extracted || extracted === 0)) {
                                var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);

                                /* If the filter string had a blur component, return just the blur value and unit type. */
                                if (blurComponent) {
                                    extracted = blurComponent[1];
                                /* If the component doesn't exist, default blur to 0. */
                                } else {
                                    extracted = 0;
                                }
                            }

                            return extracted;
                        /* Blur needs to be re-wrapped during injection. */
                        case "inject":
                            /* For the blur effect to be fully de-applied, it needs to be set to "none" instead of 0. */
                            if (!parseFloat(propertyValue)) {
                                return "none";
                            } else {
                                return "blur(" + propertyValue + ")";
                            }
                    }
                },

                /* <=IE8 do not support the standard opacity property. They use filter:alpha(opacity=INT) instead. */
                opacity: function (type, element, propertyValue) {
                    if (IE <= 8) {
                        switch (type) {
                            case "name":
                                return "filter";
                            case "extract":
                                /* <=IE8 return a "filter" value of "alpha(opacity=\d{1,3})".
                                   Extract the value and convert it to a decimal value to match the standard CSS opacity property's formatting. */
                                var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);

                                if (extracted) {
                                    /* Convert to decimal value. */
                                    propertyValue = extracted[1] / 100;
                                } else {
                                    /* When extracting opacity, default to 1 since a null value means opacity hasn't been set. */
                                    propertyValue = 1;
                                }

                                return propertyValue;
                            case "inject":
                                /* Opacified elements are required to have their zoom property set to a non-zero value. */
                                element.style.zoom = 1;

                                /* Setting the filter property on elements with certain font property combinations can result in a
                                   highly unappealing ultra-bolding effect. There's no way to remedy this throughout a tween, but dropping the
                                   value altogether (when opacity hits 1) at leasts ensures that the glitch is gone post-tweening. */
                                if (parseFloat(propertyValue) >= 1) {
                                    return "";
                                } else {
                                  /* As per the filter property's spec, convert the decimal value to a whole number and wrap the value. */
                                  return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")";
                                }
                        }
                    /* With all other browsers, normalization is not required; return the same values that were passed in. */
                    } else {
                        switch (type) {
                            case "name":
                                return "opacity";
                            case "extract":
                                return propertyValue;
                            case "inject":
                                return propertyValue;
                        }
                    }
                }
            },

            /*****************************
                Batched Registrations
            *****************************/

            /* Note: Batched normalizations extend the CSS.Normalizations.registered object. */
            register: function () {

                /*****************
                    Transforms
                *****************/

                /* Transforms are the subproperties contained by the CSS "transform" property. Transforms must undergo normalization
                   so that they can be referenced in a properties map by their individual names. */
                /* Note: When transforms are "set", they are actually assigned to a per-element transformCache. When all transform
                   setting is complete complete, CSS.flushTransformCache() must be manually called to flush the values to the DOM.
                   Transform setting is batched in this way to improve performance: the transform style only needs to be updated
                   once when multiple transform subproperties are being animated simultaneously. */
                /* Note: IE9 and Android Gingerbread have support for 2D -- but not 3D -- transforms. Since animating unsupported
                   transform properties results in the browser ignoring the *entire* transform string, we prevent these 3D values
                   from being normalized for these browsers so that tweening skips these properties altogether
                   (since it will ignore them as being unsupported by the browser.) */
                if (!(IE <= 9) && !Velocity.State.isGingerbread) {
                    /* Note: Since the standalone CSS "perspective" property and the CSS transform "perspective" subproperty
                    share the same name, the latter is given a unique token within Velocity: "transformPerspective". */
                    CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D);
                }

                for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
                    /* Wrap the dynamically generated normalization function in a new scope so that transformName's value is
                    paired with its respective function. (Otherwise, all functions would take the final for loop's transformName.) */
                    (function() {
                        var transformName = CSS.Lists.transformsBase[i];

                        CSS.Normalizations.registered[transformName] = function (type, element, propertyValue) {
                            switch (type) {
                                /* The normalized property name is the parent "transform" property -- the property that is actually set in CSS. */
                                case "name":
                                    return "transform";
                                /* Transform values are cached onto a per-element transformCache object. */
                                case "extract":
                                    /* If this transform has yet to be assigned a value, return its null value. */
                                    if (Data(element) === undefined || Data(element).transformCache[transformName] === undefined) {
                                        /* Scale CSS.Lists.transformsBase default to 1 whereas all other transform properties default to 0. */
                                        return /^scale/i.test(transformName) ? 1 : 0;
                                    /* When transform values are set, they are wrapped in parentheses as per the CSS spec.
                                       Thus, when extracting their values (for tween calculations), we strip off the parentheses. */
                                    } else {
                                        return Data(element).transformCache[transformName].replace(/[()]/g, "");
                                    }
                                case "inject":
                                    var invalid = false;

                                    /* If an individual transform property contains an unsupported unit type, the browser ignores the *entire* transform property.
                                       Thus, protect users from themselves by skipping setting for transform values supplied with invalid unit types. */
                                    /* Switch on the base transform type; ignore the axis by removing the last letter from the transform's name. */
                                    switch (transformName.substr(0, transformName.length - 1)) {
                                        /* Whitelist unit types for each transform. */
                                        case "translate":
                                            invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
                                            break;
                                        /* Since an axis-free "scale" property is supported as well, a little hack is used here to detect it by chopping off its last letter. */
                                        case "scal":
                                        case "scale":
                                            /* Chrome on Android has a bug in which scaled elements blur if their initial scale
                                               value is below 1 (which can happen with forcefeeding). Thus, we detect a yet-unset scale property
                                               and ensure that its first value is always 1. More info: http://stackoverflow.com/questions/10417890/css3-animations-with-transform-causes-blurred-elements-on-webkit/10417962#10417962 */
                                            if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined && propertyValue < 1) {
                                                propertyValue = 1;
                                            }

                                            invalid = !/(\d)$/i.test(propertyValue);
                                            break;
                                        case "skew":
                                            invalid = !/(deg|\d)$/i.test(propertyValue);
                                            break;
                                        case "rotate":
                                            invalid = !/(deg|\d)$/i.test(propertyValue);
                                            break;
                                    }

                                    if (!invalid) {
                                        /* As per the CSS spec, wrap the value in parentheses. */
                                        Data(element).transformCache[transformName] = "(" + propertyValue + ")";
                                    }

                                    /* Although the value is set on the transformCache object, return the newly-updated value for the calling code to process as normal. */
                                    return Data(element).transformCache[transformName];
                            }
                        };
                    })();
                }

                /*************
                    Colors
                *************/

                /* Since Velocity only animates a single numeric value per property, color animation is achieved by hooking the individual RGBA components of CSS color properties.
                   Accordingly, color values must be normalized (e.g. "#ff0000", "red", and "rgb(255, 0, 0)" ==> "255 0 0 1") so that their components can be injected/extracted by CSS.Hooks logic. */
                for (var i = 0; i < CSS.Lists.colors.length; i++) {
                    /* Wrap the dynamically generated normalization function in a new scope so that colorName's value is paired with its respective function.
                       (Otherwise, all functions would take the final for loop's colorName.) */
                    (function () {
                        var colorName = CSS.Lists.colors[i];

                        /* Note: In IE<=8, which support rgb but not rgba, color properties are reverted to rgb by stripping off the alpha component. */
                        CSS.Normalizations.registered[colorName] = function(type, element, propertyValue) {
                            switch (type) {
                                case "name":
                                    return colorName;
                                /* Convert all color values into the rgb format. (Old IE can return hex values and color names instead of rgb/rgba.) */
                                case "extract":
                                    var extracted;

                                    /* If the color is already in its hookable form (e.g. "255 255 255 1") due to having been previously extracted, skip extraction. */
                                    if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                        extracted = propertyValue;
                                    } else {
                                        var converted,
                                            colorNames = {
                                                black: "rgb(0, 0, 0)",
                                                blue: "rgb(0, 0, 255)",
                                                gray: "rgb(128, 128, 128)",
                                                green: "rgb(0, 128, 0)",
                                                red: "rgb(255, 0, 0)",
                                                white: "rgb(255, 255, 255)"
                                            };

                                        /* Convert color names to rgb. */
                                        if (/^[A-z]+$/i.test(propertyValue)) {
                                            if (colorNames[propertyValue] !== undefined) {
                                                converted = colorNames[propertyValue]
                                            } else {
                                                /* If an unmatched color name is provided, default to black. */
                                                converted = colorNames.black;
                                            }
                                        /* Convert hex values to rgb. */
                                        } else if (CSS.RegEx.isHex.test(propertyValue)) {
                                            converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")";
                                        /* If the provided color doesn't match any of the accepted color formats, default to black. */
                                        } else if (!(/^rgba?\(/i.test(propertyValue))) {
                                            converted = colorNames.black;
                                        }

                                        /* Remove the surrounding "rgb/rgba()" string then replace commas with spaces and strip
                                           repeated spaces (in case the value included spaces to begin with). */
                                        extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ");
                                    }

                                    /* So long as this isn't <=IE8, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
                                    if (!(IE <= 8) && extracted.split(" ").length === 3) {
                                        extracted += " 1";
                                    }

                                    return extracted;
                                case "inject":
                                    /* If this is IE<=8 and an alpha component exists, strip it off. */
                                    if (IE <= 8) {
                                        if (propertyValue.split(" ").length === 4) {
                                            propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ");
                                        }
                                    /* Otherwise, add a fourth (alpha) component if it's missing and default it to 1 (visible). */
                                    } else if (propertyValue.split(" ").length === 3) {
                                        propertyValue += " 1";
                                    }

                                    /* Re-insert the browser-appropriate wrapper("rgb/rgba()"), insert commas, and strip off decimal units
                                       on all values but the fourth (R, G, and B only accept whole numbers). */
                                    return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")";
                            }
                        };
                    })();
                }
            }
        },

        /************************
           CSS Property Names
        ************************/

        Names: {
            /* Camelcase a property name into its JavaScript notation (e.g. "background-color" ==> "backgroundColor").
               Camelcasing is used to normalize property names between and across calls. */
            camelCase: function (property) {
                return property.replace(/-(\w)/g, function (match, subMatch) {
                    return subMatch.toUpperCase();
                });
            },

            /* For SVG elements, some properties (namely, dimensional ones) are GET/SET via the element's HTML attributes (instead of via CSS styles). */
            SVGAttribute: function (property) {
                var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";

                /* Certain browsers require an SVG transform to be applied as an attribute. (Otherwise, application via CSS is preferable due to 3D support.) */
                if (IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) {
                    SVGAttributes += "|transform";
                }

                return new RegExp("^(" + SVGAttributes + ")$", "i").test(property);
            },

            /* Determine whether a property should be set with a vendor prefix. */
            /* If a prefixed version of the property exists, return it. Otherwise, return the original property name.
               If the property is not at all supported by the browser, return a false flag. */
            prefixCheck: function (property) {
                /* If this property has already been checked, return the cached value. */
                if (Velocity.State.prefixMatches[property]) {
                    return [ Velocity.State.prefixMatches[property], true ];
                } else {
                    var vendors = [ "", "Webkit", "Moz", "ms", "O" ];

                    for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
                        var propertyPrefixed;

                        if (i === 0) {
                            propertyPrefixed = property;
                        } else {
                            /* Capitalize the first letter of the property to conform to JavaScript vendor prefix notation (e.g. webkitFilter). */
                            propertyPrefixed = vendors[i] + property.replace(/^\w/, function(match) { return match.toUpperCase(); });
                        }

                        /* Check if the browser supports this property as prefixed. */
                        if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
                            /* Cache the match. */
                            Velocity.State.prefixMatches[property] = propertyPrefixed;

                            return [ propertyPrefixed, true ];
                        }
                    }

                    /* If the browser doesn't support this property in any form, include a false flag so that the caller can decide how to proceed. */
                    return [ property, false ];
                }
            }
        },

        /************************
           CSS Property Values
        ************************/

        Values: {
            /* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
            hexToRgb: function (hex) {
                var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i,
                    longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                    rgbParts;

                hex = hex.replace(shortformRegex, function (m, r, g, b) {
                    return r + r + g + g + b + b;
                });

                rgbParts = longformRegex.exec(hex);

                return rgbParts ? [ parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16) ] : [ 0, 0, 0 ];
            },

            isCSSNullValue: function (value) {
                /* The browser defaults CSS values that have not been set to either 0 or one of several possible null-value strings.
                   Thus, we check for both falsiness and these special strings. */
                /* Null-value checking is performed to default the special strings to 0 (for the sake of tweening) or their hook
                   templates as defined as CSS.Hooks (for the sake of hook injection/extraction). */
                /* Note: Chrome returns "rgba(0, 0, 0, 0)" for an undefined color whereas IE returns "transparent". */
                return (value == 0 || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value));
            },

            /* Retrieve a property's default unit type. Used for assigning a unit type when one is not supplied by the user. */
            getUnitType: function (property) {
                if (/^(rotate|skew)/i.test(property)) {
                    return "deg";
                } else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
                    /* The above properties are unitless. */
                    return "";
                } else {
                    /* Default to px for all other properties. */
                    return "px";
                }
            },

            /* HTML elements default to an associated display type when they're not set to display:none. */
            /* Note: This function is used for correctly setting the non-"none" display value in certain Velocity redirects, such as fadeIn/Out. */
            getDisplayType: function (element) {
                var tagName = element && element.tagName.toString().toLowerCase();

                if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
                    return "inline";
                } else if (/^(li)$/i.test(tagName)) {
                    return "list-item";
                } else if (/^(tr)$/i.test(tagName)) {
                    return "table-row";
                } else if (/^(table)$/i.test(tagName)) {
                    return "table";
                } else if (/^(tbody)$/i.test(tagName)) {
                    return "table-row-group";
                /* Default to "block" when no match is found. */
                } else {
                    return "block";
                }
            },

            /* The class add/remove functions are used to temporarily apply a "velocity-animating" class to elements while they're animating. */
            addClass: function (element, className) {
                if (element.classList) {
                    element.classList.add(className);
                } else {
                    element.className += (element.className.length ? " " : "") + className;
                }
            },

            removeClass: function (element, className) {
                if (element.classList) {
                    element.classList.remove(className);
                } else {
                    element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)", "gi"), " ");
                }
            }
        },

        /****************************
           Style Getting & Setting
        ****************************/

        /* The singular getPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
        getPropertyValue: function (element, property, rootPropertyValue, forceStyleLookup) {
            /* Get an element's computed property value. */
            /* Note: Retrieving the value of a CSS property cannot simply be performed by checking an element's
               style attribute (which only reflects user-defined values). Instead, the browser must be queried for a property's
               *computed* value. You can read more about getComputedStyle here: https://developer.mozilla.org/en/docs/Web/API/window.getComputedStyle */
            function computePropertyValue (element, property) {
                /* When box-sizing isn't set to border-box, height and width style values are incorrectly computed when an
                   element's scrollbars are visible (which expands the element's dimensions). Thus, we defer to the more accurate
                   offsetHeight/Width property, which includes the total dimensions for interior, border, padding, and scrollbar.
                   We subtract border and padding to get the sum of interior + scrollbar. */
                var computedValue = 0;

                /* IE<=8 doesn't support window.getComputedStyle, thus we defer to jQuery, which has an extensive array
                   of hacks to accurately retrieve IE8 property values. Re-implementing that logic here is not worth bloating the
                   codebase for a dying browser. The performance repercussions of using jQuery here are minimal since
                   Velocity is optimized to rarely (and sometimes never) query the DOM. Further, the $.css() codepath isn't that slow. */
                if (IE <= 8) {
                    computedValue = $.css(element, property); /* GET */
                /* All other browsers support getComputedStyle. The returned live object reference is cached onto its
                   associated element so that it does not need to be refetched upon every GET. */
                } else {
                    /* Browsers do not return height and width values for elements that are set to display:"none". Thus, we temporarily
                       toggle display to the element type's default value. */
                    var toggleDisplay = false;

                    if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
                        toggleDisplay = true;
                        CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element));
                    }

                    function revertDisplay () {
                        if (toggleDisplay) {
                            CSS.setPropertyValue(element, "display", "none");
                        }
                    }

                    if (!forceStyleLookup) {
                        if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                            var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
                            revertDisplay();

                            return contentBoxHeight;
                        } else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                            var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
                            revertDisplay();

                            return contentBoxWidth;
                        }
                    }

                    var computedStyle;

                    /* For elements that Velocity hasn't been called on directly (e.g. when Velocity queries the DOM on behalf
                       of a parent of an element its animating), perform a direct getComputedStyle lookup since the object isn't cached. */
                    if (Data(element) === undefined) {
                        computedStyle = window.getComputedStyle(element, null); /* GET */
                    /* If the computedStyle object has yet to be cached, do so now. */
                    } else if (!Data(element).computedStyle) {
                        computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null); /* GET */
                    /* If computedStyle is cached, use it. */
                    } else {
                        computedStyle = Data(element).computedStyle;
                    }

                    /* IE and Firefox do not return a value for the generic borderColor -- they only return individual values for each border side's color.
                       Also, in all browsers, when border colors aren't all the same, a compound value is returned that Velocity isn't setup to parse.
                       So, as a polyfill for querying individual border side colors, we just return the top border's color and animate all borders from that value. */
                    if (property === "borderColor") {
                        property = "borderTopColor";
                    }

                    /* IE9 has a bug in which the "filter" property must be accessed from computedStyle using the getPropertyValue method
                       instead of a direct property lookup. The getPropertyValue method is slower than a direct lookup, which is why we avoid it by default. */
                    if (IE === 9 && property === "filter") {
                        computedValue = computedStyle.getPropertyValue(property); /* GET */
                    } else {
                        computedValue = computedStyle[property];
                    }

                    /* Fall back to the property's style value (if defined) when computedValue returns nothing,
                       which can happen when the element hasn't been painted. */
                    if (computedValue === "" || computedValue === null) {
                        computedValue = element.style[property];
                    }

                    revertDisplay();
                }

                /* For top, right, bottom, and left (TRBL) values that are set to "auto" on elements of "fixed" or "absolute" position,
                   defer to jQuery for converting "auto" to a numeric value. (For elements with a "static" or "relative" position, "auto" has the same
                   effect as being set to 0, so no conversion is necessary.) */
                /* An example of why numeric conversion is necessary: When an element with "position:absolute" has an untouched "left"
                   property, which reverts to "auto", left's value is 0 relative to its parent element, but is often non-zero relative
                   to its *containing* (not parent) element, which is the nearest "position:relative" ancestor or the viewport (and always the viewport in the case of "position:fixed"). */
                if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
                    var position = computePropertyValue(element, "position"); /* GET */

                    /* For absolute positioning, jQuery's $.position() only returns values for top and left;
                       right and bottom will have their "auto" value reverted to 0. */
                    /* Note: A jQuery object must be created here since jQuery doesn't have a low-level alias for $.position().
                       Not a big deal since we're currently in a GET batch anyway. */
                    if (position === "fixed" || (position === "absolute" && /top|left/i.test(property))) {
                        /* Note: jQuery strips the pixel unit from its returned values; we re-add it here to conform with computePropertyValue's behavior. */
                        computedValue = $(element).position()[property] + "px"; /* GET */
                    }
                }

                return computedValue;
            }

            var propertyValue;

            /* If this is a hooked property (e.g. "clipLeft" instead of the root property of "clip"),
               extract the hook's value from a normalized rootPropertyValue using CSS.Hooks.extractValue(). */
            if (CSS.Hooks.registered[property]) {
                var hook = property,
                    hookRoot = CSS.Hooks.getRoot(hook);

                /* If a cached rootPropertyValue wasn't passed in (which Velocity always attempts to do in order to avoid requerying the DOM),
                   query the DOM for the root property's value. */
                if (rootPropertyValue === undefined) {
                    /* Since the browser is now being directly queried, use the official post-prefixing property name for this lookup. */
                    rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0]); /* GET */
                }

                /* If this root has a normalization registered, peform the associated normalization extraction. */
                if (CSS.Normalizations.registered[hookRoot]) {
                    rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue);
                }

                /* Extract the hook's value. */
                propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue);

            /* If this is a normalized property (e.g. "opacity" becomes "filter" in <=IE8) or "translateX" becomes "transform"),
               normalize the property's name and value, and handle the special case of transforms. */
            /* Note: Normalizing a property is mutually exclusive from hooking a property since hook-extracted values are strictly
               numerical and therefore do not require normalization extraction. */
            } else if (CSS.Normalizations.registered[property]) {
                var normalizedPropertyName,
                    normalizedPropertyValue;

                normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);

                /* Transform values are calculated via normalization extraction (see below), which checks against the element's transformCache.
                   At no point do transform GETs ever actually query the DOM; initial stylesheet values are never processed.
                   This is because parsing 3D transform matrices is not always accurate and would bloat our codebase;
                   thus, normalization extraction defaults initial transform values to their zero-values (e.g. 1 for scaleX and 0 for translateX). */
                if (normalizedPropertyName !== "transform") {
                    normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]); /* GET */

                    /* If the value is a CSS null-value and this property has a hook template, use that zero-value template so that hooks can be extracted from it. */
                    if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
                        normalizedPropertyValue = CSS.Hooks.templates[property][1];
                    }
                }

                propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue);
            }

            /* If a (numeric) value wasn't produced via hook extraction or normalization, query the DOM. */
            if (!/^[\d-]/.test(propertyValue)) {
                /* For SVG elements, dimensional properties (which SVGAttribute() detects) are tweened via
                   their HTML attribute values instead of their CSS style values. */
                if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
                    /* Since the height/width attribute values must be set manually, they don't reflect computed values.
                       Thus, we use use getBBox() to ensure we always get values for elements with undefined height/width attributes. */
                    if (/^(height|width)$/i.test(property)) {
                        /* Firefox throws an error if .getBBox() is called on an SVG that isn't attached to the DOM. */
                        try {
                            propertyValue = element.getBBox()[property];
                        } catch (error) {
                            propertyValue = 0;
                        }
                    /* Otherwise, access the attribute value directly. */
                    } else {
                        propertyValue = element.getAttribute(property);
                    }
                } else {
                    propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0]); /* GET */
                }
            }

            /* Since property lookups are for animation purposes (which entails computing the numeric delta between start and end values),
               convert CSS null-values to an integer of value 0. */
            if (CSS.Values.isCSSNullValue(propertyValue)) {
                propertyValue = 0;
            }

            if (Velocity.debug >= 2) console.log("Get " + property + ": " + propertyValue);

            return propertyValue;
        },

        /* The singular setPropertyValue, which routes the logic for all normalizations, hooks, and standard CSS properties. */
        setPropertyValue: function(element, property, propertyValue, rootPropertyValue, scrollData) {
            var propertyName = property;

            /* In order to be subjected to call options and element queueing, scroll animation is routed through Velocity as if it were a standard CSS property. */
            if (property === "scroll") {
                /* If a container option is present, scroll the container instead of the browser window. */
                if (scrollData.container) {
                    scrollData.container["scroll" + scrollData.direction] = propertyValue;
                /* Otherwise, Velocity defaults to scrolling the browser window. */
                } else {
                    if (scrollData.direction === "Left") {
                        window.scrollTo(propertyValue, scrollData.alternateValue);
                    } else {
                        window.scrollTo(scrollData.alternateValue, propertyValue);
                    }
                }
            } else {
                /* Transforms (translateX, rotateZ, etc.) are applied to a per-element transformCache object, which is manually flushed via flushTransformCache().
                   Thus, for now, we merely cache transforms being SET. */
                if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
                    /* Perform a normalization injection. */
                    /* Note: The normalization logic handles the transformCache updating. */
                    CSS.Normalizations.registered[property]("inject", element, propertyValue);

                    propertyName = "transform";
                    propertyValue = Data(element).transformCache[property];
                } else {
                    /* Inject hooks. */
                    if (CSS.Hooks.registered[property]) {
                        var hookName = property,
                            hookRoot = CSS.Hooks.getRoot(property);

                        /* If a cached rootPropertyValue was not provided, query the DOM for the hookRoot's current value. */
                        rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot); /* GET */

                        propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
                        property = hookRoot;
                    }

                    /* Normalize names and values. */
                    if (CSS.Normalizations.registered[property]) {
                        propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
                        property = CSS.Normalizations.registered[property]("name", element);
                    }

                    /* Assign the appropriate vendor prefix before performing an official style update. */
                    propertyName = CSS.Names.prefixCheck(property)[0];

                    /* A try/catch is used for IE<=8, which throws an error when "invalid" CSS values are set, e.g. a negative width.
                       Try/catch is avoided for other browsers since it incurs a performance overhead. */
                    if (IE <= 8) {
                        try {
                            element.style[propertyName] = propertyValue;
                        } catch (error) { if (Velocity.debug) console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]"); }
                    /* SVG elements have their dimensional properties (width, height, x, y, cx, etc.) applied directly as attributes instead of as styles. */
                    /* Note: IE8 does not support SVG elements, so it's okay that we skip it for SVG animation. */
                    } else if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
                        /* Note: For SVG attributes, vendor-prefixed property names are never used. */
                        /* Note: Not all CSS properties can be animated via attributes, but the browser won't throw an error for unsupported properties. */
                        element.setAttribute(property, propertyValue);
                    } else {
                        element.style[propertyName] = propertyValue;
                    }

                    if (Velocity.debug >= 2) console.log("Set " + property + " (" + propertyName + "): " + propertyValue);
                }
            }

            /* Return the normalized property name and value in case the caller wants to know how these values were modified before being applied to the DOM. */
            return [ propertyName, propertyValue ];
        },

        /* To increase performance by batching transform updates into a single SET, transforms are not directly applied to an element until flushTransformCache() is called. */
        /* Note: Velocity applies transform properties in the same order that they are chronogically introduced to the element's CSS styles. */
        flushTransformCache: function(element) {
            var transformString = "";

            /* Certain browsers require that SVG transforms be applied as an attribute. However, the SVG transform attribute takes a modified version of CSS's transform string
               (units are dropped and, except for skewX/Y, subproperties are merged into their master property -- e.g. scaleX and scaleY are merged into scale(X Y). */
            if ((IE || (Velocity.State.isAndroid && !Velocity.State.isChrome)) && Data(element).isSVG) {
                /* Since transform values are stored in their parentheses-wrapped form, we use a helper function to strip out their numeric values.
                   Further, SVG transform properties only take unitless (representing pixels) values, so it's okay that parseFloat() strips the unit suffixed to the float value. */
                function getTransformFloat (transformProperty) {
                    return parseFloat(CSS.getPropertyValue(element, transformProperty));
                }

                /* Create an object to organize all the transforms that we'll apply to the SVG element. To keep the logic simple,
                   we process *all* transform properties -- even those that may not be explicitly applied (since they default to their zero-values anyway). */
                var SVGTransforms = {
                    translate: [ getTransformFloat("translateX"), getTransformFloat("translateY") ],
                    skewX: [ getTransformFloat("skewX") ], skewY: [ getTransformFloat("skewY") ],
                    /* If the scale property is set (non-1), use that value for the scaleX and scaleY values
                       (this behavior mimics the result of animating all these properties at once on HTML elements). */
                    scale: getTransformFloat("scale") !== 1 ? [ getTransformFloat("scale"), getTransformFloat("scale") ] : [ getTransformFloat("scaleX"), getTransformFloat("scaleY") ],
                    /* Note: SVG's rotate transform takes three values: rotation degrees followed by the X and Y values
                       defining the rotation's origin point. We ignore the origin values (default them to 0). */
                    rotate: [ getTransformFloat("rotateZ"), 0, 0 ]
                };

                /* Iterate through the transform properties in the user-defined property map order.
                   (This mimics the behavior of non-SVG transform animation.) */
                $.each(Data(element).transformCache, function(transformName) {
                    /* Except for with skewX/Y, revert the axis-specific transform subproperties to their axis-free master
                       properties so that they match up with SVG's accepted transform properties. */
                    if (/^translate/i.test(transformName)) {
                        transformName = "translate";
                    } else if (/^scale/i.test(transformName)) {
                        transformName = "scale";
                    } else if (/^rotate/i.test(transformName)) {
                        transformName = "rotate";
                    }

                    /* Check that we haven't yet deleted the property from the SVGTransforms container. */
                    if (SVGTransforms[transformName]) {
                        /* Append the transform property in the SVG-supported transform format. As per the spec, surround the space-delimited values in parentheses. */
                        transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";

                        /* After processing an SVG transform property, delete it from the SVGTransforms container so we don't
                           re-insert the same master property if we encounter another one of its axis-specific properties. */
                        delete SVGTransforms[transformName];
                    }
                });
            } else {
                var transformValue,
                    perspective;

                /* Transform properties are stored as members of the transformCache object. Concatenate all the members into a string. */
                $.each(Data(element).transformCache, function(transformName) {
                    transformValue = Data(element).transformCache[transformName];

                    /* Transform's perspective subproperty must be set first in order to take effect. Store it temporarily. */
                    if (transformName === "transformPerspective") {
                        perspective = transformValue;
                        return true;
                    }

                    /* IE9 only supports one rotation type, rotateZ, which it refers to as "rotate". */
                    if (IE === 9 && transformName === "rotateZ") {
                        transformName = "rotate";
                    }

                    transformString += transformName + transformValue + " ";
                });

                /* If present, set the perspective subproperty first. */
                if (perspective) {
                    transformString = "perspective" + perspective + " " + transformString;
                }
            }

            CSS.setPropertyValue(element, "transform", transformString);
        }
    };

    /* Register hooks and normalizations. */
    CSS.Hooks.register();
    CSS.Normalizations.register();

    /* Allow hook setting in the same fashion as jQuery's $.css(). */
    Velocity.hook = function (elements, arg2, arg3) {
        var value = undefined;

        elements = sanitizeElements(elements);

        $.each(elements, function(i, element) {
            /* Initialize Velocity's per-element data cache if this element hasn't previously been animated. */
            if (Data(element) === undefined) {
                Velocity.init(element);
            }

            /* Get property value. If an element set was passed in, only return the value for the first element. */
            if (arg3 === undefined) {
                if (value === undefined) {
                    value = Velocity.CSS.getPropertyValue(element, arg2);
                }
            /* Set property value. */
            } else {
                /* sPV returns an array of the normalized propertyName/propertyValue pair used to update the DOM. */
                var adjustedSet = Velocity.CSS.setPropertyValue(element, arg2, arg3);

                /* Transform properties don't automatically set. They have to be flushed to the DOM. */
                if (adjustedSet[0] === "transform") {
                    Velocity.CSS.flushTransformCache(element);
                }

                value = adjustedSet;
            }
        });

        return value;
    };

    /*****************
        Animation
    *****************/

    var animate = function() {

        /******************
            Call Chain
        ******************/

        /* Logic for determining what to return to the call stack when exiting out of Velocity. */
        function getChain () {
            /* If we are using the utility function, attempt to return this call's promise. If no promise library was detected,
               default to null instead of returning the targeted elements so that utility function's return value is standardized. */
            if (isUtility) {
                return promiseData.promise || null;
            /* Otherwise, if we're using $.fn, return the jQuery-/Zepto-wrapped element set. */
            } else {
                return elementsWrapped;
            }
        }

        /*************************
           Arguments Assignment
        *************************/

        /* To allow for expressive CoffeeScript code, Velocity supports an alternative syntax in which "elements" (or "e"), "properties" (or "p"), and "options" (or "o")
           objects are defined on a container object that's passed in as Velocity's sole argument. */
        /* Note: Some browsers automatically populate arguments with a "properties" object. We detect it by checking for its default "names" property. */
        var syntacticSugar = (arguments[0] && (arguments[0].p || (($.isPlainObject(arguments[0].properties) && !arguments[0].properties.names) || Type.isString(arguments[0].properties)))),
            /* Whether Velocity was called via the utility function (as opposed to on a jQuery/Zepto object). */
            isUtility,
            /* When Velocity is called via the utility function ($.Velocity()/Velocity()), elements are explicitly
               passed in as the first parameter. Thus, argument positioning varies. We normalize them here. */
            elementsWrapped,
            argumentIndex;

        var elements,
            propertiesMap,
            options;

        /* Detect jQuery/Zepto elements being animated via the $.fn method. */
        if (Type.isWrapped(this)) {
            isUtility = false;

            argumentIndex = 0;
            elements = this;
            elementsWrapped = this;
        /* Otherwise, raw elements are being animated via the utility function. */
        } else {
            isUtility = true;

            argumentIndex = 1;
            elements = syntacticSugar ? (arguments[0].elements || arguments[0].e) : arguments[0];
        }

        elements = sanitizeElements(elements);

        if (!elements) {
            return;
        }

        if (syntacticSugar) {
            propertiesMap = arguments[0].properties || arguments[0].p;
            options = arguments[0].options || arguments[0].o;
        } else {
            propertiesMap = arguments[argumentIndex];
            options = arguments[argumentIndex + 1];
        }

        /* The length of the element set (in the form of a nodeList or an array of elements) is defaulted to 1 in case a
           single raw DOM element is passed in (which doesn't contain a length property). */
        var elementsLength = elements.length,
            elementsIndex = 0;

        /***************************
            Argument Overloading
        ***************************/

        /* Support is included for jQuery's argument overloading: $.animate(propertyMap [, duration] [, easing] [, complete]).
           Overloading is detected by checking for the absence of an object being passed into options. */
        /* Note: The stop and finish actions do not accept animation options, and are therefore excluded from this check. */
        if (!/^(stop|finish|finishAll)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
            /* The utility function shifts all arguments one position to the right, so we adjust for that offset. */
            var startingArgumentPosition = argumentIndex + 1;

            options = {};

            /* Iterate through all options arguments */
            for (var i = startingArgumentPosition; i < arguments.length; i++) {
                /* Treat a number as a duration. Parse it out. */
                /* Note: The following RegEx will return true if passed an array with a number as its first item.
                   Thus, arrays are skipped from this check. */
                if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
                    options.duration = arguments[i];
                /* Treat strings and arrays as easings. */
                } else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
                    options.easing = arguments[i];
                /* Treat a function as a complete callback. */
                } else if (Type.isFunction(arguments[i])) {
                    options.complete = arguments[i];
                }
            }
        }

        /***************
            Promises
        ***************/

        var promiseData = {
                promise: null,
                resolver: null,
                rejecter: null
            };

        /* If this call was made via the utility function (which is the default method of invocation when jQuery/Zepto are not being used), and if
           promise support was detected, create a promise object for this call and store references to its resolver and rejecter methods. The resolve
           method is used when a call completes naturally or is prematurely stopped by the user. In both cases, completeCall() handles the associated
           call cleanup and promise resolving logic. The reject method is used when an invalid set of arguments is passed into a Velocity call. */
        /* Note: Velocity employs a call-based queueing architecture, which means that stopping an animating element actually stops the full call that
           triggered it -- not that one element exclusively. Similarly, there is one promise per call, and all elements targeted by a Velocity call are
           grouped together for the purposes of resolving and rejecting a promise. */
        if (isUtility && Velocity.Promise) {
            promiseData.promise = new Velocity.Promise(function (resolve, reject) {
                promiseData.resolver = resolve;
                promiseData.rejecter = reject;
            });
        }

        /*********************
           Action Detection
        *********************/

        /* Velocity's behavior is categorized into "actions": Elements can either be specially scrolled into view,
           or they can be started, stopped, or reversed. If a literal or referenced properties map is passed in as Velocity's
           first argument, the associated action is "start". Alternatively, "scroll", "reverse", or "stop" can be passed in instead of a properties map. */
        var action;

        switch (propertiesMap) {
            case "scroll":
                action = "scroll";
                break;

            case "reverse":
                action = "reverse";
                break;

            case "finish":
            case "finishAll":
            case "stop":
                /*******************
                    Action: Stop
                *******************/

                /* Clear the currently-active delay on each targeted element. */
                $.each(elements, function(i, element) {
                    if (Data(element) && Data(element).delayTimer) {
                        /* Stop the timer from triggering its cached next() function. */
                        clearTimeout(Data(element).delayTimer.setTimeout);

                        /* Manually call the next() function so that the subsequent queue items can progress. */
                        if (Data(element).delayTimer.next) {
                            Data(element).delayTimer.next();
                        }

                        delete Data(element).delayTimer;
                    }

                    /* If we want to finish everything in the queue, we have to iterate through it
                       and call each function. This will make them active calls below, which will
                       cause them to be applied via the duration setting. */
                    if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
                        /* Iterate through the items in the element's queue. */
                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
                            /* The queue array can contain an "inprogress" string, which we skip. */
                            if (Type.isFunction(item)) {
                                item();
                            }
                        });

                        /* Clearing the $.queue() array is achieved by resetting it to []. */
                        $.queue(element, Type.isString(options) ? options : "", []);
                    }
                });

                var callsToStop = [];

                /* When the stop action is triggered, the elements' currently active call is immediately stopped. The active call might have
                   been applied to multiple elements, in which case all of the call's elements will be stopped. When an element
                   is stopped, the next item in its animation queue is immediately triggered. */
                /* An additional argument may be passed in to clear an element's remaining queued calls. Either true (which defaults to the "fx" queue)
                   or a custom queue string can be passed in. */
                /* Note: The stop command runs prior to Velocity's Queueing phase since its behavior is intended to take effect *immediately*,
                   regardless of the element's current queue state. */

                /* Iterate through every active call. */
                $.each(Velocity.State.calls, function(i, activeCall) {
                    /* Inactive calls are set to false by the logic inside completeCall(). Skip them. */
                    if (activeCall) {
                        /* Iterate through the active call's targeted elements. */
                        $.each(activeCall[1], function(k, activeElement) {
                            /* If true was passed in as a secondary argument, clear absolutely all calls on this element. Otherwise, only
                               clear calls associated with the relevant queue. */
                            /* Call stopping logic works as follows:
                               - options === true --> stop current default queue calls (and queue:false calls), including remaining queued ones.
                               - options === undefined --> stop current queue:"" call and all queue:false calls.
                               - options === false --> stop only queue:false calls.
                               - options === "custom" --> stop current queue:"custom" call, including remaining queued ones (there is no functionality to only clear the currently-running queue:"custom" call). */
                            var queueName = (options === undefined) ? "" : options;

                            if (queueName !== true && (activeCall[2].queue !== queueName) && !(options === undefined && activeCall[2].queue === false)) {
                                return true;
                            }

                            /* Iterate through the calls targeted by the stop command. */
                            $.each(elements, function(l, element) {
                                /* Check that this call was applied to the target element. */
                                if (element === activeElement) {
                                    /* Optionally clear the remaining queued calls. If we're doing "finishAll" this won't find anything,
                                       due to the queue-clearing above. */
                                    if (options === true || Type.isString(options)) {
                                        /* Iterate through the items in the element's queue. */
                                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
                                            /* The queue array can contain an "inprogress" string, which we skip. */
                                            if (Type.isFunction(item)) {
                                                /* Pass the item's callback a flag indicating that we want to abort from the queue call.
                                                   (Specifically, the queue will resolve the call's associated promise then abort.)  */
                                                item(null, true);
                                            }
                                        });

                                        /* Clearing the $.queue() array is achieved by resetting it to []. */
                                        $.queue(element, Type.isString(options) ? options : "", []);
                                    }

                                    if (propertiesMap === "stop") {
                                        /* Since "reverse" uses cached start values (the previous call's endValues), these values must be
                                           changed to reflect the final value that the elements were actually tweened to. */
                                        /* Note: If only queue:false animations are currently running on an element, it won't have a tweensContainer
                                           object. Also, queue:false animations can't be reversed. */
                                        if (Data(element) && Data(element).tweensContainer && queueName !== false) {
                                            $.each(Data(element).tweensContainer, function(m, activeTween) {
                                                activeTween.endValue = activeTween.currentValue;
                                            });
                                        }

                                        callsToStop.push(i);
                                    } else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
                                        /* To get active tweens to finish immediately, we forcefully shorten their durations to 1ms so that
                                        they finish upon the next rAf tick then proceed with normal call completion logic. */
                                        activeCall[2].duration = 1;
                                    }
                                }
                            });
                        });
                    }
                });

                /* Prematurely call completeCall() on each matched active call. Pass an additional flag for "stop" to indicate
                   that the complete callback and display:none setting should be skipped since we're completing prematurely. */
                if (propertiesMap === "stop") {
                    $.each(callsToStop, function(i, j) {
                        completeCall(j, true);
                    });

                    if (promiseData.promise) {
                        /* Immediately resolve the promise associated with this stop call since stop runs synchronously. */
                        promiseData.resolver(elements);
                    }
                }

                /* Since we're stopping, and not proceeding with queueing, exit out of Velocity. */
                return getChain();

            default:
                /* Treat a non-empty plain object as a literal properties map. */
                if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
                    action = "start";

                /****************
                    Redirects
                ****************/

                /* Check if a string matches a registered redirect (see Redirects above). */
                } else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
                    var opts = $.extend({}, options),
                        durationOriginal = opts.duration,
                        delayOriginal = opts.delay || 0;

                    /* If the backwards option was passed in, reverse the element set so that elements animate from the last to the first. */
                    if (opts.backwards === true) {
                        elements = $.extend(true, [], elements).reverse();
                    }

                    /* Individually trigger the redirect for each element in the set to prevent users from having to handle iteration logic in their redirect. */
                    $.each(elements, function(elementIndex, element) {
                        /* If the stagger option was passed in, successively delay each element by the stagger value (in ms). Retain the original delay value. */
                        if (parseFloat(opts.stagger)) {
                            opts.delay = delayOriginal + (parseFloat(opts.stagger) * elementIndex);
                        } else if (Type.isFunction(opts.stagger)) {
                            opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength);
                        }

                        /* If the drag option was passed in, successively increase/decrease (depending on the presense of opts.backwards)
                           the duration of each element's animation, using floors to prevent producing very short durations. */
                        if (opts.drag) {
                            /* Default the duration of UI pack effects (callouts and transitions) to 1000ms instead of the usual default duration of 400ms. */
                            opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1000 : DURATION_DEFAULT);

                            /* For each element, take the greater duration of: A) animation completion percentage relative to the original duration,
                               B) 75% of the original duration, or C) a 200ms fallback (in case duration is already set to a low value).
                               The end result is a baseline of 75% of the redirect's duration that increases/decreases as the end of the element set is approached. */
                            opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex/elementsLength : (elementIndex + 1) / elementsLength), opts.duration * 0.75, 200);
                        }

                        /* Pass in the call's opts object so that the redirect can optionally extend it. It defaults to an empty object instead of null to
                           reduce the opts checking logic required inside the redirect. */
                        Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined);
                    });

                    /* Since the animation logic resides within the redirect's own code, abort the remainder of this call.
                       (The performance overhead up to this point is virtually non-existant.) */
                    /* Note: The jQuery call chain is kept intact by returning the complete element set. */
                    return getChain();
                } else {
                    var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";

                    if (promiseData.promise) {
                        promiseData.rejecter(new Error(abortError));
                    } else {
                        console.log(abortError);
                    }

                    return getChain();
                }
        }

        /**************************
            Call-Wide Variables
        **************************/

        /* A container for CSS unit conversion ratios (e.g. %, rem, and em ==> px) that is used to cache ratios across all elements
           being animated in a single Velocity call. Calculating unit ratios necessitates DOM querying and updating, and is therefore
           avoided (via caching) wherever possible. This container is call-wide instead of page-wide to avoid the risk of using stale
           conversion metrics across Velocity animations that are not immediately consecutively chained. */
        var callUnitConversionData = {
                lastParent: null,
                lastPosition: null,
                lastFontSize: null,
                lastPercentToPxWidth: null,
                lastPercentToPxHeight: null,
                lastEmToPx: null,
                remToPx: null,
                vwToPx: null,
                vhToPx: null
            };

        /* A container for all the ensuing tween data and metadata associated with this call. This container gets pushed to the page-wide
           Velocity.State.calls array that is processed during animation ticking. */
        var call = [];

        /************************
           Element Processing
        ************************/

        /* Element processing consists of three parts -- data processing that cannot go stale and data processing that *can* go stale (i.e. third-party style modifications):
           1) Pre-Queueing: Element-wide variables, including the element's data storage, are instantiated. Call options are prepared. If triggered, the Stop action is executed.
           2) Queueing: The logic that runs once this call has reached its point of execution in the element's $.queue() stack. Most logic is placed here to avoid risking it becoming stale.
           3) Pushing: Consolidation of the tween data followed by its push onto the global in-progress calls container.
        */

        function processElement () {

            /*************************
               Part I: Pre-Queueing
            *************************/

            /***************************
               Element-Wide Variables
            ***************************/

            var element = this,
                /* The runtime opts object is the extension of the current call's options and Velocity's page-wide option defaults. */
                opts = $.extend({}, Velocity.defaults, options),
                /* A container for the processed data associated with each property in the propertyMap.
                   (Each property in the map produces its own "tween".) */
                tweensContainer = {},
                elementUnitConversionData;

            /******************
               Element Init
            ******************/

            if (Data(element) === undefined) {
                Velocity.init(element);
            }

            /******************
               Option: Delay
            ******************/

            /* Since queue:false doesn't respect the item's existing queue, we avoid injecting its delay here (it's set later on). */
            /* Note: Velocity rolls its own delay function since jQuery doesn't have a utility alias for $.fn.delay()
               (and thus requires jQuery element creation, which we avoid since its overhead includes DOM querying). */
            if (parseFloat(opts.delay) && opts.queue !== false) {
                $.queue(element, opts.queue, function(next) {
                    /* This is a flag used to indicate to the upcoming completeCall() function that this queue entry was initiated by Velocity. See completeCall() for further details. */
                    Velocity.velocityQueueEntryFlag = true;

                    /* The ensuing queue item (which is assigned to the "next" argument that $.queue() automatically passes in) will be triggered after a setTimeout delay.
                       The setTimeout is stored so that it can be subjected to clearTimeout() if this animation is prematurely stopped via Velocity's "stop" command. */
                    Data(element).delayTimer = {
                        setTimeout: setTimeout(next, parseFloat(opts.delay)),
                        next: next
                    };
                });
            }

            /*********************
               Option: Duration
            *********************/

            /* Support for jQuery's named durations. */
            switch (opts.duration.toString().toLowerCase()) {
                case "fast":
                    opts.duration = 200;
                    break;

                case "normal":
                    opts.duration = DURATION_DEFAULT;
                    break;

                case "slow":
                    opts.duration = 600;
                    break;

                default:
                    /* Remove the potential "ms" suffix and default to 1 if the user is attempting to set a duration of 0 (in order to produce an immediate style change). */
                    opts.duration = parseFloat(opts.duration) || 1;
            }

            /************************
               Global Option: Mock
            ************************/

            if (Velocity.mock !== false) {
                /* In mock mode, all animations are forced to 1ms so that they occur immediately upon the next rAF tick.
                   Alternatively, a multiplier can be passed in to time remap all delays and durations. */
                if (Velocity.mock === true) {
                    opts.duration = opts.delay = 1;
                } else {
                    opts.duration *= parseFloat(Velocity.mock) || 1;
                    opts.delay *= parseFloat(Velocity.mock) || 1;
                }
            }

            /*******************
               Option: Easing
            *******************/

            opts.easing = getEasing(opts.easing, opts.duration);

            /**********************
               Option: Callbacks
            **********************/

            /* Callbacks must functions. Otherwise, default to null. */
            if (opts.begin && !Type.isFunction(opts.begin)) {
                opts.begin = null;
            }

            if (opts.progress && !Type.isFunction(opts.progress)) {
                opts.progress = null;
            }

            if (opts.complete && !Type.isFunction(opts.complete)) {
                opts.complete = null;
            }

            /*********************************
               Option: Display & Visibility
            *********************************/

            /* Refer to Velocity's documentation (VelocityJS.org/#displayAndVisibility) for a description of the display and visibility options' behavior. */
            /* Note: We strictly check for undefined instead of falsiness because display accepts an empty string value. */
            if (opts.display !== undefined && opts.display !== null) {
                opts.display = opts.display.toString().toLowerCase();

                /* Users can pass in a special "auto" value to instruct Velocity to set the element to its default display value. */
                if (opts.display === "auto") {
                    opts.display = Velocity.CSS.Values.getDisplayType(element);
                }
            }

            if (opts.visibility !== undefined && opts.visibility !== null) {
                opts.visibility = opts.visibility.toString().toLowerCase();
            }

            /**********************
               Option: mobileHA
            **********************/

            /* When set to true, and if this is a mobile device, mobileHA automatically enables hardware acceleration (via a null transform hack)
               on animating elements. HA is removed from the element at the completion of its animation. */
            /* Note: Android Gingerbread doesn't support HA. If a null transform hack (mobileHA) is in fact set, it will prevent other tranform subproperties from taking effect. */
            /* Note: You can read more about the use of mobileHA in Velocity's documentation: VelocityJS.org/#mobileHA. */
            opts.mobileHA = (opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread);

            /***********************
               Part II: Queueing
            ***********************/

            /* When a set of elements is targeted by a Velocity call, the set is broken up and each element has the current Velocity call individually queued onto it.
               In this way, each element's existing queue is respected; some elements may already be animating and accordingly should not have this current Velocity call triggered immediately. */
            /* In each queue, tween data is processed for each animating property then pushed onto the call-wide calls array. When the last element in the set has had its tweens processed,
               the call array is pushed to Velocity.State.calls for live processing by the requestAnimationFrame tick. */
            function buildQueue (next) {

                /*******************
                   Option: Begin
                *******************/

                /* The begin callback is fired once per call -- not once per elemenet -- and is passed the full raw DOM element set as both its context and its first argument. */
                if (opts.begin && elementsIndex === 0) {
                    /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
                    try {
                        opts.begin.call(elements, elements);
                    } catch (error) {
                        setTimeout(function() { throw error; }, 1);
                    }
                }

                /*****************************************
                   Tween Data Construction (for Scroll)
                *****************************************/

                /* Note: In order to be subjected to chaining and animation options, scroll's tweening is routed through Velocity as if it were a standard CSS property animation. */
                if (action === "scroll") {
                    /* The scroll action uniquely takes an optional "offset" option -- specified in pixels -- that offsets the targeted scroll position. */
                    var scrollDirection = (/^x$/i.test(opts.axis) ? "Left" : "Top"),
                        scrollOffset = parseFloat(opts.offset) || 0,
                        scrollPositionCurrent,
                        scrollPositionCurrentAlternate,
                        scrollPositionEnd;

                    /* Scroll also uniquely takes an optional "container" option, which indicates the parent element that should be scrolled --
                       as opposed to the browser window itself. This is useful for scrolling toward an element that's inside an overflowing parent element. */
                    if (opts.container) {
                        /* Ensure that either a jQuery object or a raw DOM element was passed in. */
                        if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
                            /* Extract the raw DOM element from the jQuery wrapper. */
                            opts.container = opts.container[0] || opts.container;
                            /* Note: Unlike other properties in Velocity, the browser's scroll position is never cached since it so frequently changes
                               (due to the user's natural interaction with the page). */
                            scrollPositionCurrent = opts.container["scroll" + scrollDirection]; /* GET */

                            /* $.position() values are relative to the container's currently viewable area (without taking into account the container's true dimensions
                               -- say, for example, if the container was not overflowing). Thus, the scroll end value is the sum of the child element's position *and*
                               the scroll container's current scroll position. */
                            scrollPositionEnd = (scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()]) + scrollOffset; /* GET */
                        /* If a value other than a jQuery object or a raw DOM element was passed in, default to null so that this option is ignored. */
                        } else {
                            opts.container = null;
                        }
                    } else {
                        /* If the window itself is being scrolled -- not a containing element -- perform a live scroll position lookup using
                           the appropriate cached property names (which differ based on browser type). */
                        scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]]; /* GET */
                        /* When scrolling the browser window, cache the alternate axis's current value since window.scrollTo() doesn't let us change only one value at a time. */
                        scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]]; /* GET */

                        /* Unlike $.position(), $.offset() values are relative to the browser window's true dimensions -- not merely its currently viewable area --
                           and therefore end values do not need to be compounded onto current values. */
                        scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset; /* GET */
                    }

                    /* Since there's only one format that scroll's associated tweensContainer can take, we create it manually. */
                    tweensContainer = {
                        scroll: {
                            rootPropertyValue: false,
                            startValue: scrollPositionCurrent,
                            currentValue: scrollPositionCurrent,
                            endValue: scrollPositionEnd,
                            unitType: "",
                            easing: opts.easing,
                            scrollData: {
                                container: opts.container,
                                direction: scrollDirection,
                                alternateValue: scrollPositionCurrentAlternate
                            }
                        },
                        element: element
                    };

                    if (Velocity.debug) console.log("tweensContainer (scroll): ", tweensContainer.scroll, element);

                /******************************************
                   Tween Data Construction (for Reverse)
                ******************************************/

                /* Reverse acts like a "start" action in that a property map is animated toward. The only difference is
                   that the property map used for reverse is the inverse of the map used in the previous call. Thus, we manipulate
                   the previous call to construct our new map: use the previous map's end values as our new map's start values. Copy over all other data. */
                /* Note: Reverse can be directly called via the "reverse" parameter, or it can be indirectly triggered via the loop option. (Loops are composed of multiple reverses.) */
                /* Note: Reverse calls do not need to be consecutively chained onto a currently-animating element in order to operate on cached values;
                   there is no harm to reverse being called on a potentially stale data cache since reverse's behavior is simply defined
                   as reverting to the element's values as they were prior to the previous *Velocity* call. */
                } else if (action === "reverse") {
                    /* Abort if there is no prior animation data to reverse to. */
                    if (!Data(element).tweensContainer) {
                        /* Dequeue the element so that this queue entry releases itself immediately, allowing subsequent queue entries to run. */
                        $.dequeue(element, opts.queue);

                        return;
                    } else {
                        /*********************
                           Options Parsing
                        *********************/

                        /* If the element was hidden via the display option in the previous call,
                           revert display to "auto" prior to reversal so that the element is visible again. */
                        if (Data(element).opts.display === "none") {
                            Data(element).opts.display = "auto";
                        }

                        if (Data(element).opts.visibility === "hidden") {
                            Data(element).opts.visibility = "visible";
                        }

                        /* If the loop option was set in the previous call, disable it so that "reverse" calls aren't recursively generated.
                           Further, remove the previous call's callback options; typically, users do not want these to be refired. */
                        Data(element).opts.loop = false;
                        Data(element).opts.begin = null;
                        Data(element).opts.complete = null;

                        /* Since we're extending an opts object that has already been extended with the defaults options object,
                           we remove non-explicitly-defined properties that are auto-assigned values. */
                        if (!options.easing) {
                            delete opts.easing;
                        }

                        if (!options.duration) {
                            delete opts.duration;
                        }

                        /* The opts object used for reversal is an extension of the options object optionally passed into this
                           reverse call plus the options used in the previous Velocity call. */
                        opts = $.extend({}, Data(element).opts, opts);

                        /*************************************
                           Tweens Container Reconstruction
                        *************************************/

                        /* Create a deepy copy (indicated via the true flag) of the previous call's tweensContainer. */
                        var lastTweensContainer = $.extend(true, {}, Data(element).tweensContainer);

                        /* Manipulate the previous tweensContainer by replacing its end values and currentValues with its start values. */
                        for (var lastTween in lastTweensContainer) {
                            /* In addition to tween data, tweensContainers contain an element property that we ignore here. */
                            if (lastTween !== "element") {
                                var lastStartValue = lastTweensContainer[lastTween].startValue;

                                lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
                                lastTweensContainer[lastTween].endValue = lastStartValue;

                                /* Easing is the only option that embeds into the individual tween data (since it can be defined on a per-property basis).
                                   Accordingly, every property's easing value must be updated when an options object is passed in with a reverse call.
                                   The side effect of this extensibility is that all per-property easing values are forcefully reset to the new value. */
                                if (!Type.isEmptyObject(options)) {
                                    lastTweensContainer[lastTween].easing = opts.easing;
                                }

                                if (Velocity.debug) console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element);
                            }
                        }

                        tweensContainer = lastTweensContainer;
                    }

                /*****************************************
                   Tween Data Construction (for Start)
                *****************************************/

                } else if (action === "start") {

                    /*************************
                        Value Transferring
                    *************************/

                    /* If this queue entry follows a previous Velocity-initiated queue entry *and* if this entry was created
                       while the element was in the process of being animated by Velocity, then this current call is safe to use
                       the end values from the prior call as its start values. Velocity attempts to perform this value transfer
                       process whenever possible in order to avoid requerying the DOM. */
                    /* If values aren't transferred from a prior call and start values were not forcefed by the user (more on this below),
                       then the DOM is queried for the element's current values as a last resort. */
                    /* Note: Conversely, animation reversal (and looping) *always* perform inter-call value transfers; they never requery the DOM. */
                    var lastTweensContainer;

                    /* The per-element isAnimating flag is used to indicate whether it's safe (i.e. the data isn't stale)
                       to transfer over end values to use as start values. If it's set to true and there is a previous
                       Velocity call to pull values from, do so. */
                    if (Data(element).tweensContainer && Data(element).isAnimating === true) {
                        lastTweensContainer = Data(element).tweensContainer;
                    }

                    /***************************
                       Tween Data Calculation
                    ***************************/

                    /* This function parses property data and defaults endValue, easing, and startValue as appropriate. */
                    /* Property map values can either take the form of 1) a single value representing the end value,
                       or 2) an array in the form of [ endValue, [, easing] [, startValue] ].
                       The optional third parameter is a forcefed startValue to be used instead of querying the DOM for
                       the element's current value. Read Velocity's docmentation to learn more about forcefeeding: VelocityJS.org/#forcefeeding */
                    function parsePropertyValue (valueData, skipResolvingEasing) {
                        var endValue = undefined,
                            easing = undefined,
                            startValue = undefined;

                        /* Handle the array format, which can be structured as one of three potential overloads:
                           A) [ endValue, easing, startValue ], B) [ endValue, easing ], or C) [ endValue, startValue ] */
                        if (Type.isArray(valueData)) {
                            /* endValue is always the first item in the array. Don't bother validating endValue's value now
                               since the ensuing property cycling logic does that. */
                            endValue = valueData[0];

                            /* Two-item array format: If the second item is a number, function, or hex string, treat it as a
                               start value since easings can only be non-hex strings or arrays. */
                            if ((!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1])) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
                                startValue = valueData[1];
                            /* Two or three-item array: If the second item is a non-hex string or an array, treat it as an easing. */
                            } else if ((Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1])) || Type.isArray(valueData[1])) {
                                easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);

                                /* Don't bother validating startValue's value now since the ensuing property cycling logic inherently does that. */
                                if (valueData[2] !== undefined) {
                                    startValue = valueData[2];
                                }
                            }
                        /* Handle the single-value format. */
                        } else {
                            endValue = valueData;
                        }

                        /* Default to the call's easing if a per-property easing type was not defined. */
                        if (!skipResolvingEasing) {
                            easing = easing || opts.easing;
                        }

                        /* If functions were passed in as values, pass the function the current element as its context,
                           plus the element's index and the element set's size as arguments. Then, assign the returned value. */
                        if (Type.isFunction(endValue)) {
                            endValue = endValue.call(element, elementsIndex, elementsLength);
                        }

                        if (Type.isFunction(startValue)) {
                            startValue = startValue.call(element, elementsIndex, elementsLength);
                        }

                        /* Allow startValue to be left as undefined to indicate to the ensuing code that its value was not forcefed. */
                        return [ endValue || 0, easing, startValue ];
                    }

                    /* Cycle through each property in the map, looking for shorthand color properties (e.g. "color" as opposed to "colorRed"). Inject the corresponding
                       colorRed, colorGreen, and colorBlue RGB component tweens into the propertiesMap (which Velocity understands) and remove the shorthand property. */
                    $.each(propertiesMap, function(property, value) {
                        /* Find shorthand color properties that have been passed a hex string. */
                        if (RegExp("^" + CSS.Lists.colors.join("$|^") + "$").test(property)) {
                            /* Parse the value data for each shorthand. */
                            var valueData = parsePropertyValue(value, true),
                                endValue = valueData[0],
                                easing = valueData[1],
                                startValue = valueData[2];

                            if (CSS.RegEx.isHex.test(endValue)) {
                                /* Convert the hex strings into their RGB component arrays. */
                                var colorComponents = [ "Red", "Green", "Blue" ],
                                    endValueRGB = CSS.Values.hexToRgb(endValue),
                                    startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined;

                                /* Inject the RGB component tweens into propertiesMap. */
                                for (var i = 0; i < colorComponents.length; i++) {
                                    var dataArray = [ endValueRGB[i] ];

                                    if (easing) {
                                        dataArray.push(easing);
                                    }

                                    if (startValueRGB !== undefined) {
                                        dataArray.push(startValueRGB[i]);
                                    }

                                    propertiesMap[property + colorComponents[i]] = dataArray;
                                }

                                /* Remove the intermediary shorthand property entry now that we've processed it. */
                                delete propertiesMap[property];
                            }
                        }
                    });

                    /* Create a tween out of each property, and append its associated data to tweensContainer. */
                    for (var property in propertiesMap) {

                        /**************************
                           Start Value Sourcing
                        **************************/

                        /* Parse out endValue, easing, and startValue from the property's data. */
                        var valueData = parsePropertyValue(propertiesMap[property]),
                            endValue = valueData[0],
                            easing = valueData[1],
                            startValue = valueData[2];

                        /* Now that the original property name's format has been used for the parsePropertyValue() lookup above,
                           we force the property to its camelCase styling to normalize it for manipulation. */
                        property = CSS.Names.camelCase(property);

                        /* In case this property is a hook, there are circumstances where we will intend to work on the hook's root property and not the hooked subproperty. */
                        var rootProperty = CSS.Hooks.getRoot(property),
                            rootPropertyValue = false;

                        /* Other than for the dummy tween property, properties that are not supported by the browser (and do not have an associated normalization) will
                           inherently produce no style changes when set, so they are skipped in order to decrease animation tick overhead.
                           Property support is determined via prefixCheck(), which returns a false flag when no supported is detected. */
                        /* Note: Since SVG elements have some of their properties directly applied as HTML attributes,
                           there is no way to check for their explicit browser support, and so we skip skip this check for them. */
                        if (!Data(element).isSVG && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined) {
                            if (Velocity.debug) console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");

                            continue;
                        }

                        /* If the display option is being set to a non-"none" (e.g. "block") and opacity (filter on IE<=8) is being
                           animated to an endValue of non-zero, the user's intention is to fade in from invisible, thus we forcefeed opacity
                           a startValue of 0 if its startValue hasn't already been sourced by value transferring or prior forcefeeding. */
                        if (((opts.display !== undefined && opts.display !== null && opts.display !== "none") || (opts.visibility !== undefined && opts.visibility !== "hidden")) && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
                            startValue = 0;
                        }

                        /* If values have been transferred from the previous Velocity call, extract the endValue and rootPropertyValue
                           for all of the current call's properties that were *also* animated in the previous call. */
                        /* Note: Value transferring can optionally be disabled by the user via the _cacheValues option. */
                        if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
                            if (startValue === undefined) {
                                startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType;
                            }

                            /* The previous call's rootPropertyValue is extracted from the element's data cache since that's the
                               instance of rootPropertyValue that gets freshly updated by the tweening process, whereas the rootPropertyValue
                               attached to the incoming lastTweensContainer is equal to the root property's value prior to any tweening. */
                            rootPropertyValue = Data(element).rootPropertyValueCache[rootProperty];
                        /* If values were not transferred from a previous Velocity call, query the DOM as needed. */
                        } else {
                            /* Handle hooked properties. */
                            if (CSS.Hooks.registered[property]) {
                               if (startValue === undefined) {
                                    rootPropertyValue = CSS.getPropertyValue(element, rootProperty); /* GET */
                                    /* Note: The following getPropertyValue() call does not actually trigger a DOM query;
                                       getPropertyValue() will extract the hook from rootPropertyValue. */
                                    startValue = CSS.getPropertyValue(element, property, rootPropertyValue);
                                /* If startValue is already defined via forcefeeding, do not query the DOM for the root property's value;
                                   just grab rootProperty's zero-value template from CSS.Hooks. This overwrites the element's actual
                                   root property value (if one is set), but this is acceptable since the primary reason users forcefeed is
                                   to avoid DOM queries, and thus we likewise avoid querying the DOM for the root property's value. */
                                } else {
                                    /* Grab this hook's zero-value template, e.g. "0px 0px 0px black". */
                                    rootPropertyValue = CSS.Hooks.templates[rootProperty][1];
                                }
                            /* Handle non-hooked properties that haven't already been defined via forcefeeding. */
                            } else if (startValue === undefined) {
                                startValue = CSS.getPropertyValue(element, property); /* GET */
                            }
                        }

                        /**************************
                           Value Data Extraction
                        **************************/

                        var separatedValue,
                            endValueUnitType,
                            startValueUnitType,
                            operator = false;

                        /* Separates a property value into its numeric value and its unit type. */
                        function separateValue (property, value) {
                            var unitType,
                                numericValue;

                            numericValue = (value || "0")
                                .toString()
                                .toLowerCase()
                                /* Match the unit type at the end of the value. */
                                .replace(/[%A-z]+$/, function(match) {
                                    /* Grab the unit type. */
                                    unitType = match;

                                    /* Strip the unit type off of value. */
                                    return "";
                                });

                            /* If no unit type was supplied, assign one that is appropriate for this property (e.g. "deg" for rotateZ or "px" for width). */
                            if (!unitType) {
                                unitType = CSS.Values.getUnitType(property);
                            }

                            return [ numericValue, unitType ];
                        }

                        /* Separate startValue. */
                        separatedValue = separateValue(property, startValue);
                        startValue = separatedValue[0];
                        startValueUnitType = separatedValue[1];

                        /* Separate endValue, and extract a value operator (e.g. "+=", "-=") if one exists. */
                        separatedValue = separateValue(property, endValue);
                        endValue = separatedValue[0].replace(/^([+-\/*])=/, function(match, subMatch) {
                            operator = subMatch;

                            /* Strip the operator off of the value. */
                            return "";
                        });
                        endValueUnitType = separatedValue[1];

                        /* Parse float values from endValue and startValue. Default to 0 if NaN is returned. */
                        startValue = parseFloat(startValue) || 0;
                        endValue = parseFloat(endValue) || 0;

                        /***************************************
                           Property-Specific Value Conversion
                        ***************************************/

                        /* Custom support for properties that don't actually accept the % unit type, but where pollyfilling is trivial and relatively foolproof. */
                        if (endValueUnitType === "%") {
                            /* A %-value fontSize/lineHeight is relative to the parent's fontSize (as opposed to the parent's dimensions),
                               which is identical to the em unit's behavior, so we piggyback off of that. */
                            if (/^(fontSize|lineHeight)$/.test(property)) {
                                /* Convert % into an em decimal value. */
                                endValue = endValue / 100;
                                endValueUnitType = "em";
                            /* For scaleX and scaleY, convert the value into its decimal format and strip off the unit type. */
                            } else if (/^scale/.test(property)) {
                                endValue = endValue / 100;
                                endValueUnitType = "";
                            /* For RGB components, take the defined percentage of 255 and strip off the unit type. */
                            } else if (/(Red|Green|Blue)$/i.test(property)) {
                                endValue = (endValue / 100) * 255;
                                endValueUnitType = "";
                            }
                        }

                        /***************************
                           Unit Ratio Calculation
                        ***************************/

                        /* When queried, the browser returns (most) CSS property values in pixels. Therefore, if an endValue with a unit type of
                           %, em, or rem is animated toward, startValue must be converted from pixels into the same unit type as endValue in order
                           for value manipulation logic (increment/decrement) to proceed. Further, if the startValue was forcefed or transferred
                           from a previous call, startValue may also not be in pixels. Unit conversion logic therefore consists of two steps:
                           1) Calculating the ratio of %/em/rem/vh/vw relative to pixels
                           2) Converting startValue into the same unit of measurement as endValue based on these ratios. */
                        /* Unit conversion ratios are calculated by inserting a sibling node next to the target node, copying over its position property,
                           setting values with the target unit type then comparing the returned pixel value. */
                        /* Note: Even if only one of these unit types is being animated, all unit ratios are calculated at once since the overhead
                           of batching the SETs and GETs together upfront outweights the potential overhead
                           of layout thrashing caused by re-querying for uncalculated ratios for subsequently-processed properties. */
                        /* Todo: Shift this logic into the calls' first tick instance so that it's synced with RAF. */
                        function calculateUnitRatios () {

                            /************************
                                Same Ratio Checks
                            ************************/

                            /* The properties below are used to determine whether the element differs sufficiently from this call's
                               previously iterated element to also differ in its unit conversion ratios. If the properties match up with those
                               of the prior element, the prior element's conversion ratios are used. Like most optimizations in Velocity,
                               this is done to minimize DOM querying. */
                            var sameRatioIndicators = {
                                    myParent: element.parentNode || document.body, /* GET */
                                    position: CSS.getPropertyValue(element, "position"), /* GET */
                                    fontSize: CSS.getPropertyValue(element, "fontSize") /* GET */
                                },
                                /* Determine if the same % ratio can be used. % is based on the element's position value and its parent's width and height dimensions. */
                                samePercentRatio = ((sameRatioIndicators.position === callUnitConversionData.lastPosition) && (sameRatioIndicators.myParent === callUnitConversionData.lastParent)),
                                /* Determine if the same em ratio can be used. em is relative to the element's fontSize. */
                                sameEmRatio = (sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize);

                            /* Store these ratio indicators call-wide for the next element to compare against. */
                            callUnitConversionData.lastParent = sameRatioIndicators.myParent;
                            callUnitConversionData.lastPosition = sameRatioIndicators.position;
                            callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;

                            /***************************
                               Element-Specific Units
                            ***************************/

                            /* Note: IE8 rounds to the nearest pixel when returning CSS values, thus we perform conversions using a measurement
                               of 100 (instead of 1) to give our ratios a precision of at least 2 decimal values. */
                            var measurement = 100,
                                unitRatios = {};

                            if (!sameEmRatio || !samePercentRatio) {
                                var dummy = Data(element).isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");

                                Velocity.init(dummy);
                                sameRatioIndicators.myParent.appendChild(dummy);

                                /* To accurately and consistently calculate conversion ratios, the element's cascaded overflow and box-sizing are stripped.
                                   Similarly, since width/height can be artificially constrained by their min-/max- equivalents, these are controlled for as well. */
                                /* Note: Overflow must be also be controlled for per-axis since the overflow property overwrites its per-axis values. */
                                $.each([ "overflow", "overflowX", "overflowY" ], function(i, property) {
                                    Velocity.CSS.setPropertyValue(dummy, property, "hidden");
                                });
                                Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
                                Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
                                Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");

                                /* width and height act as our proxy properties for measuring the horizontal and vertical % ratios. */
                                $.each([ "minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height" ], function(i, property) {
                                    Velocity.CSS.setPropertyValue(dummy, property, measurement + "%");
                                });
                                /* paddingLeft arbitrarily acts as our proxy property for the em ratio. */
                                Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");

                                /* Divide the returned value by the measurement to get the ratio between 1% and 1px. Default to 1 since working with 0 can produce Infinite. */
                                unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement; /* GET */
                                unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement; /* GET */
                                unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement; /* GET */

                                sameRatioIndicators.myParent.removeChild(dummy);
                            } else {
                                unitRatios.emToPx = callUnitConversionData.lastEmToPx;
                                unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
                                unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight;
                            }

                            /***************************
                               Element-Agnostic Units
                            ***************************/

                            /* Whereas % and em ratios are determined on a per-element basis, the rem unit only needs to be checked
                               once per call since it's exclusively dependant upon document.body's fontSize. If this is the first time
                               that calculateUnitRatios() is being run during this call, remToPx will still be set to its default value of null,
                               so we calculate it now. */
                            if (callUnitConversionData.remToPx === null) {
                                /* Default to browsers' default fontSize of 16px in the case of 0. */
                                callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16; /* GET */
                            }

                            /* Similarly, viewport units are %-relative to the window's inner dimensions. */
                            if (callUnitConversionData.vwToPx === null) {
                                callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100; /* GET */
                                callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100; /* GET */
                            }

                            unitRatios.remToPx = callUnitConversionData.remToPx;
                            unitRatios.vwToPx = callUnitConversionData.vwToPx;
                            unitRatios.vhToPx = callUnitConversionData.vhToPx;

                            if (Velocity.debug >= 1) console.log("Unit ratios: " + JSON.stringify(unitRatios), element);

                            return unitRatios;
                        }

                        /********************
                           Unit Conversion
                        ********************/

                        /* The * and / operators, which are not passed in with an associated unit, inherently use startValue's unit. Skip value and unit conversion. */
                        if (/[\/*]/.test(operator)) {
                            endValueUnitType = startValueUnitType;
                        /* If startValue and endValue differ in unit type, convert startValue into the same unit type as endValue so that if endValueUnitType
                           is a relative unit (%, em, rem), the values set during tweening will continue to be accurately relative even if the metrics they depend
                           on are dynamically changing during the course of the animation. Conversely, if we always normalized into px and used px for setting values, the px ratio
                           would become stale if the original unit being animated toward was relative and the underlying metrics change during the animation. */
                        /* Since 0 is 0 in any unit type, no conversion is necessary when startValue is 0 -- we just start at 0 with endValueUnitType. */
                        } else if ((startValueUnitType !== endValueUnitType) && startValue !== 0) {
                            /* Unit conversion is also skipped when endValue is 0, but *startValueUnitType* must be used for tween values to remain accurate. */
                            /* Note: Skipping unit conversion here means that if endValueUnitType was originally a relative unit, the animation won't relatively
                               match the underlying metrics if they change, but this is acceptable since we're animating toward invisibility instead of toward visibility,
                               which remains past the point of the animation's completion. */
                            if (endValue === 0) {
                                endValueUnitType = startValueUnitType;
                            } else {
                                /* By this point, we cannot avoid unit conversion (it's undesirable since it causes layout thrashing).
                                   If we haven't already, we trigger calculateUnitRatios(), which runs once per element per call. */
                                elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();

                                /* The following RegEx matches CSS properties that have their % values measured relative to the x-axis. */
                                /* Note: W3C spec mandates that all of margin and padding's properties (even top and bottom) are %-relative to the *width* of the parent element. */
                                var axis = (/margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x") ? "x" : "y";

                                /* In order to avoid generating n^2 bespoke conversion functions, unit conversion is a two-step process:
                                   1) Convert startValue into pixels. 2) Convert this new pixel value into endValue's unit type. */
                                switch (startValueUnitType) {
                                    case "%":
                                        /* Note: translateX and translateY are the only properties that are %-relative to an element's own dimensions -- not its parent's dimensions.
                                           Velocity does not include a special conversion process to account for this behavior. Therefore, animating translateX/Y from a % value
                                           to a non-% value will produce an incorrect start value. Fortunately, this sort of cross-unit conversion is rarely done by users in practice. */
                                        startValue *= (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
                                        break;

                                    case "px":
                                        /* px acts as our midpoint in the unit conversion process; do nothing. */
                                        break;

                                    default:
                                        startValue *= elementUnitConversionData[startValueUnitType + "ToPx"];
                                }

                                /* Invert the px ratios to convert into to the target unit. */
                                switch (endValueUnitType) {
                                    case "%":
                                        startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
                                        break;

                                    case "px":
                                        /* startValue is already in px, do nothing; we're done. */
                                        break;

                                    default:
                                        startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"];
                                }
                            }
                        }

                        /*********************
                           Relative Values
                        *********************/

                        /* Operator logic must be performed last since it requires unit-normalized start and end values. */
                        /* Note: Relative *percent values* do not behave how most people think; while one would expect "+=50%"
                           to increase the property 1.5x its current value, it in fact increases the percent units in absolute terms:
                           50 points is added on top of the current % value. */
                        switch (operator) {
                            case "+":
                                endValue = startValue + endValue;
                                break;

                            case "-":
                                endValue = startValue - endValue;
                                break;

                            case "*":
                                endValue = startValue * endValue;
                                break;

                            case "/":
                                endValue = startValue / endValue;
                                break;
                        }

                        /**************************
                           tweensContainer Push
                        **************************/

                        /* Construct the per-property tween object, and push it to the element's tweensContainer. */
                        tweensContainer[property] = {
                            rootPropertyValue: rootPropertyValue,
                            startValue: startValue,
                            currentValue: startValue,
                            endValue: endValue,
                            unitType: endValueUnitType,
                            easing: easing
                        };

                        if (Velocity.debug) console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element);
                    }

                    /* Along with its property data, store a reference to the element itself onto tweensContainer. */
                    tweensContainer.element = element;
                }

                /*****************
                    Call Push
                *****************/

                /* Note: tweensContainer can be empty if all of the properties in this call's property map were skipped due to not
                   being supported by the browser. The element property is used for checking that the tweensContainer has been appended to. */
                if (tweensContainer.element) {
                    /* Apply the "velocity-animating" indicator class. */
                    CSS.Values.addClass(element, "velocity-animating");

                    /* The call array houses the tweensContainers for each element being animated in the current call. */
                    call.push(tweensContainer);

                    /* Store the tweensContainer and options if we're working on the default effects queue, so that they can be used by the reverse command. */
                    if (opts.queue === "") {
                        Data(element).tweensContainer = tweensContainer;
                        Data(element).opts = opts;
                    }

                    /* Switch on the element's animating flag. */
                    Data(element).isAnimating = true;

                    /* Once the final element in this call's element set has been processed, push the call array onto
                       Velocity.State.calls for the animation tick to immediately begin processing. */
                    if (elementsIndex === elementsLength - 1) {
                        /* Add the current call plus its associated metadata (the element set and the call's options) onto the global call container.
                           Anything on this call container is subjected to tick() processing. */
                        Velocity.State.calls.push([ call, elements, opts, null, promiseData.resolver ]);

                        /* If the animation tick isn't running, start it. (Velocity shuts it off when there are no active calls to process.) */
                        if (Velocity.State.isTicking === false) {
                            Velocity.State.isTicking = true;

                            /* Start the tick loop. */
                            tick();
                        }
                    } else {
                        elementsIndex++;
                    }
                }
            }

            /* When the queue option is set to false, the call skips the element's queue and fires immediately. */
            if (opts.queue === false) {
                /* Since this buildQueue call doesn't respect the element's existing queue (which is where a delay option would have been appended),
                   we manually inject the delay property here with an explicit setTimeout. */
                if (opts.delay) {
                    setTimeout(buildQueue, opts.delay);
                } else {
                    buildQueue();
                }
            /* Otherwise, the call undergoes element queueing as normal. */
            /* Note: To interoperate with jQuery, Velocity uses jQuery's own $.queue() stack for queuing logic. */
            } else {
                $.queue(element, opts.queue, function(next, clearQueue) {
                    /* If the clearQueue flag was passed in by the stop command, resolve this call's promise. (Promises can only be resolved once,
                       so it's fine if this is repeatedly triggered for each element in the associated call.) */
                    if (clearQueue === true) {
                        if (promiseData.promise) {
                            promiseData.resolver(elements);
                        }

                        /* Do not continue with animation queueing. */
                        return true;
                    }

                    /* This flag indicates to the upcoming completeCall() function that this queue entry was initiated by Velocity.
                       See completeCall() for further details. */
                    Velocity.velocityQueueEntryFlag = true;

                    buildQueue(next);
                });
            }

            /*********************
                Auto-Dequeuing
            *********************/

            /* As per jQuery's $.queue() behavior, to fire the first non-custom-queue entry on an element, the element
               must be dequeued if its queue stack consists *solely* of the current call. (This can be determined by checking
               for the "inprogress" item that jQuery prepends to active queue stack arrays.) Regardless, whenever the element's
               queue is further appended with additional items -- including $.delay()'s or even $.animate() calls, the queue's
               first entry is automatically fired. This behavior contrasts that of custom queues, which never auto-fire. */
            /* Note: When an element set is being subjected to a non-parallel Velocity call, the animation will not begin until
               each one of the elements in the set has reached the end of its individually pre-existing queue chain. */
            /* Note: Unfortunately, most people don't fully grasp jQuery's powerful, yet quirky, $.queue() function.
               Lean more here: http://stackoverflow.com/questions/1058158/can-somebody-explain-jquery-queue-to-me */
            if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
                $.dequeue(element);
            }
        }

        /**************************
           Element Set Iteration
        **************************/

        /* If the "nodeType" property exists on the elements variable, we're animating a single element.
           Place it in an array so that $.each() can iterate over it. */
        $.each(elements, function(i, element) {
            /* Ensure each element in a set has a nodeType (is a real element) to avoid throwing errors. */
            if (Type.isNode(element)) {
                processElement.call(element);
            }
        });

        /******************
           Option: Loop
        ******************/

        /* The loop option accepts an integer indicating how many times the element should loop between the values in the
           current call's properties map and the element's property values prior to this call. */
        /* Note: The loop option's logic is performed here -- after element processing -- because the current call needs
           to undergo its queue insertion prior to the loop option generating its series of constituent "reverse" calls,
           which chain after the current call. Two reverse calls (two "alternations") constitute one loop. */
        var opts = $.extend({}, Velocity.defaults, options),
            reverseCallsCount;

        opts.loop = parseInt(opts.loop);
        reverseCallsCount = (opts.loop * 2) - 1;

        if (opts.loop) {
            /* Double the loop count to convert it into its appropriate number of "reverse" calls.
               Subtract 1 from the resulting value since the current call is included in the total alternation count. */
            for (var x = 0; x < reverseCallsCount; x++) {
                /* Since the logic for the reverse action occurs inside Queueing and therefore this call's options object
                   isn't parsed until then as well, the current call's delay option must be explicitly passed into the reverse
                   call so that the delay logic that occurs inside *Pre-Queueing* can process it. */
                var reverseOptions = {
                    delay: opts.delay,
                    progress: opts.progress
                };

                /* If a complete callback was passed into this call, transfer it to the loop redirect's final "reverse" call
                   so that it's triggered when the entire redirect is complete (and not when the very first animation is complete). */
                if (x === reverseCallsCount - 1) {
                    reverseOptions.display = opts.display;
                    reverseOptions.visibility = opts.visibility;
                    reverseOptions.complete = opts.complete;
                }

                animate(elements, "reverse", reverseOptions);
            }
        }

        /***************
            Chaining
        ***************/

        /* Return the elements back to the call chain, with wrapped elements taking precedence in case Velocity was called via the $.fn. extension. */
        return getChain();
    };

    /* Turn Velocity into the animation function, extended with the pre-existing Velocity object. */
    Velocity = $.extend(animate, Velocity);
    /* For legacy support, also expose the literal animate method. */
    Velocity.animate = animate;

    /**************
        Timing
    **************/

    /* Ticker function. */
    var ticker = window.requestAnimationFrame || rAFShim;

    /* Inactive browser tabs pause rAF, which results in all active animations immediately sprinting to their completion states when the tab refocuses.
       To get around this, we dynamically switch rAF to setTimeout (which the browser *doesn't* pause) when the tab loses focus. We skip this for mobile
       devices to avoid wasting battery power on inactive tabs. */
    /* Note: Tab focus detection doesn't work on older versions of IE, but that's okay since they don't support rAF to begin with. */
    if (!Velocity.State.isMobile && document.hidden !== undefined) {
        document.addEventListener("visibilitychange", function() {
            /* Reassign the rAF function (which the global tick() function uses) based on the tab's focus state. */
            if (document.hidden) {
                ticker = function(callback) {
                    /* The tick function needs a truthy first argument in order to pass its internal timestamp check. */
                    return setTimeout(function() { callback(true) }, 16);
                };

                /* The rAF loop has been paused by the browser, so we manually restart the tick. */
                tick();
            } else {
                ticker = window.requestAnimationFrame || rAFShim;
            }
        });
    }

    /************
        Tick
    ************/

    /* Note: All calls to Velocity are pushed to the Velocity.State.calls array, which is fully iterated through upon each tick. */
    function tick (timestamp) {
        /* An empty timestamp argument indicates that this is the first tick occurence since ticking was turned on.
           We leverage this metadata to fully ignore the first tick pass since RAF's initial pass is fired whenever
           the browser's next tick sync time occurs, which results in the first elements subjected to Velocity
           calls being animated out of sync with any elements animated immediately thereafter. In short, we ignore
           the first RAF tick pass so that elements being immediately consecutively animated -- instead of simultaneously animated
           by the same Velocity call -- are properly batched into the same initial RAF tick and consequently remain in sync thereafter. */
        if (timestamp) {
            /* We ignore RAF's high resolution timestamp since it can be significantly offset when the browser is
               under high stress; we opt for choppiness over allowing the browser to drop huge chunks of frames. */
            var timeCurrent = (new Date).getTime();

            /********************
               Call Iteration
            ********************/

            var callsLength = Velocity.State.calls.length;

            /* To speed up iterating over this array, it is compacted (falsey items -- calls that have completed -- are removed)
               when its length has ballooned to a point that can impact tick performance. This only becomes necessary when animation
               has been continuous with many elements over a long period of time; whenever all active calls are completed, completeCall() clears Velocity.State.calls. */
            if (callsLength > 10000) {
                Velocity.State.calls = compactSparseArray(Velocity.State.calls);
            }

            /* Iterate through each active call. */
            for (var i = 0; i < callsLength; i++) {
                /* When a Velocity call is completed, its Velocity.State.calls entry is set to false. Continue on to the next call. */
                if (!Velocity.State.calls[i]) {
                    continue;
                }

                /************************
                   Call-Wide Variables
                ************************/

                var callContainer = Velocity.State.calls[i],
                    call = callContainer[0],
                    opts = callContainer[2],
                    timeStart = callContainer[3],
                    firstTick = !!timeStart,
                    tweenDummyValue = null;

                /* If timeStart is undefined, then this is the first time that this call has been processed by tick().
                   We assign timeStart now so that its value is as close to the real animation start time as possible.
                   (Conversely, had timeStart been defined when this call was added to Velocity.State.calls, the delay
                   between that time and now would cause the first few frames of the tween to be skipped since
                   percentComplete is calculated relative to timeStart.) */
                /* Further, subtract 16ms (the approximate resolution of RAF) from the current time value so that the
                   first tick iteration isn't wasted by animating at 0% tween completion, which would produce the
                   same style value as the element's current value. */
                if (!timeStart) {
                    timeStart = Velocity.State.calls[i][3] = timeCurrent - 16;
                }

                /* The tween's completion percentage is relative to the tween's start time, not the tween's start value
                   (which would result in unpredictable tween durations since JavaScript's timers are not particularly accurate).
                   Accordingly, we ensure that percentComplete does not exceed 1. */
                var percentComplete = Math.min((timeCurrent - timeStart) / opts.duration, 1);

                /**********************
                   Element Iteration
                **********************/

                /* For every call, iterate through each of the elements in its set. */
                for (var j = 0, callLength = call.length; j < callLength; j++) {
                    var tweensContainer = call[j],
                        element = tweensContainer.element;

                    /* Check to see if this element has been deleted midway through the animation by checking for the
                       continued existence of its data cache. If it's gone, skip animating this element. */
                    if (!Data(element)) {
                        continue;
                    }

                    var transformPropertyExists = false;

                    /**********************************
                       Display & Visibility Toggling
                    **********************************/

                    /* If the display option is set to non-"none", set it upfront so that the element can become visible before tweening begins.
                       (Otherwise, display's "none" value is set in completeCall() once the animation has completed.) */
                    if (opts.display !== undefined && opts.display !== null && opts.display !== "none") {
                        if (opts.display === "flex") {
                            var flexValues = [ "-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex" ];

                            $.each(flexValues, function(i, flexValue) {
                                CSS.setPropertyValue(element, "display", flexValue);
                            });
                        }

                        CSS.setPropertyValue(element, "display", opts.display);
                    }

                    /* Same goes with the visibility option, but its "none" equivalent is "hidden". */
                    if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                        CSS.setPropertyValue(element, "visibility", opts.visibility);
                    }

                    /************************
                       Property Iteration
                    ************************/

                    /* For every element, iterate through each property. */
                    for (var property in tweensContainer) {
                        /* Note: In addition to property tween data, tweensContainer contains a reference to its associated element. */
                        if (property !== "element") {
                            var tween = tweensContainer[property],
                                currentValue,
                                /* Easing can either be a pre-genereated function or a string that references a pre-registered easing
                                   on the Velocity.Easings object. In either case, return the appropriate easing *function*. */
                                easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;

                            /******************************
                               Current Value Calculation
                            ******************************/

                            /* If this is the last tick pass (if we've reached 100% completion for this tween),
                               ensure that currentValue is explicitly set to its target endValue so that it's not subjected to any rounding. */
                            if (percentComplete === 1) {
                                currentValue = tween.endValue;
                            /* Otherwise, calculate currentValue based on the current delta from startValue. */
                            } else {
                                var tweenDelta = tween.endValue - tween.startValue;
                                currentValue = tween.startValue + (tweenDelta * easing(percentComplete, opts, tweenDelta));

                                /* If no value change is occurring, don't proceed with DOM updating. */
                                if (!firstTick && (currentValue === tween.currentValue)) {
                                    continue;
                                }
                            }

                            tween.currentValue = currentValue;

                            /* If we're tweening a fake 'tween' property in order to log transition values, update the one-per-call variable so that
                               it can be passed into the progress callback. */
                            if (property === "tween") {
                                tweenDummyValue = currentValue;
                            } else {
                                /******************
                                   Hooks: Part I
                                ******************/

                                /* For hooked properties, the newly-updated rootPropertyValueCache is cached onto the element so that it can be used
                                   for subsequent hooks in this call that are associated with the same root property. If we didn't cache the updated
                                   rootPropertyValue, each subsequent update to the root property in this tick pass would reset the previous hook's
                                   updates to rootPropertyValue prior to injection. A nice performance byproduct of rootPropertyValue caching is that
                                   subsequently chained animations using the same hookRoot but a different hook can use this cached rootPropertyValue. */
                                if (CSS.Hooks.registered[property]) {
                                    var hookRoot = CSS.Hooks.getRoot(property),
                                        rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];

                                    if (rootPropertyValueCache) {
                                        tween.rootPropertyValue = rootPropertyValueCache;
                                    }
                                }

                                /*****************
                                    DOM Update
                                *****************/

                                /* setPropertyValue() returns an array of the property name and property value post any normalization that may have been performed. */
                                /* Note: To solve an IE<=8 positioning bug, the unit type is dropped when setting a property value of 0. */
                                var adjustedSetData = CSS.setPropertyValue(element, /* SET */
                                                                           property,
                                                                           tween.currentValue + (parseFloat(currentValue) === 0 ? "" : tween.unitType),
                                                                           tween.rootPropertyValue,
                                                                           tween.scrollData);

                                /*******************
                                   Hooks: Part II
                                *******************/

                                /* Now that we have the hook's updated rootPropertyValue (the post-processed value provided by adjustedSetData), cache it onto the element. */
                                if (CSS.Hooks.registered[property]) {
                                    /* Since adjustedSetData contains normalized data ready for DOM updating, the rootPropertyValue needs to be re-extracted from its normalized form. ?? */
                                    if (CSS.Normalizations.registered[hookRoot]) {
                                        Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1]);
                                    } else {
                                        Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1];
                                    }
                                }

                                /***************
                                   Transforms
                                ***************/

                                /* Flag whether a transform property is being animated so that flushTransformCache() can be triggered once this tick pass is complete. */
                                if (adjustedSetData[0] === "transform") {
                                    transformPropertyExists = true;
                                }

                            }
                        }
                    }

                    /****************
                        mobileHA
                    ****************/

                    /* If mobileHA is enabled, set the translate3d transform to null to force hardware acceleration.
                       It's safe to override this property since Velocity doesn't actually support its animation (hooks are used in its place). */
                    if (opts.mobileHA) {
                        /* Don't set the null transform hack if we've already done so. */
                        if (Data(element).transformCache.translate3d === undefined) {
                            /* All entries on the transformCache object are later concatenated into a single transform string via flushTransformCache(). */
                            Data(element).transformCache.translate3d = "(0px, 0px, 0px)";

                            transformPropertyExists = true;
                        }
                    }

                    if (transformPropertyExists) {
                        CSS.flushTransformCache(element);
                    }
                }

                /* The non-"none" display value is only applied to an element once -- when its associated call is first ticked through.
                   Accordingly, it's set to false so that it isn't re-processed by this call in the next tick. */
                if (opts.display !== undefined && opts.display !== "none") {
                    Velocity.State.calls[i][2].display = false;
                }
                if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                    Velocity.State.calls[i][2].visibility = false;
                }

                /* Pass the elements and the timing data (percentComplete, msRemaining, timeStart, tweenDummyValue) into the progress callback. */
                if (opts.progress) {
                    opts.progress.call(callContainer[1],
                                       callContainer[1],
                                       percentComplete,
                                       Math.max(0, (timeStart + opts.duration) - timeCurrent),
                                       timeStart,
                                       tweenDummyValue);
                }

                /* If this call has finished tweening, pass its index to completeCall() to handle call cleanup. */
                if (percentComplete === 1) {
                    completeCall(i);
                }
            }
        }

        /* Note: completeCall() sets the isTicking flag to false when the last call on Velocity.State.calls has completed. */
        if (Velocity.State.isTicking) {
            ticker(tick);
        }
    }

    /**********************
        Call Completion
    **********************/

    /* Note: Unlike tick(), which processes all active calls at once, call completion is handled on a per-call basis. */
    function completeCall (callIndex, isStopped) {
        /* Ensure the call exists. */
        if (!Velocity.State.calls[callIndex]) {
            return false;
        }

        /* Pull the metadata from the call. */
        var call = Velocity.State.calls[callIndex][0],
            elements = Velocity.State.calls[callIndex][1],
            opts = Velocity.State.calls[callIndex][2],
            resolver = Velocity.State.calls[callIndex][4];

        var remainingCallsExist = false;

        /*************************
           Element Finalization
        *************************/

        for (var i = 0, callLength = call.length; i < callLength; i++) {
            var element = call[i].element;

            /* If the user set display to "none" (intending to hide the element), set it now that the animation has completed. */
            /* Note: display:none isn't set when calls are manually stopped (via Velocity("stop"). */
            /* Note: Display gets ignored with "reverse" calls and infinite loops, since this behavior would be undesirable. */
            if (!isStopped && !opts.loop) {
                if (opts.display === "none") {
                    CSS.setPropertyValue(element, "display", opts.display);
                }

                if (opts.visibility === "hidden") {
                    CSS.setPropertyValue(element, "visibility", opts.visibility);
                }
            }

            /* If the element's queue is empty (if only the "inprogress" item is left at position 0) or if its queue is about to run
               a non-Velocity-initiated entry, turn off the isAnimating flag. A non-Velocity-initiatied queue entry's logic might alter
               an element's CSS values and thereby cause Velocity's cached value data to go stale. To detect if a queue entry was initiated by Velocity,
               we check for the existence of our special Velocity.queueEntryFlag declaration, which minifiers won't rename since the flag
               is assigned to jQuery's global $ object and thus exists out of Velocity's own scope. */
            if (opts.loop !== true && ($.queue(element)[1] === undefined || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
                /* The element may have been deleted. Ensure that its data cache still exists before acting on it. */
                if (Data(element)) {
                    Data(element).isAnimating = false;
                    /* Clear the element's rootPropertyValueCache, which will become stale. */
                    Data(element).rootPropertyValueCache = {};

                    var transformHAPropertyExists = false;
                    /* If any 3D transform subproperty is at its default value (regardless of unit type), remove it. */
                    $.each(CSS.Lists.transforms3D, function(i, transformName) {
                        var defaultValue = /^scale/.test(transformName) ? 1 : 0,
                            currentValue = Data(element).transformCache[transformName];

                        if (Data(element).transformCache[transformName] !== undefined && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
                            transformHAPropertyExists = true;

                            delete Data(element).transformCache[transformName];
                        }
                    });

                    /* Mobile devices have hardware acceleration removed at the end of the animation in order to avoid hogging the GPU's memory. */
                    if (opts.mobileHA) {
                        transformHAPropertyExists = true;
                        delete Data(element).transformCache.translate3d;
                    }

                    /* Flush the subproperty removals to the DOM. */
                    if (transformHAPropertyExists) {
                        CSS.flushTransformCache(element);
                    }

                    /* Remove the "velocity-animating" indicator class. */
                    CSS.Values.removeClass(element, "velocity-animating");
                }
            }

            /*********************
               Option: Complete
            *********************/

            /* Complete is fired once per call (not once per element) and is passed the full raw DOM element set as both its context and its first argument. */
            /* Note: Callbacks aren't fired when calls are manually stopped (via Velocity("stop"). */
            if (!isStopped && opts.complete && !opts.loop && (i === callLength - 1)) {
                /* We throw callbacks in a setTimeout so that thrown errors don't halt the execution of Velocity itself. */
                try {
                    opts.complete.call(elements, elements);
                } catch (error) {
                    setTimeout(function() { throw error; }, 1);
                }
            }

            /**********************
               Promise Resolving
            **********************/

            /* Note: Infinite loops don't return promises. */
            if (resolver && opts.loop !== true) {
                resolver(elements);
            }

            /****************************
               Option: Loop (Infinite)
            ****************************/

            if (Data(element) && opts.loop === true && !isStopped) {
                /* If a rotateX/Y/Z property is being animated to 360 deg with loop:true, swap tween start/end values to enable
                   continuous iterative rotation looping. (Otherise, the element would just rotate back and forth.) */
                $.each(Data(element).tweensContainer, function(propertyName, tweenContainer) {
                    if (/^rotate/.test(propertyName) && parseFloat(tweenContainer.endValue) === 360) {
                        tweenContainer.endValue = 0;
                        tweenContainer.startValue = 360;
                    }

                    if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
                        tweenContainer.endValue = 0;
                        tweenContainer.startValue = 100;
                    }
                });

                Velocity(element, "reverse", { loop: true, delay: opts.delay });
            }

            /***************
               Dequeueing
            ***************/

            /* Fire the next call in the queue so long as this call's queue wasn't set to false (to trigger a parallel animation),
               which would have already caused the next call to fire. Note: Even if the end of the animation queue has been reached,
               $.dequeue() must still be called in order to completely clear jQuery's animation queue. */
            if (opts.queue !== false) {
                $.dequeue(element, opts.queue);
            }
        }

        /************************
           Calls Array Cleanup
        ************************/

        /* Since this call is complete, set it to false so that the rAF tick skips it. This array is later compacted via compactSparseArray().
          (For performance reasons, the call is set to false instead of being deleted from the array: http://www.html5rocks.com/en/tutorials/speed/v8/) */
        Velocity.State.calls[callIndex] = false;

        /* Iterate through the calls array to determine if this was the final in-progress animation.
           If so, set a flag to end ticking and clear the calls array. */
        for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
            if (Velocity.State.calls[j] !== false) {
                remainingCallsExist = true;

                break;
            }
        }

        if (remainingCallsExist === false) {
            /* tick() will detect this flag upon its next iteration and subsequently turn itself off. */
            Velocity.State.isTicking = false;

            /* Clear the calls array so that its length is reset. */
            delete Velocity.State.calls;
            Velocity.State.calls = [];
        }
    }

    /******************
        Frameworks
    ******************/

    /* Both jQuery and Zepto allow their $.fn object to be extended to allow wrapped elements to be subjected to plugin calls.
       If either framework is loaded, register a "velocity" extension pointing to Velocity's core animate() method.  Velocity
       also registers itself onto a global container (window.jQuery || window.Zepto || window) so that certain features are
       accessible beyond just a per-element scope. This master object contains an .animate() method, which is later assigned to $.fn
       (if jQuery or Zepto are present). Accordingly, Velocity can both act on wrapped DOM elements and stand alone for targeting raw DOM elements. */
    global.Velocity = Velocity;

    if (global !== window) {
        /* Assign the element function to Velocity's core animate() method. */
        global.fn.velocity = animate;
        /* Assign the object function's defaults to Velocity's global defaults object. */
        global.fn.velocity.defaults = Velocity.defaults;
    }

    /***********************
       Packaged Redirects
    ***********************/

    /* slideUp, slideDown */
    $.each([ "Down", "Up" ], function(i, direction) {
        Velocity.Redirects["slide" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
            var opts = $.extend({}, options),
                begin = opts.begin,
                complete = opts.complete,
                computedValues = { height: "", marginTop: "", marginBottom: "", paddingTop: "", paddingBottom: "" },
                inlineValues = {};

            if (opts.display === undefined) {
                /* Show the element before slideDown begins and hide the element after slideUp completes. */
                /* Note: Inline elements cannot have dimensions animated, so they're reverted to inline-block. */
                opts.display = (direction === "Down" ? (Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block") : "none");
            }

            opts.begin = function() {
                /* If the user passed in a begin callback, fire it now. */
                begin && begin.call(elements, elements);

                /* Cache the elements' original vertical dimensional property values so that we can animate back to them. */
                for (var property in computedValues) {
                    inlineValues[property] = element.style[property];

                    /* For slideDown, use forcefeeding to animate all vertical properties from 0. For slideUp,
                       use forcefeeding to start from computed values and animate down to 0. */
                    var propertyValue = Velocity.CSS.getPropertyValue(element, property);
                    computedValues[property] = (direction === "Down") ? [ propertyValue, 0 ] : [ 0, propertyValue ];
                }

                /* Force vertical overflow content to clip so that sliding works as expected. */
                inlineValues.overflow = element.style.overflow;
                element.style.overflow = "hidden";
            }

            opts.complete = function() {
                /* Reset element to its pre-slide inline values once its slide animation is complete. */
                for (var property in inlineValues) {
                    element.style[property] = inlineValues[property];
                }

                /* If the user passed in a complete callback, fire it now. */
                complete && complete.call(elements, elements);
                promiseData && promiseData.resolver(elements);
            };

            Velocity(element, computedValues, opts);
        };
    });

    /* fadeIn, fadeOut */
    $.each([ "In", "Out" ], function(i, direction) {
        Velocity.Redirects["fade" + direction] = function (element, options, elementsIndex, elementsSize, elements, promiseData) {
            var opts = $.extend({}, options),
                propertiesMap = { opacity: (direction === "In") ? 1 : 0 },
                originalComplete = opts.complete;

            /* Since redirects are triggered individually for each element in the animated set, avoid repeatedly triggering
               callbacks by firing them only when the final element has been reached. */
            if (elementsIndex !== elementsSize - 1) {
                opts.complete = opts.begin = null;
            } else {
                opts.complete = function() {
                    if (originalComplete) {
                        originalComplete.call(elements, elements);
                    }

                    promiseData && promiseData.resolver(elements);
                }
            }

            /* If a display was passed in, use it. Otherwise, default to "none" for fadeOut or the element-specific default for fadeIn. */
            /* Note: We allow users to pass in "null" to skip display setting altogether. */
            if (opts.display === undefined) {
                opts.display = (direction === "In" ? "auto" : "none");
            }

            Velocity(this, propertiesMap, opts);
        };
    });

    return Velocity;
}((window.jQuery || window.Zepto || window), window, document);
}));

/******************
   Known Issues
******************/

/* The CSS spec mandates that the translateX/Y/Z transforms are %-relative to the element itself -- not its parent.
Velocity, however, doesn't make this distinction. Thus, converting to or from the % unit with these subproperties
will produce an inaccurate conversion value. The same issue exists with the cx/cy attributes of SVG circles and ellipses. */
/**********************
   Velocity UI Pack
**********************/

/* VelocityJS.org UI Pack (5.0.4). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License. Portions copyright Daniel Eden, Christian Pucci. */

;(function (factory) {
    /* CommonJS module. */
    if (typeof require === "function" && typeof exports === "object" ) {
        module.exports = factory();
    /* AMD module. */
    } else if (typeof define === "function" && define.amd) {
        define([ "velocity" ], factory);
    /* Browser globals. */
    } else {
        factory();
    }
}(function() {
return function (global, window, document, undefined) {

    /*************
        Checks
    *************/

    if (!global.Velocity || !global.Velocity.Utilities) {
        window.console && console.log("Velocity UI Pack: Velocity must be loaded first. Aborting.");
        return;
    } else {
        var Velocity = global.Velocity,
            $ = Velocity.Utilities;
    }

    var velocityVersion = Velocity.version,
        requiredVersion = { major: 1, minor: 1, patch: 0 };

    function greaterSemver (primary, secondary) {
        var versionInts = [];

        if (!primary || !secondary) { return false; }

        $.each([ primary, secondary ], function(i, versionObject) {
            var versionIntsComponents = [];

            $.each(versionObject, function(component, value) {
                while (value.toString().length < 5) {
                    value = "0" + value;
                }
                versionIntsComponents.push(value);
            });

            versionInts.push(versionIntsComponents.join(""))
        });

        return (parseFloat(versionInts[0]) > parseFloat(versionInts[1]));
    }

    if (greaterSemver(requiredVersion, velocityVersion)){
        var abortError = "Velocity UI Pack: You need to update Velocity (jquery.velocity.js) to a newer version. Visit http://github.com/julianshapiro/velocity.";
        alert(abortError);
        throw new Error(abortError);
    }

    /************************
       Effect Registration
    ************************/

    /* Note: RegisterUI is a legacy name. */
    Velocity.RegisterEffect = Velocity.RegisterUI = function (effectName, properties) {
        /* Animate the expansion/contraction of the elements' parent's height for In/Out effects. */
        function animateParentHeight (elements, direction, totalDuration, stagger) {
            var totalHeightDelta = 0,
                parentNode;

            /* Sum the total height (including padding and margin) of all targeted elements. */
            $.each(elements.nodeType ? [ elements ] : elements, function(i, element) {
                if (stagger) {
                    /* Increase the totalDuration by the successive delay amounts produced by the stagger option. */
                    totalDuration += i * stagger;
                }

                parentNode = element.parentNode;

                $.each([ "height", "paddingTop", "paddingBottom", "marginTop", "marginBottom"], function(i, property) {
                    totalHeightDelta += parseFloat(Velocity.CSS.getPropertyValue(element, property));
                });
            });

            /* Animate the parent element's height adjustment (with a varying duration multiplier for aesthetic benefits). */
            Velocity.animate(
                parentNode,
                { height: (direction === "In" ? "+" : "-") + "=" + totalHeightDelta },
                { queue: false, easing: "ease-in-out", duration: totalDuration * (direction === "In" ? 0.6 : 1) }
            );
        }

        /* Register a custom redirect for each effect. */
        Velocity.Redirects[effectName] = function (element, redirectOptions, elementsIndex, elementsSize, elements, promiseData) {
            var finalElement = (elementsIndex === elementsSize - 1);

            if (typeof properties.defaultDuration === "function") {
                properties.defaultDuration = properties.defaultDuration.call(elements, elements);
            } else {
                properties.defaultDuration = parseFloat(properties.defaultDuration);
            }

            /* Iterate through each effect's call array. */
            for (var callIndex = 0; callIndex < properties.calls.length; callIndex++) {
                var call = properties.calls[callIndex],
                    propertyMap = call[0],
                    redirectDuration = (redirectOptions.duration || properties.defaultDuration || 1000),
                    durationPercentage = call[1],
                    callOptions = call[2] || {},
                    opts = {};

                /* Assign the whitelisted per-call options. */
                opts.duration = redirectDuration * (durationPercentage || 1);
                opts.queue = redirectOptions.queue || "";
                opts.easing = callOptions.easing || "ease";
                opts.delay = parseFloat(callOptions.delay) || 0;
                opts._cacheValues = callOptions._cacheValues || true;

                /* Special processing for the first effect call. */
                if (callIndex === 0) {
                    /* If a delay was passed into the redirect, combine it with the first call's delay. */
                    opts.delay += (parseFloat(redirectOptions.delay) || 0);

                    if (elementsIndex === 0) {
                        opts.begin = function() {
                            /* Only trigger a begin callback on the first effect call with the first element in the set. */
                            redirectOptions.begin && redirectOptions.begin.call(elements, elements);

                            var direction = effectName.match(/(In|Out)$/);

                            /* Make "in" transitioning elements invisible immediately so that there's no FOUC between now
                               and the first RAF tick. */
                            if ((direction && direction[0] === "In") && propertyMap.opacity !== undefined) {
                                $.each(elements.nodeType ? [ elements ] : elements, function(i, element) {
                                    Velocity.CSS.setPropertyValue(element, "opacity", 0);
                                });
                            }

                            /* Only trigger animateParentHeight() if we're using an In/Out transition. */
                            if (redirectOptions.animateParentHeight && direction) {
                                animateParentHeight(elements, direction[0], redirectDuration + opts.delay, redirectOptions.stagger);
                            }
                        }
                    }

                    /* If the user isn't overriding the display option, default to "auto" for "In"-suffixed transitions. */
                    if (redirectOptions.display !== null) {
                        if (redirectOptions.display !== undefined && redirectOptions.display !== "none") {
                            opts.display = redirectOptions.display;
                        } else if (/In$/.test(effectName)) {
                            /* Inline elements cannot be subjected to transforms, so we switch them to inline-block. */
                            var defaultDisplay = Velocity.CSS.Values.getDisplayType(element);
                            opts.display = (defaultDisplay === "inline") ? "inline-block" : defaultDisplay;
                        }
                    }

                    if (redirectOptions.visibility && redirectOptions.visibility !== "hidden") {
                        opts.visibility = redirectOptions.visibility;
                    }
                }

                /* Special processing for the last effect call. */
                if (callIndex === properties.calls.length - 1) {
                    /* Append promise resolving onto the user's redirect callback. */
                    function injectFinalCallbacks () {
                        if ((redirectOptions.display === undefined || redirectOptions.display === "none") && /Out$/.test(effectName)) {
                            $.each(elements.nodeType ? [ elements ] : elements, function(i, element) {
                                Velocity.CSS.setPropertyValue(element, "display", "none");
                            });
                        }

                        redirectOptions.complete && redirectOptions.complete.call(elements, elements);

                        if (promiseData) {
                            promiseData.resolver(elements || element);
                        }
                    }

                    opts.complete = function() {
                        if (properties.reset) {
                            for (var resetProperty in properties.reset) {
                                var resetValue = properties.reset[resetProperty];

                                /* Format each non-array value in the reset property map to [ value, value ] so that changes apply
                                   immediately and DOM querying is avoided (via forcefeeding). */
                                /* Note: Don't forcefeed hooks, otherwise their hook roots will be defaulted to their null values. */
                                if (Velocity.CSS.Hooks.registered[resetProperty] === undefined && (typeof resetValue === "string" || typeof resetValue === "number")) {
                                    properties.reset[resetProperty] = [ properties.reset[resetProperty], properties.reset[resetProperty] ];
                                }
                            }

                            /* So that the reset values are applied instantly upon the next rAF tick, use a zero duration and parallel queueing. */
                            var resetOptions = { duration: 0, queue: false };

                            /* Since the reset option uses up the complete callback, we trigger the user's complete callback at the end of ours. */
                            if (finalElement) {
                                resetOptions.complete = injectFinalCallbacks;
                            }

                            Velocity.animate(element, properties.reset, resetOptions);
                        /* Only trigger the user's complete callback on the last effect call with the last element in the set. */
                        } else if (finalElement) {
                            injectFinalCallbacks();
                        }
                    };

                    if (redirectOptions.visibility === "hidden") {
                        opts.visibility = redirectOptions.visibility;
                    }
                }

                Velocity.animate(element, propertyMap, opts);
            }
        };

        /* Return the Velocity object so that RegisterUI calls can be chained. */
        return Velocity;
    };

    /*********************
       Packaged Effects
    *********************/

    /* Externalize the packagedEffects data so that they can optionally be modified and re-registered. */
    /* Support: <=IE8: Callouts will have no effect, and transitions will simply fade in/out. IE9/Android 2.3: Most effects are fully supported, the rest fade in/out. All other browsers: full support. */
    Velocity.RegisterEffect.packagedEffects =
        {
            /* Animate.css */
            "callout.bounce": {
                defaultDuration: 550,
                calls: [
                    [ { translateY: -30 }, 0.25 ],
                    [ { translateY: 0 }, 0.125 ],
                    [ { translateY: -15 }, 0.125 ],
                    [ { translateY: 0 }, 0.25 ]
                ]
            },
            /* Animate.css */
            "callout.shake": {
                defaultDuration: 800,
                calls: [
                    [ { translateX: -11 }, 0.125 ],
                    [ { translateX: 11 }, 0.125 ],
                    [ { translateX: -11 }, 0.125 ],
                    [ { translateX: 11 }, 0.125 ],
                    [ { translateX: -11 }, 0.125 ],
                    [ { translateX: 11 }, 0.125 ],
                    [ { translateX: -11 }, 0.125 ],
                    [ { translateX: 0 }, 0.125 ]
                ]
            },
            /* Animate.css */
            "callout.flash": {
                defaultDuration: 1100,
                calls: [
                    [ { opacity: [ 0, "easeInOutQuad", 1 ] }, 0.25 ],
                    [ { opacity: [ 1, "easeInOutQuad" ] }, 0.25 ],
                    [ { opacity: [ 0, "easeInOutQuad" ] }, 0.25 ],
                    [ { opacity: [ 1, "easeInOutQuad" ] }, 0.25 ]
                ]
            },
            /* Animate.css */
            "callout.pulse": {
                defaultDuration: 825,
                calls: [
                    [ { scaleX: 1.1, scaleY: 1.1 }, 0.50, { easing: "easeInExpo" } ],
                    [ { scaleX: 1, scaleY: 1 }, 0.50 ]
                ]
            },
            /* Animate.css */
            "callout.swing": {
                defaultDuration: 950,
                calls: [
                    [ { rotateZ: 15 }, 0.20 ],
                    [ { rotateZ: -10 }, 0.20 ],
                    [ { rotateZ: 5 }, 0.20 ],
                    [ { rotateZ: -5 }, 0.20 ],
                    [ { rotateZ: 0 }, 0.20 ]
                ]
            },
            /* Animate.css */
            "callout.tada": {
                defaultDuration: 1000,
                calls: [
                    [ { scaleX: 0.9, scaleY: 0.9, rotateZ: -3 }, 0.10 ],
                    [ { scaleX: 1.1, scaleY: 1.1, rotateZ: 3 }, 0.10 ],
                    [ { scaleX: 1.1, scaleY: 1.1, rotateZ: -3 }, 0.10 ],
                    [ "reverse", 0.125 ],
                    [ "reverse", 0.125 ],
                    [ "reverse", 0.125 ],
                    [ "reverse", 0.125 ],
                    [ "reverse", 0.125 ],
                    [ { scaleX: 1, scaleY: 1, rotateZ: 0 }, 0.20 ]
                ]
            },
            "transition.fadeIn": {
                defaultDuration: 500,
                calls: [
                    [ { opacity: [ 1, 0 ] } ]
                ]
            },
            "transition.fadeOut": {
                defaultDuration: 500,
                calls: [
                    [ { opacity: [ 0, 1 ] } ]
                ]
            },
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipXIn": {
                defaultDuration: 700,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 800, 800 ], rotateY: [ 0, -55 ] } ]
                ],
                reset: { transformPerspective: 0 }
            },
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipXOut": {
                defaultDuration: 700,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 800, 800 ], rotateY: 55 } ]
                ],
                reset: { transformPerspective: 0, rotateY: 0 }
            },
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipYIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 800, 800 ], rotateX: [ 0, -45 ] } ]
                ],
                reset: { transformPerspective: 0 }
            },
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipYOut": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 800, 800 ], rotateX: 25 } ]
                ],
                reset: { transformPerspective: 0, rotateX: 0 }
            },
            /* Animate.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipBounceXIn": {
                defaultDuration: 900,
                calls: [
                    [ { opacity: [ 0.725, 0 ], transformPerspective: [ 400, 400 ], rotateY: [ -10, 90 ] }, 0.50 ],
                    [ { opacity: 0.80, rotateY: 10 }, 0.25 ],
                    [ { opacity: 1, rotateY: 0 }, 0.25 ]
                ],
                reset: { transformPerspective: 0 }
            },
            /* Animate.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipBounceXOut": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 0.9, 1 ], transformPerspective: [ 400, 400 ], rotateY: -10 }, 0.50 ],
                    [ { opacity: 0, rotateY: 90 }, 0.50 ]
                ],
                reset: { transformPerspective: 0, rotateY: 0 }
            },
            /* Animate.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipBounceYIn": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 0.725, 0 ], transformPerspective: [ 400, 400 ], rotateX: [ -10, 90 ] }, 0.50 ],
                    [ { opacity: 0.80, rotateX: 10 }, 0.25 ],
                    [ { opacity: 1, rotateX: 0 }, 0.25 ]
                ],
                reset: { transformPerspective: 0 }
            },
            /* Animate.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.flipBounceYOut": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 0.9, 1 ], transformPerspective: [ 400, 400 ], rotateX: -15 }, 0.50 ],
                    [ { opacity: 0, rotateX: 90 }, 0.50 ]
                ],
                reset: { transformPerspective: 0, rotateX: 0 }
            },
            /* Magic.css */
            "transition.swoopIn": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 1, 0 ], transformOriginX: [ "100%", "50%" ], transformOriginY: [ "100%", "100%" ], scaleX: [ 1, 0 ], scaleY: [ 1, 0 ], translateX: [ 0, -700 ], translateZ: 0 } ]
                ],
                reset: { transformOriginX: "50%", transformOriginY: "50%" }
            },
            /* Magic.css */
            "transition.swoopOut": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 0, 1 ], transformOriginX: [ "50%", "100%" ], transformOriginY: [ "100%", "100%" ], scaleX: 0, scaleY: 0, translateX: -700, translateZ: 0 } ]
                ],
                reset: { transformOriginX: "50%", transformOriginY: "50%", scaleX: 1, scaleY: 1, translateX: 0 }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3. (Fades and scales only.) */
            "transition.whirlIn": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 1, 0 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: [ 1, 0 ], scaleY: [ 1, 0 ], rotateY: [ 0, 160 ] }, 1, { easing: "easeInOutSine" } ]
                ]
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3. (Fades and scales only.) */
            "transition.whirlOut": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 0, "easeInOutQuint", 1 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: 0, scaleY: 0, rotateY: 160 }, 1, { easing: "swing" } ]
                ],
                reset: { scaleX: 1, scaleY: 1, rotateY: 0 }
            },
            "transition.shrinkIn": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 1, 0 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: [ 1, 1.5 ], scaleY: [ 1, 1.5 ], translateZ: 0 } ]
                ]
            },
            "transition.shrinkOut": {
                defaultDuration: 600,
                calls: [
                    [ { opacity: [ 0, 1 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: 1.3, scaleY: 1.3, translateZ: 0 } ]
                ],
                reset: { scaleX: 1, scaleY: 1 }
            },
            "transition.expandIn": {
                defaultDuration: 700,
                calls: [
                    [ { opacity: [ 1, 0 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: [ 1, 0.625 ], scaleY: [ 1, 0.625 ], translateZ: 0 } ]
                ]
            },
            "transition.expandOut": {
                defaultDuration: 700,
                calls: [
                    [ { opacity: [ 0, 1 ], transformOriginX: [ "50%", "50%" ], transformOriginY: [ "50%", "50%" ], scaleX: 0.5, scaleY: 0.5, translateZ: 0 } ]
                ],
                reset: { scaleX: 1, scaleY: 1 }
            },
            /* Animate.css */
            "transition.bounceIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], scaleX: [ 1.05, 0.3 ], scaleY: [ 1.05, 0.3 ] }, 0.40 ],
                    [ { scaleX: 0.9, scaleY: 0.9, translateZ: 0 }, 0.20 ],
                    [ { scaleX: 1, scaleY: 1 }, 0.50 ]
                ]
            },
            /* Animate.css */
            "transition.bounceOut": {
                defaultDuration: 800,
                calls: [
                    [ { scaleX: 0.95, scaleY: 0.95 }, 0.35 ],
                    [ { scaleX: 1.1, scaleY: 1.1, translateZ: 0 }, 0.35 ],
                    [ { opacity: [ 0, 1 ], scaleX: 0.3, scaleY: 0.3 }, 0.30 ]
                ],
                reset: { scaleX: 1, scaleY: 1 }
            },
            /* Animate.css */
            "transition.bounceUpIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ -30, 1000 ] }, 0.60, { easing: "easeOutCirc" } ],
                    [ { translateY: 10 }, 0.20 ],
                    [ { translateY: 0 }, 0.20 ]
                ]
            },
            /* Animate.css */
            "transition.bounceUpOut": {
                defaultDuration: 1000,
                calls: [
                    [ { translateY: 20 }, 0.20 ],
                    [ { opacity: [ 0, "easeInCirc", 1 ], translateY: -1000 }, 0.80 ]
                ],
                reset: { translateY: 0 }
            },
            /* Animate.css */
            "transition.bounceDownIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ 30, -1000 ] }, 0.60, { easing: "easeOutCirc" } ],
                    [ { translateY: -10 }, 0.20 ],
                    [ { translateY: 0 }, 0.20 ]
                ]
            },
            /* Animate.css */
            "transition.bounceDownOut": {
                defaultDuration: 1000,
                calls: [
                    [ { translateY: -20 }, 0.20 ],
                    [ { opacity: [ 0, "easeInCirc", 1 ], translateY: 1000 }, 0.80 ]
                ],
                reset: { translateY: 0 }
            },
            /* Animate.css */
            "transition.bounceLeftIn": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ 30, -1250 ] }, 0.60, { easing: "easeOutCirc" } ],
                    [ { translateX: -10 }, 0.20 ],
                    [ { translateX: 0 }, 0.20 ]
                ]
            },
            /* Animate.css */
            "transition.bounceLeftOut": {
                defaultDuration: 750,
                calls: [
                    [ { translateX: 30 }, 0.20 ],
                    [ { opacity: [ 0, "easeInCirc", 1 ], translateX: -1250 }, 0.80 ]
                ],
                reset: { translateX: 0 }
            },
            /* Animate.css */
            "transition.bounceRightIn": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ -30, 1250 ] }, 0.60, { easing: "easeOutCirc" } ],
                    [ { translateX: 10 }, 0.20 ],
                    [ { translateX: 0 }, 0.20 ]
                ]
            },
            /* Animate.css */
            "transition.bounceRightOut": {
                defaultDuration: 750,
                calls: [
                    [ { translateX: -30 }, 0.20 ],
                    [ { opacity: [ 0, "easeInCirc", 1 ], translateX: 1250 }, 0.80 ]
                ],
                reset: { translateX: 0 }
            },
            "transition.slideUpIn": {
                defaultDuration: 900,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ 0, 20 ], translateZ: 0 } ]
                ]
            },
            "transition.slideUpOut": {
                defaultDuration: 900,
                calls: [
                    [ { opacity: [ 0, 1 ], translateY: -20, translateZ: 0 } ]
                ],
                reset: { translateY: 0 }
            },
            "transition.slideDownIn": {
                defaultDuration: 900,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ 0, -20 ], translateZ: 0 } ]
                ]
            },
            "transition.slideDownOut": {
                defaultDuration: 900,
                calls: [
                    [ { opacity: [ 0, 1 ], translateY: 20, translateZ: 0 } ]
                ],
                reset: { translateY: 0 }
            },
            "transition.slideLeftIn": {
                defaultDuration: 1000,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ 0, -20 ], translateZ: 0 } ]
                ]
            },
            "transition.slideLeftOut": {
                defaultDuration: 1050,
                calls: [
                    [ { opacity: [ 0, 1 ], translateX: -20, translateZ: 0 } ]
                ],
                reset: { translateX: 0 }
            },
            "transition.slideRightIn": {
                defaultDuration: 1000,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ 0, 20 ], translateZ: 0 } ]
                ]
            },
            "transition.slideRightOut": {
                defaultDuration: 1050,
                calls: [
                    [ { opacity: [ 0, 1 ], translateX: 20, translateZ: 0 } ]
                ],
                reset: { translateX: 0 }
            },
            "transition.slideUpBigIn": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ 0, 75 ], translateZ: 0 } ]
                ]
            },
            "transition.slideUpBigOut": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 0, 1 ], translateY: -75, translateZ: 0 } ]
                ],
                reset: { translateY: 0 }
            },
            "transition.slideDownBigIn": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 1, 0 ], translateY: [ 0, -75 ], translateZ: 0 } ]
                ]
            },
            "transition.slideDownBigOut": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 0, 1 ], translateY: 75, translateZ: 0 } ]
                ],
                reset: { translateY: 0 }
            },
            "transition.slideLeftBigIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ 0, -75 ], translateZ: 0 } ]
                ]
            },
            "transition.slideLeftBigOut": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 0, 1 ], translateX: -75, translateZ: 0 } ]
                ],
                reset: { translateX: 0 }
            },
            "transition.slideRightBigIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], translateX: [ 0, 75 ], translateZ: 0 } ]
                ]
            },
            "transition.slideRightBigOut": {
                defaultDuration: 750,
                calls: [
                    [ { opacity: [ 0, 1 ], translateX: 75, translateZ: 0 } ]
                ],
                reset: { translateX: 0 }
            },
            /* Magic.css */
            "transition.perspectiveUpIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 800, 800 ], transformOriginX: [ 0, 0 ], transformOriginY: [ "100%", "100%" ], rotateX: [ 0, -180 ] } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%" }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveUpOut": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 800, 800 ], transformOriginX: [ 0, 0 ], transformOriginY: [ "100%", "100%" ], rotateX: -180 } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%", rotateX: 0 }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveDownIn": {
                defaultDuration: 800,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 800, 800 ], transformOriginX: [ 0, 0 ], transformOriginY: [ 0, 0 ], rotateX: [ 0, 180 ] } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%" }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveDownOut": {
                defaultDuration: 850,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 800, 800 ], transformOriginX: [ 0, 0 ], transformOriginY: [ 0, 0 ], rotateX: 180 } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%", rotateX: 0 }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveLeftIn": {
                defaultDuration: 950,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 2000, 2000 ], transformOriginX: [ 0, 0 ], transformOriginY: [ 0, 0 ], rotateY: [ 0, -180 ] } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%" }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveLeftOut": {
                defaultDuration: 950,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 2000, 2000 ], transformOriginX: [ 0, 0 ], transformOriginY: [ 0, 0 ], rotateY: -180 } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%", rotateY: 0 }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveRightIn": {
                defaultDuration: 950,
                calls: [
                    [ { opacity: [ 1, 0 ], transformPerspective: [ 2000, 2000 ], transformOriginX: [ "100%", "100%" ], transformOriginY: [ 0, 0 ], rotateY: [ 0, 180 ] } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%" }
            },
            /* Magic.css */
            /* Support: Loses rotation in IE9/Android 2.3 (fades only). */
            "transition.perspectiveRightOut": {
                defaultDuration: 950,
                calls: [
                    [ { opacity: [ 0, 1 ], transformPerspective: [ 2000, 2000 ], transformOriginX: [ "100%", "100%" ], transformOriginY: [ 0, 0 ], rotateY: 180 } ]
                ],
                reset: { transformPerspective: 0, transformOriginX: "50%", transformOriginY: "50%", rotateY: 0 }
            }
        };

    /* Register the packaged effects. */
    for (var effectName in Velocity.RegisterEffect.packagedEffects) {
        Velocity.RegisterEffect(effectName, Velocity.RegisterEffect.packagedEffects[effectName]);
    }

    /*********************
       Sequence Running
    **********************/

    /* Note: Sequence calls must use Velocity's single-object arguments syntax. */
    Velocity.RunSequence = function (originalSequence) {
        var sequence = $.extend(true, [], originalSequence);

        if (sequence.length > 1) {
            $.each(sequence.reverse(), function(i, currentCall) {
                var nextCall = sequence[i + 1];

                if (nextCall) {
                    /* Parallel sequence calls (indicated via sequenceQueue:false) are triggered
                       in the previous call's begin callback. Otherwise, chained calls are normally triggered
                       in the previous call's complete callback. */
                    var currentCallOptions = currentCall.o || currentCall.options,
                        nextCallOptions = nextCall.o || nextCall.options;

                    var timing = (currentCallOptions && currentCallOptions.sequenceQueue === false) ? "begin" : "complete",
                        callbackOriginal = nextCallOptions && nextCallOptions[timing],
                        options = {};

                    options[timing] = function() {
                        var nextCallElements = nextCall.e || nextCall.elements;
                        var elements = nextCallElements.nodeType ? [ nextCallElements ] : nextCallElements;

                        callbackOriginal && callbackOriginal.call(elements, elements);
                        Velocity(currentCall);
                    }

                    if (nextCall.o) {
                        nextCall.o = $.extend({}, nextCallOptions, options);
                    } else {
                        nextCall.options = $.extend({}, nextCallOptions, options);
                    }
                }
            });

            sequence.reverse();
        }

        Velocity(sequence[0]);
    };
}((window.jQuery || window.Zepto || window), window, document);
}));


/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nwindow.quasar = {\n  VERSION: (\"0.1.1\")\n};\n\nfunction requireAll(r) {\n  r.keys().forEach(r);\n}\nrequireAll(__webpack_require__(2));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcXVhc2FyLmpzP2MyZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbndpbmRvdy5xdWFzYXIgPSB7XG4gIFZFUlNJT046IF9fUVVBU0FSX1ZFUlNJT05fX1xufTtcblxuZnVuY3Rpb24gcmVxdWlyZUFsbChyKSB7XG4gIHIua2V5cygpLmZvckVhY2gocik7XG59XG5yZXF1aXJlQWxsKHJlcXVpcmUuY29udGV4dCgnLi9saWInLCB0cnVlLCAvXFwuanMkLykpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9xdWFzYXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var map = {\n\t\"./core-features/app-fullscreen/app-fullscreen.js\": 3,\n\t\"./core-features/app-visibility/app-visibility.js\": 4,\n\t\"./core-features/cookies/cookies.js\": 5,\n\t\"./core-features/touch/hammer.js\": 6,\n\t\"./core-features/touch/prevent-ghosts.js\": 7,\n\t\"./core-features/web-storage/web-storage.js\": 8,\n\t\"./core-vue/directives/attribute.js\": 9,\n\t\"./core-vue/directives/card-directives.js\": 10,\n\t\"./core-vue/directives/exit-app.js\": 11,\n\t\"./core-vue/directives/hover.js\": 12,\n\t\"./core-vue/directives/layout-page-sticky.js\": 13,\n\t\"./core-vue/directives/page-related.js\": 14,\n\t\"./core-vue/directives/scroll.js\": 15,\n\t\"./core-vue/directives/tooltip.js\": 16,\n\t\"./core-vue/directives/touch.js\": 17,\n\t\"./core-vue/transitions/slide.js\": 18,\n\t\"./core/ajax/ajax.js\": 19,\n\t\"./core/ajax/cache/ajax-cache.js\": 20,\n\t\"./core/app/app.js\": 21,\n\t\"./core/app/assets/prepare-assets.js\": 23,\n\t\"./core/app/assets/render-assets.js\": 24,\n\t\"./core/app/assets/request-assets.js\": 22,\n\t\"./core/debug/debug.js\": 25,\n\t\"./core/environment/environment.js\": 26,\n\t\"./core/events/events.js\": 27,\n\t\"./core/initialize/initialize.js\": 28,\n\t\"./core/keycodes/keycodes.js\": 29,\n\t\"./core/pollyfils/array-includes.js\": 30,\n\t\"./core/pollyfils/string-starts-ends-with.js\": 31,\n\t\"./core/require/require.js\": 32,\n\t\"./core/require/require/require-css.js\": 39,\n\t\"./core/require/require/require-script.js\": 33,\n\t\"./core/router/router.js\": 40,\n\t\"./core/utils/js/debounce.js\": 38,\n\t\"./core/utils/js/getFnParamNames.js\": 35,\n\t\"./core/utils/js/normalizePath.js\": 36,\n\t\"./core/utils/js/open-url.js\": 37,\n\t\"./core/utils/utils.js\": 34,\n\t\"./web-components/action-sheet/action-sheet.js\": 41,\n\t\"./web-components/card/card.js\": 44,\n\t\"./web-components/checkbox/checkbox.js\": 45,\n\t\"./web-components/choice/choice.js\": 47,\n\t\"./web-components/collapsible/collapsible.js\": 49,\n\t\"./web-components/dialog/dialog.js\": 50,\n\t\"./web-components/drawer/drawer.js\": 52,\n\t\"./web-components/fab/fab.js\": 54,\n\t\"./web-components/gallery/gallery.js\": 56,\n\t\"./web-components/grid/grid.js\": 59,\n\t\"./web-components/list/list.js\": 62,\n\t\"./web-components/media/media.js\": 63,\n\t\"./web-components/modal/modal.js\": 64,\n\t\"./web-components/notify/notify.js\": 66,\n\t\"./web-components/number/number.js\": 67,\n\t\"./web-components/pagination/pagination.js\": 69,\n\t\"./web-components/parallax/parallax.js\": 71,\n\t\"./web-components/progress-bar/progress-bar.js\": 73,\n\t\"./web-components/radio/radio.js\": 75,\n\t\"./web-components/range/range.js\": 77,\n\t\"./web-components/rating/rating.js\": 79,\n\t\"./web-components/screen/screen.js\": 81,\n\t\"./web-components/slider/slider.js\": 84,\n\t\"./web-components/spinner/spinner.js\": 86,\n\t\"./web-components/state/state.js\": 99,\n\t\"./web-components/tabs/tabs.js\": 101,\n\t\"./web-components/toggle/toggle.js\": 103,\n\t\"./web-components/tree/tree.js\": 105\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliIFxcLmpzJD9mODI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx1REFBdUQ7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9jb3JlLWZlYXR1cmVzL2FwcC1mdWxsc2NyZWVuL2FwcC1mdWxsc2NyZWVuLmpzXCI6IDMsXG5cdFwiLi9jb3JlLWZlYXR1cmVzL2FwcC12aXNpYmlsaXR5L2FwcC12aXNpYmlsaXR5LmpzXCI6IDQsXG5cdFwiLi9jb3JlLWZlYXR1cmVzL2Nvb2tpZXMvY29va2llcy5qc1wiOiA1LFxuXHRcIi4vY29yZS1mZWF0dXJlcy90b3VjaC9oYW1tZXIuanNcIjogNixcblx0XCIuL2NvcmUtZmVhdHVyZXMvdG91Y2gvcHJldmVudC1naG9zdHMuanNcIjogNyxcblx0XCIuL2NvcmUtZmVhdHVyZXMvd2ViLXN0b3JhZ2Uvd2ViLXN0b3JhZ2UuanNcIjogOCxcblx0XCIuL2NvcmUtdnVlL2RpcmVjdGl2ZXMvYXR0cmlidXRlLmpzXCI6IDksXG5cdFwiLi9jb3JlLXZ1ZS9kaXJlY3RpdmVzL2NhcmQtZGlyZWN0aXZlcy5qc1wiOiAxMCxcblx0XCIuL2NvcmUtdnVlL2RpcmVjdGl2ZXMvZXhpdC1hcHAuanNcIjogMTEsXG5cdFwiLi9jb3JlLXZ1ZS9kaXJlY3RpdmVzL2hvdmVyLmpzXCI6IDEyLFxuXHRcIi4vY29yZS12dWUvZGlyZWN0aXZlcy9sYXlvdXQtcGFnZS1zdGlja3kuanNcIjogMTMsXG5cdFwiLi9jb3JlLXZ1ZS9kaXJlY3RpdmVzL3BhZ2UtcmVsYXRlZC5qc1wiOiAxNCxcblx0XCIuL2NvcmUtdnVlL2RpcmVjdGl2ZXMvc2Nyb2xsLmpzXCI6IDE1LFxuXHRcIi4vY29yZS12dWUvZGlyZWN0aXZlcy90b29sdGlwLmpzXCI6IDE2LFxuXHRcIi4vY29yZS12dWUvZGlyZWN0aXZlcy90b3VjaC5qc1wiOiAxNyxcblx0XCIuL2NvcmUtdnVlL3RyYW5zaXRpb25zL3NsaWRlLmpzXCI6IDE4LFxuXHRcIi4vY29yZS9hamF4L2FqYXguanNcIjogMTksXG5cdFwiLi9jb3JlL2FqYXgvY2FjaGUvYWpheC1jYWNoZS5qc1wiOiAyMCxcblx0XCIuL2NvcmUvYXBwL2FwcC5qc1wiOiAyMSxcblx0XCIuL2NvcmUvYXBwL2Fzc2V0cy9wcmVwYXJlLWFzc2V0cy5qc1wiOiAyMyxcblx0XCIuL2NvcmUvYXBwL2Fzc2V0cy9yZW5kZXItYXNzZXRzLmpzXCI6IDI0LFxuXHRcIi4vY29yZS9hcHAvYXNzZXRzL3JlcXVlc3QtYXNzZXRzLmpzXCI6IDIyLFxuXHRcIi4vY29yZS9kZWJ1Zy9kZWJ1Zy5qc1wiOiAyNSxcblx0XCIuL2NvcmUvZW52aXJvbm1lbnQvZW52aXJvbm1lbnQuanNcIjogMjYsXG5cdFwiLi9jb3JlL2V2ZW50cy9ldmVudHMuanNcIjogMjcsXG5cdFwiLi9jb3JlL2luaXRpYWxpemUvaW5pdGlhbGl6ZS5qc1wiOiAyOCxcblx0XCIuL2NvcmUva2V5Y29kZXMva2V5Y29kZXMuanNcIjogMjksXG5cdFwiLi9jb3JlL3BvbGx5Zmlscy9hcnJheS1pbmNsdWRlcy5qc1wiOiAzMCxcblx0XCIuL2NvcmUvcG9sbHlmaWxzL3N0cmluZy1zdGFydHMtZW5kcy13aXRoLmpzXCI6IDMxLFxuXHRcIi4vY29yZS9yZXF1aXJlL3JlcXVpcmUuanNcIjogMzIsXG5cdFwiLi9jb3JlL3JlcXVpcmUvcmVxdWlyZS9yZXF1aXJlLWNzcy5qc1wiOiAzOSxcblx0XCIuL2NvcmUvcmVxdWlyZS9yZXF1aXJlL3JlcXVpcmUtc2NyaXB0LmpzXCI6IDMzLFxuXHRcIi4vY29yZS9yb3V0ZXIvcm91dGVyLmpzXCI6IDQwLFxuXHRcIi4vY29yZS91dGlscy9qcy9kZWJvdW5jZS5qc1wiOiAzOCxcblx0XCIuL2NvcmUvdXRpbHMvanMvZ2V0Rm5QYXJhbU5hbWVzLmpzXCI6IDM1LFxuXHRcIi4vY29yZS91dGlscy9qcy9ub3JtYWxpemVQYXRoLmpzXCI6IDM2LFxuXHRcIi4vY29yZS91dGlscy9qcy9vcGVuLXVybC5qc1wiOiAzNyxcblx0XCIuL2NvcmUvdXRpbHMvdXRpbHMuanNcIjogMzQsXG5cdFwiLi93ZWItY29tcG9uZW50cy9hY3Rpb24tc2hlZXQvYWN0aW9uLXNoZWV0LmpzXCI6IDQxLFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvY2FyZC9jYXJkLmpzXCI6IDQ0LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvY2hlY2tib3gvY2hlY2tib3guanNcIjogNDUsXG5cdFwiLi93ZWItY29tcG9uZW50cy9jaG9pY2UvY2hvaWNlLmpzXCI6IDQ3LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvY29sbGFwc2libGUvY29sbGFwc2libGUuanNcIjogNDksXG5cdFwiLi93ZWItY29tcG9uZW50cy9kaWFsb2cvZGlhbG9nLmpzXCI6IDUwLFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvZHJhd2VyL2RyYXdlci5qc1wiOiA1Mixcblx0XCIuL3dlYi1jb21wb25lbnRzL2ZhYi9mYWIuanNcIjogNTQsXG5cdFwiLi93ZWItY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnkuanNcIjogNTYsXG5cdFwiLi93ZWItY29tcG9uZW50cy9ncmlkL2dyaWQuanNcIjogNTksXG5cdFwiLi93ZWItY29tcG9uZW50cy9saXN0L2xpc3QuanNcIjogNjIsXG5cdFwiLi93ZWItY29tcG9uZW50cy9tZWRpYS9tZWRpYS5qc1wiOiA2Myxcblx0XCIuL3dlYi1jb21wb25lbnRzL21vZGFsL21vZGFsLmpzXCI6IDY0LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvbm90aWZ5L25vdGlmeS5qc1wiOiA2Nixcblx0XCIuL3dlYi1jb21wb25lbnRzL251bWJlci9udW1iZXIuanNcIjogNjcsXG5cdFwiLi93ZWItY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uanNcIjogNjksXG5cdFwiLi93ZWItY29tcG9uZW50cy9wYXJhbGxheC9wYXJhbGxheC5qc1wiOiA3MSxcblx0XCIuL3dlYi1jb21wb25lbnRzL3Byb2dyZXNzLWJhci9wcm9ncmVzcy1iYXIuanNcIjogNzMsXG5cdFwiLi93ZWItY29tcG9uZW50cy9yYWRpby9yYWRpby5qc1wiOiA3NSxcblx0XCIuL3dlYi1jb21wb25lbnRzL3JhbmdlL3JhbmdlLmpzXCI6IDc3LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvcmF0aW5nL3JhdGluZy5qc1wiOiA3OSxcblx0XCIuL3dlYi1jb21wb25lbnRzL3NjcmVlbi9zY3JlZW4uanNcIjogODEsXG5cdFwiLi93ZWItY29tcG9uZW50cy9zbGlkZXIvc2xpZGVyLmpzXCI6IDg0LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zcGlubmVyLmpzXCI6IDg2LFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvc3RhdGUvc3RhdGUuanNcIjogOTksXG5cdFwiLi93ZWItY29tcG9uZW50cy90YWJzL3RhYnMuanNcIjogMTAxLFxuXHRcIi4vd2ViLWNvbXBvbmVudHMvdG9nZ2xlL3RvZ2dsZS5qc1wiOiAxMDMsXG5cdFwiLi93ZWItY29tcG9uZW50cy90cmVlL3RyZWUuanNcIjogMTA1XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHJldHVybiBtYXBbcmVxXSB8fCAoZnVuY3Rpb24oKSB7IHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpIH0oKSk7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDI7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYiBcXC5qcyRcbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction isActive() {\n  return document.fullscreenElement ||\n      document.mozFullScreenElement ||\n      document.webkitFullscreenElement ||\n      document.msFullscreenElement;\n};\n\nfunction requestFullscreen(target) {\n  target = target || document.documentElement;\n\n  if (isActive()) {\n    return;\n  }\n\n  if (target.requestFullscreen) {\n    target.requestFullscreen();\n  }\n  else if (target.msRequestFullscreen) {\n    target.msRequestFullscreen();\n  }\n  else if (target.mozRequestFullScreen) {\n    target.mozRequestFullScreen();\n  }\n  else if (target.webkitRequestFullscreen) {\n    target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n  }\n};\n\nfunction exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  }\n  else if (document.msExitFullscreen) {\n    document.msExitFullscreen();\n  }\n  else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  }\n  else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n};\n\nfunction toggleFullscreen(target) {\n  if (isActive()) {\n    exitFullscreen();\n  }\n  else {\n    requestFullscreen(target);\n  }\n};\n\n\n$.extend(true, quasar, {\n  is: {\n    fullscreen: isActive\n  },\n  request: {\n    fullscreen: requestFullscreen\n  },\n  exit: {\n    fullscreen: exitFullscreen\n  },\n  toggle: {\n    fullscreen: toggleFullscreen\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvYXBwLWZ1bGxzY3JlZW4vYXBwLWZ1bGxzY3JlZW4uanM/MzI5YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gIHJldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fFxuICAgICAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHxcbiAgICAgIGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IHx8XG4gICAgICBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbGVtZW50O1xufTtcblxuZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4odGFyZ2V0KSB7XG4gIHRhcmdldCA9IHRhcmdldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgaWYgKGlzQWN0aXZlKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGFyZ2V0LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgdGFyZ2V0LnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH1cbiAgZWxzZSBpZiAodGFyZ2V0Lm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICB0YXJnZXQubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9XG4gIGVsc2UgaWYgKHRhcmdldC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgIHRhcmdldC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICB9XG4gIGVsc2UgaWYgKHRhcmdldC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIHRhcmdldC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbihFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZXhpdEZ1bGxzY3JlZW4oKSB7XG4gIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gIH1cbiAgZWxzZSBpZiAoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgIGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgfVxuICBlbHNlIGlmIChkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICB9XG4gIGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdG9nZ2xlRnVsbHNjcmVlbih0YXJnZXQpIHtcbiAgaWYgKGlzQWN0aXZlKCkpIHtcbiAgICBleGl0RnVsbHNjcmVlbigpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJlcXVlc3RGdWxsc2NyZWVuKHRhcmdldCk7XG4gIH1cbn07XG5cblxuJC5leHRlbmQodHJ1ZSwgcXVhc2FyLCB7XG4gIGlzOiB7XG4gICAgZnVsbHNjcmVlbjogaXNBY3RpdmVcbiAgfSxcbiAgcmVxdWVzdDoge1xuICAgIGZ1bGxzY3JlZW46IHJlcXVlc3RGdWxsc2NyZWVuXG4gIH0sXG4gIGV4aXQ6IHtcbiAgICBmdWxsc2NyZWVuOiBleGl0RnVsbHNjcmVlblxuICB9LFxuICB0b2dnbGU6IHtcbiAgICBmdWxsc2NyZWVuOiB0b2dnbGVGdWxsc2NyZWVuXG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS1mZWF0dXJlcy9hcHAtZnVsbHNjcmVlbi9hcHAtZnVsbHNjcmVlbi5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar\n  body = $('body'),\n  hidden = 'hidden',\n  appVisibility = 'visible'\n  ;\n\nfunction onchange(evt) {\n  var\n    v = 'visible',\n    h = 'hidden',\n    state,\n    evtMap = {\n      focus: v,\n      focusin: v,\n      pageshow: v,\n      blur: h,\n      focusout: h,\n      pagehide: h\n    };\n\n  evt = evt || window.event;\n\n  if (evt.type in evtMap) {\n    state = evtMap[evt.type];\n  }\n  else {\n    state = this[hidden] ? h : v;\n  }\n\n  appVisibility = state;\n  quasar.events.trigger('app:visibility', state);\n  body.removeClass('app-' + (state === 'visible' ? h : v)).addClass('app-' + state);\n}\n\n$(function() {\n  // Standards:\n  if (hidden in document) {\n    document.addEventListener('visibilitychange', onchange);\n  }\n  else if ((hidden = 'mozHidden') in document) {\n    document.addEventListener('mozvisibilitychange', onchange);\n  }\n  else if ((hidden = 'webkitHidden') in document) {\n    document.addEventListener('webkitvisibilitychange', onchange);\n  }\n  else if ((hidden = 'msHidden') in document) {\n    document.addEventListener('msvisibilitychange', onchange);\n  }\n  // IE 9 and lower:\n  else if ('onfocusin' in document) {\n    document.onfocusin = document.onfocusout = onchange;\n  }\n  // All others:\n  else {\n    window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;\n  }\n\n  // set the initial state (but only if browser supports the Page Visibility API)\n  if (document[hidden] !== undefined) {\n    onchange({type: document[hidden] ? 'blur' : 'focus'});\n  }\n});\n\n$.extend(true, quasar, {\n  app: {\n    is: {\n      visible: function() {\n        return appVisibility === 'visible';\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvYXBwLXZpc2liaWxpdHkvYXBwLXZpc2liaWxpdHkuanM/NzZmNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYywwQ0FBMEM7QUFDeEQ7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICBib2R5ID0gJCgnYm9keScpLFxuICBoaWRkZW4gPSAnaGlkZGVuJyxcbiAgYXBwVmlzaWJpbGl0eSA9ICd2aXNpYmxlJ1xuICA7XG5cbmZ1bmN0aW9uIG9uY2hhbmdlKGV2dCkge1xuICB2YXJcbiAgICB2ID0gJ3Zpc2libGUnLFxuICAgIGggPSAnaGlkZGVuJyxcbiAgICBzdGF0ZSxcbiAgICBldnRNYXAgPSB7XG4gICAgICBmb2N1czogdixcbiAgICAgIGZvY3VzaW46IHYsXG4gICAgICBwYWdlc2hvdzogdixcbiAgICAgIGJsdXI6IGgsXG4gICAgICBmb2N1c291dDogaCxcbiAgICAgIHBhZ2VoaWRlOiBoXG4gICAgfTtcblxuICBldnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xuXG4gIGlmIChldnQudHlwZSBpbiBldnRNYXApIHtcbiAgICBzdGF0ZSA9IGV2dE1hcFtldnQudHlwZV07XG4gIH1cbiAgZWxzZSB7XG4gICAgc3RhdGUgPSB0aGlzW2hpZGRlbl0gPyBoIDogdjtcbiAgfVxuXG4gIGFwcFZpc2liaWxpdHkgPSBzdGF0ZTtcbiAgcXVhc2FyLmV2ZW50cy50cmlnZ2VyKCdhcHA6dmlzaWJpbGl0eScsIHN0YXRlKTtcbiAgYm9keS5yZW1vdmVDbGFzcygnYXBwLScgKyAoc3RhdGUgPT09ICd2aXNpYmxlJyA/IGggOiB2KSkuYWRkQ2xhc3MoJ2FwcC0nICsgc3RhdGUpO1xufVxuXG4kKGZ1bmN0aW9uKCkge1xuICAvLyBTdGFuZGFyZHM6XG4gIGlmIChoaWRkZW4gaW4gZG9jdW1lbnQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICB9XG4gIGVsc2UgaWYgKChoaWRkZW4gPSAnbW96SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3p2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICB9XG4gIGVsc2UgaWYgKChoaWRkZW4gPSAnd2Via2l0SGlkZGVuJykgaW4gZG9jdW1lbnQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJywgb25jaGFuZ2UpO1xuICB9XG4gIGVsc2UgaWYgKChoaWRkZW4gPSAnbXNIaWRkZW4nKSBpbiBkb2N1bWVudCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21zdmlzaWJpbGl0eWNoYW5nZScsIG9uY2hhbmdlKTtcbiAgfVxuICAvLyBJRSA5IGFuZCBsb3dlcjpcbiAgZWxzZSBpZiAoJ29uZm9jdXNpbicgaW4gZG9jdW1lbnQpIHtcbiAgICBkb2N1bWVudC5vbmZvY3VzaW4gPSBkb2N1bWVudC5vbmZvY3Vzb3V0ID0gb25jaGFuZ2U7XG4gIH1cbiAgLy8gQWxsIG90aGVyczpcbiAgZWxzZSB7XG4gICAgd2luZG93Lm9ucGFnZXNob3cgPSB3aW5kb3cub25wYWdlaGlkZSA9IHdpbmRvdy5vbmZvY3VzID0gd2luZG93Lm9uYmx1ciA9IG9uY2hhbmdlO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBpbml0aWFsIHN0YXRlIChidXQgb25seSBpZiBicm93c2VyIHN1cHBvcnRzIHRoZSBQYWdlIFZpc2liaWxpdHkgQVBJKVxuICBpZiAoZG9jdW1lbnRbaGlkZGVuXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgb25jaGFuZ2Uoe3R5cGU6IGRvY3VtZW50W2hpZGRlbl0gPyAnYmx1cicgOiAnZm9jdXMnfSk7XG4gIH1cbn0pO1xuXG4kLmV4dGVuZCh0cnVlLCBxdWFzYXIsIHtcbiAgYXBwOiB7XG4gICAgaXM6IHtcbiAgICAgIHZpc2libGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXBwVmlzaWJpbGl0eSA9PT0gJ3Zpc2libGUnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlLWZlYXR1cmVzL2FwcC12aXNpYmlsaXR5L2FwcC12aXNpYmlsaXR5LmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction encode(string) {\n  return encodeURIComponent(string);\n}\n\nfunction decode(string) {\n  return decodeURIComponent(string);\n}\n\nfunction stringifyCookieValue(value) {\n  return encode(value === Object(value) ? JSON.stringify(value) : '' + value);\n}\n\nfunction read(string) {\n  if (string === '') {\n    return string;\n  }\n\n  if (string.indexOf('\"') === 0) {\n    // This is a quoted cookie as according to RFC2068, unescape...\n    string = string.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n  }\n\n  // Replace server-side written pluses with spaces.\n  // If we can't decode the cookie, ignore it, it's unusable.\n  // If we can't parse the cookie, ignore it, it's unusable.\n  string = decode(string.replace(/\\+/g, ' '));\n\n  try {\n    string = JSON.parse(string);\n  }\n  catch(e) {}\n\n  return string;\n}\n\nfunction setCookie(key, value, options) {\n  options = options || {};\n\n  if (typeof options.expires === 'number') {\n    var days = options.expires;\n    var time = options.expires = new Date();\n\n    time.setMilliseconds(time.getMilliseconds() + days * 864e+5);\n  }\n\n  /* istanbul ignore next */\n  document.cookie = [\n    encode(key), '=', stringifyCookieValue(value),\n    options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\n    options.path ? '; path=' + options.path : '',\n    options.domain ? '; domain=' + options.domain : '',\n    options.secure ? '; secure' : ''\n  ].join('');\n}\n\nfunction getCookie(key) {\n  var result = key ? undefined : {},\n    cookies = document.cookie ? document.cookie.split('; ') : [],\n    i = 0,\n    l = cookies.length;\n\n  for (; i < l; i++) {\n    var parts = cookies[i].split('='),\n      name = decode(parts.shift()),\n      cookie = parts.join('=');\n\n    if (key === name) {\n      result = read(cookie);\n      break;\n    }\n\n    result[name] = cookie;\n  }\n\n  return result;\n}\n\nfunction removeCookie(key, options) {\n  setCookie(key, '', $.extend(true, {}, options, {\n    expires: -1\n  }));\n}\n\nfunction hasCookie(key) {\n  return getCookie(key) !== undefined;\n}\n\n\n$.extend(true, quasar, {\n  remove: {\n    cookie: removeCookie\n  },\n  set: {\n    cookie: setCookie\n  },\n  has: {\n    cookie: hasCookie\n  },\n  get: {\n    cookie: getCookie,\n    all: {\n      cookies: function() {\n        return getCookie();\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvY29va2llcy9jb29raWVzLmpzPzIwNzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QjtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DO0FBQ25DLHdEQUF3RDtBQUN4RDtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGVuY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGUoc3RyaW5nKSB7XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q29va2llVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIGVuY29kZSh2YWx1ZSA9PT0gT2JqZWN0KHZhbHVlKSA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6ICcnICsgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiByZWFkKHN0cmluZykge1xuICBpZiAoc3RyaW5nID09PSAnJykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuICBpZiAoc3RyaW5nLmluZGV4T2YoJ1wiJykgPT09IDApIHtcbiAgICAvLyBUaGlzIGlzIGEgcXVvdGVkIGNvb2tpZSBhcyBhY2NvcmRpbmcgdG8gUkZDMjA2OCwgdW5lc2NhcGUuLi5cbiAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuICB9XG5cbiAgLy8gUmVwbGFjZSBzZXJ2ZXItc2lkZSB3cml0dGVuIHBsdXNlcyB3aXRoIHNwYWNlcy5cbiAgLy8gSWYgd2UgY2FuJ3QgZGVjb2RlIHRoZSBjb29raWUsIGlnbm9yZSBpdCwgaXQncyB1bnVzYWJsZS5cbiAgLy8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIGNvb2tpZSwgaWdub3JlIGl0LCBpdCdzIHVudXNhYmxlLlxuICBzdHJpbmcgPSBkZWNvZGUoc3RyaW5nLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcblxuICB0cnkge1xuICAgIHN0cmluZyA9IEpTT04ucGFyc2Uoc3RyaW5nKTtcbiAgfVxuICBjYXRjaChlKSB7fVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHNldENvb2tpZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5leHBpcmVzID09PSAnbnVtYmVyJykge1xuICAgIHZhciBkYXlzID0gb3B0aW9ucy5leHBpcmVzO1xuICAgIHZhciB0aW1lID0gb3B0aW9ucy5leHBpcmVzID0gbmV3IERhdGUoKTtcblxuICAgIHRpbWUuc2V0TWlsbGlzZWNvbmRzKHRpbWUuZ2V0TWlsbGlzZWNvbmRzKCkgKyBkYXlzICogODY0ZSs1KTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGRvY3VtZW50LmNvb2tpZSA9IFtcbiAgICBlbmNvZGUoa2V5KSwgJz0nLCBzdHJpbmdpZnlDb29raWVWYWx1ZSh2YWx1ZSksXG4gICAgb3B0aW9ucy5leHBpcmVzID8gJzsgZXhwaXJlcz0nICsgb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJywgLy8gdXNlIGV4cGlyZXMgYXR0cmlidXRlLCBtYXgtYWdlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUVcbiAgICBvcHRpb25zLnBhdGggPyAnOyBwYXRoPScgKyBvcHRpb25zLnBhdGggOiAnJyxcbiAgICBvcHRpb25zLmRvbWFpbiA/ICc7IGRvbWFpbj0nICsgb3B0aW9ucy5kb21haW4gOiAnJyxcbiAgICBvcHRpb25zLnNlY3VyZSA/ICc7IHNlY3VyZScgOiAnJ1xuICBdLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBnZXRDb29raWUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBrZXkgPyB1bmRlZmluZWQgOiB7fSxcbiAgICBjb29raWVzID0gZG9jdW1lbnQuY29va2llID8gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7ICcpIDogW10sXG4gICAgaSA9IDAsXG4gICAgbCA9IGNvb2tpZXMubGVuZ3RoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHBhcnRzID0gY29va2llc1tpXS5zcGxpdCgnPScpLFxuICAgICAgbmFtZSA9IGRlY29kZShwYXJ0cy5zaGlmdCgpKSxcbiAgICAgIGNvb2tpZSA9IHBhcnRzLmpvaW4oJz0nKTtcblxuICAgIGlmIChrZXkgPT09IG5hbWUpIHtcbiAgICAgIHJlc3VsdCA9IHJlYWQoY29va2llKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJlc3VsdFtuYW1lXSA9IGNvb2tpZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvb2tpZShrZXksIG9wdGlvbnMpIHtcbiAgc2V0Q29va2llKGtleSwgJycsICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zLCB7XG4gICAgZXhwaXJlczogLTFcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBoYXNDb29raWUoa2V5KSB7XG4gIHJldHVybiBnZXRDb29raWUoa2V5KSAhPT0gdW5kZWZpbmVkO1xufVxuXG5cbiQuZXh0ZW5kKHRydWUsIHF1YXNhciwge1xuICByZW1vdmU6IHtcbiAgICBjb29raWU6IHJlbW92ZUNvb2tpZVxuICB9LFxuICBzZXQ6IHtcbiAgICBjb29raWU6IHNldENvb2tpZVxuICB9LFxuICBoYXM6IHtcbiAgICBjb29raWU6IGhhc0Nvb2tpZVxuICB9LFxuICBnZXQ6IHtcbiAgICBjb29raWU6IGdldENvb2tpZSxcbiAgICBhbGw6IHtcbiAgICAgIGNvb2tpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29va2llKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvY29va2llcy9jb29raWVzLmpzXG4gKiogbW9kdWxlIGlkID0gNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction hammerify(el, options) {\n  var $el = $(el);\n\n  if (!$el.data('hammer')) {\n    $el.data('hammer', new Hammer($el[0], options));\n  }\n}\n\n$.fn.hammer = function(options) {\n  return this.each(function() {\n    hammerify(this, options);\n  });\n};\n\n$.fn.getHammer = function() {\n  if (this.length > 1) {\n    throw new Error('Works only on one node because Hammer config is individual.');\n  }\n  return $(this).data('hammer');\n};\n\nHammer.Manager.prototype.emit = /* istanbul ignore next */(function(originalEmit) {\n  return function(type, data) {\n    originalEmit.call(this, type, data);\n    $(this.element).trigger({\n      type: type,\n      gesture: data\n    });\n  };\n})(Hammer.Manager.prototype.emit);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvdG91Y2gvaGFtbWVyLmpzP2NkZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaGFtbWVyaWZ5KGVsLCBvcHRpb25zKSB7XG4gIHZhciAkZWwgPSAkKGVsKTtcblxuICBpZiAoISRlbC5kYXRhKCdoYW1tZXInKSkge1xuICAgICRlbC5kYXRhKCdoYW1tZXInLCBuZXcgSGFtbWVyKCRlbFswXSwgb3B0aW9ucykpO1xuICB9XG59XG5cbiQuZm4uaGFtbWVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGhhbW1lcmlmeSh0aGlzLCBvcHRpb25zKTtcbiAgfSk7XG59O1xuXG4kLmZuLmdldEhhbW1lciA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXb3JrcyBvbmx5IG9uIG9uZSBub2RlIGJlY2F1c2UgSGFtbWVyIGNvbmZpZyBpcyBpbmRpdmlkdWFsLicpO1xuICB9XG4gIHJldHVybiAkKHRoaXMpLmRhdGEoJ2hhbW1lcicpO1xufTtcblxuSGFtbWVyLk1hbmFnZXIucHJvdG90eXBlLmVtaXQgPSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyhmdW5jdGlvbihvcmlnaW5hbEVtaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcbiAgICBvcmlnaW5hbEVtaXQuY2FsbCh0aGlzLCB0eXBlLCBkYXRhKTtcbiAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcih7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZ2VzdHVyZTogZGF0YVxuICAgIH0pO1xuICB9O1xufSkoSGFtbWVyLk1hbmFnZXIucHJvdG90eXBlLmVtaXQpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS1mZWF0dXJlcy90b3VjaC9oYW1tZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("'use strict';\n\n/* istanbul ignore next */\nfunction preventGhosts(element) {\n  if (!element) { return; }\n\n  if (element instanceof $) {\n    element = element[0];\n  }\n\n  var\n    coordinates = [],\n    threshold = 25,\n    timeout = 2500\n    ;\n\n  if ('ontouchstart' in window) {\n    element.addEventListener('touchstart', resetCoordinates, true);\n    element.addEventListener('touchend', registerCoordinates, true);\n    element.addEventListener('click', preventGhostClick, true);\n    element.addEventListener('mouseup', preventGhostClick, true);\n  }\n\n  function preventGhostClick(ev) {\n    for (var i = 0; i < coordinates.length; i++) {\n      var x = coordinates[i][0];\n      var y = coordinates[i][1];\n\n      // within the range, so prevent the click\n      if (\n        Math.abs(ev.clientX - x) < threshold &&\n        Math.abs(ev.clientY - y) < threshold\n      ) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        break;\n      }\n    }\n  }\n\n  function resetCoordinates() {\n    coordinates = [];\n  }\n\n  function popCoordinates() {\n    coordinates.splice(0, 1);\n  }\n\n  function registerCoordinates(ev) {\n    // touchend is triggered on every releasing finger\n    // changed touches always contain the removed touches on a touchend\n    // the touches object might contain these also at some browsers (firefox os)\n    // so touches - changedTouches will be 0 or lower, like -1, on the final touchend\n    if (ev.touches.length - ev.changedTouches.length <= 0) {\n      var touch = ev.changedTouches[0];\n\n      coordinates.push([touch.clientX, touch.clientY]);\n      setTimeout(popCoordinates, timeout);\n    }\n  }\n}\n\n$.extend(true, quasar, {\n  prevent: {\n    ghost: {\n      click: preventGhosts\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvdG91Y2gvcHJldmVudC1naG9zdHMuanM/MTcyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQix3QkFBd0I7QUFDM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwcmV2ZW50R2hvc3RzKGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7IHJldHVybjsgfVxuXG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgJCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICB9XG5cbiAgdmFyXG4gICAgY29vcmRpbmF0ZXMgPSBbXSxcbiAgICB0aHJlc2hvbGQgPSAyNSxcbiAgICB0aW1lb3V0ID0gMjUwMFxuICAgIDtcblxuICBpZiAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgcmVzZXRDb29yZGluYXRlcywgdHJ1ZSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHJlZ2lzdGVyQ29vcmRpbmF0ZXMsIHRydWUpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcmV2ZW50R2hvc3RDbGljaywgdHJ1ZSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgcHJldmVudEdob3N0Q2xpY2ssIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJldmVudEdob3N0Q2xpY2soZXYpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgeCA9IGNvb3JkaW5hdGVzW2ldWzBdO1xuICAgICAgdmFyIHkgPSBjb29yZGluYXRlc1tpXVsxXTtcblxuICAgICAgLy8gd2l0aGluIHRoZSByYW5nZSwgc28gcHJldmVudCB0aGUgY2xpY2tcbiAgICAgIGlmIChcbiAgICAgICAgTWF0aC5hYnMoZXYuY2xpZW50WCAtIHgpIDwgdGhyZXNob2xkICYmXG4gICAgICAgIE1hdGguYWJzKGV2LmNsaWVudFkgLSB5KSA8IHRocmVzaG9sZFxuICAgICAgKSB7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldENvb3JkaW5hdGVzKCkge1xuICAgIGNvb3JkaW5hdGVzID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBwb3BDb29yZGluYXRlcygpIHtcbiAgICBjb29yZGluYXRlcy5zcGxpY2UoMCwgMSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlckNvb3JkaW5hdGVzKGV2KSB7XG4gICAgLy8gdG91Y2hlbmQgaXMgdHJpZ2dlcmVkIG9uIGV2ZXJ5IHJlbGVhc2luZyBmaW5nZXJcbiAgICAvLyBjaGFuZ2VkIHRvdWNoZXMgYWx3YXlzIGNvbnRhaW4gdGhlIHJlbW92ZWQgdG91Y2hlcyBvbiBhIHRvdWNoZW5kXG4gICAgLy8gdGhlIHRvdWNoZXMgb2JqZWN0IG1pZ2h0IGNvbnRhaW4gdGhlc2UgYWxzbyBhdCBzb21lIGJyb3dzZXJzIChmaXJlZm94IG9zKVxuICAgIC8vIHNvIHRvdWNoZXMgLSBjaGFuZ2VkVG91Y2hlcyB3aWxsIGJlIDAgb3IgbG93ZXIsIGxpa2UgLTEsIG9uIHRoZSBmaW5hbCB0b3VjaGVuZFxuICAgIGlmIChldi50b3VjaGVzLmxlbmd0aCAtIGV2LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8PSAwKSB7XG4gICAgICB2YXIgdG91Y2ggPSBldi5jaGFuZ2VkVG91Y2hlc1swXTtcblxuICAgICAgY29vcmRpbmF0ZXMucHVzaChbdG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WV0pO1xuICAgICAgc2V0VGltZW91dChwb3BDb29yZGluYXRlcywgdGltZW91dCk7XG4gICAgfVxuICB9XG59XG5cbiQuZXh0ZW5kKHRydWUsIHF1YXNhciwge1xuICBwcmV2ZW50OiB7XG4gICAgZ2hvc3Q6IHtcbiAgICAgIGNsaWNrOiBwcmV2ZW50R2hvc3RzXG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtZmVhdHVyZXMvdG91Y2gvcHJldmVudC1naG9zdHMuanNcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 8 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction encode(value) {\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return '__q_date|' + value.toUTCString();\n  }\n  if (Object.prototype.toString.call(value) === '[object RegExp]') {\n    return '__q_expr|' + value.source;\n  }\n  if (typeof value === 'number') {\n    return '__q_numb|' + value;\n  }\n  if (typeof value === 'boolean') {\n    return '__q_bool|' + (value ? '1' : '0');\n  }\n  if (typeof value === 'string') {\n    return '__q_strn|' + value;\n  }\n  if (typeof value === 'function') {\n    return '__q_strn|' + value.toString();\n  }\n  if (value === Object(value)) {\n    return '__q_objt|' + JSON.stringify(value);\n  }\n\n  // hmm, we don't know what to do with it,\n  // so just return it as is\n  return value;\n}\n\nfunction decode(value) {\n  var type, length, source;\n\n  length = value.length;\n  if (length < 10) {\n    // then it wasn't encoded by us\n    return value;\n  }\n\n  type = value.substr(0, 8);\n  source = value.substring(9);\n\n  switch(type) {\n  case '__q_date':\n    return new Date(source);\n\n  case '__q_expr':\n    return new RegExp(source);\n\n  case '__q_numb':\n    return Number(source);\n\n  case '__q_bool':\n    return Boolean(source === '1');\n\n  case '__q_strn':\n    return '' + source;\n\n  case '__q_objt':\n    return JSON.parse(source);\n\n  default:\n    // hmm, we reached here, we don't know the type,\n    // then it means it wasn't encoded by us, so just\n    // return whatever value it is\n    return value;\n  }\n}\n\nfunction generateFunctions(fn) {\n  return {\n    local: fn('local'),\n    session: fn('session')\n  };\n}\n\nvar hasStorageItem = generateFunctions(function(type) {\n  return function(key) {\n    return window[type + 'Storage'].getItem(key) !== null;\n  };\n});\n\nvar getStorageLength = generateFunctions(function(type) {\n  return function() {\n    return window[type + 'Storage'].length;\n  };\n});\n\nvar getStorageItem = generateFunctions(function(type) {\n  var\n    hasFn = hasStorageItem[type],\n    storage = window[type + 'Storage'];\n\n  return function(key) {\n    if (hasFn(key)) {\n      return decode(storage.getItem(key));\n    }\n    return null;\n  };\n});\n\nvar getStorageAtIndex = generateFunctions(function(type) {\n  var\n    lengthFn = getStorageLength[type],\n    getItemFn = getStorageItem[type],\n    storage = window[type + 'Storage'];\n\n  return function(index) {\n    if (index < lengthFn()) {\n      return getItemFn(storage.key(index));\n    }\n  };\n});\n\nvar getAllStorageItems = generateFunctions(function(type) {\n  var\n    lengthFn = getStorageLength[type],\n    storage = window[type + 'Storage'],\n    getItemFn = getStorageItem[type];\n\n  return function() {\n    var\n      result = {},\n      key,\n      length = lengthFn();\n\n    for (var i = 0; i < length; i++) {\n      key = storage.key(i);\n      result[key] = getItemFn(key);\n    }\n\n    return result;\n  };\n});\n\nvar setStorageItem = generateFunctions(function(type) {\n  var storage = window[type + 'Storage'];\n\n  return function(key, value) {\n    storage.setItem(key, encode(value));\n  };\n});\n\nvar removeStorageItem = generateFunctions(function(type) {\n  var storage = window[type + 'Storage'];\n\n  return function(key) {\n    storage.removeItem(key);\n  };\n});\n\nvar clearStorage = generateFunctions(function(type) {\n  var storage = window[type + 'Storage'];\n\n  return function() {\n    storage.clear();\n  };\n});\n\nvar storageIsEmpty = generateFunctions(function(type) {\n  var getLengthFn = getStorageLength[type];\n\n  return function() {\n    return getLengthFn() === 0;\n  };\n});\n\n\n$.extend(true, quasar, {\n  has: {\n    local: {\n      storage: {\n        item: hasStorageItem.local\n      }\n    },\n    session: {\n      storage: {\n        item: hasStorageItem.session\n      }\n    }\n  },\n  get: {\n    all: {\n      local: {\n        storage: {\n          items: getAllStorageItems.local\n        }\n      },\n      session: {\n        storage: {\n          items: getAllStorageItems.session\n        }\n      }\n    },\n    local: {\n      storage: {\n        length: getStorageLength.local,\n        item: getStorageItem.local,\n        at: {\n          index: getStorageAtIndex.local\n        }\n      }\n    },\n    session: {\n      storage: {\n        length: getStorageLength.session,\n        item: getStorageItem.session,\n        at: {\n          index: getStorageAtIndex.session\n        }\n      }\n    }\n  },\n  set: {\n    local: {\n      storage: {\n        item: setStorageItem.local\n      }\n    },\n    session: {\n      storage: {\n        item: setStorageItem.session\n      }\n    }\n  },\n  remove: {\n    local: {\n      storage: {\n        item: removeStorageItem.local\n      }\n    },\n    session: {\n      storage: {\n        item: removeStorageItem.session\n      }\n    }\n  },\n  clear: {\n    local: {\n      storage: clearStorage.local\n    },\n    session: {\n      storage: clearStorage.session\n    }\n  },\n  local: {\n    storage: {\n      is: {\n        empty: storageIsEmpty.local\n      }\n    }\n  },\n  session: {\n    storage: {\n      is: {\n        empty: storageIsEmpty.session\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('attr', function(attribs, oldAttribs) {\n  if (typeof attribs === 'undefined') {\n    console.error('v-attr received empty new value from \"' + oldAttribs + '\"', this.el);\n    return;\n  }\n\n  var\n    self = this,\n    values = Array.isArray(attribs) ? attribs : [attribs]\n    ;\n\n  if (typeof oldAttribs !== 'undefined') {\n    var oldValues = Array.isArray(oldAttribs) ? oldAttribs : [oldAttribs];\n\n    oldValues = oldValues.filter(function(val) {\n      return !values.includes(val);\n    });\n\n    oldValues.forEach(function(val) {\n      console.log(val, this.el.hasAttribute(val), this.el.hasAttribute('bogus'));\n      this.el.removeAttribute(val);\n    }.bind(this));\n  }\n\n  values.forEach(function(value) {\n    this.el.setAttribute(value, '');\n  }.bind(this));\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvYXR0cmlidXRlLmpzPzc4M2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLmRpcmVjdGl2ZSgnYXR0cicsIGZ1bmN0aW9uKGF0dHJpYnMsIG9sZEF0dHJpYnMpIHtcbiAgaWYgKHR5cGVvZiBhdHRyaWJzID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ3YtYXR0ciByZWNlaXZlZCBlbXB0eSBuZXcgdmFsdWUgZnJvbSBcIicgKyBvbGRBdHRyaWJzICsgJ1wiJywgdGhpcy5lbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyXG4gICAgc2VsZiA9IHRoaXMsXG4gICAgdmFsdWVzID0gQXJyYXkuaXNBcnJheShhdHRyaWJzKSA/IGF0dHJpYnMgOiBbYXR0cmlic11cbiAgICA7XG5cbiAgaWYgKHR5cGVvZiBvbGRBdHRyaWJzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBvbGRWYWx1ZXMgPSBBcnJheS5pc0FycmF5KG9sZEF0dHJpYnMpID8gb2xkQXR0cmlicyA6IFtvbGRBdHRyaWJzXTtcblxuICAgIG9sZFZhbHVlcyA9IG9sZFZhbHVlcy5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICByZXR1cm4gIXZhbHVlcy5pbmNsdWRlcyh2YWwpO1xuICAgIH0pO1xuXG4gICAgb2xkVmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsKSB7XG4gICAgICBjb25zb2xlLmxvZyh2YWwsIHRoaXMuZWwuaGFzQXR0cmlidXRlKHZhbCksIHRoaXMuZWwuaGFzQXR0cmlidXRlKCdib2d1cycpKTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKHZhbCk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUodmFsdWUsICcnKTtcbiAgfS5iaW5kKHRoaXMpKTtcbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS12dWUvZGlyZWN0aXZlcy9hdHRyaWJ1dGUuanNcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('card-minimize', {\n  bind: function() {\n    this.button = $(this.el);\n    this.target = this.button.parents('.card').children().filter(':not(.card-title)');\n  },\n  update: function(fn) {\n    if (fn && typeof fn !== 'function') {\n      throw new Error('v-card-minimize requires a function if parameter is specified. ' + fn);\n    }\n\n    this.button.click(function() {\n      this.target.slideToggle({complete: fn});\n    }.bind(this));\n  },\n  unbind: function() {\n    this.button.off('click');\n  }\n});\n\nVue.directive('card-close', {\n  bind: function() {\n    this.button = $(this.el);\n    this.card = $(this.button.parents('.card').get(0));\n  },\n  update: function(fn) {\n    if (fn && typeof fn !== 'function') {\n      throw new Error('v-card-close requires a function if parameter is specified. ' + fn);\n    }\n\n    this.button.click(function() {\n      this.card.slideUp({complete: fn});\n    }.bind(this));\n  },\n  unbind: function() {\n    this.button.off('click');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvY2FyZC1kaXJlY3RpdmVzLmpzPzExMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsYUFBYTtBQUM1QyxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QyxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblZ1ZS5kaXJlY3RpdmUoJ2NhcmQtbWluaW1pemUnLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYnV0dG9uID0gJCh0aGlzLmVsKTtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMuYnV0dG9uLnBhcmVudHMoJy5jYXJkJykuY2hpbGRyZW4oKS5maWx0ZXIoJzpub3QoLmNhcmQtdGl0bGUpJyk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3YtY2FyZC1taW5pbWl6ZSByZXF1aXJlcyBhIGZ1bmN0aW9uIGlmIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQuICcgKyBmbik7XG4gICAgfVxuXG4gICAgdGhpcy5idXR0b24uY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRhcmdldC5zbGlkZVRvZ2dsZSh7Y29tcGxldGU6IGZufSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmJ1dHRvbi5vZmYoJ2NsaWNrJyk7XG4gIH1cbn0pO1xuXG5WdWUuZGlyZWN0aXZlKCdjYXJkLWNsb3NlJywge1xuICBiaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmJ1dHRvbiA9ICQodGhpcy5lbCk7XG4gICAgdGhpcy5jYXJkID0gJCh0aGlzLmJ1dHRvbi5wYXJlbnRzKCcuY2FyZCcpLmdldCgwKSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3YtY2FyZC1jbG9zZSByZXF1aXJlcyBhIGZ1bmN0aW9uIGlmIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQuICcgKyBmbik7XG4gICAgfVxuXG4gICAgdGhpcy5idXR0b24uY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNhcmQuc2xpZGVVcCh7Y29tcGxldGU6IGZufSk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmJ1dHRvbi5vZmYoJ2NsaWNrJyk7XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS12dWUvZGlyZWN0aXZlcy9jYXJkLWRpcmVjdGl2ZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('exit-app', {\n  bind: function() {\n    this.container = $(this.el);\n\n    if (!quasar.runs.on.cordova) {\n      this.container.addClass('cordova-only');\n      return;\n    }\n\n    this.container.click(function() {\n      navigator.app.exitApp();\n    });\n  },\n  unbind: function() {\n    if (!quasar.runs.on.cordova) {\n      return;\n    }\n\n    this.container.off('click');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvZXhpdC1hcHAuanM/ZDBhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblZ1ZS5kaXJlY3RpdmUoJ2V4aXQtYXBwJywge1xuICBiaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9ICQodGhpcy5lbCk7XG5cbiAgICBpZiAoIXF1YXNhci5ydW5zLm9uLmNvcmRvdmEpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCdjb3Jkb3ZhLW9ubHknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lci5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgIG5hdmlnYXRvci5hcHAuZXhpdEFwcCgpO1xuICAgIH0pO1xuICB9LFxuICB1bmJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghcXVhc2FyLnJ1bnMub24uY29yZG92YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVyLm9mZignY2xpY2snKTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlLXZ1ZS9kaXJlY3RpdmVzL2V4aXQtYXBwLmpzXG4gKiogbW9kdWxlIGlkID0gMTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('hover', {\n  update: function(handler) {\n    if (!quasar.runs.on.desktop) {\n      return;\n    }\n\n    this.container = $(this.el);\n    this.onHover = function() {\n      handler(true);\n    };\n    this.onBlur = function() {\n      handler(false);\n    };\n\n    this.container.hover(this.onHover, this.onBlur);\n  },\n  unbind: function() {\n    if (!quasar.runs.on.desktop) {\n      return;\n    }\n\n    this.container.off('hover');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvaG92ZXIuanM/NmVkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5WdWUuZGlyZWN0aXZlKCdob3ZlcicsIHtcbiAgdXBkYXRlOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaWYgKCFxdWFzYXIucnVucy5vbi5kZXNrdG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXIgPSAkKHRoaXMuZWwpO1xuICAgIHRoaXMub25Ib3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlcih0cnVlKTtcbiAgICB9O1xuICAgIHRoaXMub25CbHVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVyKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgdGhpcy5jb250YWluZXIuaG92ZXIodGhpcy5vbkhvdmVyLCB0aGlzLm9uQmx1cik7XG4gIH0sXG4gIHVuYmluZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFxdWFzYXIucnVucy5vbi5kZXNrdG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdob3ZlcicpO1xuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvaG92ZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar FragmentFactory = Vue.FragmentFactory;\nvar remove = Vue.util.remove;\nvar createAnchor = Vue.util.createAnchor;\n\nVue.directive('layout-page-sticky', {\n  terminal: true,\n  bind: function() {\n    var container = document.getElementsByClassName('quasar-pages');\n\n    if (container.length === 0) {\n      throw new Error('Using v-layout-page-sticky on a page with no layout.');\n    }\n\n    this.anchor = createAnchor('v-layout-page-sticky');\n    container[0].appendChild(this.anchor);\n    remove(this.el);\n    var factory = new FragmentFactory(this.vm, this.el);\n\n    this.frag = factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n    this.frag.children[0].$el.className += ' quasar-page-sticky quasar-sticky-' + quasar.current.page.name;\n  },\n  unbind: function() {\n    this.frag.remove();\n    remove(this.anchor);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvbGF5b3V0LXBhZ2Utc3RpY2t5LmpzP2I3YTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRnJhZ21lbnRGYWN0b3J5ID0gVnVlLkZyYWdtZW50RmFjdG9yeTtcbnZhciByZW1vdmUgPSBWdWUudXRpbC5yZW1vdmU7XG52YXIgY3JlYXRlQW5jaG9yID0gVnVlLnV0aWwuY3JlYXRlQW5jaG9yO1xuXG5WdWUuZGlyZWN0aXZlKCdsYXlvdXQtcGFnZS1zdGlja3knLCB7XG4gIHRlcm1pbmFsOiB0cnVlLFxuICBiaW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncXVhc2FyLXBhZ2VzJyk7XG5cbiAgICBpZiAoY29udGFpbmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2luZyB2LWxheW91dC1wYWdlLXN0aWNreSBvbiBhIHBhZ2Ugd2l0aCBubyBsYXlvdXQuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5hbmNob3IgPSBjcmVhdGVBbmNob3IoJ3YtbGF5b3V0LXBhZ2Utc3RpY2t5Jyk7XG4gICAgY29udGFpbmVyWzBdLmFwcGVuZENoaWxkKHRoaXMuYW5jaG9yKTtcbiAgICByZW1vdmUodGhpcy5lbCk7XG4gICAgdmFyIGZhY3RvcnkgPSBuZXcgRnJhZ21lbnRGYWN0b3J5KHRoaXMudm0sIHRoaXMuZWwpO1xuXG4gICAgdGhpcy5mcmFnID0gZmFjdG9yeS5jcmVhdGUodGhpcy5faG9zdCwgdGhpcy5fc2NvcGUsIHRoaXMuX2ZyYWcpO1xuICAgIHRoaXMuZnJhZy5iZWZvcmUodGhpcy5hbmNob3IpO1xuICAgIHRoaXMuZnJhZy5jaGlsZHJlblswXS4kZWwuY2xhc3NOYW1lICs9ICcgcXVhc2FyLXBhZ2Utc3RpY2t5IHF1YXNhci1zdGlja3ktJyArIHF1YXNhci5jdXJyZW50LnBhZ2UubmFtZTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmZyYWcucmVtb3ZlKCk7XG4gICAgcmVtb3ZlKHRoaXMuYW5jaG9yKTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlLXZ1ZS9kaXJlY3RpdmVzL2xheW91dC1wYWdlLXN0aWNreS5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction goToPage(page) {\n  if (page.startsWith('#/')) {\n    quasar.navigate.to.route(page);\n    return;\n  }\n\n  quasar.navigate.to.route('#/' + (page === 'index' ? '' : page));\n}\n\nVue.directive('page-link', {\n  update: function(page) {\n    this.handler = function() {\n      if (typeof page === 'function') {\n        page(goToPage);\n      }\n      else if (typeof page === 'string') {\n        goToPage(page);\n      }\n      else {\n        throw new Error('v-page-link: parameter is not string or fn; use .literal?');\n      }\n    };\n\n    $(this.el).click(this.handler);\n  },\n  unbind: function() {\n    $(this.el).off('click', this.handler);\n  }\n});\n\nVue.directive('active-page', {\n  update: function(page) {\n    var el = $(this.el);\n\n    this.handler = function(context) {\n      el[context.name === page ? 'addClass' : 'removeClass']('active');\n    };\n\n    quasar.events.on('app:page:ready', this.handler);\n  },\n  unbind: function() {\n    quasar.events.off('app:page:ready', this.handler);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvcGFnZS1yZWxhdGVkLmpzP2EyOTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGdvVG9QYWdlKHBhZ2UpIHtcbiAgaWYgKHBhZ2Uuc3RhcnRzV2l0aCgnIy8nKSkge1xuICAgIHF1YXNhci5uYXZpZ2F0ZS50by5yb3V0ZShwYWdlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBxdWFzYXIubmF2aWdhdGUudG8ucm91dGUoJyMvJyArIChwYWdlID09PSAnaW5kZXgnID8gJycgOiBwYWdlKSk7XG59XG5cblZ1ZS5kaXJlY3RpdmUoJ3BhZ2UtbGluaycsIHtcbiAgdXBkYXRlOiBmdW5jdGlvbihwYWdlKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mIHBhZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGFnZShnb1RvUGFnZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2YgcGFnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ29Ub1BhZ2UocGFnZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2LXBhZ2UtbGluazogcGFyYW1ldGVyIGlzIG5vdCBzdHJpbmcgb3IgZm47IHVzZSAubGl0ZXJhbD8nKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgJCh0aGlzLmVsKS5jbGljayh0aGlzLmhhbmRsZXIpO1xuICB9LFxuICB1bmJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICQodGhpcy5lbCkub2ZmKCdjbGljaycsIHRoaXMuaGFuZGxlcik7XG4gIH1cbn0pO1xuXG5WdWUuZGlyZWN0aXZlKCdhY3RpdmUtcGFnZScsIHtcbiAgdXBkYXRlOiBmdW5jdGlvbihwYWdlKSB7XG4gICAgdmFyIGVsID0gJCh0aGlzLmVsKTtcblxuICAgIHRoaXMuaGFuZGxlciA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgIGVsW2NvbnRleHQubmFtZSA9PT0gcGFnZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnYWN0aXZlJyk7XG4gICAgfTtcblxuICAgIHF1YXNhci5ldmVudHMub24oJ2FwcDpwYWdlOnJlYWR5JywgdGhpcy5oYW5kbGVyKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICBxdWFzYXIuZXZlbnRzLm9mZignYXBwOnBhZ2U6cmVhZHknLCB0aGlzLmhhbmRsZXIpO1xuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvcGFnZS1yZWxhdGVkLmpzXG4gKiogbW9kdWxlIGlkID0gMTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 15 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('scroll', {\n  bind: function() {\n    var self = this;\n\n    this.element = $(this.el);\n    this.scroll = function() {};\n\n    quasar.events.once('app:page:ready', function(page) {\n      self.pageName = page.name;\n      Vue.nextTick(function() {\n        self.pageContainer = quasar.current.page.scrollContainer;\n        self.pageContainer.scroll(self.scroll);\n      });\n    });\n  },\n  update: function(handler) {\n    if (typeof handler !== 'function') {\n      this.scroll = $.noop;\n      console.error('v-scroll requires a function as parameter', this.el);\n      return;\n    }\n\n    this.scroll = function() {\n      handler(this.pageContainer.scrollTop());\n    }.bind(this);\n  },\n  unbind: function() {\n    this.pageContainer.off('scroll', this.scroll);\n  }\n});\n\nVue.directive('scroll-fire', {\n  bind: function() {\n    var self = this;\n\n    this.element = $(this.el);\n    this.scroll = function() {};\n\n    quasar.events.once('app:page:ready', function(page) {\n      self.pageName = page.name;\n      Vue.nextTick(function() {\n        self.pageContainer = quasar.current.page.scrollContainer;\n        self.pageContainer.scroll(self.scroll);\n      });\n    });\n  },\n  update: function(handler) {\n    if (typeof handler !== 'function') {\n      this.scroll = $.noop;\n      console.error('v-scroll-fire requires a function as parameter', this.el);\n      return;\n    }\n\n    var element = this.element;\n\n    this.scroll = quasar.debounce(function() {\n      var\n        containerBottom = this.pageContainer.offset().top + this.pageContainer.innerHeight(),\n        elementBottom = this.element.offset().top + this.element.height()\n        ;\n\n      if (elementBottom < containerBottom) {\n        this.pageContainer.off('scroll', this.scroll);\n        handler(element);\n      }\n    }.bind(this), 50);\n\n    this.scroll();\n  },\n  unbind: function() {\n    this.pageContainer.off('scroll', this.scroll);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvc2Nyb2xsLmpzP2UyZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLmRpcmVjdGl2ZSgnc2Nyb2xsJywge1xuICBiaW5kOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSAkKHRoaXMuZWwpO1xuICAgIHRoaXMuc2Nyb2xsID0gZnVuY3Rpb24oKSB7fTtcblxuICAgIHF1YXNhci5ldmVudHMub25jZSgnYXBwOnBhZ2U6cmVhZHknLCBmdW5jdGlvbihwYWdlKSB7XG4gICAgICBzZWxmLnBhZ2VOYW1lID0gcGFnZS5uYW1lO1xuICAgICAgVnVlLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnBhZ2VDb250YWluZXIgPSBxdWFzYXIuY3VycmVudC5wYWdlLnNjcm9sbENvbnRhaW5lcjtcbiAgICAgICAgc2VsZi5wYWdlQ29udGFpbmVyLnNjcm9sbChzZWxmLnNjcm9sbCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnNjcm9sbCA9ICQubm9vcDtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ3Ytc2Nyb2xsIHJlcXVpcmVzIGEgZnVuY3Rpb24gYXMgcGFyYW1ldGVyJywgdGhpcy5lbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGhhbmRsZXIodGhpcy5wYWdlQ29udGFpbmVyLnNjcm9sbFRvcCgpKTtcbiAgICB9LmJpbmQodGhpcyk7XG4gIH0sXG4gIHVuYmluZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYWdlQ29udGFpbmVyLm9mZignc2Nyb2xsJywgdGhpcy5zY3JvbGwpO1xuICB9XG59KTtcblxuVnVlLmRpcmVjdGl2ZSgnc2Nyb2xsLWZpcmUnLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuZWxlbWVudCA9ICQodGhpcy5lbCk7XG4gICAgdGhpcy5zY3JvbGwgPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgcXVhc2FyLmV2ZW50cy5vbmNlKCdhcHA6cGFnZTpyZWFkeScsIGZ1bmN0aW9uKHBhZ2UpIHtcbiAgICAgIHNlbGYucGFnZU5hbWUgPSBwYWdlLm5hbWU7XG4gICAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYucGFnZUNvbnRhaW5lciA9IHF1YXNhci5jdXJyZW50LnBhZ2Uuc2Nyb2xsQ29udGFpbmVyO1xuICAgICAgICBzZWxmLnBhZ2VDb250YWluZXIuc2Nyb2xsKHNlbGYuc2Nyb2xsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuc2Nyb2xsID0gJC5ub29wO1xuICAgICAgY29uc29sZS5lcnJvcigndi1zY3JvbGwtZmlyZSByZXF1aXJlcyBhIGZ1bmN0aW9uIGFzIHBhcmFtZXRlcicsIHRoaXMuZWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXG4gICAgdGhpcy5zY3JvbGwgPSBxdWFzYXIuZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICB2YXJcbiAgICAgICAgY29udGFpbmVyQm90dG9tID0gdGhpcy5wYWdlQ29udGFpbmVyLm9mZnNldCgpLnRvcCArIHRoaXMucGFnZUNvbnRhaW5lci5pbm5lckhlaWdodCgpLFxuICAgICAgICBlbGVtZW50Qm90dG9tID0gdGhpcy5lbGVtZW50Lm9mZnNldCgpLnRvcCArIHRoaXMuZWxlbWVudC5oZWlnaHQoKVxuICAgICAgICA7XG5cbiAgICAgIGlmIChlbGVtZW50Qm90dG9tIDwgY29udGFpbmVyQm90dG9tKSB7XG4gICAgICAgIHRoaXMucGFnZUNvbnRhaW5lci5vZmYoJ3Njcm9sbCcsIHRoaXMuc2Nyb2xsKTtcbiAgICAgICAgaGFuZGxlcihlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LmJpbmQodGhpcyksIDUwKTtcblxuICAgIHRoaXMuc2Nyb2xsKCk7XG4gIH0sXG4gIHVuYmluZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYWdlQ29udGFpbmVyLm9mZignc2Nyb2xsJywgdGhpcy5zY3JvbGwpO1xuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvc2Nyb2xsLmpzXG4gKiogbW9kdWxlIGlkID0gMTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 16 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('tooltip', {\n  bind: function() {\n    var element = $(this.el);\n\n    if (this.modifiers.wrap) {\n      element.wrap('<div class=\"quasar-tooltip\"></div>');\n      this.target = element.parent();\n    }\n    else {\n      this.target = element.addClass('quasar-tooltip');\n    }\n\n    if (this.modifiers.inline) {\n      this.target.addClass('flex inline');\n    }\n  },\n  update: function(value) {\n    this.target.attr('quasar-tooltip', value);\n  },\n  unbind: function() {\n    if (this.modifiers.wrap) {\n      this.target.children().unwrap();\n    }\n    else {\n      this.target\n        .removeClass('quasar-tooltip')\n        .removeAttr('quasar-tooltip')\n        ;\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvdG9vbHRpcC5qcz84ZmJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLmRpcmVjdGl2ZSgndG9vbHRpcCcsIHtcbiAgYmluZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnQgPSAkKHRoaXMuZWwpO1xuXG4gICAgaWYgKHRoaXMubW9kaWZpZXJzLndyYXApIHtcbiAgICAgIGVsZW1lbnQud3JhcCgnPGRpdiBjbGFzcz1cInF1YXNhci10b29sdGlwXCI+PC9kaXY+Jyk7XG4gICAgICB0aGlzLnRhcmdldCA9IGVsZW1lbnQucGFyZW50KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy50YXJnZXQgPSBlbGVtZW50LmFkZENsYXNzKCdxdWFzYXItdG9vbHRpcCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vZGlmaWVycy5pbmxpbmUpIHtcbiAgICAgIHRoaXMudGFyZ2V0LmFkZENsYXNzKCdmbGV4IGlubGluZScpO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMudGFyZ2V0LmF0dHIoJ3F1YXNhci10b29sdGlwJywgdmFsdWUpO1xuICB9LFxuICB1bmJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm1vZGlmaWVycy53cmFwKSB7XG4gICAgICB0aGlzLnRhcmdldC5jaGlsZHJlbigpLnVud3JhcCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0XG4gICAgICAgIC5yZW1vdmVDbGFzcygncXVhc2FyLXRvb2x0aXAnKVxuICAgICAgICAucmVtb3ZlQXR0cigncXVhc2FyLXRvb2x0aXAnKVxuICAgICAgICA7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvdG9vbHRpcC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 17 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar\n  customEvents = {},\n  gestures = ['pan', 'pinch', 'press', 'rotate', 'swipe']\n  ;\n\n/* istanbul ignore next */\nfunction decodeEvent(event) {\n  if (event.indexOf('-') === -1) {\n    return [event, null];\n  }\n\n  var direction = event.split('-');\n\n  event = direction.shift();\n  direction = direction[0] === 'x' ? Hammer.DIRECTION_HORIZONTAL : Hammer.DIRECTION_VERTICAL;\n\n  return [event, direction];\n}\n\n/* istanbul ignore next */\nVue.directive('touch', {\n  bind: function() {\n    if (!quasar.runs.with.touch) {\n      return;\n    }\n    if (!this.el.hammer) {\n      this.el.hammer = new Hammer.Manager(this.el);\n    }\n\n    var mc = this.mc = this.el.hammer;\n\n    // determine event type\n    var\n      decodedEvent = decodeEvent(this.arg),\n      event = decodedEvent[0],\n      direction = decodedEvent[1],\n      recognizerType, recognizer\n      ;\n\n    if (customEvents[event]) { // custom event\n      var custom = customEvents[event];\n\n      recognizerType = custom.type;\n      recognizer = new Hammer[quasar.capitalize(recognizerType)](custom);\n      recognizer.recognizeWith(mc.recognizers);\n      mc.add(recognizer);\n\n      return; // EARLY EXIT\n    }\n\n    if (!gestures.includes(event)) {\n      throw new Error('Invalid v-touch event: ' + event);\n    }\n\n    recognizer = mc.get(event);\n    if (recognizer) {\n      if (!direction || recognizer.options.direction === direction) {\n        return;\n      }\n    }\n\n    // add recognizer\n    recognizer = new Hammer[quasar.capitalize(event)]();\n    if (direction) {\n      recognizer.options.direction = direction;\n    }\n    // make sure multiple recognizers work together...\n    recognizer.recognizeWith(mc.recognizers);\n    mc.add(recognizer);\n  },\n\n  update: function(fn) {\n    if (!quasar.runs.with.touch) {\n      return;\n    }\n    var\n      mc = this.mc,\n      vm = this.vm,\n      event = decodeEvent(this.arg)[0]\n      ;\n\n    // teardown old handler\n    if (this.handler) {\n      mc.off(event, this.handler);\n    }\n\n    // define new handler\n    this.handler = function(e) {\n      e.targetVM = vm;\n      fn.call(vm, e);\n    };\n    mc.on(event, this.handler);\n  },\n\n  unbind: function() {\n    if (!quasar.runs.with.touch) {\n      return;\n    }\n    this.mc.off(decodeEvent(this.arg)[0], this.handler);\n\n    if (Object.keys(this.mc.handlers).length === 0) {\n      this.mc.destroy();\n      this.el.hammer = null;\n    }\n  }\n});\n\n/* istanbul ignore next */\nfunction registerCustomEvent(hammerOptions) {\n  customEvents[hammerOptions.event] = hammerOptions;\n}\n\n$.extend(true, quasar, {\n  register: {\n    custom: {\n      touch: {\n        event: registerCustomEvent\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvdG91Y2guanM/MDQ1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyXG4gIGN1c3RvbUV2ZW50cyA9IHt9LFxuICBnZXN0dXJlcyA9IFsncGFuJywgJ3BpbmNoJywgJ3ByZXNzJywgJ3JvdGF0ZScsICdzd2lwZSddXG4gIDtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGRlY29kZUV2ZW50KGV2ZW50KSB7XG4gIGlmIChldmVudC5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIFtldmVudCwgbnVsbF07XG4gIH1cblxuICB2YXIgZGlyZWN0aW9uID0gZXZlbnQuc3BsaXQoJy0nKTtcblxuICBldmVudCA9IGRpcmVjdGlvbi5zaGlmdCgpO1xuICBkaXJlY3Rpb24gPSBkaXJlY3Rpb25bMF0gPT09ICd4JyA/IEhhbW1lci5ESVJFQ1RJT05fSE9SSVpPTlRBTCA6IEhhbW1lci5ESVJFQ1RJT05fVkVSVElDQUw7XG5cbiAgcmV0dXJuIFtldmVudCwgZGlyZWN0aW9uXTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZ1ZS5kaXJlY3RpdmUoJ3RvdWNoJywge1xuICBiaW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXF1YXNhci5ydW5zLndpdGgudG91Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmVsLmhhbW1lcikge1xuICAgICAgdGhpcy5lbC5oYW1tZXIgPSBuZXcgSGFtbWVyLk1hbmFnZXIodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgdmFyIG1jID0gdGhpcy5tYyA9IHRoaXMuZWwuaGFtbWVyO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGV2ZW50IHR5cGVcbiAgICB2YXJcbiAgICAgIGRlY29kZWRFdmVudCA9IGRlY29kZUV2ZW50KHRoaXMuYXJnKSxcbiAgICAgIGV2ZW50ID0gZGVjb2RlZEV2ZW50WzBdLFxuICAgICAgZGlyZWN0aW9uID0gZGVjb2RlZEV2ZW50WzFdLFxuICAgICAgcmVjb2duaXplclR5cGUsIHJlY29nbml6ZXJcbiAgICAgIDtcblxuICAgIGlmIChjdXN0b21FdmVudHNbZXZlbnRdKSB7IC8vIGN1c3RvbSBldmVudFxuICAgICAgdmFyIGN1c3RvbSA9IGN1c3RvbUV2ZW50c1tldmVudF07XG5cbiAgICAgIHJlY29nbml6ZXJUeXBlID0gY3VzdG9tLnR5cGU7XG4gICAgICByZWNvZ25pemVyID0gbmV3IEhhbW1lcltxdWFzYXIuY2FwaXRhbGl6ZShyZWNvZ25pemVyVHlwZSldKGN1c3RvbSk7XG4gICAgICByZWNvZ25pemVyLnJlY29nbml6ZVdpdGgobWMucmVjb2duaXplcnMpO1xuICAgICAgbWMuYWRkKHJlY29nbml6ZXIpO1xuXG4gICAgICByZXR1cm47IC8vIEVBUkxZIEVYSVRcbiAgICB9XG5cbiAgICBpZiAoIWdlc3R1cmVzLmluY2x1ZGVzKGV2ZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHYtdG91Y2ggZXZlbnQ6ICcgKyBldmVudCk7XG4gICAgfVxuXG4gICAgcmVjb2duaXplciA9IG1jLmdldChldmVudCk7XG4gICAgaWYgKHJlY29nbml6ZXIpIHtcbiAgICAgIGlmICghZGlyZWN0aW9uIHx8IHJlY29nbml6ZXIub3B0aW9ucy5kaXJlY3Rpb24gPT09IGRpcmVjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHJlY29nbml6ZXJcbiAgICByZWNvZ25pemVyID0gbmV3IEhhbW1lcltxdWFzYXIuY2FwaXRhbGl6ZShldmVudCldKCk7XG4gICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgcmVjb2duaXplci5vcHRpb25zLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIG11bHRpcGxlIHJlY29nbml6ZXJzIHdvcmsgdG9nZXRoZXIuLi5cbiAgICByZWNvZ25pemVyLnJlY29nbml6ZVdpdGgobWMucmVjb2duaXplcnMpO1xuICAgIG1jLmFkZChyZWNvZ25pemVyKTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKCFxdWFzYXIucnVucy53aXRoLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhclxuICAgICAgbWMgPSB0aGlzLm1jLFxuICAgICAgdm0gPSB0aGlzLnZtLFxuICAgICAgZXZlbnQgPSBkZWNvZGVFdmVudCh0aGlzLmFyZylbMF1cbiAgICAgIDtcblxuICAgIC8vIHRlYXJkb3duIG9sZCBoYW5kbGVyXG4gICAgaWYgKHRoaXMuaGFuZGxlcikge1xuICAgICAgbWMub2ZmKGV2ZW50LCB0aGlzLmhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8vIGRlZmluZSBuZXcgaGFuZGxlclxuICAgIHRoaXMuaGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUudGFyZ2V0Vk0gPSB2bTtcbiAgICAgIGZuLmNhbGwodm0sIGUpO1xuICAgIH07XG4gICAgbWMub24oZXZlbnQsIHRoaXMuaGFuZGxlcik7XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXF1YXNhci5ydW5zLndpdGgudG91Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5tYy5vZmYoZGVjb2RlRXZlbnQodGhpcy5hcmcpWzBdLCB0aGlzLmhhbmRsZXIpO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubWMuaGFuZGxlcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5tYy5kZXN0cm95KCk7XG4gICAgICB0aGlzLmVsLmhhbW1lciA9IG51bGw7XG4gICAgfVxuICB9XG59KTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyQ3VzdG9tRXZlbnQoaGFtbWVyT3B0aW9ucykge1xuICBjdXN0b21FdmVudHNbaGFtbWVyT3B0aW9ucy5ldmVudF0gPSBoYW1tZXJPcHRpb25zO1xufVxuXG4kLmV4dGVuZCh0cnVlLCBxdWFzYXIsIHtcbiAgcmVnaXN0ZXI6IHtcbiAgICBjdXN0b206IHtcbiAgICAgIHRvdWNoOiB7XG4gICAgICAgIGV2ZW50OiByZWdpc3RlckN1c3RvbUV2ZW50XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUtdnVlL2RpcmVjdGl2ZXMvdG91Y2guanNcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 18 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.transition('slide', {\n  css: false,\n\n  enter: function(el, done) {\n    $(el).velocity('stop').velocity('slideDown', done);\n  },\n  enterCancelled: function(el) {\n    $(el).velocity('stop');\n  },\n\n  leave: function(el, done) {\n    $(el).velocity('stop').velocity('slideUp', done);\n  },\n  leaveCancelled: function(el) {\n    $(el).velocity('stop');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUtdnVlL3RyYW5zaXRpb25zL3NsaWRlLmpzPzM2NjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLnRyYW5zaXRpb24oJ3NsaWRlJywge1xuICBjc3M6IGZhbHNlLFxuXG4gIGVudGVyOiBmdW5jdGlvbihlbCwgZG9uZSkge1xuICAgICQoZWwpLnZlbG9jaXR5KCdzdG9wJykudmVsb2NpdHkoJ3NsaWRlRG93bicsIGRvbmUpO1xuICB9LFxuICBlbnRlckNhbmNlbGxlZDogZnVuY3Rpb24oZWwpIHtcbiAgICAkKGVsKS52ZWxvY2l0eSgnc3RvcCcpO1xuICB9LFxuXG4gIGxlYXZlOiBmdW5jdGlvbihlbCwgZG9uZSkge1xuICAgICQoZWwpLnZlbG9jaXR5KCdzdG9wJykudmVsb2NpdHkoJ3NsaWRlVXAnLCBkb25lKTtcbiAgfSxcbiAgbGVhdmVDYW5jZWxsZWQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgJChlbCkudmVsb2NpdHkoJ3N0b3AnKTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlLXZ1ZS90cmFuc2l0aW9ucy9zbGlkZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar cache = __webpack_require__(20);\n\nfunction isURL(target) {\n  return target.indexOf('http') === 0;\n}\n\nfunction processTarget(target, local) {\n  if (isURL(target) || local || !quasar.config.requests.baseURL) {\n    return target;\n  }\n\n  return quasar.config.requests.baseURL + '/' + target;\n}\n\n\nfunction xhrCall(type, config) {\n  config = config || {};\n\n  if (!config.url) {\n    throw new Error('Missing URL');\n  }\n\n  config.url = processTarget(config.url, config.local);\n\n  config.type = type;\n  config.xhrFields = $.extend(true, {\n    withCredentials: true\n  }, config.xhrFields || {});\n\n  if (quasar.config.requests.failFnHandler) {\n    config.error = function() {\n      var shouldHaltExecution = quasar.config.requests.failFnHandler.apply(this, arguments);\n\n      if (shouldHaltExecution === true) {\n        throw new Error('Halting default failure handlers');\n      }\n      return true;\n    };\n  }\n\n  if (type === 'GET') {\n    config.dataType = config.dataType || 'json';\n  }\n\n  if (config.data && (Array.isArray(config.data) || config.data === Object(config.data))) {\n    config.data = JSON.stringify(config.data);\n  }\n\n  return $.ajax(config);\n}\n\nfunction getStore(commonConfig) {\n  if (!commonConfig) {\n    throw new Error('Missing config');\n  }\n\n  if (!commonConfig.url) {\n    throw new Error('Missing url from config');\n  }\n\n  return {\n    make: {\n      a: {\n        get: {\n          request: function(config) {\n            config = config || {};\n            config = $.extend({}, commonConfig, config);\n            return xhrCall('GET', config);\n          }\n        },\n        post: {\n          request: function(config) {\n            config = config || {};\n            config = $.extend({}, commonConfig, config);\n            return xhrCall('POST', config);\n          }\n        },\n        put: {\n          request: function(config) {\n            config = config || {};\n            config = $.extend({}, commonConfig, config);\n            return xhrCall('PUT', config);\n          }\n        },\n        del: {\n          request: function(config) {\n            config = config || {};\n            config = $.extend({}, commonConfig, config);\n            return xhrCall('DELETE', config);\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction makeRequest(type, config) {\n  return xhrCall(type, config);\n}\n\nfunction makeGetRequest(config) {\n  return xhrCall('GET', config);\n}\n\nfunction makePostRequest(config) {\n  return xhrCall('POST', config);\n}\n\nfunction makePutRequest(config) {\n  return xhrCall('PUT', config);\n}\n\nfunction makeDelRequest(config) {\n  return xhrCall('DELETE', config);\n}\n\nfunction makeGroupRequest() {\n  if (arguments.length === 0) {\n    throw new Error('Missing parameters');\n  }\n\n  return $.when.apply(null, arguments);\n}\n\n$.extend(true, quasar, {\n  config: {\n    requests: {\n      baseURL: '',\n      failFnHandler: null,\n      use: {\n        cache: true\n      }\n    }\n  },\n  get: {\n    store: getStore\n  },\n  make: {\n    a: {\n      request: makeRequest,\n      get: {\n        request: makeGetRequest\n      },\n      post: {\n        request: makePostRequest\n      },\n      put: {\n        request: makePutRequest\n      },\n      del: {\n        request: makeDelRequest\n      },\n      group: {\n        request: makeGroupRequest\n      }\n    }\n  },\n  abort: {\n    all: {\n      requests: cache.abortAllRequests\n    }\n  },\n  clear: {\n    requests: {\n      cache: cache.resetRequestCache\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYWpheC9hamF4LmpzP2ZlOTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsd0JBQXdCOztBQUUzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FjaGUgPSByZXF1aXJlKCcuL2NhY2hlL2FqYXgtY2FjaGUnKTtcblxuZnVuY3Rpb24gaXNVUkwodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuaW5kZXhPZignaHR0cCcpID09PSAwO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVGFyZ2V0KHRhcmdldCwgbG9jYWwpIHtcbiAgaWYgKGlzVVJMKHRhcmdldCkgfHwgbG9jYWwgfHwgIXF1YXNhci5jb25maWcucmVxdWVzdHMuYmFzZVVSTCkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICByZXR1cm4gcXVhc2FyLmNvbmZpZy5yZXF1ZXN0cy5iYXNlVVJMICsgJy8nICsgdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHhockNhbGwodHlwZSwgY29uZmlnKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBpZiAoIWNvbmZpZy51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgVVJMJyk7XG4gIH1cblxuICBjb25maWcudXJsID0gcHJvY2Vzc1RhcmdldChjb25maWcudXJsLCBjb25maWcubG9jYWwpO1xuXG4gIGNvbmZpZy50eXBlID0gdHlwZTtcbiAgY29uZmlnLnhockZpZWxkcyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcbiAgfSwgY29uZmlnLnhockZpZWxkcyB8fCB7fSk7XG5cbiAgaWYgKHF1YXNhci5jb25maWcucmVxdWVzdHMuZmFpbEZuSGFuZGxlcikge1xuICAgIGNvbmZpZy5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNob3VsZEhhbHRFeGVjdXRpb24gPSBxdWFzYXIuY29uZmlnLnJlcXVlc3RzLmZhaWxGbkhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKHNob3VsZEhhbHRFeGVjdXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYWx0aW5nIGRlZmF1bHQgZmFpbHVyZSBoYW5kbGVycycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnR0VUJykge1xuICAgIGNvbmZpZy5kYXRhVHlwZSA9IGNvbmZpZy5kYXRhVHlwZSB8fCAnanNvbic7XG4gIH1cblxuICBpZiAoY29uZmlnLmRhdGEgJiYgKEFycmF5LmlzQXJyYXkoY29uZmlnLmRhdGEpIHx8IGNvbmZpZy5kYXRhID09PSBPYmplY3QoY29uZmlnLmRhdGEpKSkge1xuICAgIGNvbmZpZy5kYXRhID0gSlNPTi5zdHJpbmdpZnkoY29uZmlnLmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuICQuYWpheChjb25maWcpO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yZShjb21tb25Db25maWcpIHtcbiAgaWYgKCFjb21tb25Db25maWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgY29uZmlnJyk7XG4gIH1cblxuICBpZiAoIWNvbW1vbkNvbmZpZy51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdXJsIGZyb20gY29uZmlnJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1ha2U6IHtcbiAgICAgIGE6IHtcbiAgICAgICAgZ2V0OiB7XG4gICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICAgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgY29tbW9uQ29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHhockNhbGwoJ0dFVCcsIGNvbmZpZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb3N0OiB7XG4gICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICAgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgY29tbW9uQ29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHhockNhbGwoJ1BPU1QnLCBjb25maWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHV0OiB7XG4gICAgICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICAgICAgICBjb25maWcgPSAkLmV4dGVuZCh7fSwgY29tbW9uQ29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHhockNhbGwoJ1BVVCcsIGNvbmZpZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWw6IHtcbiAgICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgICAgICAgIGNvbmZpZyA9ICQuZXh0ZW5kKHt9LCBjb21tb25Db25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm4geGhyQ2FsbCgnREVMRVRFJywgY29uZmlnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0KHR5cGUsIGNvbmZpZykge1xuICByZXR1cm4geGhyQ2FsbCh0eXBlLCBjb25maWcpO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0UmVxdWVzdChjb25maWcpIHtcbiAgcmV0dXJuIHhockNhbGwoJ0dFVCcsIGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VQb3N0UmVxdWVzdChjb25maWcpIHtcbiAgcmV0dXJuIHhockNhbGwoJ1BPU1QnLCBjb25maWcpO1xufVxuXG5mdW5jdGlvbiBtYWtlUHV0UmVxdWVzdChjb25maWcpIHtcbiAgcmV0dXJuIHhockNhbGwoJ1BVVCcsIGNvbmZpZyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VEZWxSZXF1ZXN0KGNvbmZpZykge1xuICByZXR1cm4geGhyQ2FsbCgnREVMRVRFJywgY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gbWFrZUdyb3VwUmVxdWVzdCgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVycycpO1xuICB9XG5cbiAgcmV0dXJuICQud2hlbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG4kLmV4dGVuZCh0cnVlLCBxdWFzYXIsIHtcbiAgY29uZmlnOiB7XG4gICAgcmVxdWVzdHM6IHtcbiAgICAgIGJhc2VVUkw6ICcnLFxuICAgICAgZmFpbEZuSGFuZGxlcjogbnVsbCxcbiAgICAgIHVzZToge1xuICAgICAgICBjYWNoZTogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ2V0OiB7XG4gICAgc3RvcmU6IGdldFN0b3JlXG4gIH0sXG4gIG1ha2U6IHtcbiAgICBhOiB7XG4gICAgICByZXF1ZXN0OiBtYWtlUmVxdWVzdCxcbiAgICAgIGdldDoge1xuICAgICAgICByZXF1ZXN0OiBtYWtlR2V0UmVxdWVzdFxuICAgICAgfSxcbiAgICAgIHBvc3Q6IHtcbiAgICAgICAgcmVxdWVzdDogbWFrZVBvc3RSZXF1ZXN0XG4gICAgICB9LFxuICAgICAgcHV0OiB7XG4gICAgICAgIHJlcXVlc3Q6IG1ha2VQdXRSZXF1ZXN0XG4gICAgICB9LFxuICAgICAgZGVsOiB7XG4gICAgICAgIHJlcXVlc3Q6IG1ha2VEZWxSZXF1ZXN0XG4gICAgICB9LFxuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgcmVxdWVzdDogbWFrZUdyb3VwUmVxdWVzdFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYWJvcnQ6IHtcbiAgICBhbGw6IHtcbiAgICAgIHJlcXVlc3RzOiBjYWNoZS5hYm9ydEFsbFJlcXVlc3RzXG4gICAgfVxuICB9LFxuICBjbGVhcjoge1xuICAgIHJlcXVlc3RzOiB7XG4gICAgICBjYWNoZTogY2FjaGUucmVzZXRSZXF1ZXN0Q2FjaGVcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9hamF4L2FqYXguanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 20 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar localCache = {\n  __data: {},\n  __itemTimeout: 30 * 60 * 1000, // milliseconds\n\n  remove: function(cacheId) {\n    delete this.__data[cacheId];\n  },\n  has: function(cacheId) {\n    return this.__data.hasOwnProperty(cacheId) &&\n      new Date().getTime() - this.__data[cacheId].time < this.__itemTimeout;\n  },\n  get: function(cacheId) {\n    return $.extend(true, {}, this.__data[cacheId]);\n  },\n  set: function(cacheId, cachedData, statusCode, statusText) {\n    this.remove(cacheId);\n    this.__data[cacheId] = {\n      data: cachedData,\n      time: new Date().getTime(),\n      statusCode: statusCode,\n      statusText: statusText\n    };\n  },\n  empty: function() {\n    this.__data = {};\n  }\n};\n\nvar requestsInProgress = {\n  __data: {},\n\n  has: function(cacheId) {\n    return this.__data.hasOwnProperty(cacheId);\n  },\n  get: function(cacheId) {\n    return this.__data[cacheId];\n  },\n  set: function(cacheId, jqXHR) {\n    if (this.has(cacheId)) {\n      this.get(cacheId).abort();\n    }\n    this.__data[cacheId] = jqXHR;\n\n    var self = this;\n\n    jqXHR.promise().always(function() {\n      self.remove(cacheId);\n    });\n  },\n  remove: function(cacheId) {\n    delete this.__data[cacheId];\n  },\n  abortAll: function() {\n    // first of all, abort all requests in progress\n    Object.keys(this.__data).forEach(function(request) {\n      this.__data[request].abort();\n    }.bind(this));\n\n    this.__data = {};\n  }\n};\n\nfunction log(action, options) {\n  console.log(\n    '[xhr:' + action + ']',\n    (options.type !== 'GET' ? options.type + ' ' : '') + options.url,\n    options.data ? options.data : ''\n  );\n}\n\n$.ajaxPrefilter(function(options, originalOptions, jqXHR) {\n  // cache must work only for some of the HTTP verbs\n  if (!['GET', 'HEAD'].includes(options.type)) {\n    jqXHR.promise().done(function() {\n      log('done', options);\n    });\n    return; // <<<<---- EARLY EXIT\n  }\n\n  var cacheId = originalOptions.url;\n\n  if (!options.persistent) {\n    requestsInProgress.set(options.requestName || cacheId, jqXHR);\n  }\n\n  if (!quasar.config.requests.use.cache || options.hasOwnProperty('cachable') && !options.cachable) {\n    jqXHR.promise().done(function() {\n      log('done', options);\n    });\n    return; // <<<<---- EARLY EXIT\n  }\n\n  var originalBeforeSend = options.beforeSend || function() {\n    return true;\n  };\n\n  options.beforeSend = function() {\n    if (!localCache.has(cacheId)) {\n      jqXHR.promise().done(function(data, textStatus, jqXHR) {\n        localCache.set(cacheId, data, jqXHR.status, jqXHR.statusText);\n        log('to-cache', options);\n      });\n    }\n    return originalBeforeSend();\n  };\n});\n\n$.ajaxTransport('+*', function(options, originalOptions, jqXHR, headers, completeCallback) {\n  // cache must work only for some of the HTTP verbs\n  if (!['GET', 'HEAD'].includes(options.type)) {\n    log('start', options);\n    return; // <<<<---- EARLY EXIT; abort Ajax hijack\n  }\n\n  if (!quasar.config.requests.use.cache || options.hasOwnProperty('cachable') && !options.cachable) {\n    log('start', options);\n    return; // <<<<---- EARLY EXIT; abort Ajax hijack\n  }\n\n  var cacheId = originalOptions.url;\n\n  if (!localCache.has(cacheId)) {\n    log('start', options);\n    return; // <<<<---- EARLY EXIT; abort Ajax hijack\n  }\n\n  return {\n    send: function(headers, completeCallback) {\n      var cache = localCache.get(cacheId);\n\n      log('from-cache', options);\n      completeCallback(cache.statusCode, cache.statusText, {\n        json: cache.data\n      });\n    }\n  };\n});\n\n\nmodule.exports = {\n  resetRequestCache: function() {\n    localCache.empty();\n  },\n  abortAllRequests: function() {\n    requestsInProgress.abortAll();\n  }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYWpheC9jYWNoZS9hamF4LWNhY2hlLmpzPzg2YWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSw0QkFBNEI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVc7QUFDWDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkM7O0FBRUE7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQ25DOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhbENhY2hlID0ge1xuICBfX2RhdGE6IHt9LFxuICBfX2l0ZW1UaW1lb3V0OiAzMCAqIDYwICogMTAwMCwgLy8gbWlsbGlzZWNvbmRzXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgZGVsZXRlIHRoaXMuX19kYXRhW2NhY2hlSWRdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGNhY2hlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGEuaGFzT3duUHJvcGVydHkoY2FjaGVJZCkgJiZcbiAgICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5fX2RhdGFbY2FjaGVJZF0udGltZSA8IHRoaXMuX19pdGVtVGltZW91dDtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgcmV0dXJuICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLl9fZGF0YVtjYWNoZUlkXSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oY2FjaGVJZCwgY2FjaGVkRGF0YSwgc3RhdHVzQ29kZSwgc3RhdHVzVGV4dCkge1xuICAgIHRoaXMucmVtb3ZlKGNhY2hlSWQpO1xuICAgIHRoaXMuX19kYXRhW2NhY2hlSWRdID0ge1xuICAgICAgZGF0YTogY2FjaGVkRGF0YSxcbiAgICAgIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICAgIHN0YXR1c1RleHQ6IHN0YXR1c1RleHRcbiAgICB9O1xuICB9LFxuICBlbXB0eTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fX2RhdGEgPSB7fTtcbiAgfVxufTtcblxudmFyIHJlcXVlc3RzSW5Qcm9ncmVzcyA9IHtcbiAgX19kYXRhOiB7fSxcblxuICBoYXM6IGZ1bmN0aW9uKGNhY2hlSWQpIHtcbiAgICByZXR1cm4gdGhpcy5fX2RhdGEuaGFzT3duUHJvcGVydHkoY2FjaGVJZCk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oY2FjaGVJZCkge1xuICAgIHJldHVybiB0aGlzLl9fZGF0YVtjYWNoZUlkXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihjYWNoZUlkLCBqcVhIUikge1xuICAgIGlmICh0aGlzLmhhcyhjYWNoZUlkKSkge1xuICAgICAgdGhpcy5nZXQoY2FjaGVJZCkuYWJvcnQoKTtcbiAgICB9XG4gICAgdGhpcy5fX2RhdGFbY2FjaGVJZF0gPSBqcVhIUjtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGpxWEhSLnByb21pc2UoKS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlbW92ZShjYWNoZUlkKTtcbiAgICB9KTtcbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgZGVsZXRlIHRoaXMuX19kYXRhW2NhY2hlSWRdO1xuICB9LFxuICBhYm9ydEFsbDogZnVuY3Rpb24oKSB7XG4gICAgLy8gZmlyc3Qgb2YgYWxsLCBhYm9ydCBhbGwgcmVxdWVzdHMgaW4gcHJvZ3Jlc3NcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9fZGF0YSkuZm9yRWFjaChmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgICB0aGlzLl9fZGF0YVtyZXF1ZXN0XS5hYm9ydCgpO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLl9fZGF0YSA9IHt9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBsb2coYWN0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnNvbGUubG9nKFxuICAgICdbeGhyOicgKyBhY3Rpb24gKyAnXScsXG4gICAgKG9wdGlvbnMudHlwZSAhPT0gJ0dFVCcgPyBvcHRpb25zLnR5cGUgKyAnICcgOiAnJykgKyBvcHRpb25zLnVybCxcbiAgICBvcHRpb25zLmRhdGEgPyBvcHRpb25zLmRhdGEgOiAnJ1xuICApO1xufVxuXG4kLmFqYXhQcmVmaWx0ZXIoZnVuY3Rpb24ob3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUikge1xuICAvLyBjYWNoZSBtdXN0IHdvcmsgb25seSBmb3Igc29tZSBvZiB0aGUgSFRUUCB2ZXJic1xuICBpZiAoIVsnR0VUJywgJ0hFQUQnXS5pbmNsdWRlcyhvcHRpb25zLnR5cGUpKSB7XG4gICAganFYSFIucHJvbWlzZSgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICBsb2coJ2RvbmUnLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICByZXR1cm47IC8vIDw8PDwtLS0tIEVBUkxZIEVYSVRcbiAgfVxuXG4gIHZhciBjYWNoZUlkID0gb3JpZ2luYWxPcHRpb25zLnVybDtcblxuICBpZiAoIW9wdGlvbnMucGVyc2lzdGVudCkge1xuICAgIHJlcXVlc3RzSW5Qcm9ncmVzcy5zZXQob3B0aW9ucy5yZXF1ZXN0TmFtZSB8fCBjYWNoZUlkLCBqcVhIUik7XG4gIH1cblxuICBpZiAoIXF1YXNhci5jb25maWcucmVxdWVzdHMudXNlLmNhY2hlIHx8IG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NhY2hhYmxlJykgJiYgIW9wdGlvbnMuY2FjaGFibGUpIHtcbiAgICBqcVhIUi5wcm9taXNlKCkuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgIGxvZygnZG9uZScsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIHJldHVybjsgLy8gPDw8PC0tLS0gRUFSTFkgRVhJVFxuICB9XG5cbiAgdmFyIG9yaWdpbmFsQmVmb3JlU2VuZCA9IG9wdGlvbnMuYmVmb3JlU2VuZCB8fCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBvcHRpb25zLmJlZm9yZVNlbmQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWxvY2FsQ2FjaGUuaGFzKGNhY2hlSWQpKSB7XG4gICAgICBqcVhIUi5wcm9taXNlKCkuZG9uZShmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuICAgICAgICBsb2NhbENhY2hlLnNldChjYWNoZUlkLCBkYXRhLCBqcVhIUi5zdGF0dXMsIGpxWEhSLnN0YXR1c1RleHQpO1xuICAgICAgICBsb2coJ3RvLWNhY2hlJywgb3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9yaWdpbmFsQmVmb3JlU2VuZCgpO1xuICB9O1xufSk7XG5cbiQuYWpheFRyYW5zcG9ydCgnKyonLCBmdW5jdGlvbihvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSLCBoZWFkZXJzLCBjb21wbGV0ZUNhbGxiYWNrKSB7XG4gIC8vIGNhY2hlIG11c3Qgd29yayBvbmx5IGZvciBzb21lIG9mIHRoZSBIVFRQIHZlcmJzXG4gIGlmICghWydHRVQnLCAnSEVBRCddLmluY2x1ZGVzKG9wdGlvbnMudHlwZSkpIHtcbiAgICBsb2coJ3N0YXJ0Jywgb3B0aW9ucyk7XG4gICAgcmV0dXJuOyAvLyA8PDw8LS0tLSBFQVJMWSBFWElUOyBhYm9ydCBBamF4IGhpamFja1xuICB9XG5cbiAgaWYgKCFxdWFzYXIuY29uZmlnLnJlcXVlc3RzLnVzZS5jYWNoZSB8fCBvcHRpb25zLmhhc093blByb3BlcnR5KCdjYWNoYWJsZScpICYmICFvcHRpb25zLmNhY2hhYmxlKSB7XG4gICAgbG9nKCdzdGFydCcsIG9wdGlvbnMpO1xuICAgIHJldHVybjsgLy8gPDw8PC0tLS0gRUFSTFkgRVhJVDsgYWJvcnQgQWpheCBoaWphY2tcbiAgfVxuXG4gIHZhciBjYWNoZUlkID0gb3JpZ2luYWxPcHRpb25zLnVybDtcblxuICBpZiAoIWxvY2FsQ2FjaGUuaGFzKGNhY2hlSWQpKSB7XG4gICAgbG9nKCdzdGFydCcsIG9wdGlvbnMpO1xuICAgIHJldHVybjsgLy8gPDw8PC0tLS0gRUFSTFkgRVhJVDsgYWJvcnQgQWpheCBoaWphY2tcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2VuZDogZnVuY3Rpb24oaGVhZGVycywgY29tcGxldGVDYWxsYmFjaykge1xuICAgICAgdmFyIGNhY2hlID0gbG9jYWxDYWNoZS5nZXQoY2FjaGVJZCk7XG5cbiAgICAgIGxvZygnZnJvbS1jYWNoZScsIG9wdGlvbnMpO1xuICAgICAgY29tcGxldGVDYWxsYmFjayhjYWNoZS5zdGF0dXNDb2RlLCBjYWNoZS5zdGF0dXNUZXh0LCB7XG4gICAgICAgIGpzb246IGNhY2hlLmRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZXNldFJlcXVlc3RDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgbG9jYWxDYWNoZS5lbXB0eSgpO1xuICB9LFxuICBhYm9ydEFsbFJlcXVlc3RzOiBmdW5jdGlvbigpIHtcbiAgICByZXF1ZXN0c0luUHJvZ3Jlc3MuYWJvcnRBbGwoKTtcbiAgfVxufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUvYWpheC9jYWNoZS9hamF4LWNhY2hlLmpzXG4gKiogbW9kdWxlIGlkID0gMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  request = __webpack_require__(22),\n  prepare = __webpack_require__(23),\n  render = __webpack_require__(24)\n  ;\n\nfunction injectCSS(manifest) {\n  if (manifest && manifest.css) {\n    quasar.inject.css(manifest.css);\n  }\n}\n\nfunction preparePage(context, page) {\n  quasar.events.trigger('app:page:prepare', context);\n  prepare(context, page, function(pageVue) {\n    quasar.events.trigger('app:page:render', context);\n    render.page(pageVue, context, function() {\n      quasar.events.trigger('app:page:ready', context);\n    });\n  });\n}\n\nfunction loadRoute(context, layout, page) {\n  if (!layout || !page) {\n    // not ready yet...\n    return;\n  }\n\n  injectCSS(context.manifest);\n\n  if (\n    !quasar.current.layout ||\n    !quasar.current.layout.name ||\n    quasar.current.layout.name !== context.manifest.layout\n  ) {\n    injectCSS(quasar.data.manifest.layouts[context.manifest.layout]);\n    quasar.events.trigger('app:layout:prepare', context);\n    prepare(quasar.data.manifest.layouts[context.manifest.layout], layout, function(layoutVue) {\n      quasar.events.trigger('app:layout:render', context);\n      render.layout(layoutVue, context, function() {\n        quasar.events.trigger('app:layout:ready', context);\n        preparePage(context, page);\n      });\n    });\n\n    return;\n  }\n\n  preparePage(context, page);\n}\n\nfunction prepareAssets(manifest, context) {\n  var layout, page;\n\n  quasar.events.trigger('app:layout:require', context);\n  request.layout(manifest.layout, function(asset) {\n    layout = asset;\n    loadRoute(context, layout, page);\n  });\n\n  quasar.events.trigger('app:page:require', context);\n  request.page(context.name, function(asset) {\n    page = asset;\n    quasar.page[context.name] = {\n      name: context.name,\n      hash: context.route,\n      manifest: context.manifest\n    };\n    loadRoute(context, layout, page);\n  });\n}\n\nfunction registerRoutes(appManifest) {\n  Object.keys(appManifest.pages).forEach(function(pageName) {\n    var\n      pageManifest = appManifest.pages[pageName],\n      hash = '#/' + (pageName !== 'index' ? pageName : '')\n      ;\n\n    pageManifest.name = pageName;\n\n    quasar.add.route({\n      hash: hash,\n      trigger: function() {\n        var route = this;\n\n        prepareAssets(pageManifest, {\n          params: route.params,\n          query: route.query,\n          name: pageName,\n          route: hash,\n          manifest: pageManifest\n        });\n      }\n    });\n  });\n}\n\nfunction startApp() {\n  registerRoutes(quasar.data.manifest);\n  quasar.start.router();\n}\n\n/* istanbul ignore next */\nfunction bootApp(callback) {\n  callback = callback || $.noop;\n\n  if (quasar.runs.on.cordova) {\n    $.getScript('cordova.js', function() {\n      document.addEventListener('deviceready', callback, false);\n    });\n    return; // <<< EARLY EXIT\n  }\n\n  callback();\n}\n\n$.extend(true, quasar, {\n  start: {\n    app: startApp\n  },\n  boot: bootApp\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYXBwL2FwcC5qcz8yOWRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVc7QUFDWDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICByZXF1ZXN0ID0gcmVxdWlyZSgnLi9hc3NldHMvcmVxdWVzdC1hc3NldHMnKSxcbiAgcHJlcGFyZSA9IHJlcXVpcmUoJy4vYXNzZXRzL3ByZXBhcmUtYXNzZXRzJyksXG4gIHJlbmRlciA9IHJlcXVpcmUoJy4vYXNzZXRzL3JlbmRlci1hc3NldHMnKVxuICA7XG5cbmZ1bmN0aW9uIGluamVjdENTUyhtYW5pZmVzdCkge1xuICBpZiAobWFuaWZlc3QgJiYgbWFuaWZlc3QuY3NzKSB7XG4gICAgcXVhc2FyLmluamVjdC5jc3MobWFuaWZlc3QuY3NzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlUGFnZShjb250ZXh0LCBwYWdlKSB7XG4gIHF1YXNhci5ldmVudHMudHJpZ2dlcignYXBwOnBhZ2U6cHJlcGFyZScsIGNvbnRleHQpO1xuICBwcmVwYXJlKGNvbnRleHQsIHBhZ2UsIGZ1bmN0aW9uKHBhZ2VWdWUpIHtcbiAgICBxdWFzYXIuZXZlbnRzLnRyaWdnZXIoJ2FwcDpwYWdlOnJlbmRlcicsIGNvbnRleHQpO1xuICAgIHJlbmRlci5wYWdlKHBhZ2VWdWUsIGNvbnRleHQsIGZ1bmN0aW9uKCkge1xuICAgICAgcXVhc2FyLmV2ZW50cy50cmlnZ2VyKCdhcHA6cGFnZTpyZWFkeScsIGNvbnRleHQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZFJvdXRlKGNvbnRleHQsIGxheW91dCwgcGFnZSkge1xuICBpZiAoIWxheW91dCB8fCAhcGFnZSkge1xuICAgIC8vIG5vdCByZWFkeSB5ZXQuLi5cbiAgICByZXR1cm47XG4gIH1cblxuICBpbmplY3RDU1MoY29udGV4dC5tYW5pZmVzdCk7XG5cbiAgaWYgKFxuICAgICFxdWFzYXIuY3VycmVudC5sYXlvdXQgfHxcbiAgICAhcXVhc2FyLmN1cnJlbnQubGF5b3V0Lm5hbWUgfHxcbiAgICBxdWFzYXIuY3VycmVudC5sYXlvdXQubmFtZSAhPT0gY29udGV4dC5tYW5pZmVzdC5sYXlvdXRcbiAgKSB7XG4gICAgaW5qZWN0Q1NTKHF1YXNhci5kYXRhLm1hbmlmZXN0LmxheW91dHNbY29udGV4dC5tYW5pZmVzdC5sYXlvdXRdKTtcbiAgICBxdWFzYXIuZXZlbnRzLnRyaWdnZXIoJ2FwcDpsYXlvdXQ6cHJlcGFyZScsIGNvbnRleHQpO1xuICAgIHByZXBhcmUocXVhc2FyLmRhdGEubWFuaWZlc3QubGF5b3V0c1tjb250ZXh0Lm1hbmlmZXN0LmxheW91dF0sIGxheW91dCwgZnVuY3Rpb24obGF5b3V0VnVlKSB7XG4gICAgICBxdWFzYXIuZXZlbnRzLnRyaWdnZXIoJ2FwcDpsYXlvdXQ6cmVuZGVyJywgY29udGV4dCk7XG4gICAgICByZW5kZXIubGF5b3V0KGxheW91dFZ1ZSwgY29udGV4dCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHF1YXNhci5ldmVudHMudHJpZ2dlcignYXBwOmxheW91dDpyZWFkeScsIGNvbnRleHQpO1xuICAgICAgICBwcmVwYXJlUGFnZShjb250ZXh0LCBwYWdlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJlcGFyZVBhZ2UoY29udGV4dCwgcGFnZSk7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVBc3NldHMobWFuaWZlc3QsIGNvbnRleHQpIHtcbiAgdmFyIGxheW91dCwgcGFnZTtcblxuICBxdWFzYXIuZXZlbnRzLnRyaWdnZXIoJ2FwcDpsYXlvdXQ6cmVxdWlyZScsIGNvbnRleHQpO1xuICByZXF1ZXN0LmxheW91dChtYW5pZmVzdC5sYXlvdXQsIGZ1bmN0aW9uKGFzc2V0KSB7XG4gICAgbGF5b3V0ID0gYXNzZXQ7XG4gICAgbG9hZFJvdXRlKGNvbnRleHQsIGxheW91dCwgcGFnZSk7XG4gIH0pO1xuXG4gIHF1YXNhci5ldmVudHMudHJpZ2dlcignYXBwOnBhZ2U6cmVxdWlyZScsIGNvbnRleHQpO1xuICByZXF1ZXN0LnBhZ2UoY29udGV4dC5uYW1lLCBmdW5jdGlvbihhc3NldCkge1xuICAgIHBhZ2UgPSBhc3NldDtcbiAgICBxdWFzYXIucGFnZVtjb250ZXh0Lm5hbWVdID0ge1xuICAgICAgbmFtZTogY29udGV4dC5uYW1lLFxuICAgICAgaGFzaDogY29udGV4dC5yb3V0ZSxcbiAgICAgIG1hbmlmZXN0OiBjb250ZXh0Lm1hbmlmZXN0XG4gICAgfTtcbiAgICBsb2FkUm91dGUoY29udGV4dCwgbGF5b3V0LCBwYWdlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUm91dGVzKGFwcE1hbmlmZXN0KSB7XG4gIE9iamVjdC5rZXlzKGFwcE1hbmlmZXN0LnBhZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uKHBhZ2VOYW1lKSB7XG4gICAgdmFyXG4gICAgICBwYWdlTWFuaWZlc3QgPSBhcHBNYW5pZmVzdC5wYWdlc1twYWdlTmFtZV0sXG4gICAgICBoYXNoID0gJyMvJyArIChwYWdlTmFtZSAhPT0gJ2luZGV4JyA/IHBhZ2VOYW1lIDogJycpXG4gICAgICA7XG5cbiAgICBwYWdlTWFuaWZlc3QubmFtZSA9IHBhZ2VOYW1lO1xuXG4gICAgcXVhc2FyLmFkZC5yb3V0ZSh7XG4gICAgICBoYXNoOiBoYXNoLFxuICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByb3V0ZSA9IHRoaXM7XG5cbiAgICAgICAgcHJlcGFyZUFzc2V0cyhwYWdlTWFuaWZlc3QsIHtcbiAgICAgICAgICBwYXJhbXM6IHJvdXRlLnBhcmFtcyxcbiAgICAgICAgICBxdWVyeTogcm91dGUucXVlcnksXG4gICAgICAgICAgbmFtZTogcGFnZU5hbWUsXG4gICAgICAgICAgcm91dGU6IGhhc2gsXG4gICAgICAgICAgbWFuaWZlc3Q6IHBhZ2VNYW5pZmVzdFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0QXBwKCkge1xuICByZWdpc3RlclJvdXRlcyhxdWFzYXIuZGF0YS5tYW5pZmVzdCk7XG4gIHF1YXNhci5zdGFydC5yb3V0ZXIoKTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGJvb3RBcHAoY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCAkLm5vb3A7XG5cbiAgaWYgKHF1YXNhci5ydW5zLm9uLmNvcmRvdmEpIHtcbiAgICAkLmdldFNjcmlwdCgnY29yZG92YS5qcycsIGZ1bmN0aW9uKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgIH0pO1xuICAgIHJldHVybjsgLy8gPDw8IEVBUkxZIEVYSVRcbiAgfVxuXG4gIGNhbGxiYWNrKCk7XG59XG5cbiQuZXh0ZW5kKHRydWUsIHF1YXNhciwge1xuICBzdGFydDoge1xuICAgIGFwcDogc3RhcnRBcHBcbiAgfSxcbiAgYm9vdDogYm9vdEFwcFxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlL2FwcC9hcHAuanNcbiAqKiBtb2R1bGUgaWQgPSAyMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 22 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction requestAsset(type, assetName, done) {\n  var url;\n\n  if (type === 'page') {\n    url = 'pages/' + assetName + '/script.' + assetName;\n  }\n  else {\n    if (!assetName) {\n      quasar.nextTick(function() {\n        done({});\n      });\n      return;\n    }\n    url = 'layouts/' + assetName + '/layout.' + assetName;\n  }\n\n  quasar.require.script(url)\n    .done(function(asset) {\n      quasar.nextTick(function() {\n        done(asset);\n      });\n    })\n    .fail(/* istanbul ignore next */ function() {\n      throw new Error('Cannot load ' + type + '.');\n    });\n}\n\nmodule.exports.layout = function(layoutName, done) {\n  requestAsset('layout', layoutName, done);\n};\n\nmodule.exports.page = function(pageName, done) {\n  requestAsset('page', pageName, done);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYXBwL2Fzc2V0cy9yZXF1ZXN0LWFzc2V0cy5qcz83OWY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXF1ZXN0QXNzZXQodHlwZSwgYXNzZXROYW1lLCBkb25lKSB7XG4gIHZhciB1cmw7XG5cbiAgaWYgKHR5cGUgPT09ICdwYWdlJykge1xuICAgIHVybCA9ICdwYWdlcy8nICsgYXNzZXROYW1lICsgJy9zY3JpcHQuJyArIGFzc2V0TmFtZTtcbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoIWFzc2V0TmFtZSkge1xuICAgICAgcXVhc2FyLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBkb25lKHt9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1cmwgPSAnbGF5b3V0cy8nICsgYXNzZXROYW1lICsgJy9sYXlvdXQuJyArIGFzc2V0TmFtZTtcbiAgfVxuXG4gIHF1YXNhci5yZXF1aXJlLnNjcmlwdCh1cmwpXG4gICAgLmRvbmUoZnVuY3Rpb24oYXNzZXQpIHtcbiAgICAgIHF1YXNhci5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgZG9uZShhc3NldCk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIC5mYWlsKC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbG9hZCAnICsgdHlwZSArICcuJyk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmxheW91dCA9IGZ1bmN0aW9uKGxheW91dE5hbWUsIGRvbmUpIHtcbiAgcmVxdWVzdEFzc2V0KCdsYXlvdXQnLCBsYXlvdXROYW1lLCBkb25lKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnBhZ2UgPSBmdW5jdGlvbihwYWdlTmFtZSwgZG9uZSkge1xuICByZXF1ZXN0QXNzZXQoJ3BhZ2UnLCBwYWdlTmFtZSwgZG9uZSk7XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9hcHAvYXNzZXRzL3JlcXVlc3QtYXNzZXRzLmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 23 */
/***/ function(module, exports) {

	eval("'use strict';\n\nmodule.exports = function(context, assetExports, done) {\n  if (typeof assetExports === 'function') {\n    assetExports.call(\n      context,\n      function(vue) {\n        quasar.nextTick(function() {\n          done(vue);\n        });\n      }\n    );\n    return; // <<< EARLY EXIT\n  }\n\n  quasar.nextTick(function() {\n    done(assetExports);\n  });\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYXBwL2Fzc2V0cy9wcmVwYXJlLWFzc2V0cy5qcz80MTI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb250ZXh0LCBhc3NldEV4cG9ydHMsIGRvbmUpIHtcbiAgaWYgKHR5cGVvZiBhc3NldEV4cG9ydHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3NldEV4cG9ydHMuY2FsbChcbiAgICAgIGNvbnRleHQsXG4gICAgICBmdW5jdGlvbih2dWUpIHtcbiAgICAgICAgcXVhc2FyLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRvbmUodnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm47IC8vIDw8PCBFQVJMWSBFWElUXG4gIH1cblxuICBxdWFzYXIubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgZG9uZShhc3NldEV4cG9ydHMpO1xuICB9KTtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlL2FwcC9hc3NldHMvcHJlcGFyZS1hc3NldHMuanNcbiAqKiBtb2R1bGUgaWQgPSAyM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 24 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction injectVue(vue, el, readyFunction, layout) {\n  vue.el = el;\n  vue.replace = false;\n\n  var handler = function() {\n    quasar.nextTick(function() {\n      readyFunction();\n    });\n  };\n\n  if (!vue.ready) {\n    vue.ready = handler;\n    vue.___quasarInjected = $.noop;\n    return vue; // <<< EARLY EXIT\n  }\n\n  var originalReadyFunction = vue.___quasarInjected || vue.ready;\n\n  vue.ready = function() {\n    originalReadyFunction.call(this);\n    handler();\n  };\n\n  vue.___quasarInjected = originalReadyFunction;\n\n  return vue;\n}\n\nmodule.exports.layout = function(vue, context, done) {\n  var\n    el = '#quasar-app',\n    container = $(el),\n    pageKeys = Object.keys(quasar.page)\n    ;\n\n  if (pageKeys.length > 0) {\n    pageKeys.forEach(function(page) {\n      var vm = quasar.page[page].vm;\n\n      if (vm) {\n        vm.$destroy();\n      }\n    });\n  }\n  if (quasar.current.layout && quasar.current.layout.vm) {\n    quasar.current.layout.vm.$destroy();\n  }\n\n  container.removeClass();\n\n  if (!context.manifest.layout) {\n    quasar.current.layout = null;\n    container.html('');\n    done && done();\n    return;\n  }\n\n  container.addClass('layout-' + context.manifest.layout);\n  quasar.current.layout = {name: context.manifest.layout};\n  quasar.current.layout.vm = new Vue(injectVue(vue, el, done));\n};\n\nmodule.exports.page = function(vue, context, done) {\n  var id = context.name;\n\n  if (!context.manifest.layout) {\n    $('#quasar-app').append('<div class=\"quasar-page page-' + id + '\" style=\"overflow: auto; height: 100%;\"></div>');\n    quasar.current.page = quasar.page[id];\n    quasar.page[id].vm = new Vue(injectVue(vue, '#quasar-app > .quasar-page', done));\n    quasar.page[id].pageContainer = quasar.page[id].scrollContainer = $(quasar.page[id].vm.$el);\n    done && done();\n  }\n\n  var\n    el = '.page-' + id,\n    container = $(el),\n    sticky = $('.quasar-sticky-' + id),\n    newPage = $(\n      '<div class=\"quasar-page-container scroll page-' + id +\n      '\"><div class=\"quasar-page\"></div></div>'\n    );\n\n  // page container elements\n  $('.quasar-page-container').css('display', 'none');\n  // page sticky elements\n  $('.quasar-page-sticky').css('display', 'none');\n\n  if (container.length !== 0) {\n    container.css('display', '');\n    sticky.css('display', '');\n    quasar.current.page = quasar.page[id];\n    done && done();\n    return;\n  }\n\n  $('#quasar-app .quasar-pages').append(newPage);\n  quasar.current.page = quasar.page[id];\n  quasar.page[id].vm = new Vue(injectVue(vue, el + '> .quasar-page', done));\n  quasar.page[id].pageContainer = $(quasar.page[id].vm.$el);\n  quasar.page[id].scrollContainer = newPage;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvYXBwL2Fzc2V0cy9yZW5kZXItYXNzZXRzLmpzPzgzODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEZBQTRGLGNBQWM7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaW5qZWN0VnVlKHZ1ZSwgZWwsIHJlYWR5RnVuY3Rpb24sIGxheW91dCkge1xuICB2dWUuZWwgPSBlbDtcbiAgdnVlLnJlcGxhY2UgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgIHF1YXNhci5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIHJlYWR5RnVuY3Rpb24oKTtcbiAgICB9KTtcbiAgfTtcblxuICBpZiAoIXZ1ZS5yZWFkeSkge1xuICAgIHZ1ZS5yZWFkeSA9IGhhbmRsZXI7XG4gICAgdnVlLl9fX3F1YXNhckluamVjdGVkID0gJC5ub29wO1xuICAgIHJldHVybiB2dWU7IC8vIDw8PCBFQVJMWSBFWElUXG4gIH1cblxuICB2YXIgb3JpZ2luYWxSZWFkeUZ1bmN0aW9uID0gdnVlLl9fX3F1YXNhckluamVjdGVkIHx8IHZ1ZS5yZWFkeTtcblxuICB2dWUucmVhZHkgPSBmdW5jdGlvbigpIHtcbiAgICBvcmlnaW5hbFJlYWR5RnVuY3Rpb24uY2FsbCh0aGlzKTtcbiAgICBoYW5kbGVyKCk7XG4gIH07XG5cbiAgdnVlLl9fX3F1YXNhckluamVjdGVkID0gb3JpZ2luYWxSZWFkeUZ1bmN0aW9uO1xuXG4gIHJldHVybiB2dWU7XG59XG5cbm1vZHVsZS5leHBvcnRzLmxheW91dCA9IGZ1bmN0aW9uKHZ1ZSwgY29udGV4dCwgZG9uZSkge1xuICB2YXJcbiAgICBlbCA9ICcjcXVhc2FyLWFwcCcsXG4gICAgY29udGFpbmVyID0gJChlbCksXG4gICAgcGFnZUtleXMgPSBPYmplY3Qua2V5cyhxdWFzYXIucGFnZSlcbiAgICA7XG5cbiAgaWYgKHBhZ2VLZXlzLmxlbmd0aCA+IDApIHtcbiAgICBwYWdlS2V5cy5mb3JFYWNoKGZ1bmN0aW9uKHBhZ2UpIHtcbiAgICAgIHZhciB2bSA9IHF1YXNhci5wYWdlW3BhZ2VdLnZtO1xuXG4gICAgICBpZiAodm0pIHtcbiAgICAgICAgdm0uJGRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAocXVhc2FyLmN1cnJlbnQubGF5b3V0ICYmIHF1YXNhci5jdXJyZW50LmxheW91dC52bSkge1xuICAgIHF1YXNhci5jdXJyZW50LmxheW91dC52bS4kZGVzdHJveSgpO1xuICB9XG5cbiAgY29udGFpbmVyLnJlbW92ZUNsYXNzKCk7XG5cbiAgaWYgKCFjb250ZXh0Lm1hbmlmZXN0LmxheW91dCkge1xuICAgIHF1YXNhci5jdXJyZW50LmxheW91dCA9IG51bGw7XG4gICAgY29udGFpbmVyLmh0bWwoJycpO1xuICAgIGRvbmUgJiYgZG9uZSgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnRhaW5lci5hZGRDbGFzcygnbGF5b3V0LScgKyBjb250ZXh0Lm1hbmlmZXN0LmxheW91dCk7XG4gIHF1YXNhci5jdXJyZW50LmxheW91dCA9IHtuYW1lOiBjb250ZXh0Lm1hbmlmZXN0LmxheW91dH07XG4gIHF1YXNhci5jdXJyZW50LmxheW91dC52bSA9IG5ldyBWdWUoaW5qZWN0VnVlKHZ1ZSwgZWwsIGRvbmUpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnBhZ2UgPSBmdW5jdGlvbih2dWUsIGNvbnRleHQsIGRvbmUpIHtcbiAgdmFyIGlkID0gY29udGV4dC5uYW1lO1xuXG4gIGlmICghY29udGV4dC5tYW5pZmVzdC5sYXlvdXQpIHtcbiAgICAkKCcjcXVhc2FyLWFwcCcpLmFwcGVuZCgnPGRpdiBjbGFzcz1cInF1YXNhci1wYWdlIHBhZ2UtJyArIGlkICsgJ1wiIHN0eWxlPVwib3ZlcmZsb3c6IGF1dG87IGhlaWdodDogMTAwJTtcIj48L2Rpdj4nKTtcbiAgICBxdWFzYXIuY3VycmVudC5wYWdlID0gcXVhc2FyLnBhZ2VbaWRdO1xuICAgIHF1YXNhci5wYWdlW2lkXS52bSA9IG5ldyBWdWUoaW5qZWN0VnVlKHZ1ZSwgJyNxdWFzYXItYXBwID4gLnF1YXNhci1wYWdlJywgZG9uZSkpO1xuICAgIHF1YXNhci5wYWdlW2lkXS5wYWdlQ29udGFpbmVyID0gcXVhc2FyLnBhZ2VbaWRdLnNjcm9sbENvbnRhaW5lciA9ICQocXVhc2FyLnBhZ2VbaWRdLnZtLiRlbCk7XG4gICAgZG9uZSAmJiBkb25lKCk7XG4gIH1cblxuICB2YXJcbiAgICBlbCA9ICcucGFnZS0nICsgaWQsXG4gICAgY29udGFpbmVyID0gJChlbCksXG4gICAgc3RpY2t5ID0gJCgnLnF1YXNhci1zdGlja3ktJyArIGlkKSxcbiAgICBuZXdQYWdlID0gJChcbiAgICAgICc8ZGl2IGNsYXNzPVwicXVhc2FyLXBhZ2UtY29udGFpbmVyIHNjcm9sbCBwYWdlLScgKyBpZCArXG4gICAgICAnXCI+PGRpdiBjbGFzcz1cInF1YXNhci1wYWdlXCI+PC9kaXY+PC9kaXY+J1xuICAgICk7XG5cbiAgLy8gcGFnZSBjb250YWluZXIgZWxlbWVudHNcbiAgJCgnLnF1YXNhci1wYWdlLWNvbnRhaW5lcicpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gIC8vIHBhZ2Ugc3RpY2t5IGVsZW1lbnRzXG4gICQoJy5xdWFzYXItcGFnZS1zdGlja3knKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gIGlmIChjb250YWluZXIubGVuZ3RoICE9PSAwKSB7XG4gICAgY29udGFpbmVyLmNzcygnZGlzcGxheScsICcnKTtcbiAgICBzdGlja3kuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgIHF1YXNhci5jdXJyZW50LnBhZ2UgPSBxdWFzYXIucGFnZVtpZF07XG4gICAgZG9uZSAmJiBkb25lKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgJCgnI3F1YXNhci1hcHAgLnF1YXNhci1wYWdlcycpLmFwcGVuZChuZXdQYWdlKTtcbiAgcXVhc2FyLmN1cnJlbnQucGFnZSA9IHF1YXNhci5wYWdlW2lkXTtcbiAgcXVhc2FyLnBhZ2VbaWRdLnZtID0gbmV3IFZ1ZShpbmplY3RWdWUodnVlLCBlbCArICc+IC5xdWFzYXItcGFnZScsIGRvbmUpKTtcbiAgcXVhc2FyLnBhZ2VbaWRdLnBhZ2VDb250YWluZXIgPSAkKHF1YXNhci5wYWdlW2lkXS52bS4kZWwpO1xuICBxdWFzYXIucGFnZVtpZF0uc2Nyb2xsQ29udGFpbmVyID0gbmV3UGFnZTtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlL2FwcC9hc3NldHMvcmVuZGVyLWFzc2V0cy5qc1xuICoqIG1vZHVsZSBpZCA9IDI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 25 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar __profiler = {};\n\nfunction notify(byNotify, message) {\n  if (byNotify) {\n    quasar.notify(message);\n    return;\n  }\n\n  console.log(message);\n}\n\n$.extend(true, quasar, {\n  debug: {\n    printStack: /* istanbul ignore next */ function() {\n      var e = new Error('dummy');\n\n      var stack = e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n        .replace(/^\\s+at\\s+/gm, '')\n        .replace(/^Object.<anonymous>\\s*\\(/gm, '{anon}()@')\n        .split('\\n');\n\n      console.log(stack);\n    },\n    profile: function(name, byNotify) {\n      if (__profiler.hasOwnProperty(name)) {\n        notify(byNotify, '[profile end: ' + name + '] ' + (new Date().getTime() - __profiler[name]));\n        delete __profiler[name];\n        return;\n      }\n\n      __profiler[name] = new Date().getTime();\n      notify(byNotify, '[profile start: ' + name + ']');\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvZGVidWcvZGVidWcuanM/ZjUyNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRCxLQUFLO0FBQ3REOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfX3Byb2ZpbGVyID0ge307XG5cbmZ1bmN0aW9uIG5vdGlmeShieU5vdGlmeSwgbWVzc2FnZSkge1xuICBpZiAoYnlOb3RpZnkpIHtcbiAgICBxdWFzYXIubm90aWZ5KG1lc3NhZ2UpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xufVxuXG4kLmV4dGVuZCh0cnVlLCBxdWFzYXIsIHtcbiAgZGVidWc6IHtcbiAgICBwcmludFN0YWNrOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdkdW1teScpO1xuXG4gICAgICB2YXIgc3RhY2sgPSBlLnN0YWNrLnJlcGxhY2UoL15bXlxcKF0rP1tcXG4kXS9nbSwgJycpXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzK2F0XFxzKy9nbSwgJycpXG4gICAgICAgIC5yZXBsYWNlKC9eT2JqZWN0Ljxhbm9ueW1vdXM+XFxzKlxcKC9nbSwgJ3thbm9ufSgpQCcpXG4gICAgICAgIC5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKHN0YWNrKTtcbiAgICB9LFxuICAgIHByb2ZpbGU6IGZ1bmN0aW9uKG5hbWUsIGJ5Tm90aWZ5KSB7XG4gICAgICBpZiAoX19wcm9maWxlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBub3RpZnkoYnlOb3RpZnksICdbcHJvZmlsZSBlbmQ6ICcgKyBuYW1lICsgJ10gJyArIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIF9fcHJvZmlsZXJbbmFtZV0pKTtcbiAgICAgICAgZGVsZXRlIF9fcHJvZmlsZXJbbmFtZV07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX19wcm9maWxlcltuYW1lXSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgbm90aWZ5KGJ5Tm90aWZ5LCAnW3Byb2ZpbGUgc3RhcnQ6ICcgKyBuYW1lICsgJ10nKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9kZWJ1Zy9kZWJ1Zy5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 26 */
/***/ function(module, exports) {

	eval("'use strict';\n\n/* istanbul ignore next */\nfunction getUserAgent() {\n  return (navigator.userAgent || navigator.vendor || window.opera).toLowerCase();\n}\n\n/* istanbul ignore next */\nfunction getMatch(userAgent, platformMatch) {\n  var match = /(edge)\\/([\\w.]+)/.exec(userAgent) ||\n    /(opr)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(chrome)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(iemobile)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(version)(applewebkit)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(webkit)[\\/]([\\w.]+).*(version)[\\/]([\\w.]+).*(safari)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(webkit)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(opera)(?:.*version|)[\\/]([\\w.]+)/.exec(userAgent) ||\n    /(msie) ([\\w.]+)/.exec(userAgent) ||\n    userAgent.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(userAgent) ||\n    userAgent.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(userAgent) ||\n    [];\n\n  return {\n    browser: match[5] || match[3] || match[1] || '',\n    version: match[2] || match[4] || '0',\n    versionNumber: match[4] || match[2] || '0',\n    platform: platformMatch[0] || ''\n  };\n}\n\n/* istanbul ignore next */\nfunction getPlatformMatch(userAgent) {\n  return /(ipad)/.exec(userAgent) ||\n    /(ipod)/.exec(userAgent) ||\n    /(windows phone)/.exec(userAgent) ||\n    /(iphone)/.exec(userAgent) ||\n    /(kindle)/.exec(userAgent) ||\n    /(silk)/.exec(userAgent) ||\n    /(android)/.exec(userAgent) ||\n    /(win)/.exec(userAgent) ||\n    /(mac)/.exec(userAgent) ||\n    /(linux)/.exec(userAgent) ||\n    /(cros)/.exec(userAgent) ||\n    /(playbook)/.exec(userAgent) ||\n    /(bb)/.exec(userAgent) ||\n    /(blackberry)/.exec(userAgent) ||\n    [];\n}\n\n/* istanbul ignore next */\nfunction runsOn() {\n  var\n    userAgent = getUserAgent(),\n    platformMatch = getPlatformMatch(userAgent),\n    matched = getMatch(userAgent, platformMatch),\n    browser = {}\n    ;\n\n  if (matched.browser) {\n    browser[matched.browser] = true;\n    browser.version = matched.version;\n    browser.versionNumber = parseInt(matched.versionNumber, 10);\n  }\n\n  if (matched.platform) {\n    browser[matched.platform] = true;\n  }\n\n  // These are all considered mobile platforms, meaning they run a mobile browser\n  if (browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||\n    browser.ipod || browser.kindle || browser.playbook || browser.silk || browser['windows phone']) {\n    browser.mobile = true;\n  }\n\n  if (browser['windows phone']) {\n    browser.winphone = true;\n    delete browser['windows phone'];\n  }\n\n  // These are all considered desktop platforms, meaning they run a desktop browser\n  if (browser.cros || browser.mac || browser.linux || browser.win) {\n    browser.desktop = true;\n  }\n\n  // Chrome, Opera 15+ and Safari are webkit based browsers\n  if (browser.chrome || browser.opr || browser.safari) {\n    browser.webkit = true;\n  }\n\n  // IE11 has a new token so we will assign it msie to avoid breaking changes\n  if (browser.rv || browser.iemobile) {\n    matched.browser = 'ie';\n    browser.ie = true;\n  }\n\n  // Edge is officially known as Microsoft Edge, so rewrite the key to match\n  if (browser.edge) {\n    matched.browser = 'edge';\n    browser.edge = true;\n  }\n\n  // Blackberry browsers are marked as Safari on BlackBerry\n  if (browser.safari && browser.blackberry || browser.bb) {\n    matched.browser = 'blackberry';\n    browser.blackberry = true;\n  }\n\n  // Playbook browsers are marked as Safari on Playbook\n  if (browser.safari && browser.playbook) {\n    matched.browser = 'playbook';\n    browser.playbook = true;\n  }\n\n  // Opera 15+ are identified as opr\n  if (browser.opr) {\n    matched.browser = 'opera';\n    browser.opera = true;\n  }\n\n  // Stock Android browsers are marked as Safari on Android.\n  if (browser.safari && browser.android) {\n    matched.browser = 'android';\n    browser.android = true;\n  }\n\n  // Kindle browsers are marked as Safari on Kindle\n  if (browser.safari && browser.kindle) {\n    matched.browser = 'kindle';\n    browser.kindle = true;\n  }\n\n   // Kindle Silk browsers are marked as Safari on Kindle\n  if (browser.safari && browser.silk) {\n    matched.browser = 'silk';\n    browser.silk = true;\n  }\n\n  // Assign the name and platform variable\n  browser.name = matched.browser;\n  browser.platform = matched.platform;\n\n  if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {\n    browser.cordova = true;\n  }\n\n  return browser;\n}\n\n$.extend(true, quasar, {\n  runs: {\n    on: runsOn(),\n    with: {\n      touch: (function() {\n        return !!('ontouchstart' in document.documentElement) || /* istanbul ignore next */ window.navigator.msMaxTouchPoints > 0;\n      }())\n    },\n    within: {\n      iframe: window.self != window.top\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvZW52aXJvbm1lbnQvZW52aXJvbm1lbnQuanM/YTZkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpIHtcbiAgcmV0dXJuIChuYXZpZ2F0b3IudXNlckFnZW50IHx8IG5hdmlnYXRvci52ZW5kb3IgfHwgd2luZG93Lm9wZXJhKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2godXNlckFnZW50LCBwbGF0Zm9ybU1hdGNoKSB7XG4gIHZhciBtYXRjaCA9IC8oZWRnZSlcXC8oW1xcdy5dKykvLmV4ZWModXNlckFnZW50KSB8fFxuICAgIC8ob3ByKVtcXC9dKFtcXHcuXSspLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKGNocm9tZSlbXFwvXShbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhpZW1vYmlsZSlbXFwvXShbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyh2ZXJzaW9uKShhcHBsZXdlYmtpdClbXFwvXShbXFx3Ll0rKS4qKHNhZmFyaSlbXFwvXShbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyh3ZWJraXQpW1xcL10oW1xcdy5dKykuKih2ZXJzaW9uKVtcXC9dKFtcXHcuXSspLiooc2FmYXJpKVtcXC9dKFtcXHcuXSspLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKHdlYmtpdClbXFwvXShbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhvcGVyYSkoPzouKnZlcnNpb258KVtcXC9dKFtcXHcuXSspLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKG1zaWUpIChbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgdXNlckFnZW50LmluZGV4T2YoJ3RyaWRlbnQnKSA+PSAwICYmIC8ocnYpKD86OnwgKShbXFx3Ll0rKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgdXNlckFnZW50LmluZGV4T2YoJ2NvbXBhdGlibGUnKSA8IDAgJiYgLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKyl8KS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgW107XG5cbiAgcmV0dXJuIHtcbiAgICBicm93c2VyOiBtYXRjaFs1XSB8fCBtYXRjaFszXSB8fCBtYXRjaFsxXSB8fCAnJyxcbiAgICB2ZXJzaW9uOiBtYXRjaFsyXSB8fCBtYXRjaFs0XSB8fCAnMCcsXG4gICAgdmVyc2lvbk51bWJlcjogbWF0Y2hbNF0gfHwgbWF0Y2hbMl0gfHwgJzAnLFxuICAgIHBsYXRmb3JtOiBwbGF0Zm9ybU1hdGNoWzBdIHx8ICcnXG4gIH07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBnZXRQbGF0Zm9ybU1hdGNoKHVzZXJBZ2VudCkge1xuICByZXR1cm4gLyhpcGFkKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhpcG9kKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyh3aW5kb3dzIHBob25lKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhpcGhvbmUpLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKGtpbmRsZSkvLmV4ZWModXNlckFnZW50KSB8fFxuICAgIC8oc2lsaykvLmV4ZWModXNlckFnZW50KSB8fFxuICAgIC8oYW5kcm9pZCkvLmV4ZWModXNlckFnZW50KSB8fFxuICAgIC8od2luKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhtYWMpLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKGxpbnV4KS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhjcm9zKS8uZXhlYyh1c2VyQWdlbnQpIHx8XG4gICAgLyhwbGF5Ym9vaykvLmV4ZWModXNlckFnZW50KSB8fFxuICAgIC8oYmIpLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICAvKGJsYWNrYmVycnkpLy5leGVjKHVzZXJBZ2VudCkgfHxcbiAgICBbXTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHJ1bnNPbigpIHtcbiAgdmFyXG4gICAgdXNlckFnZW50ID0gZ2V0VXNlckFnZW50KCksXG4gICAgcGxhdGZvcm1NYXRjaCA9IGdldFBsYXRmb3JtTWF0Y2godXNlckFnZW50KSxcbiAgICBtYXRjaGVkID0gZ2V0TWF0Y2godXNlckFnZW50LCBwbGF0Zm9ybU1hdGNoKSxcbiAgICBicm93c2VyID0ge31cbiAgICA7XG5cbiAgaWYgKG1hdGNoZWQuYnJvd3Nlcikge1xuICAgIGJyb3dzZXJbbWF0Y2hlZC5icm93c2VyXSA9IHRydWU7XG4gICAgYnJvd3Nlci52ZXJzaW9uID0gbWF0Y2hlZC52ZXJzaW9uO1xuICAgIGJyb3dzZXIudmVyc2lvbk51bWJlciA9IHBhcnNlSW50KG1hdGNoZWQudmVyc2lvbk51bWJlciwgMTApO1xuICB9XG5cbiAgaWYgKG1hdGNoZWQucGxhdGZvcm0pIHtcbiAgICBicm93c2VyW21hdGNoZWQucGxhdGZvcm1dID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFRoZXNlIGFyZSBhbGwgY29uc2lkZXJlZCBtb2JpbGUgcGxhdGZvcm1zLCBtZWFuaW5nIHRoZXkgcnVuIGEgbW9iaWxlIGJyb3dzZXJcbiAgaWYgKGJyb3dzZXIuYW5kcm9pZCB8fCBicm93c2VyLmJiIHx8IGJyb3dzZXIuYmxhY2tiZXJyeSB8fCBicm93c2VyLmlwYWQgfHwgYnJvd3Nlci5pcGhvbmUgfHxcbiAgICBicm93c2VyLmlwb2QgfHwgYnJvd3Nlci5raW5kbGUgfHwgYnJvd3Nlci5wbGF5Ym9vayB8fCBicm93c2VyLnNpbGsgfHwgYnJvd3Nlclsnd2luZG93cyBwaG9uZSddKSB7XG4gICAgYnJvd3Nlci5tb2JpbGUgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGJyb3dzZXJbJ3dpbmRvd3MgcGhvbmUnXSkge1xuICAgIGJyb3dzZXIud2lucGhvbmUgPSB0cnVlO1xuICAgIGRlbGV0ZSBicm93c2VyWyd3aW5kb3dzIHBob25lJ107XG4gIH1cblxuICAvLyBUaGVzZSBhcmUgYWxsIGNvbnNpZGVyZWQgZGVza3RvcCBwbGF0Zm9ybXMsIG1lYW5pbmcgdGhleSBydW4gYSBkZXNrdG9wIGJyb3dzZXJcbiAgaWYgKGJyb3dzZXIuY3JvcyB8fCBicm93c2VyLm1hYyB8fCBicm93c2VyLmxpbnV4IHx8IGJyb3dzZXIud2luKSB7XG4gICAgYnJvd3Nlci5kZXNrdG9wID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIENocm9tZSwgT3BlcmEgMTUrIGFuZCBTYWZhcmkgYXJlIHdlYmtpdCBiYXNlZCBicm93c2Vyc1xuICBpZiAoYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5vcHIgfHwgYnJvd3Nlci5zYWZhcmkpIHtcbiAgICBicm93c2VyLndlYmtpdCA9IHRydWU7XG4gIH1cblxuICAvLyBJRTExIGhhcyBhIG5ldyB0b2tlbiBzbyB3ZSB3aWxsIGFzc2lnbiBpdCBtc2llIHRvIGF2b2lkIGJyZWFraW5nIGNoYW5nZXNcbiAgaWYgKGJyb3dzZXIucnYgfHwgYnJvd3Nlci5pZW1vYmlsZSkge1xuICAgIG1hdGNoZWQuYnJvd3NlciA9ICdpZSc7XG4gICAgYnJvd3Nlci5pZSA9IHRydWU7XG4gIH1cblxuICAvLyBFZGdlIGlzIG9mZmljaWFsbHkga25vd24gYXMgTWljcm9zb2Z0IEVkZ2UsIHNvIHJld3JpdGUgdGhlIGtleSB0byBtYXRjaFxuICBpZiAoYnJvd3Nlci5lZGdlKSB7XG4gICAgbWF0Y2hlZC5icm93c2VyID0gJ2VkZ2UnO1xuICAgIGJyb3dzZXIuZWRnZSA9IHRydWU7XG4gIH1cblxuICAvLyBCbGFja2JlcnJ5IGJyb3dzZXJzIGFyZSBtYXJrZWQgYXMgU2FmYXJpIG9uIEJsYWNrQmVycnlcbiAgaWYgKGJyb3dzZXIuc2FmYXJpICYmIGJyb3dzZXIuYmxhY2tiZXJyeSB8fCBicm93c2VyLmJiKSB7XG4gICAgbWF0Y2hlZC5icm93c2VyID0gJ2JsYWNrYmVycnknO1xuICAgIGJyb3dzZXIuYmxhY2tiZXJyeSA9IHRydWU7XG4gIH1cblxuICAvLyBQbGF5Ym9vayBicm93c2VycyBhcmUgbWFya2VkIGFzIFNhZmFyaSBvbiBQbGF5Ym9va1xuICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgYnJvd3Nlci5wbGF5Ym9vaykge1xuICAgIG1hdGNoZWQuYnJvd3NlciA9ICdwbGF5Ym9vayc7XG4gICAgYnJvd3Nlci5wbGF5Ym9vayA9IHRydWU7XG4gIH1cblxuICAvLyBPcGVyYSAxNSsgYXJlIGlkZW50aWZpZWQgYXMgb3ByXG4gIGlmIChicm93c2VyLm9wcikge1xuICAgIG1hdGNoZWQuYnJvd3NlciA9ICdvcGVyYSc7XG4gICAgYnJvd3Nlci5vcGVyYSA9IHRydWU7XG4gIH1cblxuICAvLyBTdG9jayBBbmRyb2lkIGJyb3dzZXJzIGFyZSBtYXJrZWQgYXMgU2FmYXJpIG9uIEFuZHJvaWQuXG4gIGlmIChicm93c2VyLnNhZmFyaSAmJiBicm93c2VyLmFuZHJvaWQpIHtcbiAgICBtYXRjaGVkLmJyb3dzZXIgPSAnYW5kcm9pZCc7XG4gICAgYnJvd3Nlci5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEtpbmRsZSBicm93c2VycyBhcmUgbWFya2VkIGFzIFNhZmFyaSBvbiBLaW5kbGVcbiAgaWYgKGJyb3dzZXIuc2FmYXJpICYmIGJyb3dzZXIua2luZGxlKSB7XG4gICAgbWF0Y2hlZC5icm93c2VyID0gJ2tpbmRsZSc7XG4gICAgYnJvd3Nlci5raW5kbGUgPSB0cnVlO1xuICB9XG5cbiAgIC8vIEtpbmRsZSBTaWxrIGJyb3dzZXJzIGFyZSBtYXJrZWQgYXMgU2FmYXJpIG9uIEtpbmRsZVxuICBpZiAoYnJvd3Nlci5zYWZhcmkgJiYgYnJvd3Nlci5zaWxrKSB7XG4gICAgbWF0Y2hlZC5icm93c2VyID0gJ3NpbGsnO1xuICAgIGJyb3dzZXIuc2lsayA9IHRydWU7XG4gIH1cblxuICAvLyBBc3NpZ24gdGhlIG5hbWUgYW5kIHBsYXRmb3JtIHZhcmlhYmxlXG4gIGJyb3dzZXIubmFtZSA9IG1hdGNoZWQuYnJvd3NlcjtcbiAgYnJvd3Nlci5wbGF0Zm9ybSA9IG1hdGNoZWQucGxhdGZvcm07XG5cbiAgaWYgKGRvY3VtZW50LlVSTC5pbmRleE9mKCdodHRwOi8vJykgPT09IC0xICYmIGRvY3VtZW50LlVSTC5pbmRleE9mKCdodHRwczovLycpID09PSAtMSkge1xuICAgIGJyb3dzZXIuY29yZG92YSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gYnJvd3Nlcjtcbn1cblxuJC5leHRlbmQodHJ1ZSwgcXVhc2FyLCB7XG4gIHJ1bnM6IHtcbiAgICBvbjogcnVuc09uKCksXG4gICAgd2l0aDoge1xuICAgICAgdG91Y2g6IChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gd2luZG93Lm5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMDtcbiAgICAgIH0oKSlcbiAgICB9LFxuICAgIHdpdGhpbjoge1xuICAgICAgaWZyYW1lOiB3aW5kb3cuc2VsZiAhPSB3aW5kb3cudG9wXG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUvZW52aXJvbm1lbnQvZW52aXJvbm1lbnQuanNcbiAqKiBtb2R1bGUgaWQgPSAyNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 27 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction parseEventNames(eventNames) {\n  return eventNames.trim().replace(/\\s\\s+/g, ' ').split(' ');\n}\n\nfunction remove(events, eventName, filterFn) {\n  events[eventName] = events[eventName].filter(filterFn);\n  if (events[eventName].length === 0) {\n    delete events[eventName];\n  }\n}\n\nfunction on(eventNames, callback, context, once) {\n  if (!eventNames) {\n    throw new Error('Missing event(s) name(s)');\n  }\n  if (!callback) {\n    throw new Error('Missing callback');\n  }\n  if (typeof callback !== 'function') {\n    throw new Error('Callback is not a function');\n  }\n\n  parseEventNames(eventNames).forEach(function(eventName) {\n    if (!this.events.hasOwnProperty(eventName)) {\n      this.events[eventName] = [];\n    }\n\n    if (this.events[eventName].some(function(item) {\n      return item.cb === callback;\n    })) {\n      // Event name already has specified callback\n      return;\n    }\n\n    this.events[eventName].push({\n      cb: callback,\n      context: context,\n      once: once\n    });\n  }.bind(this));\n}\n\nfunction off(eventNames, callback) {\n  if (!eventNames) {\n    this.events = {};\n    return;\n  }\n\n  if (callback && typeof callback !== 'function') {\n    throw new Error('Callback is not a function');\n  }\n\n  parseEventNames(eventNames).forEach(function(eventName) {\n    if (!this.events.hasOwnProperty(eventName)) {\n      // Unregistered event name\n      return;\n    }\n\n    if (!callback) {\n      delete this.events[eventName];\n      return;\n    }\n\n    remove(this.events, eventName, function(ev) {\n      return ev.cb !== callback;\n    });\n  }.bind(this));\n}\n\nfunction once(eventNames, callback, context) {\n  on.call(this, eventNames, callback, context, true);\n}\n\nfunction trigger(eventNames) {\n  if (!eventNames) {\n    eventNames = getEventsList.call(this).join(' ');\n  }\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  parseEventNames(eventNames).forEach(function(eventName) {\n    if (!this.events.hasOwnProperty(eventName)) {\n      // Nothing to trigger\n      return;\n    }\n\n    var onceList = [];\n\n    this.events[eventName].forEach(function(ev) {\n      ev.cb.apply(ev.context, args);\n      if (ev.once) {\n        onceList.push(ev);\n      }\n    });\n\n    remove(this.events, eventName, function(ev) {\n      return !onceList.includes(ev);\n    });\n  }.bind(this));\n}\n\nfunction hasSubscriber(eventNames, callback) {\n  if (!eventNames) {\n    return Object.keys(this.events).length !== 0;\n  }\n\n  if (typeof eventNames === 'function') {\n    callback = eventNames;\n    eventNames = getEventsList.call(this).join(' ');\n  }\n\n  if (callback && typeof callback !== 'function') {\n    throw new Error('Callback is not a function');\n  }\n\n  var foundSubscriber = false;\n\n  parseEventNames(eventNames).forEach(function(eventName) {\n    var result = this.events.hasOwnProperty(eventName);\n\n    if (!result) {\n      return;\n    }\n\n    if (callback) {\n      result = this.events[eventName].some(function(item) {\n        return item.cb === callback;\n      });\n\n      if (result) {\n        foundSubscriber = true;\n      }\n      return;\n    }\n\n    foundSubscriber = true;\n  }.bind(this));\n\n  return foundSubscriber;\n}\n\nfunction getEventsList() {\n  return Object.keys(this.events);\n}\n\nfunction createEventsEmitter() {\n  var props = {\n    events: {}\n  };\n\n  return {\n    on: on.bind(props),\n    off: off.bind(props),\n    once: once.bind(props),\n    trigger: trigger.bind(props),\n\n    hasSubscriber: hasSubscriber.bind(props),\n    getEventsList: getEventsList.bind(props)\n  };\n}\n\nfunction makeEventsEmitter(object) {\n  if (object !== Object(object)) {\n    throw new Error('Missing object');\n  }\n\n  if (isEventsEmitter(object)) {\n    throw new Error('Object is already an emitter');\n  }\n\n  $.extend(true, object, createEventsEmitter());\n}\n\nfunction isEventsEmitter(object) {\n  if (object !== Object(object)) {\n    throw new Error('Missing object');\n  }\n\n  return typeof object.on === 'function' &&\n    typeof object.off === 'function' &&\n    typeof object.once === 'function' &&\n    typeof object.trigger === 'function' &&\n    typeof object.hasSubscriber === 'function' &&\n    typeof object.getEventsList === 'function';\n}\n\n$.extend(true, quasar, {\n  create: {\n    events: {\n      emitter: createEventsEmitter\n    }\n  },\n  make: {\n    events: {\n      emitter: makeEventsEmitter\n    }\n  },\n  is: {\n    events: {\n      emitter: isEventsEmitter\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvZXZlbnRzL2V2ZW50cy5qcz9mYTIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBwYXJzZUV2ZW50TmFtZXMoZXZlbnROYW1lcykge1xuICByZXR1cm4gZXZlbnROYW1lcy50cmltKCkucmVwbGFjZSgvXFxzXFxzKy9nLCAnICcpLnNwbGl0KCcgJyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShldmVudHMsIGV2ZW50TmFtZSwgZmlsdGVyRm4pIHtcbiAgZXZlbnRzW2V2ZW50TmFtZV0gPSBldmVudHNbZXZlbnROYW1lXS5maWx0ZXIoZmlsdGVyRm4pO1xuICBpZiAoZXZlbnRzW2V2ZW50TmFtZV0ubGVuZ3RoID09PSAwKSB7XG4gICAgZGVsZXRlIGV2ZW50c1tldmVudE5hbWVdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uKGV2ZW50TmFtZXMsIGNhbGxiYWNrLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICghZXZlbnROYW1lcykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBldmVudChzKSBuYW1lKHMpJyk7XG4gIH1cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBjYWxsYmFjaycpO1xuICB9XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBwYXJzZUV2ZW50TmFtZXMoZXZlbnROYW1lcykuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICBpZiAoIXRoaXMuZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5ldmVudHNbZXZlbnROYW1lXS5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLmNiID09PSBjYWxsYmFjaztcbiAgICB9KSkge1xuICAgICAgLy8gRXZlbnQgbmFtZSBhbHJlYWR5IGhhcyBzcGVjaWZpZWQgY2FsbGJhY2tcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLnB1c2goe1xuICAgICAgY2I6IGNhbGxiYWNrLFxuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIG9uY2U6IG9uY2VcbiAgICB9KTtcbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gb2ZmKGV2ZW50TmFtZXMsIGNhbGxiYWNrKSB7XG4gIGlmICghZXZlbnROYW1lcykge1xuICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHBhcnNlRXZlbnROYW1lcyhldmVudE5hbWVzKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIGlmICghdGhpcy5ldmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgLy8gVW5yZWdpc3RlcmVkIGV2ZW50IG5hbWVcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBkZWxldGUgdGhpcy5ldmVudHNbZXZlbnROYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZW1vdmUodGhpcy5ldmVudHMsIGV2ZW50TmFtZSwgZnVuY3Rpb24oZXYpIHtcbiAgICAgIHJldHVybiBldi5jYiAhPT0gY2FsbGJhY2s7XG4gICAgfSk7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZXZlbnROYW1lcywgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgb24uY2FsbCh0aGlzLCBldmVudE5hbWVzLCBjYWxsYmFjaywgY29udGV4dCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoZXZlbnROYW1lcykge1xuICBpZiAoIWV2ZW50TmFtZXMpIHtcbiAgICBldmVudE5hbWVzID0gZ2V0RXZlbnRzTGlzdC5jYWxsKHRoaXMpLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBwYXJzZUV2ZW50TmFtZXMoZXZlbnROYW1lcykuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICBpZiAoIXRoaXMuZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gdHJpZ2dlclxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvbmNlTGlzdCA9IFtdO1xuXG4gICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXS5mb3JFYWNoKGZ1bmN0aW9uKGV2KSB7XG4gICAgICBldi5jYi5hcHBseShldi5jb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmIChldi5vbmNlKSB7XG4gICAgICAgIG9uY2VMaXN0LnB1c2goZXYpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVtb3ZlKHRoaXMuZXZlbnRzLCBldmVudE5hbWUsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICByZXR1cm4gIW9uY2VMaXN0LmluY2x1ZGVzKGV2KTtcbiAgICB9KTtcbiAgfS5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gaGFzU3Vic2NyaWJlcihldmVudE5hbWVzLCBjYWxsYmFjaykge1xuICBpZiAoIWV2ZW50TmFtZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmxlbmd0aCAhPT0gMDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZXZlbnROYW1lcztcbiAgICBldmVudE5hbWVzID0gZ2V0RXZlbnRzTGlzdC5jYWxsKHRoaXMpLmpvaW4oJyAnKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgZm91bmRTdWJzY3JpYmVyID0gZmFsc2U7XG5cbiAgcGFyc2VFdmVudE5hbWVzKGV2ZW50TmFtZXMpLmZvckVhY2goZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSk7XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcmVzdWx0ID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXS5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uY2IgPT09IGNhbGxiYWNrO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgZm91bmRTdWJzY3JpYmVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3VuZFN1YnNjcmliZXIgPSB0cnVlO1xuICB9LmJpbmQodGhpcykpO1xuXG4gIHJldHVybiBmb3VuZFN1YnNjcmliZXI7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50c0xpc3QoKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmV2ZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50c0VtaXR0ZXIoKSB7XG4gIHZhciBwcm9wcyA9IHtcbiAgICBldmVudHM6IHt9XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBvbjogb24uYmluZChwcm9wcyksXG4gICAgb2ZmOiBvZmYuYmluZChwcm9wcyksXG4gICAgb25jZTogb25jZS5iaW5kKHByb3BzKSxcbiAgICB0cmlnZ2VyOiB0cmlnZ2VyLmJpbmQocHJvcHMpLFxuXG4gICAgaGFzU3Vic2NyaWJlcjogaGFzU3Vic2NyaWJlci5iaW5kKHByb3BzKSxcbiAgICBnZXRFdmVudHNMaXN0OiBnZXRFdmVudHNMaXN0LmJpbmQocHJvcHMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VFdmVudHNFbWl0dGVyKG9iamVjdCkge1xuICBpZiAob2JqZWN0ICE9PSBPYmplY3Qob2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBvYmplY3QnKTtcbiAgfVxuXG4gIGlmIChpc0V2ZW50c0VtaXR0ZXIob2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0IGlzIGFscmVhZHkgYW4gZW1pdHRlcicpO1xuICB9XG5cbiAgJC5leHRlbmQodHJ1ZSwgb2JqZWN0LCBjcmVhdGVFdmVudHNFbWl0dGVyKCkpO1xufVxuXG5mdW5jdGlvbiBpc0V2ZW50c0VtaXR0ZXIob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgIT09IE9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiBvYmplY3Qub24gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lm9mZiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBvYmplY3Qub25jZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBvYmplY3QudHJpZ2dlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBvYmplY3QuaGFzU3Vic2NyaWJlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBvYmplY3QuZ2V0RXZlbnRzTGlzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuJC5leHRlbmQodHJ1ZSwgcXVhc2FyLCB7XG4gIGNyZWF0ZToge1xuICAgIGV2ZW50czoge1xuICAgICAgZW1pdHRlcjogY3JlYXRlRXZlbnRzRW1pdHRlclxuICAgIH1cbiAgfSxcbiAgbWFrZToge1xuICAgIGV2ZW50czoge1xuICAgICAgZW1pdHRlcjogbWFrZUV2ZW50c0VtaXR0ZXJcbiAgICB9XG4gIH0sXG4gIGlzOiB7XG4gICAgZXZlbnRzOiB7XG4gICAgICBlbWl0dGVyOiBpc0V2ZW50c0VtaXR0ZXJcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9ldmVudHMvZXZlbnRzLmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n/*\n * Inject FastClick\n */\n/* eslint-disable no-undef */\nFastClick.attach(document.body);\n/* eslint-enable no-undef */\n\n/*\n * Inject App CSS based on correct theme\n */\n__webpack_require__(26);\n\nfunction forceTheme(theme) {\n  var body = $('body');\n\n  if (theme === 'ios') {\n    quasar.runs.on.ios = true;\n    quasar.runs.on.android = false;\n    body.removeClass('mat').addClass('ios');\n  }\n  else {\n    quasar.runs.on.ios = false;\n    quasar.runs.on.android = true;\n    body.removeClass('ios').addClass('mat');\n  }\n\n  $('head link[data-theme]').remove();\n  $('head').append('<link data-theme rel=\"stylesheet\" href=\"css/app.' + theme + '.css\">');\n}\n\n$(function() {\n  var\n    body = $('body'),\n    list = []\n    ;\n\n  forceTheme(body.hasClass('ios') || quasar.runs.on.ios ? 'ios' : 'mat');\n\n  list.push(quasar.runs.on.desktop ? 'desktop' : 'mobile');\n  list.push(quasar.runs.with.touch ? 'touch' : 'no-touch');\n\n  if (quasar.runs.on.cordova) {\n    list.push('cordova');\n  }\n\n  body.addClass(list.join(' '));\n});\n\n/*\n * Inject Globals\n */\n__webpack_require__(27);\n\n$.extend(true, quasar, {\n  events: quasar.create.events.emitter(),\n  page: {},\n  data: {},\n  current: {},\n  swap: {\n    theme: function() {\n      forceTheme($('body').hasClass('ios') ? 'mat' : 'ios');\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvaW5pdGlhbGl6ZS9pbml0aWFsaXplLmpzPzVlNWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLypcbiAqIEluamVjdCBGYXN0Q2xpY2tcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbkZhc3RDbGljay5hdHRhY2goZG9jdW1lbnQuYm9keSk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG5cbi8qXG4gKiBJbmplY3QgQXBwIENTUyBiYXNlZCBvbiBjb3JyZWN0IHRoZW1lXG4gKi9cbnJlcXVpcmUoJy4uL2Vudmlyb25tZW50L2Vudmlyb25tZW50Jyk7XG5cbmZ1bmN0aW9uIGZvcmNlVGhlbWUodGhlbWUpIHtcbiAgdmFyIGJvZHkgPSAkKCdib2R5Jyk7XG5cbiAgaWYgKHRoZW1lID09PSAnaW9zJykge1xuICAgIHF1YXNhci5ydW5zLm9uLmlvcyA9IHRydWU7XG4gICAgcXVhc2FyLnJ1bnMub24uYW5kcm9pZCA9IGZhbHNlO1xuICAgIGJvZHkucmVtb3ZlQ2xhc3MoJ21hdCcpLmFkZENsYXNzKCdpb3MnKTtcbiAgfVxuICBlbHNlIHtcbiAgICBxdWFzYXIucnVucy5vbi5pb3MgPSBmYWxzZTtcbiAgICBxdWFzYXIucnVucy5vbi5hbmRyb2lkID0gdHJ1ZTtcbiAgICBib2R5LnJlbW92ZUNsYXNzKCdpb3MnKS5hZGRDbGFzcygnbWF0Jyk7XG4gIH1cblxuICAkKCdoZWFkIGxpbmtbZGF0YS10aGVtZV0nKS5yZW1vdmUoKTtcbiAgJCgnaGVhZCcpLmFwcGVuZCgnPGxpbmsgZGF0YS10aGVtZSByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cImNzcy9hcHAuJyArIHRoZW1lICsgJy5jc3NcIj4nKTtcbn1cblxuJChmdW5jdGlvbigpIHtcbiAgdmFyXG4gICAgYm9keSA9ICQoJ2JvZHknKSxcbiAgICBsaXN0ID0gW11cbiAgICA7XG5cbiAgZm9yY2VUaGVtZShib2R5Lmhhc0NsYXNzKCdpb3MnKSB8fCBxdWFzYXIucnVucy5vbi5pb3MgPyAnaW9zJyA6ICdtYXQnKTtcblxuICBsaXN0LnB1c2gocXVhc2FyLnJ1bnMub24uZGVza3RvcCA/ICdkZXNrdG9wJyA6ICdtb2JpbGUnKTtcbiAgbGlzdC5wdXNoKHF1YXNhci5ydW5zLndpdGgudG91Y2ggPyAndG91Y2gnIDogJ25vLXRvdWNoJyk7XG5cbiAgaWYgKHF1YXNhci5ydW5zLm9uLmNvcmRvdmEpIHtcbiAgICBsaXN0LnB1c2goJ2NvcmRvdmEnKTtcbiAgfVxuXG4gIGJvZHkuYWRkQ2xhc3MobGlzdC5qb2luKCcgJykpO1xufSk7XG5cbi8qXG4gKiBJbmplY3QgR2xvYmFsc1xuICovXG5yZXF1aXJlKCcuLi9ldmVudHMvZXZlbnRzJyk7XG5cbiQuZXh0ZW5kKHRydWUsIHF1YXNhciwge1xuICBldmVudHM6IHF1YXNhci5jcmVhdGUuZXZlbnRzLmVtaXR0ZXIoKSxcbiAgcGFnZToge30sXG4gIGRhdGE6IHt9LFxuICBjdXJyZW50OiB7fSxcbiAgc3dhcDoge1xuICAgIHRoZW1lOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvcmNlVGhlbWUoJCgnYm9keScpLmhhc0NsYXNzKCdpb3MnKSA/ICdtYXQnIDogJ2lvcycpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlL2luaXRpYWxpemUvaW5pdGlhbGl6ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 29 */
/***/ function(module, exports) {

	eval("'use strict';\n\nquasar.key = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause': 19,\n  'break': 19,\n  'caps_lock': 20,\n  'escape': 27,\n  'space': 32,\n  'page_up': 33,\n  'page_down': 34,\n  'end': 35,\n  'home': 36,\n  'left_arrow': 37,\n  'up_arrow': 38,\n  'right_arrow': 39,\n  'down_arrow': 40,\n  'insert': 45,\n  'delete': 46,\n  '0': 48,\n  '1': 49,\n  '2': 50,\n  '3': 51,\n  '4': 52,\n  '5': 53,\n  '6': 54,\n  '7': 55,\n  '8': 56,\n  '9': 57,\n  'a': 65,\n  'b': 66,\n  'c': 67,\n  'd': 68,\n  'e': 69,\n  'f': 70,\n  'g': 71,\n  'h': 72,\n  'i': 73,\n  'j': 74,\n  'k': 75,\n  'l': 76,\n  'm': 77,\n  'n': 78,\n  'o': 79,\n  'p': 80,\n  'q': 81,\n  'r': 82,\n  's': 83,\n  't': 84,\n  'u': 85,\n  'v': 86,\n  'w': 87,\n  'x': 88,\n  'y': 89,\n  'z': 90,\n  'left_window_key': 91,\n  'right_window_key': 92,\n  'select_key': 93,\n  'numpad_0': 96,\n  'numpad_1': 97,\n  'numpad_2': 98,\n  'numpad_3': 99,\n  'numpad_4': 100,\n  'numpad_5': 101,\n  'numpad_6': 102,\n  'numpad_7': 103,\n  'numpad_8': 104,\n  'numpad_9': 105,\n  'multiply': 106,\n  'add': 107,\n  'subtract': 109,\n  'decimal_point': 110,\n  'divide': 111,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'num_lock': 144,\n  'scroll_lock': 145,\n  'semicolon': 186,\n  'equal_sign': 187,\n  'comma': 188,\n  'dash': 189,\n  'period': 190,\n  'forward_slash': 191,\n  'grave_accent': 192,\n  'open_bracket': 219,\n  'back_slash': 220,\n  'close_braket': 221,\n  'single_quote': 222\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUva2V5Y29kZXMva2V5Y29kZXMuanM/YWRlYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnF1YXNhci5rZXkgPSB7XG4gICdiYWNrc3BhY2UnOiA4LFxuICAndGFiJzogOSxcbiAgJ2VudGVyJzogMTMsXG4gICdzaGlmdCc6IDE2LFxuICAnY3RybCc6IDE3LFxuICAnYWx0JzogMTgsXG4gICdwYXVzZSc6IDE5LFxuICAnYnJlYWsnOiAxOSxcbiAgJ2NhcHNfbG9jayc6IDIwLFxuICAnZXNjYXBlJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZV91cCc6IDMzLFxuICAncGFnZV9kb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnRfYXJyb3cnOiAzNyxcbiAgJ3VwX2Fycm93JzogMzgsXG4gICdyaWdodF9hcnJvdyc6IDM5LFxuICAnZG93bl9hcnJvdyc6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJzAnOiA0OCxcbiAgJzEnOiA0OSxcbiAgJzInOiA1MCxcbiAgJzMnOiA1MSxcbiAgJzQnOiA1MixcbiAgJzUnOiA1MyxcbiAgJzYnOiA1NCxcbiAgJzcnOiA1NSxcbiAgJzgnOiA1NixcbiAgJzknOiA1NyxcbiAgJ2EnOiA2NSxcbiAgJ2InOiA2NixcbiAgJ2MnOiA2NyxcbiAgJ2QnOiA2OCxcbiAgJ2UnOiA2OSxcbiAgJ2YnOiA3MCxcbiAgJ2cnOiA3MSxcbiAgJ2gnOiA3MixcbiAgJ2knOiA3MyxcbiAgJ2onOiA3NCxcbiAgJ2snOiA3NSxcbiAgJ2wnOiA3NixcbiAgJ20nOiA3NyxcbiAgJ24nOiA3OCxcbiAgJ28nOiA3OSxcbiAgJ3AnOiA4MCxcbiAgJ3EnOiA4MSxcbiAgJ3InOiA4MixcbiAgJ3MnOiA4MyxcbiAgJ3QnOiA4NCxcbiAgJ3UnOiA4NSxcbiAgJ3YnOiA4NixcbiAgJ3cnOiA4NyxcbiAgJ3gnOiA4OCxcbiAgJ3knOiA4OSxcbiAgJ3onOiA5MCxcbiAgJ2xlZnRfd2luZG93X2tleSc6IDkxLFxuICAncmlnaHRfd2luZG93X2tleSc6IDkyLFxuICAnc2VsZWN0X2tleSc6IDkzLFxuICAnbnVtcGFkXzAnOiA5NixcbiAgJ251bXBhZF8xJzogOTcsXG4gICdudW1wYWRfMic6IDk4LFxuICAnbnVtcGFkXzMnOiA5OSxcbiAgJ251bXBhZF80JzogMTAwLFxuICAnbnVtcGFkXzUnOiAxMDEsXG4gICdudW1wYWRfNic6IDEwMixcbiAgJ251bXBhZF83JzogMTAzLFxuICAnbnVtcGFkXzgnOiAxMDQsXG4gICdudW1wYWRfOSc6IDEwNSxcbiAgJ211bHRpcGx5JzogMTA2LFxuICAnYWRkJzogMTA3LFxuICAnc3VidHJhY3QnOiAxMDksXG4gICdkZWNpbWFsX3BvaW50JzogMTEwLFxuICAnZGl2aWRlJzogMTExLFxuICAnZjEnOiAxMTIsXG4gICdmMic6IDExMyxcbiAgJ2YzJzogMTE0LFxuICAnZjQnOiAxMTUsXG4gICdmNSc6IDExNixcbiAgJ2Y2JzogMTE3LFxuICAnZjcnOiAxMTgsXG4gICdmOCc6IDExOSxcbiAgJ2Y5JzogMTIwLFxuICAnZjEwJzogMTIxLFxuICAnZjExJzogMTIyLFxuICAnZjEyJzogMTIzLFxuICAnbnVtX2xvY2snOiAxNDQsXG4gICdzY3JvbGxfbG9jayc6IDE0NSxcbiAgJ3NlbWljb2xvbic6IDE4NixcbiAgJ2VxdWFsX3NpZ24nOiAxODcsXG4gICdjb21tYSc6IDE4OCxcbiAgJ2Rhc2gnOiAxODksXG4gICdwZXJpb2QnOiAxOTAsXG4gICdmb3J3YXJkX3NsYXNoJzogMTkxLFxuICAnZ3JhdmVfYWNjZW50JzogMTkyLFxuICAnb3Blbl9icmFja2V0JzogMjE5LFxuICAnYmFja19zbGFzaCc6IDIyMCxcbiAgJ2Nsb3NlX2JyYWtldCc6IDIyMSxcbiAgJ3NpbmdsZV9xdW90ZSc6IDIyMlxufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUva2V5Y29kZXMva2V5Y29kZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAyOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 30 */
/***/ function(module, exports) {

	eval("/* eslint-disable no-extend-native*/\n\nif (!Array.prototype.includes) {\n  Array.prototype.includes = function(searchElement) {\n    'use strict';\n\n    var O = Object(this);\n    var len = parseInt(O.length) || 0;\n\n    if (len === 0) {\n      return false;\n    }\n\n    var n = parseInt(arguments[1]) || 0;\n    var k;\n\n    if (n >= 0) {\n      k = n;\n    }\n    else {\n      k = len + n;\n      if (k < 0) {k = 0;}\n    }\n\n    var currentElement;\n\n    while (k < len) {\n      currentElement = O[k];\n      if (searchElement === currentElement) {\n        return true;\n      }\n      else if (currentElement !== currentElement) {\n        return true;\n      }\n      k++;\n    }\n\n    return false;\n  };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvcG9sbHlmaWxzL2FycmF5LWluY2x1ZGVzLmpzP2MzYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRlbmQtbmF0aXZlKi9cblxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24oc2VhcmNoRWxlbWVudCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBPID0gT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBwYXJzZUludChPLmxlbmd0aCkgfHwgMDtcblxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbiA9IHBhcnNlSW50KGFyZ3VtZW50c1sxXSkgfHwgMDtcbiAgICB2YXIgaztcblxuICAgIGlmIChuID49IDApIHtcbiAgICAgIGsgPSBuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGsgPSBsZW4gKyBuO1xuICAgICAgaWYgKGsgPCAwKSB7ayA9IDA7fVxuICAgIH1cblxuICAgIHZhciBjdXJyZW50RWxlbWVudDtcblxuICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICBjdXJyZW50RWxlbWVudCA9IE9ba107XG4gICAgICBpZiAoc2VhcmNoRWxlbWVudCA9PT0gY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjdXJyZW50RWxlbWVudCAhPT0gY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBrKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9wb2xseWZpbHMvYXJyYXktaW5jbHVkZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 31 */
/***/ function(module, exports) {

	eval("/* eslint-disable no-extend-native*/\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(searchString, position) {\n    position = position || 0;\n    return this.substr(position, searchString.length) === searchString;\n  };\n}\n\nif (!String.prototype.endsWith) {\n  String.prototype.endsWith = function(searchString, position) {\n    var subjectString = this.toString();\n\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n\n    var lastIndex = subjectString.indexOf(searchString, position);\n\n    return lastIndex !== -1 && lastIndex === position;\n  };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvcG9sbHlmaWxzL3N0cmluZy1zdGFydHMtZW5kcy13aXRoLmpzPzEzYWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1leHRlbmQtbmF0aXZlKi9cblxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcbiAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24oc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgMDtcbiAgICByZXR1cm4gdGhpcy5zdWJzdHIocG9zaXRpb24sIHNlYXJjaFN0cmluZy5sZW5ndGgpID09PSBzZWFyY2hTdHJpbmc7XG4gIH07XG59XG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aCkge1xuICBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoID0gZnVuY3Rpb24oc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICAgIHZhciBzdWJqZWN0U3RyaW5nID0gdGhpcy50b1N0cmluZygpO1xuXG4gICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gJ251bWJlcicgfHwgIWlzRmluaXRlKHBvc2l0aW9uKSB8fCBNYXRoLmZsb29yKHBvc2l0aW9uKSAhPT0gcG9zaXRpb24gfHwgcG9zaXRpb24gPiBzdWJqZWN0U3RyaW5nLmxlbmd0aCkge1xuICAgICAgcG9zaXRpb24gPSBzdWJqZWN0U3RyaW5nLmxlbmd0aDtcbiAgICB9XG4gICAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcblxuICAgIHZhciBsYXN0SW5kZXggPSBzdWJqZWN0U3RyaW5nLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG5cbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xuICB9O1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9wb2xseWZpbHMvc3RyaW5nLXN0YXJ0cy1lbmRzLXdpdGguanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  script = __webpack_require__(33),\n  css = __webpack_require__(39)\n  ;\n\n\n$.extend(true, quasar, {\n  require: {\n    script: script.require\n  },\n  inject: {\n    css: css.inject\n  },\n  clear: {\n    require: {\n      cache: script.clearCache\n    },\n    css: function() {\n      css.clear();\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvcmVxdWlyZS9yZXF1aXJlLmpzP2FjM2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICBzY3JpcHQgPSByZXF1aXJlKCcuL3JlcXVpcmUvcmVxdWlyZS1zY3JpcHQnKSxcbiAgY3NzID0gcmVxdWlyZSgnLi9yZXF1aXJlL3JlcXVpcmUtY3NzJylcbiAgO1xuXG5cbiQuZXh0ZW5kKHRydWUsIHF1YXNhciwge1xuICByZXF1aXJlOiB7XG4gICAgc2NyaXB0OiBzY3JpcHQucmVxdWlyZVxuICB9LFxuICBpbmplY3Q6IHtcbiAgICBjc3M6IGNzcy5pbmplY3RcbiAgfSxcbiAgY2xlYXI6IHtcbiAgICByZXF1aXJlOiB7XG4gICAgICBjYWNoZTogc2NyaXB0LmNsZWFyQ2FjaGVcbiAgICB9LFxuICAgIGNzczogZnVuY3Rpb24oKSB7XG4gICAgICBjc3MuY2xlYXIoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS9yZXF1aXJlL3JlcXVpcmUuanNcbiAqKiBtb2R1bGUgaWQgPSAzMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n__webpack_require__(34);\n\nvar\n  modulesCache = {},\n  states = {\n    LOADING: 1,\n    LOADED: 2,\n    READY: 3\n  };\n\n// Named \"eval\" is mandatory for\n// executing in the global scope.\nvar globalEval = eval; //eslint-disable-line no-eval\n\nfunction resolveModule(base, relativePath) {\n  var resolved = quasar.get.normalized.path(relativePath + '.js', base);\n\n  if (!modulesCache[resolved]) {\n    modulesCache[resolved] = {location: resolved};\n  }\n\n  return modulesCache[resolved];\n}\n\nfunction load(module, callback, request) {\n  module.state = states.LOADED;\n\n  if (request && request.status !== 200) {\n    module.error = request;\n    callback(module.error, module);\n    return;\n  }\n\n  var requires = {};\n\n  if (!module.text) {\n    module.text = request.response;\n  }\n\n  module.text.replace(/(?:^|[^\\w\\$_.])require\\s*\\(\\s*[\"']([^\"']*)[\"']\\s*\\)/g, function(_, id) {\n    requires[id] = true;\n  });\n\n  var deps = Object.keys(requires);\n  var count = deps.length;\n\n  if (count === 0) {\n    callback(module.error, module);\n    return;\n  }\n\n  var loaded = function(error) {\n    count--;\n\n    if (count === 0) {\n      callback(error, module);\n    }\n  };\n\n  deps.map(function(dependency) {\n    deepLoad(\n      resolveModule(module.location, dependency),\n      loaded\n    );\n  });\n}\n\nfunction deepLoad(module, callback) {\n  if (module.state === states.LOADING) {\n    setTimeout(function() {\n      deepLoad(module, callback);\n    }, 5);\n    return;\n  }\n  else if (module.state === states.LOADED || module.state === states.READY) {\n    quasar.nextTick(function() {\n      callback(module.error);\n    });\n    return;\n  }\n\n  if (module.text) {\n    quasar.nextTick(function() {\n      load(module, callback);\n    });\n    return;\n  }\n\n  module.state = states.LOADING;\n\n  var request = new XMLHttpRequest();\n\n  request.onload = function() {\n    load(module, callback, request);\n  };\n  request.onreadystatechange = function() {\n    if (request.readyState === 4 && request.status !== 200) {\n      quasar.nextTick(function() {\n        callback(request);\n      });\n    }\n  };\n\n  request.open('GET', module.location, true);\n  request.send();\n}\n\nfunction getModuleExports(module) {\n  if (module.exports) {\n    return module.exports;\n  }\n\n  var fn;\n\n  if (module.factoryFn) {\n    fn = module.factoryFn;\n  }\n  else {\n    fn = globalEval('(function(require,exports,module){' + module.text + '\\n})//# sourceURL=' + module.location);\n  }\n\n  fn(\n    function(id) {\n      return getModuleExports(resolveModule(module.location, id));\n    }, // require\n    module.exports = {}, // exports\n    module // module\n  );\n\n  module.state = states.READY;\n  return module.exports;\n}\n\nfunction applyCallback(callback, deferred, resource, module) {\n  callback(resource.error, module.exports);\n  deferred.resolve(module.exports);\n}\n\nfunction requireScript(resource, callback) {\n  var\n    module,\n    /* eslint-disable */\n    deferred = $.Deferred()\n    /* eslint-enable */\n    ;\n\n  callback = callback || function() {};\n\n  if (typeof resource === 'function') {\n    module = {location: '', text: '' + resource, factoryFn: resource};\n  }\n  else {\n    module = resolveModule('', resource);\n  }\n\n  if (module.state === states.READY) {\n    quasar.nextTick(function() {\n      applyCallback(callback, deferred, resource, module);\n    });\n  }\n  else {\n    deepLoad(module, function(err) {\n      if (err) {\n        callback(err);\n        deferred.reject(err);\n        return;\n      }\n\n      if (!module.exports) {\n        getModuleExports(module);\n      }\n\n      applyCallback(callback, deferred, resource, module);\n    });\n  }\n\n  return deferred;\n}\n\nfunction clearRequireCache() {\n  modulesCache = {};\n}\n\nmodule.exports = {\n  require: requireScript,\n  clearCache: clearRequireCache\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvcmVxdWlyZS9yZXF1aXJlL3JlcXVpcmUtc2NyaXB0LmpzP2QxZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCOztBQUV0QjtBQUNBOztBQUVBO0FBQ0EsOEJBQThCO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsc0JBQXNCO0FBQzdFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx1QkFBdUI7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi8uLi91dGlscy91dGlscycpO1xuXG52YXJcbiAgbW9kdWxlc0NhY2hlID0ge30sXG4gIHN0YXRlcyA9IHtcbiAgICBMT0FESU5HOiAxLFxuICAgIExPQURFRDogMixcbiAgICBSRUFEWTogM1xuICB9O1xuXG4vLyBOYW1lZCBcImV2YWxcIiBpcyBtYW5kYXRvcnkgZm9yXG4vLyBleGVjdXRpbmcgaW4gdGhlIGdsb2JhbCBzY29wZS5cbnZhciBnbG9iYWxFdmFsID0gZXZhbDsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblxuZnVuY3Rpb24gcmVzb2x2ZU1vZHVsZShiYXNlLCByZWxhdGl2ZVBhdGgpIHtcbiAgdmFyIHJlc29sdmVkID0gcXVhc2FyLmdldC5ub3JtYWxpemVkLnBhdGgocmVsYXRpdmVQYXRoICsgJy5qcycsIGJhc2UpO1xuXG4gIGlmICghbW9kdWxlc0NhY2hlW3Jlc29sdmVkXSkge1xuICAgIG1vZHVsZXNDYWNoZVtyZXNvbHZlZF0gPSB7bG9jYXRpb246IHJlc29sdmVkfTtcbiAgfVxuXG4gIHJldHVybiBtb2R1bGVzQ2FjaGVbcmVzb2x2ZWRdO1xufVxuXG5mdW5jdGlvbiBsb2FkKG1vZHVsZSwgY2FsbGJhY2ssIHJlcXVlc3QpIHtcbiAgbW9kdWxlLnN0YXRlID0gc3RhdGVzLkxPQURFRDtcblxuICBpZiAocmVxdWVzdCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgbW9kdWxlLmVycm9yID0gcmVxdWVzdDtcbiAgICBjYWxsYmFjayhtb2R1bGUuZXJyb3IsIG1vZHVsZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlcXVpcmVzID0ge307XG5cbiAgaWYgKCFtb2R1bGUudGV4dCkge1xuICAgIG1vZHVsZS50ZXh0ID0gcmVxdWVzdC5yZXNwb25zZTtcbiAgfVxuXG4gIG1vZHVsZS50ZXh0LnJlcGxhY2UoLyg/Ol58W15cXHdcXCRfLl0pcmVxdWlyZVxccypcXChcXHMqW1wiJ10oW15cIiddKilbXCInXVxccypcXCkvZywgZnVuY3Rpb24oXywgaWQpIHtcbiAgICByZXF1aXJlc1tpZF0gPSB0cnVlO1xuICB9KTtcblxuICB2YXIgZGVwcyA9IE9iamVjdC5rZXlzKHJlcXVpcmVzKTtcbiAgdmFyIGNvdW50ID0gZGVwcy5sZW5ndGg7XG5cbiAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgY2FsbGJhY2sobW9kdWxlLmVycm9yLCBtb2R1bGUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsb2FkZWQgPSBmdW5jdGlvbihlcnJvcikge1xuICAgIGNvdW50LS07XG5cbiAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCBtb2R1bGUpO1xuICAgIH1cbiAgfTtcblxuICBkZXBzLm1hcChmdW5jdGlvbihkZXBlbmRlbmN5KSB7XG4gICAgZGVlcExvYWQoXG4gICAgICByZXNvbHZlTW9kdWxlKG1vZHVsZS5sb2NhdGlvbiwgZGVwZW5kZW5jeSksXG4gICAgICBsb2FkZWRcbiAgICApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVlcExvYWQobW9kdWxlLCBjYWxsYmFjaykge1xuICBpZiAobW9kdWxlLnN0YXRlID09PSBzdGF0ZXMuTE9BRElORykge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBkZWVwTG9hZChtb2R1bGUsIGNhbGxiYWNrKTtcbiAgICB9LCA1KTtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxzZSBpZiAobW9kdWxlLnN0YXRlID09PSBzdGF0ZXMuTE9BREVEIHx8IG1vZHVsZS5zdGF0ZSA9PT0gc3RhdGVzLlJFQURZKSB7XG4gICAgcXVhc2FyLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGJhY2sobW9kdWxlLmVycm9yKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobW9kdWxlLnRleHQpIHtcbiAgICBxdWFzYXIubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBsb2FkKG1vZHVsZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1vZHVsZS5zdGF0ZSA9IHN0YXRlcy5MT0FESU5HO1xuXG4gIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBsb2FkKG1vZHVsZSwgY2FsbGJhY2ssIHJlcXVlc3QpO1xuICB9O1xuICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgcXVhc2FyLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIG1vZHVsZS5sb2NhdGlvbiwgdHJ1ZSk7XG4gIHJlcXVlc3Quc2VuZCgpO1xufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKG1vZHVsZSkge1xuICBpZiAobW9kdWxlLmV4cG9ydHMpIHtcbiAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gIH1cblxuICB2YXIgZm47XG5cbiAgaWYgKG1vZHVsZS5mYWN0b3J5Rm4pIHtcbiAgICBmbiA9IG1vZHVsZS5mYWN0b3J5Rm47XG4gIH1cbiAgZWxzZSB7XG4gICAgZm4gPSBnbG9iYWxFdmFsKCcoZnVuY3Rpb24ocmVxdWlyZSxleHBvcnRzLG1vZHVsZSl7JyArIG1vZHVsZS50ZXh0ICsgJ1xcbn0pLy8jIHNvdXJjZVVSTD0nICsgbW9kdWxlLmxvY2F0aW9uKTtcbiAgfVxuXG4gIGZuKFxuICAgIGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gZ2V0TW9kdWxlRXhwb3J0cyhyZXNvbHZlTW9kdWxlKG1vZHVsZS5sb2NhdGlvbiwgaWQpKTtcbiAgICB9LCAvLyByZXF1aXJlXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7fSwgLy8gZXhwb3J0c1xuICAgIG1vZHVsZSAvLyBtb2R1bGVcbiAgKTtcblxuICBtb2R1bGUuc3RhdGUgPSBzdGF0ZXMuUkVBRFk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuZnVuY3Rpb24gYXBwbHlDYWxsYmFjayhjYWxsYmFjaywgZGVmZXJyZWQsIHJlc291cmNlLCBtb2R1bGUpIHtcbiAgY2FsbGJhY2socmVzb3VyY2UuZXJyb3IsIG1vZHVsZS5leHBvcnRzKTtcbiAgZGVmZXJyZWQucmVzb2x2ZShtb2R1bGUuZXhwb3J0cyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVTY3JpcHQocmVzb3VyY2UsIGNhbGxiYWNrKSB7XG4gIHZhclxuICAgIG1vZHVsZSxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIGRlZmVycmVkID0gJC5EZWZlcnJlZCgpXG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIDtcblxuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG5cbiAgaWYgKHR5cGVvZiByZXNvdXJjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG1vZHVsZSA9IHtsb2NhdGlvbjogJycsIHRleHQ6ICcnICsgcmVzb3VyY2UsIGZhY3RvcnlGbjogcmVzb3VyY2V9O1xuICB9XG4gIGVsc2Uge1xuICAgIG1vZHVsZSA9IHJlc29sdmVNb2R1bGUoJycsIHJlc291cmNlKTtcbiAgfVxuXG4gIGlmIChtb2R1bGUuc3RhdGUgPT09IHN0YXRlcy5SRUFEWSkge1xuICAgIHF1YXNhci5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGFwcGx5Q2FsbGJhY2soY2FsbGJhY2ssIGRlZmVycmVkLCByZXNvdXJjZSwgbW9kdWxlKTtcbiAgICB9KTtcbiAgfVxuICBlbHNlIHtcbiAgICBkZWVwTG9hZChtb2R1bGUsIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIGdldE1vZHVsZUV4cG9ydHMobW9kdWxlKTtcbiAgICAgIH1cblxuICAgICAgYXBwbHlDYWxsYmFjayhjYWxsYmFjaywgZGVmZXJyZWQsIHJlc291cmNlLCBtb2R1bGUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRlZmVycmVkO1xufVxuXG5mdW5jdGlvbiBjbGVhclJlcXVpcmVDYWNoZSgpIHtcbiAgbW9kdWxlc0NhY2hlID0ge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZXF1aXJlOiByZXF1aXJlU2NyaXB0LFxuICBjbGVhckNhY2hlOiBjbGVhclJlcXVpcmVDYWNoZVxufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUvcmVxdWlyZS9yZXF1aXJlL3JlcXVpcmUtc2NyaXB0LmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n$.fn.reverse = [].reverse;\n\n$.extend(true, quasar, {\n  nextTick: function(fn) {\n    setTimeout(fn, 1);\n  },\n  get: {\n    fn: {\n      param: {\n        names: __webpack_require__(35)\n      }\n    },\n    normalized: {\n      path: __webpack_require__(36)\n    }\n  },\n  open: {\n    url: __webpack_require__(37)\n  },\n  capitalize: function(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  },\n  debounce: __webpack_require__(38)\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvdXRpbHMvdXRpbHMuanM/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQyIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuJC5mbi5yZXZlcnNlID0gW10ucmV2ZXJzZTtcblxuJC5leHRlbmQodHJ1ZSwgcXVhc2FyLCB7XG4gIG5leHRUaWNrOiBmdW5jdGlvbihmbikge1xuICAgIHNldFRpbWVvdXQoZm4sIDEpO1xuICB9LFxuICBnZXQ6IHtcbiAgICBmbjoge1xuICAgICAgcGFyYW06IHtcbiAgICAgICAgbmFtZXM6IHJlcXVpcmUoJy4vanMvZ2V0Rm5QYXJhbU5hbWVzJylcbiAgICAgIH1cbiAgICB9LFxuICAgIG5vcm1hbGl6ZWQ6IHtcbiAgICAgIHBhdGg6IHJlcXVpcmUoJy4vanMvbm9ybWFsaXplUGF0aCcpXG4gICAgfVxuICB9LFxuICBvcGVuOiB7XG4gICAgdXJsOiByZXF1aXJlKCcuL2pzL29wZW4tdXJsJylcbiAgfSxcbiAgY2FwaXRhbGl6ZTogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbiAgfSxcbiAgZGVib3VuY2U6IHJlcXVpcmUoJy4vanMvZGVib3VuY2UnKVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi9jb3JlL3V0aWxzL3V0aWxzLmpzXG4gKiogbW9kdWxlIGlkID0gMzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 35 */
/***/ function(module, exports) {

	eval("var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n\nfunction getFnParamNames(func) {\n  var string = func.toString().replace(STRIP_COMMENTS, '');\n  var result = string.slice(string.indexOf('(') + 1, string.indexOf(')')).match(ARGUMENT_NAMES);\n\n  if (result === null) {\n    result = [];\n  }\n  return result;\n}\n\nmodule.exports = getFnParamNames;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvdXRpbHMvanMvZ2V0Rm5QYXJhbU5hbWVzLmpzPzkyYWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZztcbnZhciBBUkdVTUVOVF9OQU1FUyA9IC8oW15cXHMsXSspL2c7XG5cbmZ1bmN0aW9uIGdldEZuUGFyYW1OYW1lcyhmdW5jKSB7XG4gIHZhciBzdHJpbmcgPSBmdW5jLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpO1xuICB2YXIgcmVzdWx0ID0gc3RyaW5nLnNsaWNlKHN0cmluZy5pbmRleE9mKCcoJykgKyAxLCBzdHJpbmcuaW5kZXhPZignKScpKS5tYXRjaChBUkdVTUVOVF9OQU1FUyk7XG5cbiAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgIHJlc3VsdCA9IFtdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Rm5QYXJhbU5hbWVzO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS91dGlscy9qcy9nZXRGblBhcmFtTmFtZXMuanNcbiAqKiBtb2R1bGUgaWQgPSAzNVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 36 */
/***/ function(module, exports) {

	eval("\nvar baseElement = document.createElement('base');\nvar relativeElement = document.createElement('a');\n\ndocument.head.appendChild(baseElement);\n\nfunction normalizePath(relativePath, base) {\n  var resolved;\n\n  baseElement.href = base;\n  relativeElement.href = relativePath;\n  resolved = relativeElement.href;\n  baseElement.href = '';\n\n  return resolved;\n}\n\nmodule.exports = normalizePath;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvdXRpbHMvanMvbm9ybWFsaXplUGF0aC5qcz83MzVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xudmFyIHJlbGF0aXZlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChiYXNlRWxlbWVudCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocmVsYXRpdmVQYXRoLCBiYXNlKSB7XG4gIHZhciByZXNvbHZlZDtcblxuICBiYXNlRWxlbWVudC5ocmVmID0gYmFzZTtcbiAgcmVsYXRpdmVFbGVtZW50LmhyZWYgPSByZWxhdGl2ZVBhdGg7XG4gIHJlc29sdmVkID0gcmVsYXRpdmVFbGVtZW50LmhyZWY7XG4gIGJhc2VFbGVtZW50LmhyZWYgPSAnJztcblxuICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplUGF0aDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUvdXRpbHMvanMvbm9ybWFsaXplUGF0aC5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 37 */
/***/ function(module, exports) {

	eval("'use strict';\n\n/* istanbul ignore next */\nmodule.exports = function(url) {\n  if (quasar.runs.on.cordova) {\n    navigator.app.loadUrl(url, {\n      openExternal: true\n    });\n  }\n  else {\n    var win = window.open(url, '_blank');\n\n    if (win) {\n      win.focus();\n    }\n    else {\n      quasar.dialog({\n        title: 'Cannot Open Window',\n        message: 'Please allow popups first, then please try again.'\n      });\n    }\n  }\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvdXRpbHMvanMvb3Blbi11cmwuanM/NmM1YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVybCkge1xuICBpZiAocXVhc2FyLnJ1bnMub24uY29yZG92YSkge1xuICAgIG5hdmlnYXRvci5hcHAubG9hZFVybCh1cmwsIHtcbiAgICAgIG9wZW5FeHRlcm5hbDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciB3aW4gPSB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcblxuICAgIGlmICh3aW4pIHtcbiAgICAgIHdpbi5mb2N1cygpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHF1YXNhci5kaWFsb2coe1xuICAgICAgICB0aXRsZTogJ0Nhbm5vdCBPcGVuIFdpbmRvdycsXG4gICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgYWxsb3cgcG9wdXBzIGZpcnN0LCB0aGVuIHBsZWFzZSB0cnkgYWdhaW4uJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS91dGlscy9qcy9vcGVuLXVybC5qc1xuICoqIG1vZHVsZSBpZCA9IDM3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 38 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar now = Date.now;\n\nmodule.exports = function(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function() {\n    var last = now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    }\n    else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) {\n          context = args = null;\n        }\n      }\n    }\n  };\n\n  return function() {\n    var callNow = immediate && !timeout;\n\n    context = this;\n    args = arguments;\n    timestamp = now();\n\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvdXRpbHMvanMvZGVib3VuY2UuanM/MDEyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbm93ID0gRGF0ZS5ub3c7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcblxuICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGFzdCA9IG5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG5cbiAgICBjb250ZXh0ID0gdGhpcztcbiAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHRpbWVzdGFtcCA9IG5vdygpO1xuXG4gICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgfVxuICAgIGlmIChjYWxsTm93KSB7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvY29yZS91dGlscy9qcy9kZWJvdW5jZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 39 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar container = $('head');\n\nfunction injectCSS(url) {\n  if (!url) {\n    throw new Error('Specify CSS URL when injecting.');\n  }\n\n  if (container.find('[href=\"' + url + '\"]').length > 0) {\n    // we don't inject duplicates\n    return;\n  }\n\n  $('<link>', {\n    type: 'text/css',\n    href: url,\n    rel: 'stylesheet',\n    'data-injected-css': true\n  }).appendTo(container);\n}\n\nfunction clear() {\n  container.find('[data-injected-css]').remove();\n}\n\nmodule.exports = {\n  inject: injectCSS,\n  clear: clear\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvcmUvcmVxdWlyZS9yZXF1aXJlL3JlcXVpcmUtY3NzLmpzPzczMzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb250YWluZXIgPSAkKCdoZWFkJyk7XG5cbmZ1bmN0aW9uIGluamVjdENTUyh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NwZWNpZnkgQ1NTIFVSTCB3aGVuIGluamVjdGluZy4nKTtcbiAgfVxuXG4gIGlmIChjb250YWluZXIuZmluZCgnW2hyZWY9XCInICsgdXJsICsgJ1wiXScpLmxlbmd0aCA+IDApIHtcbiAgICAvLyB3ZSBkb24ndCBpbmplY3QgZHVwbGljYXRlc1xuICAgIHJldHVybjtcbiAgfVxuXG4gICQoJzxsaW5rPicsIHtcbiAgICB0eXBlOiAndGV4dC9jc3MnLFxuICAgIGhyZWY6IHVybCxcbiAgICByZWw6ICdzdHlsZXNoZWV0JyxcbiAgICAnZGF0YS1pbmplY3RlZC1jc3MnOiB0cnVlXG4gIH0pLmFwcGVuZFRvKGNvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIGNsZWFyKCkge1xuICBjb250YWluZXIuZmluZCgnW2RhdGEtaW5qZWN0ZWQtY3NzXScpLnJlbW92ZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5qZWN0OiBpbmplY3RDU1MsXG4gIGNsZWFyOiBjbGVhclxufTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL2NvcmUvcmVxdWlyZS9yZXF1aXJlL3JlcXVpcmUtY3NzLmpzXG4gKiogbW9kdWxlIGlkID0gMzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n__webpack_require__(27);\n\nvar __routes = [];\n\nfunction getAllRoutes() {\n  // return a clone so user can't tamper with our private data\n  return __routes.slice();\n}\n\nfunction stopRouter() {\n  removeAllRoutes();\n  window.onhashchange = null;\n  quasar.events.trigger('app:router:stopped');\n}\n\nfunction routerIsRunning() {\n  return window.onhashchange !== null;\n}\n\nfunction hasRoute(hash) {\n  if (!hash) {\n    throw new Error('Missing hash');\n  }\n\n  return __routes.some(function(route) {\n    return route.hash === hash;\n  });\n}\n\nfunction addRoute(route) {\n  if (!route) {\n    throw new Error('Missing route');\n  }\n  if (!route.hash) {\n    throw new Error('Route has no hash');\n  }\n  if (!route.trigger) {\n    throw new Error('Missing route trigger method');\n  }\n  if (hasRoute(route.hash)) {\n    throw new Error('Route already registered. Use overwrite.');\n  }\n\n  __routes.push(route);\n}\n\nfunction getRoute(hash) {\n  if (!hash) {\n    throw new Error('Missing hash');\n  }\n  return __routes.filter(function(route) {\n    return route.hash === hash;\n  })[0];\n}\n\nfunction removeAllRoutes() {\n  __routes = [];\n}\n\nfunction removeRoute(hash) {\n  if (!hash) {\n    throw new Error('Missing hash');\n  }\n\n  __routes = __routes.filter(function(route) {\n    return route.hash !== hash;\n  });\n}\n\nfunction overwriteRoute(route) {\n  if (!route) {\n    throw new Error('Missing route');\n  }\n  if (!route.hash) {\n    throw new Error('Route has no hash');\n  }\n  if (!hasRoute(route.hash)) {\n    throw new Error('Route not registered');\n  }\n\n  __routes = __routes.filter(function(item) {\n    return item.hash !== route.hash;\n  });\n  addRoute(route);\n}\n\nfunction navigateToRoute(hash) {\n  if (!hash) {\n    throw new Error('Hash missing');\n  }\n  if (hash.charAt(0) != '#') {\n    throw new Error('Route should start with #');\n  }\n\n  window.location.hash = hash;\n}\n\nfunction getArrayFromHash(hash) {\n  var tokens = hash.split('/');\n\n  tokens.shift();\n  return tokens;\n}\n\nfunction getCleanHash(hash) {\n  var result = {};\n  var hashIndexOfQuery = hash.indexOf('?');\n\n  result.hash = hash;\n  result.hashParams = hashIndexOfQuery >= 0 ? hash.substring(0, hashIndexOfQuery) : hash;\n  result.hashQuery = hashIndexOfQuery >= 0 ? hash.substring(hash.indexOf('?') + 1) : '';\n  result.hashQueryArray = result.hashQuery ? result.hashQuery.split('&') : [];\n\n  var cleanedHashParams = result.hashParams.replace(/\\/+$/, '');\n\n  if (result.hashParams !== cleanedHashParams) {\n    result.hash = cleanedHashParams;\n    result.hash += result.hashQuery ? '?' + result.hashQuery : '';\n  }\n\n  return result;\n}\n\nfunction matchHash(hash) {\n  var hashParts = getCleanHash(hash);\n  var testerSlices = hashParts.hashParams.split('/');\n  var tester = hashParts.hashParams;\n  var params = {};\n  var query = {};\n\n  // parse querystring\n  if (hashParts.hashQueryArray.length > 0) {\n    for (var q = 0; q < hashParts.hashQueryArray.length; q++) {\n      var keyValue = hashParts.hashQueryArray[q].split('=');\n\n      query[keyValue[0]] = keyValue[1] ? decodeURIComponent(keyValue[1]) : '';\n    }\n  }\n\n  // parse hash parameters\n  for (var i = 0; i < __routes.length; i++) {\n    var route = __routes[i];\n\n    // dynamic parts\n    if (route.hash.search(/:/) > 0) {\n      var routeSlices = route.hash.split('/');\n\n      tester = hashParts.hashParams;\n\n      for (var x = 0; x < routeSlices.length; x++) {\n        if (x < testerSlices.length && routeSlices[x].charAt(0) === ':') {\n          params[routeSlices[x].replace(/:/, '')] = testerSlices[x];\n          tester = tester.replace(testerSlices[x], routeSlices[x]);\n        }\n      }\n    }\n    if (route.hash === tester) {\n      route.params = params;\n      route.url = hash;\n      route.query = query;\n      return route;\n    }\n  }\n\n  return null;\n}\n\nfunction triggerRoute(hash) {\n  if (!hash || hash === '' || hash === '#') {\n    hash = '#/';\n  }\n\n  quasar.events.trigger('app:route:change', hash);\n\n  var route = matchHash(hash);\n\n  if (!route) {\n    quasar.events.trigger('app:route:notfound', getArrayFromHash(hash));\n    return;\n  }\n\n  quasar.events.trigger('app:route:trigger', route);\n  route.trigger.apply(route);\n}\n\nfunction bindHashChange() {\n  var lastHash = '';\n\n  window.onhashchange = function() {\n    var hash = window.location.hash;\n\n    if (hash !== lastHash) {\n      lastHash = hash;\n      triggerRoute(hash);\n    }\n  };\n}\n\nfunction startRouter() {\n  quasar.events.trigger('app:router:started');\n  bindHashChange();\n  triggerRoute(window.location.hash);\n}\n\nfunction getCurrentRoute() {\n  return window.location.hash;\n}\n\nfunction reloadCurrentRoute() {\n  triggerRoute(getCurrentRoute());\n}\n\n$.extend(true, quasar, {\n  get: {\n    all: {\n      routes: getAllRoutes\n    },\n    route: getRoute,\n    current: {\n      route: getCurrentRoute\n    }\n  },\n  add: {\n    route: addRoute\n  },\n  has: {\n    route: hasRoute\n  },\n  router: {\n    is: {\n      running: routerIsRunning\n    }\n  },\n  remove: {\n    all: {\n      routes: removeAllRoutes\n    },\n    route: removeRoute\n  },\n  overwrite: {\n    route: overwriteRoute\n  },\n  navigate: {\n    to: {\n      route: navigateToRoute\n    }\n  },\n  start: {\n    router: startRouter\n  },\n  stop: {\n    router: stopRouter\n  },\n  reload: {\n    current: {\n      route: reloadCurrentRoute\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  matTemplate = __webpack_require__(42),\n  iosTemplate = __webpack_require__(43)\n  ;\n\nfunction parseButtons(buttons) {\n  if (!Array.isArray(buttons)) {\n    throw new Error('Action Sheet buttons parameter must be an array.');\n  }\n\n  if (buttons.length <= 1) {\n    throw new Error('Action Sheet requires at least one button');\n  }\n\n  if (buttons.some(function(button) {\n    return Object(button) !== button || !button.label || !button.handler;\n  })) {\n    throw new Error('At least one of Action Sheet\\'s button parameter is not an object or missing label and/or handler.');\n  }\n\n  return buttons.map(function(button) {\n    if (button.classes) {\n      if (Array.isArray(button.classes)) {\n        button.classes = button.classes.split(' ');\n      }\n      else if (typeof button.classes !== 'string') {\n        throw new Error('Action Sheet button \"classes\" parameter must be either an array or string');\n      }\n    }\n    return button;\n  });\n}\n\nfunction getCSS() {\n  if (quasar.runs.on.ios) {\n    return {\n      maxHeight: '80vh',\n      height: 'auto',\n      backgroundColor: 'transparent',\n      boxShadow: 'none'\n    };\n  }\n\n  return {\n    maxHeight: '80vh',\n    height: 'auto'\n  };\n}\n\nfunction actionSheet(options) {\n  var data = $.extend({}, options);\n\n  data.buttons = parseButtons(data.buttons);\n  data.dismissButton = data.buttons.pop();\n\n  var modal = new quasar.Modal({\n    template: quasar.runs.on.ios ? iosTemplate : matTemplate,\n    data: data\n  })\n  .css(getCSS())\n  .set({\n    transitionIn: {translateY: [0, '101%']},\n    transitionOut: {translateY: ['101%', 0]}\n  });\n\n  modal.$el.removeClass('items-center').addClass('items-end');\n  modal.$backdrop.click(function() {\n    modal.close(data.dismissButton.handler);\n  });\n  modal.show();\n}\n\n$.extend(true, quasar, {\n  action: {\n    sheet: actionSheet\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2FjdGlvbi1zaGVldC9hY3Rpb24tc2hlZXQuanM/YWJhNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsbUJBQW1CLHdCQUF3QjtBQUMzQyxvQkFBb0I7QUFDcEIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICBtYXRUZW1wbGF0ZSA9IHJlcXVpcmUoJ3JhdyEuL2FjdGlvbi1zaGVldC1tYXRlcmlhbC5odG1sJyksXG4gIGlvc1RlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vYWN0aW9uLXNoZWV0LWlvcy5odG1sJylcbiAgO1xuXG5mdW5jdGlvbiBwYXJzZUJ1dHRvbnMoYnV0dG9ucykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYnV0dG9ucykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbiBTaGVldCBidXR0b25zIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgaWYgKGJ1dHRvbnMubGVuZ3RoIDw9IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbiBTaGVldCByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYnV0dG9uJyk7XG4gIH1cblxuICBpZiAoYnV0dG9ucy5zb21lKGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgIHJldHVybiBPYmplY3QoYnV0dG9uKSAhPT0gYnV0dG9uIHx8ICFidXR0b24ubGFiZWwgfHwgIWJ1dHRvbi5oYW5kbGVyO1xuICB9KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3Qgb25lIG9mIEFjdGlvbiBTaGVldFxcJ3MgYnV0dG9uIHBhcmFtZXRlciBpcyBub3QgYW4gb2JqZWN0IG9yIG1pc3NpbmcgbGFiZWwgYW5kL29yIGhhbmRsZXIuJyk7XG4gIH1cblxuICByZXR1cm4gYnV0dG9ucy5tYXAoZnVuY3Rpb24oYnV0dG9uKSB7XG4gICAgaWYgKGJ1dHRvbi5jbGFzc2VzKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShidXR0b24uY2xhc3NlcykpIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzZXMgPSBidXR0b24uY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZW9mIGJ1dHRvbi5jbGFzc2VzICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbiBTaGVldCBidXR0b24gXCJjbGFzc2VzXCIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIGFycmF5IG9yIHN0cmluZycpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnV0dG9uO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q1NTKCkge1xuICBpZiAocXVhc2FyLnJ1bnMub24uaW9zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1heEhlaWdodDogJzgwdmgnLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1heEhlaWdodDogJzgwdmgnLFxuICAgIGhlaWdodDogJ2F1dG8nXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFjdGlvblNoZWV0KG9wdGlvbnMpIHtcbiAgdmFyIGRhdGEgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgZGF0YS5idXR0b25zID0gcGFyc2VCdXR0b25zKGRhdGEuYnV0dG9ucyk7XG4gIGRhdGEuZGlzbWlzc0J1dHRvbiA9IGRhdGEuYnV0dG9ucy5wb3AoKTtcblxuICB2YXIgbW9kYWwgPSBuZXcgcXVhc2FyLk1vZGFsKHtcbiAgICB0ZW1wbGF0ZTogcXVhc2FyLnJ1bnMub24uaW9zID8gaW9zVGVtcGxhdGUgOiBtYXRUZW1wbGF0ZSxcbiAgICBkYXRhOiBkYXRhXG4gIH0pXG4gIC5jc3MoZ2V0Q1NTKCkpXG4gIC5zZXQoe1xuICAgIHRyYW5zaXRpb25Jbjoge3RyYW5zbGF0ZVk6IFswLCAnMTAxJSddfSxcbiAgICB0cmFuc2l0aW9uT3V0OiB7dHJhbnNsYXRlWTogWycxMDElJywgMF19XG4gIH0pO1xuXG4gIG1vZGFsLiRlbC5yZW1vdmVDbGFzcygnaXRlbXMtY2VudGVyJykuYWRkQ2xhc3MoJ2l0ZW1zLWVuZCcpO1xuICBtb2RhbC4kYmFja2Ryb3AuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgbW9kYWwuY2xvc2UoZGF0YS5kaXNtaXNzQnV0dG9uLmhhbmRsZXIpO1xuICB9KTtcbiAgbW9kYWwuc2hvdygpO1xufVxuXG4kLmV4dGVuZCh0cnVlLCBxdWFzYXIsIHtcbiAgYWN0aW9uOiB7XG4gICAgc2hlZXQ6IGFjdGlvblNoZWV0XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC5qc1xuICoqIG1vZHVsZSBpZCA9IDQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 42 */
/***/ function(module, exports) {

	eval("module.exports = \"<div v-if=\\\"title\\\" class=\\\"modal-header\\\">\\n  {{{* title}}}\\n</div>\\n\\n<div class=\\\"modal-scroll\\\">\\n  <div class=\\\"list inset\\\">\\n    <div\\n      v-for=\\\"button in buttons\\\"\\n      class=\\\"item item-link\\\"\\n      @click=\\\"close(button.handler)\\\"\\n      :class=\\\"button.classes\\\"\\n    >\\n      <i v-if=\\\"button.icon\\\">{{* button.icon}}</i>\\n      <div class=\\\"item-content\\\">\\n        {{* button.label}}\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"list inset\\\">\\n  <div\\n    class=\\\"item item-link\\\"\\n    @click=\\\"close(dismissButton.handler)\\\"\\n    :class=\\\"dismissButton.classes\\\"\\n  >\\n    <i v-if=\\\"dismissButton.icon\\\">{{* dismissButton.icon}}</i>\\n    <div class=\\\"item-content\\\">\\n      {{* dismissButton.label}}\\n    </div>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2FjdGlvbi1zaGVldC9hY3Rpb24tc2hlZXQtbWF0ZXJpYWwuaHRtbD9hYjM4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9FQUFvRSxVQUFVLHFRQUFxUSxlQUFlLG9EQUFvRCxnQkFBZ0IsK09BQStPLHNCQUFzQixnREFBZ0QsdUJBQXVCIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgdi1pZj1cXFwidGl0bGVcXFwiIGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcbiAge3t7KiB0aXRsZX19fVxcbjwvZGl2PlxcblxcbjxkaXYgY2xhc3M9XFxcIm1vZGFsLXNjcm9sbFxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJsaXN0IGluc2V0XFxcIj5cXG4gICAgPGRpdlxcbiAgICAgIHYtZm9yPVxcXCJidXR0b24gaW4gYnV0dG9uc1xcXCJcXG4gICAgICBjbGFzcz1cXFwiaXRlbSBpdGVtLWxpbmtcXFwiXFxuICAgICAgQGNsaWNrPVxcXCJjbG9zZShidXR0b24uaGFuZGxlcilcXFwiXFxuICAgICAgOmNsYXNzPVxcXCJidXR0b24uY2xhc3Nlc1xcXCJcXG4gICAgPlxcbiAgICAgIDxpIHYtaWY9XFxcImJ1dHRvbi5pY29uXFxcIj57eyogYnV0dG9uLmljb259fTwvaT5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLWNvbnRlbnRcXFwiPlxcbiAgICAgICAge3sqIGJ1dHRvbi5sYWJlbH19XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cXFwibGlzdCBpbnNldFxcXCI+XFxuICA8ZGl2XFxuICAgIGNsYXNzPVxcXCJpdGVtIGl0ZW0tbGlua1xcXCJcXG4gICAgQGNsaWNrPVxcXCJjbG9zZShkaXNtaXNzQnV0dG9uLmhhbmRsZXIpXFxcIlxcbiAgICA6Y2xhc3M9XFxcImRpc21pc3NCdXR0b24uY2xhc3Nlc1xcXCJcXG4gID5cXG4gICAgPGkgdi1pZj1cXFwiZGlzbWlzc0J1dHRvbi5pY29uXFxcIj57eyogZGlzbWlzc0J1dHRvbi5pY29ufX08L2k+XFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tY29udGVudFxcXCI+XFxuICAgICAge3sqIGRpc21pc3NCdXR0b24ubGFiZWx9fVxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvYWN0aW9uLXNoZWV0L2FjdGlvbi1zaGVldC1tYXRlcmlhbC5odG1sXG4gKiogbW9kdWxlIGlkID0gNDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 43 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-action-sheet\\\">\\n  <div v-if=\\\"title\\\" class=\\\"item justify-center faded\\\">\\n    <span class=\\\"item-value\\\">{{{* title}}}</span>\\n  </div>\\n\\n  <div class=\\\"modal-controls modal-scroll\\\">\\n    <div class=\\\"list item-delimiter\\\">\\n      <div\\n        v-for=\\\"button in buttons\\\"\\n        class=\\\"item item-link justify-center\\\"\\n        @click=\\\"close(button.handler)\\\"\\n        :class=\\\"button.classes\\\"\\n      >\\n        {{* button.label}}\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"quasar-action-sheet\\\">\\n  <div\\n    class=\\\"item item-link justify-center\\\"\\n    @click=\\\"close(dismissButton.handler)\\\"\\n    :class=\\\"dismissButton.classes\\\"\\n  >\\n    <strong>{{* dismissButton.label}}</strong>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2FjdGlvbi1zaGVldC9hY3Rpb24tc2hlZXQtaW9zLmh0bWw/MjQzZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxSkFBcUosVUFBVSwrU0FBK1MsZ0JBQWdCLGdQQUFnUCx1QkFBdUIiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLWFjdGlvbi1zaGVldFxcXCI+XFxuICA8ZGl2IHYtaWY9XFxcInRpdGxlXFxcIiBjbGFzcz1cXFwiaXRlbSBqdXN0aWZ5LWNlbnRlciBmYWRlZFxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJpdGVtLXZhbHVlXFxcIj57e3sqIHRpdGxlfX19PC9zcGFuPlxcbiAgPC9kaXY+XFxuXFxuICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250cm9scyBtb2RhbC1zY3JvbGxcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJsaXN0IGl0ZW0tZGVsaW1pdGVyXFxcIj5cXG4gICAgICA8ZGl2XFxuICAgICAgICB2LWZvcj1cXFwiYnV0dG9uIGluIGJ1dHRvbnNcXFwiXFxuICAgICAgICBjbGFzcz1cXFwiaXRlbSBpdGVtLWxpbmsganVzdGlmeS1jZW50ZXJcXFwiXFxuICAgICAgICBAY2xpY2s9XFxcImNsb3NlKGJ1dHRvbi5oYW5kbGVyKVxcXCJcXG4gICAgICAgIDpjbGFzcz1cXFwiYnV0dG9uLmNsYXNzZXNcXFwiXFxuICAgICAgPlxcbiAgICAgICAge3sqIGJ1dHRvbi5sYWJlbH19XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cXFwicXVhc2FyLWFjdGlvbi1zaGVldFxcXCI+XFxuICA8ZGl2XFxuICAgIGNsYXNzPVxcXCJpdGVtIGl0ZW0tbGluayBqdXN0aWZ5LWNlbnRlclxcXCJcXG4gICAgQGNsaWNrPVxcXCJjbG9zZShkaXNtaXNzQnV0dG9uLmhhbmRsZXIpXFxcIlxcbiAgICA6Y2xhc3M9XFxcImRpc21pc3NCdXR0b24uY2xhc3Nlc1xcXCJcXG4gID5cXG4gICAgPHN0cm9uZz57eyogZGlzbWlzc0J1dHRvbi5sYWJlbH19PC9zdHJvbmc+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2FjdGlvbi1zaGVldC9hY3Rpb24tc2hlZXQtaW9zLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 44 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('card-details', {\n  bind: function() {\n    var\n      el = $(this.el),\n      cover = el.find('> .card-cover'),\n      content = el.find('> .card-content'),\n      reveal = el.find('> .card-details'),\n      activatorTarget = content.length > 0 ? content : cover\n      ;\n\n    if (cover.length === 0 || reveal.length === 0) {\n      throw new Error('Card reveal directive with no cover and/or reveal content.');\n    }\n\n    this.dismisser = $('<div class=\"default dismiss\"><i>close</i></div>');\n    this.dismisser\n      .appendTo(reveal)\n      .click(function() {\n        reveal.removeClass('active');\n      });\n\n    this.activator = $('<div class=\"card-details-activator\"><i>more_horiz</i></div>');\n    this.activator\n      .appendTo(activatorTarget)\n      .click(function() {\n        reveal.addClass('active');\n      });\n\n    el.addClass('card-with-details');\n    activatorTarget.css('position', 'relative');\n  },\n  unbind: function() {\n    this.dismisser.off('click');\n    this.activator.off('click');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NhcmQvY2FyZC5qcz9jYTljIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblZ1ZS5kaXJlY3RpdmUoJ2NhcmQtZGV0YWlscycsIHtcbiAgYmluZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyXG4gICAgICBlbCA9ICQodGhpcy5lbCksXG4gICAgICBjb3ZlciA9IGVsLmZpbmQoJz4gLmNhcmQtY292ZXInKSxcbiAgICAgIGNvbnRlbnQgPSBlbC5maW5kKCc+IC5jYXJkLWNvbnRlbnQnKSxcbiAgICAgIHJldmVhbCA9IGVsLmZpbmQoJz4gLmNhcmQtZGV0YWlscycpLFxuICAgICAgYWN0aXZhdG9yVGFyZ2V0ID0gY29udGVudC5sZW5ndGggPiAwID8gY29udGVudCA6IGNvdmVyXG4gICAgICA7XG5cbiAgICBpZiAoY292ZXIubGVuZ3RoID09PSAwIHx8IHJldmVhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FyZCByZXZlYWwgZGlyZWN0aXZlIHdpdGggbm8gY292ZXIgYW5kL29yIHJldmVhbCBjb250ZW50LicpO1xuICAgIH1cblxuICAgIHRoaXMuZGlzbWlzc2VyID0gJCgnPGRpdiBjbGFzcz1cImRlZmF1bHQgZGlzbWlzc1wiPjxpPmNsb3NlPC9pPjwvZGl2PicpO1xuICAgIHRoaXMuZGlzbWlzc2VyXG4gICAgICAuYXBwZW5kVG8ocmV2ZWFsKVxuICAgICAgLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXZlYWwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLmFjdGl2YXRvciA9ICQoJzxkaXYgY2xhc3M9XCJjYXJkLWRldGFpbHMtYWN0aXZhdG9yXCI+PGk+bW9yZV9ob3JpejwvaT48L2Rpdj4nKTtcbiAgICB0aGlzLmFjdGl2YXRvclxuICAgICAgLmFwcGVuZFRvKGFjdGl2YXRvclRhcmdldClcbiAgICAgIC5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgcmV2ZWFsLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgIH0pO1xuXG4gICAgZWwuYWRkQ2xhc3MoJ2NhcmQtd2l0aC1kZXRhaWxzJyk7XG4gICAgYWN0aXZhdG9yVGFyZ2V0LmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmRpc21pc3Nlci5vZmYoJ2NsaWNrJyk7XG4gICAgdGhpcy5hY3RpdmF0b3Iub2ZmKCdjbGljaycpO1xuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NhcmQvY2FyZC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(46);\n\nVue.component('checkbox', {\n  template: template,\n  props: {\n    model: {\n      type: Boolean,\n      twoWay: true\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94LmpzP2QyNGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJ3JhdyEuL2NoZWNrYm94Lmh0bWwnKTtcblxuVnVlLmNvbXBvbmVudCgnY2hlY2tib3gnLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHR3b1dheTogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9jaGVja2JveC9jaGVja2JveC5qc1xuICoqIG1vZHVsZSBpZCA9IDQ1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 46 */
/***/ function(module, exports) {

	eval("module.exports = \"<label class=\\\"quasar-checkbox\\\">\\n  <input type=\\\"checkbox\\\" v-model=\\\"model\\\">\\n  <div></div>\\n</label>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94Lmh0bWw/YWU2NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bGFiZWwgY2xhc3M9XFxcInF1YXNhci1jaGVja2JveFxcXCI+XFxuICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHYtbW9kZWw9XFxcIm1vZGVsXFxcIj5cXG4gIDxkaXY+PC9kaXY+XFxuPC9sYWJlbD5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NoZWNrYm94L2NoZWNrYm94Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(48);\n\nVue.component('choice', {\n  template: template,\n  props: {\n    model: {\n      required: true\n    },\n    options: {\n      type: Array,\n      required: true,\n      validator: function(options) {\n        return !options.some(function(option) {\n          return typeof option.label === 'undefined' || typeof option.value === 'undefined';\n        });\n      }\n    },\n    multiple: {\n      type: Boolean,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    },\n    okLabel: {\n      type: String,\n      default: 'OK'\n    },\n    cancelLabel: {\n      type: String,\n      default: 'Cancel'\n    },\n    title: {\n      type: String,\n      default: 'Select'\n    },\n    message: String,\n    fixedLabel: String\n  },\n  computed: {\n    label: function() {\n      return this.multiple ? this.getMultipleLabel() : this.getSingleLabel();\n    }\n  },\n  methods: {\n    getSingleLabel: function() {\n      var model = this.model;\n\n      var option = this.options.find(function(option) {\n        return option.value === model;\n      });\n\n      return option ? option.label : 'Select';\n    },\n    getMultipleLabel: function() {\n      var model = this.model;\n\n      var options = this.options.filter(function(option) {\n        return model.includes(option.value);\n      }).map(function(option) {\n        return option.label;\n      });\n\n      if (options.length === 0) {\n        return 'Select';\n      }\n      else if (options.length > 1) {\n        return options[0] + ', ...';\n      }\n      return options[0];\n    },\n    mapSingle: function(option) {\n      option.selected = option.value === this.model;\n      return option;\n    },\n    mapMultiple: function(option) {\n      option.checked = this.model.includes(option.value);\n      return option;\n    },\n    pick: function() {\n      var\n        self = this,\n        mapHandler = this.multiple ? this.mapMultiple : this.mapSingle,\n        options = this.options.map(mapHandler.bind(this))\n        ;\n\n      var config = {\n        title: self.title,\n        message: self.message,\n        buttons: [\n          self.cancelLabel,\n          {\n            label: self.okLabel,\n            handler: function(data) {\n              self.model = data;\n            }\n          }\n        ]\n      };\n\n      config[this.multiple ? 'checkboxes' : 'radios'] = options;\n\n      quasar.dialog(config);\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2Nob2ljZS9jaG9pY2UuanM/Yjk5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vY2hvaWNlLmh0bWwnKTtcblxuVnVlLmNvbXBvbmVudCgnY2hvaWNlJywge1xuICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhb3B0aW9ucy5zb21lKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIHJldHVybiB0eXBlb2Ygb3B0aW9uLmxhYmVsID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygb3B0aW9uLnZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtdWx0aXBsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGNvZXJjZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb2tMYWJlbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ09LJ1xuICAgIH0sXG4gICAgY2FuY2VsTGFiZWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdDYW5jZWwnXG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ1NlbGVjdCdcbiAgICB9LFxuICAgIG1lc3NhZ2U6IFN0cmluZyxcbiAgICBmaXhlZExhYmVsOiBTdHJpbmdcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5tdWx0aXBsZSA/IHRoaXMuZ2V0TXVsdGlwbGVMYWJlbCgpIDogdGhpcy5nZXRTaW5nbGVMYWJlbCgpO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFNpbmdsZUxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWw7XG5cbiAgICAgIHZhciBvcHRpb24gPSB0aGlzLm9wdGlvbnMuZmluZChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZSA9PT0gbW9kZWw7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9wdGlvbiA/IG9wdGlvbi5sYWJlbCA6ICdTZWxlY3QnO1xuICAgIH0sXG4gICAgZ2V0TXVsdGlwbGVMYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbW9kZWwgPSB0aGlzLm1vZGVsO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIHJldHVybiBtb2RlbC5pbmNsdWRlcyhvcHRpb24udmFsdWUpO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gb3B0aW9uLmxhYmVsO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJ1NlbGVjdCc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcHRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnNbMF0gKyAnLCAuLi4nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnNbMF07XG4gICAgfSxcbiAgICBtYXBTaW5nbGU6IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgb3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnZhbHVlID09PSB0aGlzLm1vZGVsO1xuICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9LFxuICAgIG1hcE11bHRpcGxlOiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgIG9wdGlvbi5jaGVja2VkID0gdGhpcy5tb2RlbC5pbmNsdWRlcyhvcHRpb24udmFsdWUpO1xuICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9LFxuICAgIHBpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyXG4gICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICBtYXBIYW5kbGVyID0gdGhpcy5tdWx0aXBsZSA/IHRoaXMubWFwTXVsdGlwbGUgOiB0aGlzLm1hcFNpbmdsZSxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5tYXAobWFwSGFuZGxlci5iaW5kKHRoaXMpKVxuICAgICAgICA7XG5cbiAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIHRpdGxlOiBzZWxmLnRpdGxlLFxuICAgICAgICBtZXNzYWdlOiBzZWxmLm1lc3NhZ2UsXG4gICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICBzZWxmLmNhbmNlbExhYmVsLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiBzZWxmLm9rTGFiZWwsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHNlbGYubW9kZWwgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgY29uZmlnW3RoaXMubXVsdGlwbGUgPyAnY2hlY2tib3hlcycgOiAncmFkaW9zJ10gPSBvcHRpb25zO1xuXG4gICAgICBxdWFzYXIuZGlhbG9nKGNvbmZpZyk7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2Nob2ljZS9jaG9pY2UuanNcbiAqKiBtb2R1bGUgaWQgPSA0N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 48 */
/***/ function(module, exports) {

	eval("module.exports = \"<button class=\\\"primary clear\\\" @click=\\\"pick\\\">{{{fixedLabel || label}}} &#8675;</button>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2Nob2ljZS9jaG9pY2UuaHRtbD9iY2RhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFFQUFxRSxzQkFBc0IsUUFBUSIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8YnV0dG9uIGNsYXNzPVxcXCJwcmltYXJ5IGNsZWFyXFxcIiBAY2xpY2s9XFxcInBpY2tcXFwiPnt7e2ZpeGVkTGFiZWwgfHwgbGFiZWx9fX0gJiM4Njc1OzwvYnV0dG9uPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvY2hvaWNlL2Nob2ljZS5odG1sXG4gKiogbW9kdWxlIGlkID0gNDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 49 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.directive('collapsible', {\n  bind: function() {\n    var self = this;\n\n    $(this.el).addClass('collapsible')\n    .children().each(function() {\n      $(this).find('div:first-child').click(function() {\n        var items = $(this).parent().toggleClass('active');\n\n        if (self.oneAtATime) {\n          items.siblings().removeClass('active');\n        }\n      });\n    });\n  },\n  update: function(freely) {\n    this.oneAtATime = !freely;\n  },\n  unbind: function() {\n    $(this.el).find('li').each(function() {\n      $(this).find('div:first-child').off('click');\n    });\n  }\n});\n\n\nVue.component('quasar-collapsible', {\n  template: '<ul class=\"collapsible\"><slot></slot></ul>',\n  props: {\n    freely: {\n      type: Boolean,\n      default: false,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    }\n  },\n  events: {\n    closeOtherItems: function(child) {\n      if (this.freely) {\n        return;\n      }\n\n      this.$broadcast('closeYourself', child);\n    }\n  }\n});\n\nVue.component('quasar-collapsible-item', {\n  template: '<li :class=\"{active: opened}\" @click=\"toggle()\"><slot></slot></li>',\n  data: function() {\n    return {\n      opened: false\n    };\n  },\n  events: {\n    closeYourself: function(item) {\n      if (this !== item) {\n        this.opened = false;\n      }\n    }\n  },\n  methods: {\n    toggle: function() {\n      this.opened = !this.opened;\n\n      if (this.opened) {\n        this.$dispatch('closeOtherItems', this);\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2NvbGxhcHNpYmxlL2NvbGxhcHNpYmxlLmpzPzI1ZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsMEJBQTBCLGVBQWU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLmRpcmVjdGl2ZSgnY29sbGFwc2libGUnLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICQodGhpcy5lbCkuYWRkQ2xhc3MoJ2NvbGxhcHNpYmxlJylcbiAgICAuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5maW5kKCdkaXY6Zmlyc3QtY2hpbGQnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gJCh0aGlzKS5wYXJlbnQoKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKHNlbGYub25lQXRBVGltZSkge1xuICAgICAgICAgIGl0ZW1zLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbihmcmVlbHkpIHtcbiAgICB0aGlzLm9uZUF0QVRpbWUgPSAhZnJlZWx5O1xuICB9LFxuICB1bmJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgICQodGhpcy5lbCkuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5maW5kKCdkaXY6Zmlyc3QtY2hpbGQnKS5vZmYoJ2NsaWNrJyk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5cblZ1ZS5jb21wb25lbnQoJ3F1YXNhci1jb2xsYXBzaWJsZScsIHtcbiAgdGVtcGxhdGU6ICc8dWwgY2xhc3M9XCJjb2xsYXBzaWJsZVwiPjxzbG90Pjwvc2xvdD48L3VsPicsXG4gIHByb3BzOiB7XG4gICAgZnJlZWx5OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICBjb2VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGV2ZW50czoge1xuICAgIGNsb3NlT3RoZXJJdGVtczogZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIGlmICh0aGlzLmZyZWVseSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGJyb2FkY2FzdCgnY2xvc2VZb3Vyc2VsZicsIGNoaWxkKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5WdWUuY29tcG9uZW50KCdxdWFzYXItY29sbGFwc2libGUtaXRlbScsIHtcbiAgdGVtcGxhdGU6ICc8bGkgOmNsYXNzPVwie2FjdGl2ZTogb3BlbmVkfVwiIEBjbGljaz1cInRvZ2dsZSgpXCI+PHNsb3Q+PC9zbG90PjwvbGk+JyxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW5lZDogZmFsc2VcbiAgICB9O1xuICB9LFxuICBldmVudHM6IHtcbiAgICBjbG9zZVlvdXJzZWxmOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAodGhpcyAhPT0gaXRlbSkge1xuICAgICAgICB0aGlzLm9wZW5lZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm9wZW5lZCA9ICF0aGlzLm9wZW5lZDtcblxuICAgICAgaWYgKHRoaXMub3BlbmVkKSB7XG4gICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZU90aGVySXRlbXMnLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvY29sbGFwc2libGUvY29sbGFwc2libGUuanNcbiAqKiBtb2R1bGUgaWQgPSA0OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(51);\n\nfunction parseButtons(buttons) {\n  if (!Array.isArray(buttons)) {\n    throw new Error('Dialog buttons parameter must be an array.');\n  }\n\n  if (buttons.some(function(button) {\n    return typeof button !== 'string' && (Object(button) !== button || typeof button.label === 'undefined' || typeof button.handler !== 'function');\n  })) {\n    throw new Error('At least one of Dialog\\'s button parameter is neither a string nor an object with both label handler.');\n  }\n\n  return buttons.map(function(button) {\n    if (typeof button === 'string') {\n      return {\n        label: button,\n        handler: $.noop\n      };\n    }\n\n    return button;\n  });\n}\n\nfunction parseInputs(inputs) {\n  if (!Array.isArray(inputs)) {\n    throw new Error('Dialog inputs parameter must be an array.');\n  }\n\n  return inputs.map(function(input) {\n    input.model = input.model || '';\n    return input;\n  });\n}\n\nfunction parseRadios(radios) {\n  if (!Array.isArray(radios)) {\n    throw new Error('Dialog radios parameter must be an array.');\n  }\n\n  if (radios.some(function(radio) {\n    return typeof radio.label === 'undefined' || typeof radio.value === 'undefined';\n  })) {\n    throw new Error('One of Dialog\\'s radio parameter is missing either label or value');\n  }\n\n  var selectedValue = radios.filter(function(radio) {\n    return radio.selected;\n  });\n\n  if (selectedValue.length === 0) {\n    return radios[0].value;\n  }\n\n  if (selectedValue.length > 1) {\n    throw new Error('Multiple Dialog radio parameters are selected.');\n  }\n\n  return selectedValue[0].value;\n}\n\nfunction parseCheckboxes(checkboxes) {\n  if (!Array.isArray(checkboxes)) {\n    throw new Error('Dialog checkboxes parameter must be an array.');\n  }\n\n  if (checkboxes.some(function(checkbox) {\n    return typeof checkbox.label === 'undefined' || typeof checkbox.value === 'undefined';\n  })) {\n    throw new Error('One of Dialog\\'s checkbox parameter is missing either label or value');\n  }\n\n  return checkboxes.map(function(checkbox) {\n    checkbox.checked = checkbox.checked || false;\n    return checkbox;\n  });\n}\n\nfunction parseRanges(ranges) {\n  if (!Array.isArray(ranges)) {\n    throw new Error('Dialog ranges parameter must be an array.');\n  }\n\n  if (ranges.some(function(range) {\n    return typeof range.min === 'undefined' || typeof range.max === 'undefined';\n  })) {\n    throw new Error('One of Dialog\\'s range parameter is missing either min or max');\n  }\n\n  return ranges.map(function(range) {\n    range.value = range.value || range.min;\n    return range;\n  });\n}\n\nquasar.dialog = function(options) {\n  var data = $.extend({}, options);\n\n  if (!data.buttons) {\n    data.buttons = [{label: 'Ok', handler: $.noop}];\n  }\n  else {\n    data.buttons = parseButtons(data.buttons);\n  }\n\n  if (data.inputs) {\n    data.inputs = parseInputs(data.inputs);\n  }\n  else if (data.radios) {\n    data.radioModel = parseRadios(data.radios);\n  }\n  else if (data.checkboxes) {\n    data.checkboxes = parseCheckboxes(data.checkboxes);\n  }\n  else if (data.toggles) {\n    data.toggles = parseCheckboxes(data.toggles);\n  }\n  else if (data.ranges) {\n    data.ranges = parseRanges(data.ranges);\n  }\n\n  new quasar.Modal({\n    template: template,\n    data: data,\n    methods: {\n      getData: function() {\n        if (this.inputs) {\n          return this.inputs.map(function(input) {\n            return {\n              name: input.name,\n              value: input.model\n            };\n          });\n        }\n        if (this.radios) {\n          return this.radioModel;\n        }\n        if (this.checkboxes || this.toggles) {\n          return (this.checkboxes || this.toggles).filter(function(checkbox) {\n            return checkbox.checked;\n          }).map(function(checkbox) {\n            return checkbox.value;\n          });\n        }\n        if (this.ranges) {\n          return this.ranges.map(function(range) {\n            return {\n              label: range.label,\n              value: range.value\n            };\n          });\n        }\n      }\n    }\n  }).set({\n    minimized: true\n  }).show();\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuanM/MWQ0MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVtcGxhdGUgPSByZXF1aXJlKCdyYXchLi9kaWFsb2cuaHRtbCcpO1xuXG5mdW5jdGlvbiBwYXJzZUJ1dHRvbnMoYnV0dG9ucykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYnV0dG9ucykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpYWxvZyBidXR0b25zIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgaWYgKGJ1dHRvbnMuc29tZShmdW5jdGlvbihidXR0b24pIHtcbiAgICByZXR1cm4gdHlwZW9mIGJ1dHRvbiAhPT0gJ3N0cmluZycgJiYgKE9iamVjdChidXR0b24pICE9PSBidXR0b24gfHwgdHlwZW9mIGJ1dHRvbi5sYWJlbCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGJ1dHRvbi5oYW5kbGVyICE9PSAnZnVuY3Rpb24nKTtcbiAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0IGxlYXN0IG9uZSBvZiBEaWFsb2dcXCdzIGJ1dHRvbiBwYXJhbWV0ZXIgaXMgbmVpdGhlciBhIHN0cmluZyBub3IgYW4gb2JqZWN0IHdpdGggYm90aCBsYWJlbCBoYW5kbGVyLicpO1xuICB9XG5cbiAgcmV0dXJuIGJ1dHRvbnMubWFwKGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgIGlmICh0eXBlb2YgYnV0dG9uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGFiZWw6IGJ1dHRvbixcbiAgICAgICAgaGFuZGxlcjogJC5ub29wXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBidXR0b247XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUlucHV0cyhpbnB1dHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpYWxvZyBpbnB1dHMgcGFyYW1ldGVyIG11c3QgYmUgYW4gYXJyYXkuJyk7XG4gIH1cblxuICByZXR1cm4gaW5wdXRzLm1hcChmdW5jdGlvbihpbnB1dCkge1xuICAgIGlucHV0Lm1vZGVsID0gaW5wdXQubW9kZWwgfHwgJyc7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSYWRpb3MocmFkaW9zKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShyYWRpb3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEaWFsb2cgcmFkaW9zIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgaWYgKHJhZGlvcy5zb21lKGZ1bmN0aW9uKHJhZGlvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiByYWRpby5sYWJlbCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHJhZGlvLnZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiBEaWFsb2dcXCdzIHJhZGlvIHBhcmFtZXRlciBpcyBtaXNzaW5nIGVpdGhlciBsYWJlbCBvciB2YWx1ZScpO1xuICB9XG5cbiAgdmFyIHNlbGVjdGVkVmFsdWUgPSByYWRpb3MuZmlsdGVyKGZ1bmN0aW9uKHJhZGlvKSB7XG4gICAgcmV0dXJuIHJhZGlvLnNlbGVjdGVkO1xuICB9KTtcblxuICBpZiAoc2VsZWN0ZWRWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gcmFkaW9zWzBdLnZhbHVlO1xuICB9XG5cbiAgaWYgKHNlbGVjdGVkVmFsdWUubGVuZ3RoID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVsdGlwbGUgRGlhbG9nIHJhZGlvIHBhcmFtZXRlcnMgYXJlIHNlbGVjdGVkLicpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGVkVmFsdWVbMF0udmFsdWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ2hlY2tib3hlcyhjaGVja2JveGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShjaGVja2JveGVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRGlhbG9nIGNoZWNrYm94ZXMgcGFyYW1ldGVyIG11c3QgYmUgYW4gYXJyYXkuJyk7XG4gIH1cblxuICBpZiAoY2hlY2tib3hlcy5zb21lKGZ1bmN0aW9uKGNoZWNrYm94KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjaGVja2JveC5sYWJlbCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNoZWNrYm94LnZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiBEaWFsb2dcXCdzIGNoZWNrYm94IHBhcmFtZXRlciBpcyBtaXNzaW5nIGVpdGhlciBsYWJlbCBvciB2YWx1ZScpO1xuICB9XG5cbiAgcmV0dXJuIGNoZWNrYm94ZXMubWFwKGZ1bmN0aW9uKGNoZWNrYm94KSB7XG4gICAgY2hlY2tib3guY2hlY2tlZCA9IGNoZWNrYm94LmNoZWNrZWQgfHwgZmFsc2U7XG4gICAgcmV0dXJuIGNoZWNrYm94O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSYW5nZXMocmFuZ2VzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShyYW5nZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEaWFsb2cgcmFuZ2VzIHBhcmFtZXRlciBtdXN0IGJlIGFuIGFycmF5LicpO1xuICB9XG5cbiAgaWYgKHJhbmdlcy5zb21lKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiByYW5nZS5taW4gPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiByYW5nZS5tYXggPT09ICd1bmRlZmluZWQnO1xuICB9KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignT25lIG9mIERpYWxvZ1xcJ3MgcmFuZ2UgcGFyYW1ldGVyIGlzIG1pc3NpbmcgZWl0aGVyIG1pbiBvciBtYXgnKTtcbiAgfVxuXG4gIHJldHVybiByYW5nZXMubWFwKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgcmFuZ2UudmFsdWUgPSByYW5nZS52YWx1ZSB8fCByYW5nZS5taW47XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9KTtcbn1cblxucXVhc2FyLmRpYWxvZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIGRhdGEgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyk7XG5cbiAgaWYgKCFkYXRhLmJ1dHRvbnMpIHtcbiAgICBkYXRhLmJ1dHRvbnMgPSBbe2xhYmVsOiAnT2snLCBoYW5kbGVyOiAkLm5vb3B9XTtcbiAgfVxuICBlbHNlIHtcbiAgICBkYXRhLmJ1dHRvbnMgPSBwYXJzZUJ1dHRvbnMoZGF0YS5idXR0b25zKTtcbiAgfVxuXG4gIGlmIChkYXRhLmlucHV0cykge1xuICAgIGRhdGEuaW5wdXRzID0gcGFyc2VJbnB1dHMoZGF0YS5pbnB1dHMpO1xuICB9XG4gIGVsc2UgaWYgKGRhdGEucmFkaW9zKSB7XG4gICAgZGF0YS5yYWRpb01vZGVsID0gcGFyc2VSYWRpb3MoZGF0YS5yYWRpb3MpO1xuICB9XG4gIGVsc2UgaWYgKGRhdGEuY2hlY2tib3hlcykge1xuICAgIGRhdGEuY2hlY2tib3hlcyA9IHBhcnNlQ2hlY2tib3hlcyhkYXRhLmNoZWNrYm94ZXMpO1xuICB9XG4gIGVsc2UgaWYgKGRhdGEudG9nZ2xlcykge1xuICAgIGRhdGEudG9nZ2xlcyA9IHBhcnNlQ2hlY2tib3hlcyhkYXRhLnRvZ2dsZXMpO1xuICB9XG4gIGVsc2UgaWYgKGRhdGEucmFuZ2VzKSB7XG4gICAgZGF0YS5yYW5nZXMgPSBwYXJzZVJhbmdlcyhkYXRhLnJhbmdlcyk7XG4gIH1cblxuICBuZXcgcXVhc2FyLk1vZGFsKHtcbiAgICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBnZXREYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzLm1hcChmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbmFtZTogaW5wdXQubmFtZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGlucHV0Lm1vZGVsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJhZGlvcykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJhZGlvTW9kZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tib3hlcyB8fCB0aGlzLnRvZ2dsZXMpIHtcbiAgICAgICAgICByZXR1cm4gKHRoaXMuY2hlY2tib3hlcyB8fCB0aGlzLnRvZ2dsZXMpLmZpbHRlcihmdW5jdGlvbihjaGVja2JveCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrYm94LmNoZWNrZWQ7XG4gICAgICAgICAgfSkubWFwKGZ1bmN0aW9uKGNoZWNrYm94KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tib3gudmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmFuZ2VzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzLm1hcChmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbGFiZWw6IHJhbmdlLmxhYmVsLFxuICAgICAgICAgICAgICB2YWx1ZTogcmFuZ2UudmFsdWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pLnNldCh7XG4gICAgbWluaW1pemVkOiB0cnVlXG4gIH0pLnNob3coKTtcbn07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9kaWFsb2cvZGlhbG9nLmpzXG4gKiogbW9kdWxlIGlkID0gNTBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 51 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"modal-header\\\">\\n  {{{* title || ''}}}\\n</div>\\n<div v-if=\\\"message\\\" class=\\\"modal-body modal-scroll\\\">\\n  <p>{{{* message}}}</p>\\n</div>\\n<div v-if=\\\"inputs\\\" class=\\\"modal-body modal-scroll\\\">\\n  <div v-for=\\\"input in inputs\\\" class=\\\"item\\\">\\n    <div class=\\\"item-content\\\">\\n      <input type=\\\"text\\\" v-model=\\\"input.model\\\" :placeholder.once=\\\"input.label\\\" required autofocus>\\n    </div>\\n  </div>\\n</div>\\n<div v-if=\\\"radios\\\" class=\\\"modal-controls modal-scroll\\\">\\n  <label v-for=\\\"radio in radios\\\" class=\\\"item\\\">\\n    <radio :model.sync=\\\"radioModel\\\" :value.once=\\\"radio.value\\\"></radio>\\n    <div class=\\\"item-content\\\">\\n      {{{* radio.label}}}\\n    </div>\\n  </label>\\n</div>\\n<div v-if=\\\"checkboxes\\\" class=\\\"modal-controls modal-scroll\\\">\\n  <label v-for=\\\"checkbox in checkboxes\\\" class=\\\"item\\\">\\n    <checkbox :model.sync=\\\"checkbox.checked\\\"></checkbox>\\n    <div class=\\\"item-content\\\">\\n      {{{* checkbox.label}}}\\n    </div>\\n  </label>\\n</div>\\n<div v-if=\\\"toggles\\\" class=\\\"modal-controls modal-scroll\\\">\\n  <label v-for=\\\"toggle in toggles\\\" class=\\\"item\\\">\\n    <div class=\\\"item-content\\\">\\n      <div class=\\\"item-label\\\">\\n        {{{* toggle.label}}}\\n      </div>\\n      <toggle :model.sync=\\\"toggle.checked\\\"></toggle>\\n    </div>\\n  </label>\\n</div>\\n<div v-if=\\\"ranges\\\" class=\\\"modal-controls modal-scroll list\\\">\\n  <template v-for=\\\"range in ranges\\\">\\n    <div v-if=\\\"range.label\\\" class=\\\"list-header\\\">{{{* range.label}}}: {{range.value}}</div>\\n    <div class=\\\"item\\\">\\n      <i v-if=\\\"range.iconMin\\\" class=\\\"item-right-margin\\\">{{* range.iconMin}}</i>\\n      <div v-else class=\\\"item-right-margin\\\">{{* range.min}}</div>\\n\\n      <range :model.sync=\\\"range.value\\\" :min.once=\\\"range.min\\\" :max.once=\\\"range.max\\\"></range>\\n\\n      <i v-if=\\\"range.iconMax\\\" class=\\\"item-left-margin\\\">{{* range.iconMax}}</i>\\n      <div v-else class=\\\"item-left-margin\\\">{{* range.max}}</div>\\n    </div>\\n  </template>\\n</div>\\n<div v-if=\\\"buttons\\\" class=\\\"modal-buttons\\\">\\n  <button\\n    v-for=\\\"button in buttons\\\"\\n    class=\\\"primary clear\\\"\\n    @click=\\\"button.handler(getData()), close()\\\"\\n  >\\n    {{{* button.label}}}\\n  </button>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuaHRtbD82OGFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxnQkFBZ0IsNEVBQTRFLFlBQVksMmdCQUEyZ0IsZ0JBQWdCLHFRQUFxUSxtQkFBbUIscU9BQXFPLGlCQUFpQix5UUFBeVEsZ0JBQWdCLElBQUksYUFBYSxnR0FBZ0csaUJBQWlCLHNEQUFzRCxhQUFhLDRLQUE0SyxpQkFBaUIscURBQXFELGFBQWEsbU9BQW1PLGlCQUFpQiIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcbiAge3t7KiB0aXRsZSB8fCAnJ319fVxcbjwvZGl2PlxcbjxkaXYgdi1pZj1cXFwibWVzc2FnZVxcXCIgY2xhc3M9XFxcIm1vZGFsLWJvZHkgbW9kYWwtc2Nyb2xsXFxcIj5cXG4gIDxwPnt7eyogbWVzc2FnZX19fTwvcD5cXG48L2Rpdj5cXG48ZGl2IHYtaWY9XFxcImlucHV0c1xcXCIgY2xhc3M9XFxcIm1vZGFsLWJvZHkgbW9kYWwtc2Nyb2xsXFxcIj5cXG4gIDxkaXYgdi1mb3I9XFxcImlucHV0IGluIGlucHV0c1xcXCIgY2xhc3M9XFxcIml0ZW1cXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLWNvbnRlbnRcXFwiPlxcbiAgICAgIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB2LW1vZGVsPVxcXCJpbnB1dC5tb2RlbFxcXCIgOnBsYWNlaG9sZGVyLm9uY2U9XFxcImlucHV0LmxhYmVsXFxcIiByZXF1aXJlZCBhdXRvZm9jdXM+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuPGRpdiB2LWlmPVxcXCJyYWRpb3NcXFwiIGNsYXNzPVxcXCJtb2RhbC1jb250cm9scyBtb2RhbC1zY3JvbGxcXFwiPlxcbiAgPGxhYmVsIHYtZm9yPVxcXCJyYWRpbyBpbiByYWRpb3NcXFwiIGNsYXNzPVxcXCJpdGVtXFxcIj5cXG4gICAgPHJhZGlvIDptb2RlbC5zeW5jPVxcXCJyYWRpb01vZGVsXFxcIiA6dmFsdWUub25jZT1cXFwicmFkaW8udmFsdWVcXFwiPjwvcmFkaW8+XFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tY29udGVudFxcXCI+XFxuICAgICAge3t7KiByYWRpby5sYWJlbH19fVxcbiAgICA8L2Rpdj5cXG4gIDwvbGFiZWw+XFxuPC9kaXY+XFxuPGRpdiB2LWlmPVxcXCJjaGVja2JveGVzXFxcIiBjbGFzcz1cXFwibW9kYWwtY29udHJvbHMgbW9kYWwtc2Nyb2xsXFxcIj5cXG4gIDxsYWJlbCB2LWZvcj1cXFwiY2hlY2tib3ggaW4gY2hlY2tib3hlc1xcXCIgY2xhc3M9XFxcIml0ZW1cXFwiPlxcbiAgICA8Y2hlY2tib3ggOm1vZGVsLnN5bmM9XFxcImNoZWNrYm94LmNoZWNrZWRcXFwiPjwvY2hlY2tib3g+XFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tY29udGVudFxcXCI+XFxuICAgICAge3t7KiBjaGVja2JveC5sYWJlbH19fVxcbiAgICA8L2Rpdj5cXG4gIDwvbGFiZWw+XFxuPC9kaXY+XFxuPGRpdiB2LWlmPVxcXCJ0b2dnbGVzXFxcIiBjbGFzcz1cXFwibW9kYWwtY29udHJvbHMgbW9kYWwtc2Nyb2xsXFxcIj5cXG4gIDxsYWJlbCB2LWZvcj1cXFwidG9nZ2xlIGluIHRvZ2dsZXNcXFwiIGNsYXNzPVxcXCJpdGVtXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaXRlbS1jb250ZW50XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLWxhYmVsXFxcIj5cXG4gICAgICAgIHt7eyogdG9nZ2xlLmxhYmVsfX19XFxuICAgICAgPC9kaXY+XFxuICAgICAgPHRvZ2dsZSA6bW9kZWwuc3luYz1cXFwidG9nZ2xlLmNoZWNrZWRcXFwiPjwvdG9nZ2xlPlxcbiAgICA8L2Rpdj5cXG4gIDwvbGFiZWw+XFxuPC9kaXY+XFxuPGRpdiB2LWlmPVxcXCJyYW5nZXNcXFwiIGNsYXNzPVxcXCJtb2RhbC1jb250cm9scyBtb2RhbC1zY3JvbGwgbGlzdFxcXCI+XFxuICA8dGVtcGxhdGUgdi1mb3I9XFxcInJhbmdlIGluIHJhbmdlc1xcXCI+XFxuICAgIDxkaXYgdi1pZj1cXFwicmFuZ2UubGFiZWxcXFwiIGNsYXNzPVxcXCJsaXN0LWhlYWRlclxcXCI+e3t7KiByYW5nZS5sYWJlbH19fToge3tyYW5nZS52YWx1ZX19PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW1cXFwiPlxcbiAgICAgIDxpIHYtaWY9XFxcInJhbmdlLmljb25NaW5cXFwiIGNsYXNzPVxcXCJpdGVtLXJpZ2h0LW1hcmdpblxcXCI+e3sqIHJhbmdlLmljb25NaW59fTwvaT5cXG4gICAgICA8ZGl2IHYtZWxzZSBjbGFzcz1cXFwiaXRlbS1yaWdodC1tYXJnaW5cXFwiPnt7KiByYW5nZS5taW59fTwvZGl2PlxcblxcbiAgICAgIDxyYW5nZSA6bW9kZWwuc3luYz1cXFwicmFuZ2UudmFsdWVcXFwiIDptaW4ub25jZT1cXFwicmFuZ2UubWluXFxcIiA6bWF4Lm9uY2U9XFxcInJhbmdlLm1heFxcXCI+PC9yYW5nZT5cXG5cXG4gICAgICA8aSB2LWlmPVxcXCJyYW5nZS5pY29uTWF4XFxcIiBjbGFzcz1cXFwiaXRlbS1sZWZ0LW1hcmdpblxcXCI+e3sqIHJhbmdlLmljb25NYXh9fTwvaT5cXG4gICAgICA8ZGl2IHYtZWxzZSBjbGFzcz1cXFwiaXRlbS1sZWZ0LW1hcmdpblxcXCI+e3sqIHJhbmdlLm1heH19PC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC90ZW1wbGF0ZT5cXG48L2Rpdj5cXG48ZGl2IHYtaWY9XFxcImJ1dHRvbnNcXFwiIGNsYXNzPVxcXCJtb2RhbC1idXR0b25zXFxcIj5cXG4gIDxidXR0b25cXG4gICAgdi1mb3I9XFxcImJ1dHRvbiBpbiBidXR0b25zXFxcIlxcbiAgICBjbGFzcz1cXFwicHJpbWFyeSBjbGVhclxcXCJcXG4gICAgQGNsaWNrPVxcXCJidXR0b24uaGFuZGxlcihnZXREYXRhKCkpLCBjbG9zZSgpXFxcIlxcbiAgPlxcbiAgICB7e3sqIGJ1dHRvbi5sYWJlbH19fVxcbiAgPC9idXR0b24+XFxuPC9kaXY+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9kaWFsb2cvZGlhbG9nLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA1MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  body = $('body'),\n  template = $(__webpack_require__(53)),\n  drawerAnimationSpeed = 150,\n  backdropOpacity = .7\n  ;\n\n/* istanbul ignore next */\nfunction getCurrentPosition(node) {\n  var transform = node.css('transform');\n\n  return transform !== 'none' ? parseInt(transform.split(/[()]/)[1].split(', ')[4], 10) : 0;\n}\n\n/* istanbul ignore next */\nfunction matToggleAnimate(onRightSide, opening, node, backdrop, percentage, drawerWidth, done) {\n  var\n    currentPosition = getCurrentPosition(node),\n    closePosition = (onRightSide ? 1 : -1) * drawerWidth\n    ;\n\n  node.velocity('stop').velocity(\n    {translateX: opening ? [0, currentPosition] : [closePosition, currentPosition]},\n    {duration: !opening || currentPosition !== 0 ? drawerAnimationSpeed : 0}\n  );\n\n  if (opening) {\n    backdrop.addClass('active');\n  }\n\n  backdrop\n  .css('background-color', 'rgba(0,0,0,' + percentage * backdropOpacity + ')')\n  .velocity('stop')\n  .velocity(\n    {\n      'backgroundColor': '#000',\n      'backgroundColorAlpha': opening ? backdropOpacity : .01\n    },\n    {\n      duration: drawerAnimationSpeed,\n      complete: function() {\n        if (!opening) {\n          backdrop.removeClass('active');\n          $(window).off('resize', quasar.close.drawers);\n        }\n        else {\n          $(window).resize(quasar.close.drawers);\n        }\n        if (typeof done === 'function') {\n          done();\n        }\n      }\n    }\n  );\n}\n\n/* istanbul ignore next */\nfunction iosToggleAnimate(onRightSide, opening, backdrop, drawerWidth, done) {\n  if (opening) {\n    backdrop.addClass('active');\n  }\n\n  var\n    currentPosition = getCurrentPosition(body),\n    openPosition = (onRightSide ? -1 : 1) * drawerWidth\n    ;\n\n  body.velocity('stop').velocity(\n    {translateX: opening ? [openPosition, currentPosition] : [0, currentPosition]},\n    {\n      duration: !opening || currentPosition !== openPosition ? drawerAnimationSpeed : 0,\n      complete: function() {\n        if (!opening) {\n          backdrop.removeClass('active');\n          $(window).off('resize', quasar.close.drawers);\n        }\n        else {\n          $(window).resize(quasar.close.drawers);\n        }\n        if (typeof done === 'function') {\n          done();\n        }\n      }\n    }\n  );\n}\n\n/* istanbul ignore next */\nfunction openByTouch(event) {\n  var\n    el = $(this.$el),\n    content = el.find('> .drawer-content');\n\n  if (content.css('position') !== 'fixed') {\n    return;\n  }\n\n  var\n    position = Math.abs(event.deltaX),\n    backdrop = el.find('> .drawer-backdrop')\n    ;\n\n  if (event.isFinal) {\n    this.opened = position > 75;\n  }\n\n  if (quasar.runs.on.ios) {\n    position = Math.min(position, this.width);\n\n    if (event.isFinal) {\n      iosToggleAnimate(this.rightSide, this.opened, backdrop, this.width);\n      return;\n    }\n    body.css({\n      'transform': 'translateX(' + (this.rightSide ? -1 : 1) * position + 'px)'\n    });\n  }\n  else { // mat\n    if (this.rightSide) {\n      position = Math.max(this.width - position, 0);\n    }\n    else {\n      position = Math.min(0, position - this.width);\n    }\n\n    var percentage = (this.width - Math.abs(position)) / this.width;\n\n    if (event.isFinal) {\n      matToggleAnimate(this.rightSide, this.opened, content, backdrop, percentage, this.width);\n      return;\n    }\n    content.css({\n      'transform': 'translateX(' + position + 'px)'\n    });\n    backdrop\n      .addClass('active')\n      .css('background-color', 'rgba(0,0,0,' + percentage * backdropOpacity + ')');\n  }\n}\n\n/* istanbul ignore next */\nfunction getBetween(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n\n/* istanbul ignore next */\nfunction closeByTouch(event) {\n  var\n    el = $(this.$el),\n    content = el.find('> .drawer-content');\n\n  if (content.css('position') !== 'fixed') {\n    return;\n  }\n\n  var\n    position = this.rightSide ? getBetween(event.deltaX, 0, this.width) : getBetween(event.deltaX, -this.width, 0),\n    initialPosition = (this.rightSide ? - 1 : 1) * this.width,\n    backdrop = el.find('> .drawer-backdrop')\n    ;\n\n  if (event.isFinal) {\n    this.opened = Math.abs(position) <= 75;\n  }\n\n  if (quasar.runs.on.ios) {\n    position = initialPosition + position;\n\n    if (event.isFinal) {\n      iosToggleAnimate(this.rightSide, this.opened, backdrop, this.width);\n      return;\n    }\n    body.css({\n      'transform': 'translateX(' + position + 'px)'\n    });\n  }\n  else { // mat\n    var percentage = 1 + (this.rightSide ? -1 : 1) * position / this.width;\n\n    if (event.isFinal) {\n      matToggleAnimate(this.rightSide, this.opened, content, backdrop, percentage, this.width);\n      return;\n    }\n    content.css({\n      'transform': 'translateX(' + position + 'px)',\n    });\n    backdrop.css('background-color', 'rgba(0,0,0,' + percentage * backdropOpacity + ')');\n  }\n}\n\nVue.component('drawer', {\n  template: template.find('#drawer').html(),\n  props: {\n    'right-side': {\n      type: Boolean,\n      default: false,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    },\n    'swipe-only': {\n      type: Boolean,\n      default: false,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    }\n  },\n  data: function() {\n    return {\n      opened: false\n    };\n  },\n  methods: {\n    openByTouch: function(event) {\n      openByTouch.call(this, event);\n    },\n    closeByTouch: function(event) {\n      closeByTouch.call(this, event);\n    },\n    toggle: /* istanbul ignore next */ function(state, done) {\n      if (typeof state === 'boolean' && this.opened === state) {\n        if (typeof done === 'function') {\n          done();\n        }\n        return;\n      }\n\n      this.opened = !this.opened;\n      var backdrop = $(this.$el).find('> .drawer-backdrop');\n\n      if (quasar.runs.on.ios) {\n        iosToggleAnimate(\n          this.rightSide,\n          this.opened,\n          backdrop,\n          this.width,\n          done\n        );\n      }\n      else {\n        matToggleAnimate(\n          this.rightSide,\n          this.opened,\n          $(this.$el).find('> .drawer-content'),\n          backdrop,\n          this.opened ? .01 : 1,\n          this.width,\n          done\n        );\n      }\n    },\n    open: /* istanbul ignore next */ function(done) {\n      this.toggle(true, done);\n    },\n    close: /* istanbul ignore next */ function(done) {\n      this.toggle(false, done);\n    }\n  },\n  ready: /* istanbul ignore next */ function() {\n    var\n      el = $(this.$el),\n      content = el.find('> .drawer-content'),\n      toggles = el.parents('.screen').find('.' + (this.rightSide ? 'right' : 'left') + '-drawer-toggle')\n      ;\n\n    this.width = parseInt(content.css('width'), 10);\n\n    toggles.click(function() {\n      this.toggle();\n    }.bind(this));\n\n    if (this.swipeOnly) {\n      el.addClass('swipe-only');\n      toggles.addClass('always-visible');\n    }\n\n    quasar[(this.rightSide ? 'right' : 'left') + 'Drawer'] = this;\n  },\n  destroy: function() {\n    delete quasar[(this.rightSide ? 'right' : 'left') + 'Drawer'];\n  }\n});\n\n$.extend(true, quasar, {\n  close: {\n    drawers: function(fn) {\n      if (quasar.leftDrawer && quasar.leftDrawer.opened) {\n        quasar.leftDrawer.close(fn);\n        return;\n      }\n      if (quasar.rightDrawer && quasar.rightDrawer.opened) {\n        quasar.rightDrawer.close(fn);\n        return;\n      }\n\n      if (typeof fn === 'function') {\n        fn();\n      }\n    }\n  }\n});\n\nVue.component('drawer-link', {\n  template: template.find('#drawer-link').html(),\n  props: ['page', 'route'],\n  methods: {\n    launch: function(handler) {\n      quasar.close.drawers(function() {\n        handler(this.route || this.page);\n      }.bind(this));\n    }\n  },\n  beforeCompile: function() {\n    if (!this.page) {\n      console.error('Drawer link missing page attribute');\n      return;\n    }\n\n    var page = quasar.data.manifest.pages[this.page];\n\n    if (!page) {\n      console.error('Drawer link points to unavailable page \"' + this.page + '\"');\n    }\n\n    this.icon = page.icon;\n    this.label = page.label;\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2RyYXdlci9kcmF3ZXIuanM/MDAxNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSyw4RUFBOEU7QUFDbkYsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLLDZFQUE2RTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVE7QUFDUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXJcbiAgYm9keSA9ICQoJ2JvZHknKSxcbiAgdGVtcGxhdGUgPSAkKHJlcXVpcmUoJ3JhdyEuL2RyYXdlci5odG1sJykpLFxuICBkcmF3ZXJBbmltYXRpb25TcGVlZCA9IDE1MCxcbiAgYmFja2Ryb3BPcGFjaXR5ID0gLjdcbiAgO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFBvc2l0aW9uKG5vZGUpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IG5vZGUuY3NzKCd0cmFuc2Zvcm0nKTtcblxuICByZXR1cm4gdHJhbnNmb3JtICE9PSAnbm9uZScgPyBwYXJzZUludCh0cmFuc2Zvcm0uc3BsaXQoL1soKV0vKVsxXS5zcGxpdCgnLCAnKVs0XSwgMTApIDogMDtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG1hdFRvZ2dsZUFuaW1hdGUob25SaWdodFNpZGUsIG9wZW5pbmcsIG5vZGUsIGJhY2tkcm9wLCBwZXJjZW50YWdlLCBkcmF3ZXJXaWR0aCwgZG9uZSkge1xuICB2YXJcbiAgICBjdXJyZW50UG9zaXRpb24gPSBnZXRDdXJyZW50UG9zaXRpb24obm9kZSksXG4gICAgY2xvc2VQb3NpdGlvbiA9IChvblJpZ2h0U2lkZSA/IDEgOiAtMSkgKiBkcmF3ZXJXaWR0aFxuICAgIDtcblxuICBub2RlLnZlbG9jaXR5KCdzdG9wJykudmVsb2NpdHkoXG4gICAge3RyYW5zbGF0ZVg6IG9wZW5pbmcgPyBbMCwgY3VycmVudFBvc2l0aW9uXSA6IFtjbG9zZVBvc2l0aW9uLCBjdXJyZW50UG9zaXRpb25dfSxcbiAgICB7ZHVyYXRpb246ICFvcGVuaW5nIHx8IGN1cnJlbnRQb3NpdGlvbiAhPT0gMCA/IGRyYXdlckFuaW1hdGlvblNwZWVkIDogMH1cbiAgKTtcblxuICBpZiAob3BlbmluZykge1xuICAgIGJhY2tkcm9wLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgfVxuXG4gIGJhY2tkcm9wXG4gIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAncmdiYSgwLDAsMCwnICsgcGVyY2VudGFnZSAqIGJhY2tkcm9wT3BhY2l0eSArICcpJylcbiAgLnZlbG9jaXR5KCdzdG9wJylcbiAgLnZlbG9jaXR5KFxuICAgIHtcbiAgICAgICdiYWNrZ3JvdW5kQ29sb3InOiAnIzAwMCcsXG4gICAgICAnYmFja2dyb3VuZENvbG9yQWxwaGEnOiBvcGVuaW5nID8gYmFja2Ryb3BPcGFjaXR5IDogLjAxXG4gICAgfSxcbiAgICB7XG4gICAgICBkdXJhdGlvbjogZHJhd2VyQW5pbWF0aW9uU3BlZWQsXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICAgIGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCBxdWFzYXIuY2xvc2UuZHJhd2Vycyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShxdWFzYXIuY2xvc2UuZHJhd2Vycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkb25lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaW9zVG9nZ2xlQW5pbWF0ZShvblJpZ2h0U2lkZSwgb3BlbmluZywgYmFja2Ryb3AsIGRyYXdlcldpZHRoLCBkb25lKSB7XG4gIGlmIChvcGVuaW5nKSB7XG4gICAgYmFja2Ryb3AuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICB9XG5cbiAgdmFyXG4gICAgY3VycmVudFBvc2l0aW9uID0gZ2V0Q3VycmVudFBvc2l0aW9uKGJvZHkpLFxuICAgIG9wZW5Qb3NpdGlvbiA9IChvblJpZ2h0U2lkZSA/IC0xIDogMSkgKiBkcmF3ZXJXaWR0aFxuICAgIDtcblxuICBib2R5LnZlbG9jaXR5KCdzdG9wJykudmVsb2NpdHkoXG4gICAge3RyYW5zbGF0ZVg6IG9wZW5pbmcgPyBbb3BlblBvc2l0aW9uLCBjdXJyZW50UG9zaXRpb25dIDogWzAsIGN1cnJlbnRQb3NpdGlvbl19LFxuICAgIHtcbiAgICAgIGR1cmF0aW9uOiAhb3BlbmluZyB8fCBjdXJyZW50UG9zaXRpb24gIT09IG9wZW5Qb3NpdGlvbiA/IGRyYXdlckFuaW1hdGlvblNwZWVkIDogMCxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFvcGVuaW5nKSB7XG4gICAgICAgICAgYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZScsIHF1YXNhci5jbG9zZS5kcmF3ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAkKHdpbmRvdykucmVzaXplKHF1YXNhci5jbG9zZS5kcmF3ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRvbmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBvcGVuQnlUb3VjaChldmVudCkge1xuICB2YXJcbiAgICBlbCA9ICQodGhpcy4kZWwpLFxuICAgIGNvbnRlbnQgPSBlbC5maW5kKCc+IC5kcmF3ZXItY29udGVudCcpO1xuXG4gIGlmIChjb250ZW50LmNzcygncG9zaXRpb24nKSAhPT0gJ2ZpeGVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhclxuICAgIHBvc2l0aW9uID0gTWF0aC5hYnMoZXZlbnQuZGVsdGFYKSxcbiAgICBiYWNrZHJvcCA9IGVsLmZpbmQoJz4gLmRyYXdlci1iYWNrZHJvcCcpXG4gICAgO1xuXG4gIGlmIChldmVudC5pc0ZpbmFsKSB7XG4gICAgdGhpcy5vcGVuZWQgPSBwb3NpdGlvbiA+IDc1O1xuICB9XG5cbiAgaWYgKHF1YXNhci5ydW5zLm9uLmlvcykge1xuICAgIHBvc2l0aW9uID0gTWF0aC5taW4ocG9zaXRpb24sIHRoaXMud2lkdGgpO1xuXG4gICAgaWYgKGV2ZW50LmlzRmluYWwpIHtcbiAgICAgIGlvc1RvZ2dsZUFuaW1hdGUodGhpcy5yaWdodFNpZGUsIHRoaXMub3BlbmVkLCBiYWNrZHJvcCwgdGhpcy53aWR0aCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJvZHkuY3NzKHtcbiAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgnICsgKHRoaXMucmlnaHRTaWRlID8gLTEgOiAxKSAqIHBvc2l0aW9uICsgJ3B4KSdcbiAgICB9KTtcbiAgfVxuICBlbHNlIHsgLy8gbWF0XG4gICAgaWYgKHRoaXMucmlnaHRTaWRlKSB7XG4gICAgICBwb3NpdGlvbiA9IE1hdGgubWF4KHRoaXMud2lkdGggLSBwb3NpdGlvbiwgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcG9zaXRpb24gPSBNYXRoLm1pbigwLCBwb3NpdGlvbiAtIHRoaXMud2lkdGgpO1xuICAgIH1cblxuICAgIHZhciBwZXJjZW50YWdlID0gKHRoaXMud2lkdGggLSBNYXRoLmFicyhwb3NpdGlvbikpIC8gdGhpcy53aWR0aDtcblxuICAgIGlmIChldmVudC5pc0ZpbmFsKSB7XG4gICAgICBtYXRUb2dnbGVBbmltYXRlKHRoaXMucmlnaHRTaWRlLCB0aGlzLm9wZW5lZCwgY29udGVudCwgYmFja2Ryb3AsIHBlcmNlbnRhZ2UsIHRoaXMud2lkdGgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb250ZW50LmNzcyh7XG4gICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoJyArIHBvc2l0aW9uICsgJ3B4KSdcbiAgICB9KTtcbiAgICBiYWNrZHJvcFxuICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdyZ2JhKDAsMCwwLCcgKyBwZXJjZW50YWdlICogYmFja2Ryb3BPcGFjaXR5ICsgJyknKTtcbiAgfVxufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gZ2V0QmV0d2Vlbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuXG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBjbG9zZUJ5VG91Y2goZXZlbnQpIHtcbiAgdmFyXG4gICAgZWwgPSAkKHRoaXMuJGVsKSxcbiAgICBjb250ZW50ID0gZWwuZmluZCgnPiAuZHJhd2VyLWNvbnRlbnQnKTtcblxuICBpZiAoY29udGVudC5jc3MoJ3Bvc2l0aW9uJykgIT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXJcbiAgICBwb3NpdGlvbiA9IHRoaXMucmlnaHRTaWRlID8gZ2V0QmV0d2VlbihldmVudC5kZWx0YVgsIDAsIHRoaXMud2lkdGgpIDogZ2V0QmV0d2VlbihldmVudC5kZWx0YVgsIC10aGlzLndpZHRoLCAwKSxcbiAgICBpbml0aWFsUG9zaXRpb24gPSAodGhpcy5yaWdodFNpZGUgPyAtIDEgOiAxKSAqIHRoaXMud2lkdGgsXG4gICAgYmFja2Ryb3AgPSBlbC5maW5kKCc+IC5kcmF3ZXItYmFja2Ryb3AnKVxuICAgIDtcblxuICBpZiAoZXZlbnQuaXNGaW5hbCkge1xuICAgIHRoaXMub3BlbmVkID0gTWF0aC5hYnMocG9zaXRpb24pIDw9IDc1O1xuICB9XG5cbiAgaWYgKHF1YXNhci5ydW5zLm9uLmlvcykge1xuICAgIHBvc2l0aW9uID0gaW5pdGlhbFBvc2l0aW9uICsgcG9zaXRpb247XG5cbiAgICBpZiAoZXZlbnQuaXNGaW5hbCkge1xuICAgICAgaW9zVG9nZ2xlQW5pbWF0ZSh0aGlzLnJpZ2h0U2lkZSwgdGhpcy5vcGVuZWQsIGJhY2tkcm9wLCB0aGlzLndpZHRoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYm9keS5jc3Moe1xuICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyBwb3NpdGlvbiArICdweCknXG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7IC8vIG1hdFxuICAgIHZhciBwZXJjZW50YWdlID0gMSArICh0aGlzLnJpZ2h0U2lkZSA/IC0xIDogMSkgKiBwb3NpdGlvbiAvIHRoaXMud2lkdGg7XG5cbiAgICBpZiAoZXZlbnQuaXNGaW5hbCkge1xuICAgICAgbWF0VG9nZ2xlQW5pbWF0ZSh0aGlzLnJpZ2h0U2lkZSwgdGhpcy5vcGVuZWQsIGNvbnRlbnQsIGJhY2tkcm9wLCBwZXJjZW50YWdlLCB0aGlzLndpZHRoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGVudC5jc3Moe1xuICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKCcgKyBwb3NpdGlvbiArICdweCknLFxuICAgIH0pO1xuICAgIGJhY2tkcm9wLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdyZ2JhKDAsMCwwLCcgKyBwZXJjZW50YWdlICogYmFja2Ryb3BPcGFjaXR5ICsgJyknKTtcbiAgfVxufVxuXG5WdWUuY29tcG9uZW50KCdkcmF3ZXInLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZS5maW5kKCcjZHJhd2VyJykuaHRtbCgpLFxuICBwcm9wczoge1xuICAgICdyaWdodC1zaWRlJzoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgY29lcmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICAnc3dpcGUtb25seSc6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGNvZXJjZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW5lZDogZmFsc2VcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb3BlbkJ5VG91Y2g6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBvcGVuQnlUb3VjaC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9LFxuICAgIGNsb3NlQnlUb3VjaDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGNsb3NlQnlUb3VjaC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9LFxuICAgIHRvZ2dsZTogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24oc3RhdGUsIGRvbmUpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdib29sZWFuJyAmJiB0aGlzLm9wZW5lZCA9PT0gc3RhdGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb25lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vcGVuZWQgPSAhdGhpcy5vcGVuZWQ7XG4gICAgICB2YXIgYmFja2Ryb3AgPSAkKHRoaXMuJGVsKS5maW5kKCc+IC5kcmF3ZXItYmFja2Ryb3AnKTtcblxuICAgICAgaWYgKHF1YXNhci5ydW5zLm9uLmlvcykge1xuICAgICAgICBpb3NUb2dnbGVBbmltYXRlKFxuICAgICAgICAgIHRoaXMucmlnaHRTaWRlLFxuICAgICAgICAgIHRoaXMub3BlbmVkLFxuICAgICAgICAgIGJhY2tkcm9wLFxuICAgICAgICAgIHRoaXMud2lkdGgsXG4gICAgICAgICAgZG9uZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG1hdFRvZ2dsZUFuaW1hdGUoXG4gICAgICAgICAgdGhpcy5yaWdodFNpZGUsXG4gICAgICAgICAgdGhpcy5vcGVuZWQsXG4gICAgICAgICAgJCh0aGlzLiRlbCkuZmluZCgnPiAuZHJhd2VyLWNvbnRlbnQnKSxcbiAgICAgICAgICBiYWNrZHJvcCxcbiAgICAgICAgICB0aGlzLm9wZW5lZCA/IC4wMSA6IDEsXG4gICAgICAgICAgdGhpcy53aWR0aCxcbiAgICAgICAgICBkb25lXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvcGVuOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbihkb25lKSB7XG4gICAgICB0aGlzLnRvZ2dsZSh0cnVlLCBkb25lKTtcbiAgICB9LFxuICAgIGNsb3NlOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbihkb25lKSB7XG4gICAgICB0aGlzLnRvZ2dsZShmYWxzZSwgZG9uZSk7XG4gICAgfVxuICB9LFxuICByZWFkeTogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24oKSB7XG4gICAgdmFyXG4gICAgICBlbCA9ICQodGhpcy4kZWwpLFxuICAgICAgY29udGVudCA9IGVsLmZpbmQoJz4gLmRyYXdlci1jb250ZW50JyksXG4gICAgICB0b2dnbGVzID0gZWwucGFyZW50cygnLnNjcmVlbicpLmZpbmQoJy4nICsgKHRoaXMucmlnaHRTaWRlID8gJ3JpZ2h0JyA6ICdsZWZ0JykgKyAnLWRyYXdlci10b2dnbGUnKVxuICAgICAgO1xuXG4gICAgdGhpcy53aWR0aCA9IHBhcnNlSW50KGNvbnRlbnQuY3NzKCd3aWR0aCcpLCAxMCk7XG5cbiAgICB0b2dnbGVzLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgaWYgKHRoaXMuc3dpcGVPbmx5KSB7XG4gICAgICBlbC5hZGRDbGFzcygnc3dpcGUtb25seScpO1xuICAgICAgdG9nZ2xlcy5hZGRDbGFzcygnYWx3YXlzLXZpc2libGUnKTtcbiAgICB9XG5cbiAgICBxdWFzYXJbKHRoaXMucmlnaHRTaWRlID8gJ3JpZ2h0JyA6ICdsZWZ0JykgKyAnRHJhd2VyJ10gPSB0aGlzO1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgcXVhc2FyWyh0aGlzLnJpZ2h0U2lkZSA/ICdyaWdodCcgOiAnbGVmdCcpICsgJ0RyYXdlciddO1xuICB9XG59KTtcblxuJC5leHRlbmQodHJ1ZSwgcXVhc2FyLCB7XG4gIGNsb3NlOiB7XG4gICAgZHJhd2VyczogZnVuY3Rpb24oZm4pIHtcbiAgICAgIGlmIChxdWFzYXIubGVmdERyYXdlciAmJiBxdWFzYXIubGVmdERyYXdlci5vcGVuZWQpIHtcbiAgICAgICAgcXVhc2FyLmxlZnREcmF3ZXIuY2xvc2UoZm4pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocXVhc2FyLnJpZ2h0RHJhd2VyICYmIHF1YXNhci5yaWdodERyYXdlci5vcGVuZWQpIHtcbiAgICAgICAgcXVhc2FyLnJpZ2h0RHJhd2VyLmNsb3NlKGZuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnZHJhd2VyLWxpbmsnLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZS5maW5kKCcjZHJhd2VyLWxpbmsnKS5odG1sKCksXG4gIHByb3BzOiBbJ3BhZ2UnLCAncm91dGUnXSxcbiAgbWV0aG9kczoge1xuICAgIGxhdW5jaDogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgcXVhc2FyLmNsb3NlLmRyYXdlcnMoZnVuY3Rpb24oKSB7XG4gICAgICAgIGhhbmRsZXIodGhpcy5yb3V0ZSB8fCB0aGlzLnBhZ2UpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZUNvbXBpbGU6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghdGhpcy5wYWdlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEcmF3ZXIgbGluayBtaXNzaW5nIHBhZ2UgYXR0cmlidXRlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBhZ2UgPSBxdWFzYXIuZGF0YS5tYW5pZmVzdC5wYWdlc1t0aGlzLnBhZ2VdO1xuXG4gICAgaWYgKCFwYWdlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEcmF3ZXIgbGluayBwb2ludHMgdG8gdW5hdmFpbGFibGUgcGFnZSBcIicgKyB0aGlzLnBhZ2UgKyAnXCInKTtcbiAgICB9XG5cbiAgICB0aGlzLmljb24gPSBwYWdlLmljb247XG4gICAgdGhpcy5sYWJlbCA9IHBhZ2UubGFiZWw7XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvZHJhd2VyL2RyYXdlci5qc1xuICoqIG1vZHVsZSBpZCA9IDUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 53 */
/***/ function(module, exports) {

	eval("module.exports = \"<templates>\\n\\n  <template id=\\\"drawer\\\">\\n    <div class=\\\"drawer\\\" :class=\\\"{'left-side': !rightSide, 'right-side': rightSide}\\\">\\n      <div class=\\\"drawer-opener touch-only mobile-only\\\" v-touch:pan-x=\\\"openByTouch\\\" :class=\\\"{'fixed-left': !rightSide, 'fixed-right': rightSide}\\\">&nbsp;</div>\\n      <div class=\\\"drawer-backdrop fullscreen\\\" @click=\\\"close()\\\" v-touch:pan-x=\\\"closeByTouch\\\"></div>\\n      <div class=\\\"drawer-content scroll\\\" v-touch:pan-x=\\\"closeByTouch\\\" :class=\\\"{'left-side': !rightSide, 'right-side': rightSide}\\\">\\n        <slot></slot>\\n      </div>\\n    </div>\\n  </template>\\n\\n  <template id=\\\"drawer-link\\\">\\n    <div class=\\\"item item-link\\\" v-page-link=\\\"launch\\\" v-active-page=\\\"page\\\">\\n      <i v-if=\\\"icon\\\">{{icon}}</i>\\n      <div class=\\\"item-content text-truncate\\\">{{label}}</div>\\n    </div>\\n  </template>\\n\\n</templates>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2RyYXdlci9kcmF3ZXIuaHRtbD8zMzM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlHQUFpRyxpREFBaUQsdUdBQXVHLG1EQUFtRCxTQUFTLHNNQUFzTSxpREFBaUQsbU5BQW1OLE1BQU0sd0RBQXdELE9BQU8iLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlcz5cXG5cXG4gIDx0ZW1wbGF0ZSBpZD1cXFwiZHJhd2VyXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZHJhd2VyXFxcIiA6Y2xhc3M9XFxcInsnbGVmdC1zaWRlJzogIXJpZ2h0U2lkZSwgJ3JpZ2h0LXNpZGUnOiByaWdodFNpZGV9XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJkcmF3ZXItb3BlbmVyIHRvdWNoLW9ubHkgbW9iaWxlLW9ubHlcXFwiIHYtdG91Y2g6cGFuLXg9XFxcIm9wZW5CeVRvdWNoXFxcIiA6Y2xhc3M9XFxcInsnZml4ZWQtbGVmdCc6ICFyaWdodFNpZGUsICdmaXhlZC1yaWdodCc6IHJpZ2h0U2lkZX1cXFwiPiZuYnNwOzwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImRyYXdlci1iYWNrZHJvcCBmdWxsc2NyZWVuXFxcIiBAY2xpY2s9XFxcImNsb3NlKClcXFwiIHYtdG91Y2g6cGFuLXg9XFxcImNsb3NlQnlUb3VjaFxcXCI+PC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZHJhd2VyLWNvbnRlbnQgc2Nyb2xsXFxcIiB2LXRvdWNoOnBhbi14PVxcXCJjbG9zZUJ5VG91Y2hcXFwiIDpjbGFzcz1cXFwieydsZWZ0LXNpZGUnOiAhcmlnaHRTaWRlLCAncmlnaHQtc2lkZSc6IHJpZ2h0U2lkZX1cXFwiPlxcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvdGVtcGxhdGU+XFxuXFxuICA8dGVtcGxhdGUgaWQ9XFxcImRyYXdlci1saW5rXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiaXRlbSBpdGVtLWxpbmtcXFwiIHYtcGFnZS1saW5rPVxcXCJsYXVuY2hcXFwiIHYtYWN0aXZlLXBhZ2U9XFxcInBhZ2VcXFwiPlxcbiAgICAgIDxpIHYtaWY9XFxcImljb25cXFwiPnt7aWNvbn19PC9pPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tY29udGVudCB0ZXh0LXRydW5jYXRlXFxcIj57e2xhYmVsfX08L2Rpdj5cXG4gICAgPC9kaXY+XFxuICA8L3RlbXBsYXRlPlxcblxcbjwvdGVtcGxhdGVzPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvZHJhd2VyL2RyYXdlci5odG1sXG4gKiogbW9kdWxlIGlkID0gNTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = $(__webpack_require__(55));\n\nVue.component('fab', {\n  template: template.find('#fab').html(),\n  props: {\n    type: {\n      type: Array,\n      default: function() {\n        return ['primary'];\n      },\n      coerce: function(value) {\n        return Array.isArray(value) || typeof value === 'undefined' ? value : value.split(' ');\n      }\n    },\n    icon: {\n      type: String,\n      default: 'add'\n    },\n    activeIcon: {\n      type: String,\n      default: 'close'\n    },\n    direction: {\n      type: String,\n      default: 'right'\n    },\n    click: {\n      type: Function\n    },\n    backdrop: {\n      type: Boolean,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    }\n  },\n  data: function() {\n    return {\n      opened: false\n    };\n  },\n  methods: {\n    toggle: function(fromBackdrop) {\n      this.opened = !this.opened;\n\n      if (!fromBackdrop && this.click && !this.opened) {\n        this.click();\n        return;\n      }\n    }\n  },\n  events: {\n    closeFAB: function() {\n      this.toggle(true);\n    }\n  }\n});\n\nVue.component('small-fab', {\n  template: template.find('#small-fab').html(),\n  methods: {\n    closeFAB: function() {\n      this.$dispatch('closeFAB');\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2ZhYi9mYWIuanM/NzYzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVtcGxhdGUgPSAkKHJlcXVpcmUoJ3JhdyEuL2ZhYi5odG1sJykpO1xuXG5WdWUuY29tcG9uZW50KCdmYWInLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZS5maW5kKCcjZmFiJykuaHRtbCgpLFxuICBwcm9wczoge1xuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbJ3ByaW1hcnknXTtcbiAgICAgIH0sXG4gICAgICBjb2VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gdmFsdWUgOiB2YWx1ZS5zcGxpdCgnICcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2FkZCdcbiAgICB9LFxuICAgIGFjdGl2ZUljb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdjbG9zZSdcbiAgICB9LFxuICAgIGRpcmVjdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3JpZ2h0J1xuICAgIH0sXG4gICAgY2xpY2s6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uXG4gICAgfSxcbiAgICBiYWNrZHJvcDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGNvZXJjZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW5lZDogZmFsc2VcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlOiBmdW5jdGlvbihmcm9tQmFja2Ryb3ApIHtcbiAgICAgIHRoaXMub3BlbmVkID0gIXRoaXMub3BlbmVkO1xuXG4gICAgICBpZiAoIWZyb21CYWNrZHJvcCAmJiB0aGlzLmNsaWNrICYmICF0aGlzLm9wZW5lZCkge1xuICAgICAgICB0aGlzLmNsaWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGV2ZW50czoge1xuICAgIGNsb3NlRkFCOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMudG9nZ2xlKHRydWUpO1xuICAgIH1cbiAgfVxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ3NtYWxsLWZhYicsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLmZpbmQoJyNzbWFsbC1mYWInKS5odG1sKCksXG4gIG1ldGhvZHM6IHtcbiAgICBjbG9zZUZBQjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRkaXNwYXRjaCgnY2xvc2VGQUInKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvZmFiL2ZhYi5qc1xuICoqIG1vZHVsZSBpZCA9IDU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 55 */
/***/ function(module, exports) {

	eval("module.exports = \"<templates>\\n  <template id=\\\"fab\\\">\\n    <div\\n      class=\\\"quasar-fab flex inline justify-center\\\"\\n      :class=\\\"{opened: opened, 'with-backdrop': click || backdrop}\\\"\\n    >\\n      <div v-if=\\\"click || backdrop\\\" class=\\\"backdrop\\\" @click=\\\"toggle(true)\\\"></div>\\n      <button class=\\\"circular raised\\\" @click=\\\"toggle()\\\" :class=\\\"type\\\">\\n        <i class=\\\"quasar-fab-icon\\\">{{icon}}</i>\\n        <i class=\\\"quasar-fab-active-icon\\\">{{activeIcon}}</i>\\n      </button>\\n      <div class=\\\"quasar-fab-actions flex inline items-center\\\" :class=\\\"[direction]\\\">\\n        <slot></slot>\\n      </div>\\n    </div>\\n  </template>\\n\\n  <template id=\\\"small-fab\\\">\\n    <button class=\\\"circular small raised\\\" @click=\\\"closeFAB()\\\">\\n      <i><slot></slot></i>\\n    </button>\\n  </template>\\n</templates>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2ZhYi9mYWIuaHRtbD9iMmFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlJQUF5SSxtREFBbUQseU5BQXlOLE1BQU0sb0RBQW9ELFlBQVkiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlcz5cXG4gIDx0ZW1wbGF0ZSBpZD1cXFwiZmFiXFxcIj5cXG4gICAgPGRpdlxcbiAgICAgIGNsYXNzPVxcXCJxdWFzYXItZmFiIGZsZXggaW5saW5lIGp1c3RpZnktY2VudGVyXFxcIlxcbiAgICAgIDpjbGFzcz1cXFwie29wZW5lZDogb3BlbmVkLCAnd2l0aC1iYWNrZHJvcCc6IGNsaWNrIHx8IGJhY2tkcm9wfVxcXCJcXG4gICAgPlxcbiAgICAgIDxkaXYgdi1pZj1cXFwiY2xpY2sgfHwgYmFja2Ryb3BcXFwiIGNsYXNzPVxcXCJiYWNrZHJvcFxcXCIgQGNsaWNrPVxcXCJ0b2dnbGUodHJ1ZSlcXFwiPjwvZGl2PlxcbiAgICAgIDxidXR0b24gY2xhc3M9XFxcImNpcmN1bGFyIHJhaXNlZFxcXCIgQGNsaWNrPVxcXCJ0b2dnbGUoKVxcXCIgOmNsYXNzPVxcXCJ0eXBlXFxcIj5cXG4gICAgICAgIDxpIGNsYXNzPVxcXCJxdWFzYXItZmFiLWljb25cXFwiPnt7aWNvbn19PC9pPlxcbiAgICAgICAgPGkgY2xhc3M9XFxcInF1YXNhci1mYWItYWN0aXZlLWljb25cXFwiPnt7YWN0aXZlSWNvbn19PC9pPlxcbiAgICAgIDwvYnV0dG9uPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInF1YXNhci1mYWItYWN0aW9ucyBmbGV4IGlubGluZSBpdGVtcy1jZW50ZXJcXFwiIDpjbGFzcz1cXFwiW2RpcmVjdGlvbl1cXFwiPlxcbiAgICAgICAgPHNsb3Q+PC9zbG90PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIDwvdGVtcGxhdGU+XFxuXFxuICA8dGVtcGxhdGUgaWQ9XFxcInNtYWxsLWZhYlxcXCI+XFxuICAgIDxidXR0b24gY2xhc3M9XFxcImNpcmN1bGFyIHNtYWxsIHJhaXNlZFxcXCIgQGNsaWNrPVxcXCJjbG9zZUZBQigpXFxcIj5cXG4gICAgICA8aT48c2xvdD48L3Nsb3Q+PC9pPlxcbiAgICA8L2J1dHRvbj5cXG4gIDwvdGVtcGxhdGU+XFxuPC90ZW1wbGF0ZXM+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9mYWIvZmFiLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA1NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  galleryTemplate = __webpack_require__(57),\n  gallerySliderTemplate = __webpack_require__(58)\n  ;\n\nVue.component('gallery', {\n  template: galleryTemplate,\n  props: {\n    src: {\n      type: Array,\n      required: true\n    },\n    width: {\n      type: String,\n      default: '150px'\n    }\n  }\n});\n\nVue.component('gallery-slider', {\n  template: gallerySliderTemplate,\n  props: {\n    src: {\n      type: Array,\n      required: true\n    }\n  },\n  data: function() {\n    return {\n      quickView: false\n    };\n  },\n  methods: {\n    toggleQuickView: function() {\n      this.quickView = !this.quickView;\n    },\n    selectImage: function(index) {\n      this.$refs.slider.goToSlide(index, true);\n      this.toggleQuickView();\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2dhbGxlcnkvZ2FsbGVyeS5qcz9lMmNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICBnYWxsZXJ5VGVtcGxhdGUgPSByZXF1aXJlKCdyYXchLi9nYWxsZXJ5Lmh0bWwnKSxcbiAgZ2FsbGVyeVNsaWRlclRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vZ2FsbGVyeS1zbGlkZXIuaHRtbCcpXG4gIDtcblxuVnVlLmNvbXBvbmVudCgnZ2FsbGVyeScsIHtcbiAgdGVtcGxhdGU6IGdhbGxlcnlUZW1wbGF0ZSxcbiAgcHJvcHM6IHtcbiAgICBzcmM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnMTUwcHgnXG4gICAgfVxuICB9XG59KTtcblxuVnVlLmNvbXBvbmVudCgnZ2FsbGVyeS1zbGlkZXInLCB7XG4gIHRlbXBsYXRlOiBnYWxsZXJ5U2xpZGVyVGVtcGxhdGUsXG4gIHByb3BzOiB7XG4gICAgc3JjOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcXVpY2tWaWV3OiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB0b2dnbGVRdWlja1ZpZXc6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5xdWlja1ZpZXcgPSAhdGhpcy5xdWlja1ZpZXc7XG4gICAgfSxcbiAgICBzZWxlY3RJbWFnZTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHRoaXMuJHJlZnMuc2xpZGVyLmdvVG9TbGlkZShpbmRleCwgdHJ1ZSk7XG4gICAgICB0aGlzLnRvZ2dsZVF1aWNrVmlldygpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnkuanNcbiAqKiBtb2R1bGUgaWQgPSA1NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 57 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-gallery\\\">\\n  <div\\n    v-for=\\\"img in src\\\"\\n    track-by=\\\"$index\\\"\\n    :style=\\\"{width: width}\\\"\\n  >\\n    <img :src=\\\"img\\\">\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2dhbGxlcnkvZ2FsbGVyeS5odG1sPzA0MGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkhBQTJILGFBQWEiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLWdhbGxlcnlcXFwiPlxcbiAgPGRpdlxcbiAgICB2LWZvcj1cXFwiaW1nIGluIHNyY1xcXCJcXG4gICAgdHJhY2stYnk9XFxcIiRpbmRleFxcXCJcXG4gICAgOnN0eWxlPVxcXCJ7d2lkdGg6IHdpZHRofVxcXCJcXG4gID5cXG4gICAgPGltZyA6c3JjPVxcXCJpbWdcXFwiPlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9nYWxsZXJ5L2dhbGxlcnkuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDU3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 58 */
/***/ function(module, exports) {

	eval("module.exports = \"<slider v-ref:slider arrows fullscreen class=\\\"text-white bg-black quasar-gallery-slider\\\">\\n  <div\\n    v-for=\\\"img in src\\\"\\n    track-by=\\\"$index\\\"\\n    slot=\\\"slide\\\"\\n    class=\\\"no-padding flex items-center justify-center\\\"\\n  >\\n    <div>\\n      <img :src=\\\"img\\\">\\n    </div>\\n  </div>\\n\\n  <i slot=\\\"action\\\" @click=\\\"toggleQuickView()\\\">view_carousel</i>\\n\\n  <div\\n    class=\\\"quasar-gallery-slider-quickview\\\"\\n    :class=\\\"{active: quickView}\\\"\\n  >\\n    <div v-for=\\\"img in src\\\" track-by=\\\"$index\\\">\\n      <img\\n        :src=\\\"img\\\"\\n        :class=\\\"{active: $refs.slider.slide === $index}\\\"\\n        @click=\\\"selectImage($index)\\\"\\n      >\\n    </div>\\n  </div>\\n</slider>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2dhbGxlcnkvZ2FsbGVyeS1zbGlkZXIuaHRtbD8xYzk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVjQUF1YyxrQkFBa0IsaUhBQWlILHNDQUFzQyIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c2xpZGVyIHYtcmVmOnNsaWRlciBhcnJvd3MgZnVsbHNjcmVlbiBjbGFzcz1cXFwidGV4dC13aGl0ZSBiZy1ibGFjayBxdWFzYXItZ2FsbGVyeS1zbGlkZXJcXFwiPlxcbiAgPGRpdlxcbiAgICB2LWZvcj1cXFwiaW1nIGluIHNyY1xcXCJcXG4gICAgdHJhY2stYnk9XFxcIiRpbmRleFxcXCJcXG4gICAgc2xvdD1cXFwic2xpZGVcXFwiXFxuICAgIGNsYXNzPVxcXCJuby1wYWRkaW5nIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXFxcIlxcbiAgPlxcbiAgICA8ZGl2PlxcbiAgICAgIDxpbWcgOnNyYz1cXFwiaW1nXFxcIj5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cXG5cXG4gIDxpIHNsb3Q9XFxcImFjdGlvblxcXCIgQGNsaWNrPVxcXCJ0b2dnbGVRdWlja1ZpZXcoKVxcXCI+dmlld19jYXJvdXNlbDwvaT5cXG5cXG4gIDxkaXZcXG4gICAgY2xhc3M9XFxcInF1YXNhci1nYWxsZXJ5LXNsaWRlci1xdWlja3ZpZXdcXFwiXFxuICAgIDpjbGFzcz1cXFwie2FjdGl2ZTogcXVpY2tWaWV3fVxcXCJcXG4gID5cXG4gICAgPGRpdiB2LWZvcj1cXFwiaW1nIGluIHNyY1xcXCIgdHJhY2stYnk9XFxcIiRpbmRleFxcXCI+XFxuICAgICAgPGltZ1xcbiAgICAgICAgOnNyYz1cXFwiaW1nXFxcIlxcbiAgICAgICAgOmNsYXNzPVxcXCJ7YWN0aXZlOiAkcmVmcy5zbGlkZXIuc2xpZGUgPT09ICRpbmRleH1cXFwiXFxuICAgICAgICBAY2xpY2s9XFxcInNlbGVjdEltYWdlKCRpbmRleClcXFwiXFxuICAgICAgPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2Plxcbjwvc2xpZGVyPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvZ2FsbGVyeS9nYWxsZXJ5LXNsaWRlci5odG1sXG4gKiogbW9kdWxlIGlkID0gNThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  template = __webpack_require__(60),\n  tableTemplate = __webpack_require__(61),\n  defaultRowsPerPage = [\n    {label: '5', value: 5},\n    {label: '10', value: 10},\n    {label: '15', value: 15},\n    {label: '25', value: 25},\n    {label: '50', value: 50},\n    {label: '100', value: 100},\n    {label: 'No pagination', value: 0}\n  ];\n\nfunction getRowsPerPageOption(rowsPerPage) {\n  if (defaultRowsPerPage.find(function(column) { return column.value === rowsPerPage; })) {\n    return defaultRowsPerPage;\n  }\n\n  var options = defaultRowsPerPage.slice(0);\n\n  options.unshift({\n    label: '' + rowsPerPage,\n    value: rowsPerPage\n  });\n\n  return options;\n}\n\nfunction getColumnsFieldArray(columns) {\n  return columns.map(function(column) {\n    return column.field;\n  });\n}\n\nVue.filter('gridShowSelected', function(data, filter, selectionMode, singleSelection) {\n  if (!filter || selectionMode === 'none') {\n    return data;\n  }\n\n  if (selectionMode === 'single') {\n    return singleSelection;\n  }\n\n  return data.filter(function(row) {\n    return row.__selected;\n  });\n});\n\nVue.component('grid', {\n  template: template,\n  props: {\n    columns: {\n      type: Array,\n      required: true\n    },\n    data: {\n      type: Array,\n      required: true\n    },\n    rowsPerPage: {\n      type: Number,\n      default: 5\n    },\n    sortable: {\n      type: Boolean,\n      default: true,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    },\n    noDataLabel: {\n      type: String,\n      default: 'No data to display.'\n    },\n    idProperty: String,\n    selectionMode: {\n      type: String,\n      default: 'none',\n      coerce: function(value) {\n        return value === 'single' || value === 'multiple' ? value : 'none';\n      }\n    },\n    selectionActions: Array\n  },\n  data: function() {\n    return {\n      searchQuery: '',\n      showOnlySelected: false,\n      singleSelection: []\n    };\n  },\n  watch: {\n    searchQuery: function() {\n      this.$refs.table.page = 1;\n    },\n    showOnlySelected: function() {\n      this.$refs.table.page = 1;\n    }\n  },\n  events: {\n    'toggle-selection': function() {\n      this.showOnlySelected = !this.showOnlySelected;\n    },\n    'filter': function(value) {\n      this.searchQuery = value;\n    },\n    'set-single-selection': function(value) {\n      this.singleSelection = value;\n    }\n  }\n});\n\nVue.component('grid-table', {\n  template: tableTemplate,\n  props: ['data', 'columns', 'rowsPerPage', 'sortable', 'noDataLabel', 'idProperty', 'selectionMode', 'selectionActions'],\n  data: function() {\n    var rowsPerPage = this.rowsPerPage;\n    var chosenColumns = this.getChosenColumn();\n\n    return {\n      page: 1,\n      rowsPerPageOptions: getRowsPerPageOption(rowsPerPage),\n      sortField: '',\n      sortOrder: 1,\n      chosenColumnsModel: chosenColumns,\n      singleSelectedRow: null,\n      searchQuery: '',\n      controls: '',\n      showOnlySelected: false\n    };\n  },\n  computed: {\n    rowsNumber: function() {\n      return this.data.length;\n    },\n    pagesNumber: function() {\n      return Math.ceil(this.data.length / this.rowsPerPage);\n    },\n    chosenColumnsOptions: function() {\n      return this.columns.map(function(column) {\n        return {\n          label: column.label,\n          value: column.field\n        };\n      });\n    },\n    computedRowsPerPage: function() {\n      return this.rowsPerPage ? this.rowsPerPage : Infinity;\n    },\n    rowOffset: function() {\n      return this.rowsPerPage * (this.page - 1);\n    },\n    selectedRows: function() {\n      if (this.selectionMode === 'single') {\n        return this.singleSelectedRow ? [this.singleSelectedRow] : [];\n      }\n      return this.data.filter(function(row) {\n        return row.__selected === true;\n      });\n    },\n    actionsModel: function() {\n      var index = -1;\n\n      return this.selectionActions.map(function(item) {\n        return {\n          label: item.label,\n          value: ++index\n        };\n      });\n    }\n  },\n  watch: {\n    rowsPerPage: function(value) {\n      this.page = 1;\n    },\n    chosenColumnsModel: function(options) {\n      for (var i = 0; i < this.columns.length; i++) {\n        this.columns.$set(i, $.extend({}, this.columns[i], {\n          hidden: !options.includes(this.columns[i].field)\n        }));\n      }\n    },\n    searchQuery: function(value) {\n      this.$dispatch('filter', value);\n    },\n    showOnlySelected: function(value) {\n      this.$dispatch('toggle-selection');\n    },\n    singleSelectedRow: function(value) {\n      this.$dispatch('set-single-selection', [value]);\n    }\n  },\n  methods: {\n    goToPageByOffset: function(pageOffset) {\n      this.page = Math.min(this.pagesNumber, Math.max(1, this.page + pageOffset));\n    },\n    sortBy: function(field) {\n      if (!this.sortable) {\n        return;\n      }\n\n      // if sort field got changed\n      if (this.sortField !== field) {\n        this.sortOrder = 1;\n        this.sortField = field;\n        return;\n      }\n\n      // else we sort on same field\n      if (this.sortOrder === -1) {\n        this.sortField = '';\n      }\n      else {\n        this.sortOrder = -1;\n      }\n    },\n    getChosenColumn: function() {\n      return this.columns.filter(function(column) {\n        return column.hidden !== true;\n      }).map(function(column) {\n        return column.field;\n      });\n    },\n    clearSelection: function() {\n      if (this.selectionMode === 'single') {\n        this.singleSelectedRow = null;\n      }\n      else {\n        this.data.forEach(function(row) {\n          if (row.hasOwnProperty('__selected')) {\n            row.__selected = false;\n          }\n        });\n      }\n\n      this.showOnlySelected = false;\n    },\n    clearFilter: function() {\n      this.searchQuery = '';\n      this.controls = '';\n    },\n    toggleControls: function(mode) {\n      this.controls = this.controls === mode ? '' : mode;\n    },\n    chooseAction: function() {\n      var\n        options = this.actionsModel,\n        selectedRows = this.selectedRows,\n        actions = this.selectionActions\n        ;\n\n      if (selectedRows.length === 0) {\n        return;\n      }\n\n      quasar.dialog({\n        title: 'Actions',\n        message: 'Apply action for the ' + selectedRows.length + ' selected row(s).',\n        radios: options,\n        buttons: [\n          'Cancel',\n          {\n            label: 'Apply',\n            handler: function(data) {\n              actions[data].handler(selectedRows);\n            }\n          }\n        ]\n      });\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 60 */
/***/ function(module, exports) {

	eval("module.exports = \"<grid-table\\n  v-ref:table\\n  class=\\\"quasar-grid\\\"\\n  :data=\\\"data | gridShowSelected showOnlySelected selectionMode singleSelection | filterBy searchQuery\\\"\\n  :columns=\\\"columns\\\"\\n  :rows-per-page=\\\"rowsPerPage\\\"\\n  :sortable=\\\"sortable\\\"\\n  :selection-mode=\\\"selectionMode\\\"\\n  :selection-actions=\\\"selectionActions\\\"\\n  :no-data-label=\\\"noDataLabel\\\"\\n  :id-property=\\\"idProperty\\\"\\n></grid-table>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2dyaWQvZ3JpZC5odG1sPzBmNTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGdyaWQtdGFibGVcXG4gIHYtcmVmOnRhYmxlXFxuICBjbGFzcz1cXFwicXVhc2FyLWdyaWRcXFwiXFxuICA6ZGF0YT1cXFwiZGF0YSB8IGdyaWRTaG93U2VsZWN0ZWQgc2hvd09ubHlTZWxlY3RlZCBzZWxlY3Rpb25Nb2RlIHNpbmdsZVNlbGVjdGlvbiB8IGZpbHRlckJ5IHNlYXJjaFF1ZXJ5XFxcIlxcbiAgOmNvbHVtbnM9XFxcImNvbHVtbnNcXFwiXFxuICA6cm93cy1wZXItcGFnZT1cXFwicm93c1BlclBhZ2VcXFwiXFxuICA6c29ydGFibGU9XFxcInNvcnRhYmxlXFxcIlxcbiAgOnNlbGVjdGlvbi1tb2RlPVxcXCJzZWxlY3Rpb25Nb2RlXFxcIlxcbiAgOnNlbGVjdGlvbi1hY3Rpb25zPVxcXCJzZWxlY3Rpb25BY3Rpb25zXFxcIlxcbiAgOm5vLWRhdGEtbGFiZWw9XFxcIm5vRGF0YUxhYmVsXFxcIlxcbiAgOmlkLXByb3BlcnR5PVxcXCJpZFByb3BlcnR5XFxcIlxcbj48L2dyaWQtdGFibGU+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9ncmlkL2dyaWQuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDYwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 61 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-grid-table\\\">\\n  <div class=\\\"grid-top-controls sm-column gt-sm-row items-center justify-end\\\">\\n    <div class=\\\"auto sm-order-last self-center\\\">\\n      <div v-show=\\\"selectionMode !== 'none' && controls === ''\\\" transition=\\\"slide\\\">\\n        Selected {{selectedRows.length}} rows.\\n      </div>\\n      <div v-show=\\\"selectionMode !== 'none' && controls === 'selection'\\\" transition=\\\"slide\\\">\\n        <div class=\\\"group\\\">\\n          <button :class=\\\"{disabled: selectedRows.length === 0}\\\" class=\\\"primary clear small\\\" @click=\\\"chooseAction()\\\"><i>menu</i></button>\\n          <button :class=\\\"{disabled: selectedRows.length === 0}\\\" class=\\\"primary clear small\\\" @click=\\\"clearSelection()\\\"><i>cancel</i></button>\\n        </div>\\n        <label><checkbox :model.sync=\\\"showOnlySelected\\\"></checkbox> Selected only</label>\\n      </div>\\n      <div v-show=\\\"controls === 'filter'\\\" transition=\\\"slide\\\">\\n        Filter:\\n        <input v-model=\\\"searchQuery\\\" type=\\\"text\\\" :debounce=\\\"350\\\">\\n        <button class=\\\"primary clear small\\\" @click=\\\"clearFilter()\\\">\\n          <i>clear</i>\\n        </button>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <button\\n        class=\\\"primary\\\"\\n        :class=\\\"{'clear': controls !== 'filter'}\\\"\\n        @click=\\\"toggleControls('filter')\\\"\\n      >\\n        <i>search</i>\\n      </button>\\n\\n      <button\\n        v-if=\\\"selectionMode !== 'none'\\\"\\n        class=\\\"primary\\\"\\n        :class=\\\"{'clear': controls !== 'selection'}\\\"\\n        @click=\\\"toggleControls('selection')\\\"\\n      >\\n        <i>playlist_add_check</i>\\n      </button>\\n\\n      <choice\\n        :model.sync=\\\"rowsPerPage\\\"\\n        :options=\\\"rowsPerPageOptions\\\"\\n        ok-label=\\\"Change\\\"\\n        cancel-label=\\\"Cancel\\\"\\n        title=\\\"Rows per Page\\\"\\n        fixed-label=\\\"<i>format_list_numbered</i>\\\"\\n      ></choice>\\n\\n      <choice\\n        multiple\\n        :model.sync=\\\"chosenColumnsModel\\\"\\n        :options=\\\"chosenColumnsOptions\\\"\\n        ok-label=\\\"Select\\\"\\n        cancel-label=\\\"Cancel\\\"\\n        title=\\\"Visible Columns\\\"\\n        fixed-label=\\\"<i>view_column</i>\\\"\\n      ></choice>\\n    </div>\\n  </div>\\n\\n  <table class=\\\"striped highlight bordered compact\\\">\\n    <thead>\\n      <tr>\\n          <th v-if=\\\"selectionMode !== 'none'\\\" style=\\\"width: 30px; text-align: center\\\">\\n            &nbsp;\\n          </th>\\n          <th\\n            v-for=\\\"column in columns\\\"\\n            v-show=\\\"!column.hidden\\\"\\n            @click=\\\"sortBy(column.field)\\\"\\n            :class=\\\"{'sortable-column': sortable}\\\"\\n          >\\n            {{{column.label}}}\\n            <i v-show=\\\"sortField === column.field && sortOrder === -1\\\">keyboard_arrow_down</i>\\n            <i v-show=\\\"sortField === column.field && sortOrder === 1\\\">keyboard_arrow_up</i>\\n          </th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      <tr\\n        v-for=\\\"row in data | orderBy sortField sortOrder | limitBy computedRowsPerPage rowOffset\\\"\\n        :track-by=\\\"idProperty\\\"\\n      >\\n        <td v-if=\\\"selectionMode !== 'none'\\\">\\n          <radio v-if=\\\"selectionMode === 'single'\\\" :model.sync=\\\"singleSelectedRow\\\" :value=\\\"row\\\"></radio>\\n          <checkbox v-else :model.sync=\\\"row.__selected\\\"></checkbox>\\n        </td>\\n        <td\\n          v-for=\\\"column in columns\\\"\\n          v-if=\\\"!column.hidden\\\"\\n          :style=\\\"column.style\\\"\\n          :class=\\\"column.classes\\\"\\n        >\\n        {{column.hidden === true ? 'hid' : 'vis'}}\\n          {{{column.formatter ? column.formatter(row[column.field]) : row[column.field]}}}\\n        </td>\\n      </tr>\\n    </tbody>\\n\\n    <tfoot v-show=\\\"computedRowsPerPage > 10\\\">\\n      <tr>\\n          <th v-if=\\\"selectionMode !== 'none'\\\">\\n            &nbsp;\\n          </th>\\n          <th\\n            v-for=\\\"column in columns\\\"\\n            v-show=\\\"!column.hidden\\\"\\n            @click=\\\"sortBy(column.field)\\\"\\n            :class=\\\"{'sortable-column': sortable}\\\"\\n          >\\n            {{{column.label}}}\\n            <i v-show=\\\"sortField === column.field && sortOrder === -1\\\">keyboard_arrow_down</i>\\n            <i v-show=\\\"sortField === column.field && sortOrder === 1\\\">keyboard_arrow_up</i>\\n          </th>\\n      </tr>\\n    </tfoot>\\n  </table>\\n\\n  <div class=\\\"grid-bottom-controls sm-column gt-sm-row items-center\\\">\\n    <div class=\\\"auto\\\" v-show=\\\"data.length > 0\\\">\\n      Showing {{rowOffset + 1}} to {{Math.min(rowsNumber, rowsPerPage * page)}} of {{rowsNumber}} entries\\n    </div>\\n    <div class=\\\"auto\\\" v-else>\\n      {{noDataLabel}}\\n    </div>\\n\\n    <pagination :model.sync=\\\"page\\\" :max=\\\"pagesNumber\\\" v-show=\\\"rowsPerPage !== 0 && rowsNumber > 0\\\"></pagination>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2dyaWQvZ3JpZC10YWJsZS5odG1sP2I2MjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdVNBQXVTLHFCQUFxQixtTEFBbUwsb0NBQW9DLDZHQUE2RyxvQ0FBb0Msa2xCQUFrbEIsK0JBQStCLDJNQUEyTSxrQ0FBa0MsNHpCQUE0ekIsMENBQTBDLHFMQUFxTCw0QkFBNEIsZ0NBQWdDLGVBQWUsbTBCQUFtMEIsd0NBQXdDLGVBQWUsNkVBQTZFLCtLQUErSyxxTEFBcUwsNEJBQTRCLGdDQUFnQyxlQUFlLDJZQUEyWSxlQUFlLE1BQU0sMENBQTBDLE1BQU0sWUFBWSwrREFBK0QsYUFBYSIsImZpbGUiOiI2MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJxdWFzYXItZ3JpZC10YWJsZVxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJncmlkLXRvcC1jb250cm9scyBzbS1jb2x1bW4gZ3Qtc20tcm93IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWVuZFxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImF1dG8gc20tb3JkZXItbGFzdCBzZWxmLWNlbnRlclxcXCI+XFxuICAgICAgPGRpdiB2LXNob3c9XFxcInNlbGVjdGlvbk1vZGUgIT09ICdub25lJyAmJiBjb250cm9scyA9PT0gJydcXFwiIHRyYW5zaXRpb249XFxcInNsaWRlXFxcIj5cXG4gICAgICAgIFNlbGVjdGVkIHt7c2VsZWN0ZWRSb3dzLmxlbmd0aH19IHJvd3MuXFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiB2LXNob3c9XFxcInNlbGVjdGlvbk1vZGUgIT09ICdub25lJyAmJiBjb250cm9scyA9PT0gJ3NlbGVjdGlvbidcXFwiIHRyYW5zaXRpb249XFxcInNsaWRlXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImdyb3VwXFxcIj5cXG4gICAgICAgICAgPGJ1dHRvbiA6Y2xhc3M9XFxcIntkaXNhYmxlZDogc2VsZWN0ZWRSb3dzLmxlbmd0aCA9PT0gMH1cXFwiIGNsYXNzPVxcXCJwcmltYXJ5IGNsZWFyIHNtYWxsXFxcIiBAY2xpY2s9XFxcImNob29zZUFjdGlvbigpXFxcIj48aT5tZW51PC9pPjwvYnV0dG9uPlxcbiAgICAgICAgICA8YnV0dG9uIDpjbGFzcz1cXFwie2Rpc2FibGVkOiBzZWxlY3RlZFJvd3MubGVuZ3RoID09PSAwfVxcXCIgY2xhc3M9XFxcInByaW1hcnkgY2xlYXIgc21hbGxcXFwiIEBjbGljaz1cXFwiY2xlYXJTZWxlY3Rpb24oKVxcXCI+PGk+Y2FuY2VsPC9pPjwvYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8bGFiZWw+PGNoZWNrYm94IDptb2RlbC5zeW5jPVxcXCJzaG93T25seVNlbGVjdGVkXFxcIj48L2NoZWNrYm94PiBTZWxlY3RlZCBvbmx5PC9sYWJlbD5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IHYtc2hvdz1cXFwiY29udHJvbHMgPT09ICdmaWx0ZXInXFxcIiB0cmFuc2l0aW9uPVxcXCJzbGlkZVxcXCI+XFxuICAgICAgICBGaWx0ZXI6XFxuICAgICAgICA8aW5wdXQgdi1tb2RlbD1cXFwic2VhcmNoUXVlcnlcXFwiIHR5cGU9XFxcInRleHRcXFwiIDpkZWJvdW5jZT1cXFwiMzUwXFxcIj5cXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcInByaW1hcnkgY2xlYXIgc21hbGxcXFwiIEBjbGljaz1cXFwiY2xlYXJGaWx0ZXIoKVxcXCI+XFxuICAgICAgICAgIDxpPmNsZWFyPC9pPlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICAgIDxidXR0b25cXG4gICAgICAgIGNsYXNzPVxcXCJwcmltYXJ5XFxcIlxcbiAgICAgICAgOmNsYXNzPVxcXCJ7J2NsZWFyJzogY29udHJvbHMgIT09ICdmaWx0ZXInfVxcXCJcXG4gICAgICAgIEBjbGljaz1cXFwidG9nZ2xlQ29udHJvbHMoJ2ZpbHRlcicpXFxcIlxcbiAgICAgID5cXG4gICAgICAgIDxpPnNlYXJjaDwvaT5cXG4gICAgICA8L2J1dHRvbj5cXG5cXG4gICAgICA8YnV0dG9uXFxuICAgICAgICB2LWlmPVxcXCJzZWxlY3Rpb25Nb2RlICE9PSAnbm9uZSdcXFwiXFxuICAgICAgICBjbGFzcz1cXFwicHJpbWFyeVxcXCJcXG4gICAgICAgIDpjbGFzcz1cXFwieydjbGVhcic6IGNvbnRyb2xzICE9PSAnc2VsZWN0aW9uJ31cXFwiXFxuICAgICAgICBAY2xpY2s9XFxcInRvZ2dsZUNvbnRyb2xzKCdzZWxlY3Rpb24nKVxcXCJcXG4gICAgICA+XFxuICAgICAgICA8aT5wbGF5bGlzdF9hZGRfY2hlY2s8L2k+XFxuICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgPGNob2ljZVxcbiAgICAgICAgOm1vZGVsLnN5bmM9XFxcInJvd3NQZXJQYWdlXFxcIlxcbiAgICAgICAgOm9wdGlvbnM9XFxcInJvd3NQZXJQYWdlT3B0aW9uc1xcXCJcXG4gICAgICAgIG9rLWxhYmVsPVxcXCJDaGFuZ2VcXFwiXFxuICAgICAgICBjYW5jZWwtbGFiZWw9XFxcIkNhbmNlbFxcXCJcXG4gICAgICAgIHRpdGxlPVxcXCJSb3dzIHBlciBQYWdlXFxcIlxcbiAgICAgICAgZml4ZWQtbGFiZWw9XFxcIjxpPmZvcm1hdF9saXN0X251bWJlcmVkPC9pPlxcXCJcXG4gICAgICA+PC9jaG9pY2U+XFxuXFxuICAgICAgPGNob2ljZVxcbiAgICAgICAgbXVsdGlwbGVcXG4gICAgICAgIDptb2RlbC5zeW5jPVxcXCJjaG9zZW5Db2x1bW5zTW9kZWxcXFwiXFxuICAgICAgICA6b3B0aW9ucz1cXFwiY2hvc2VuQ29sdW1uc09wdGlvbnNcXFwiXFxuICAgICAgICBvay1sYWJlbD1cXFwiU2VsZWN0XFxcIlxcbiAgICAgICAgY2FuY2VsLWxhYmVsPVxcXCJDYW5jZWxcXFwiXFxuICAgICAgICB0aXRsZT1cXFwiVmlzaWJsZSBDb2x1bW5zXFxcIlxcbiAgICAgICAgZml4ZWQtbGFiZWw9XFxcIjxpPnZpZXdfY29sdW1uPC9pPlxcXCJcXG4gICAgICA+PC9jaG9pY2U+XFxuICAgIDwvZGl2PlxcbiAgPC9kaXY+XFxuXFxuICA8dGFibGUgY2xhc3M9XFxcInN0cmlwZWQgaGlnaGxpZ2h0IGJvcmRlcmVkIGNvbXBhY3RcXFwiPlxcbiAgICA8dGhlYWQ+XFxuICAgICAgPHRyPlxcbiAgICAgICAgICA8dGggdi1pZj1cXFwic2VsZWN0aW9uTW9kZSAhPT0gJ25vbmUnXFxcIiBzdHlsZT1cXFwid2lkdGg6IDMwcHg7IHRleHQtYWxpZ246IGNlbnRlclxcXCI+XFxuICAgICAgICAgICAgJm5ic3A7XFxuICAgICAgICAgIDwvdGg+XFxuICAgICAgICAgIDx0aFxcbiAgICAgICAgICAgIHYtZm9yPVxcXCJjb2x1bW4gaW4gY29sdW1uc1xcXCJcXG4gICAgICAgICAgICB2LXNob3c9XFxcIiFjb2x1bW4uaGlkZGVuXFxcIlxcbiAgICAgICAgICAgIEBjbGljaz1cXFwic29ydEJ5KGNvbHVtbi5maWVsZClcXFwiXFxuICAgICAgICAgICAgOmNsYXNzPVxcXCJ7J3NvcnRhYmxlLWNvbHVtbic6IHNvcnRhYmxlfVxcXCJcXG4gICAgICAgICAgPlxcbiAgICAgICAgICAgIHt7e2NvbHVtbi5sYWJlbH19fVxcbiAgICAgICAgICAgIDxpIHYtc2hvdz1cXFwic29ydEZpZWxkID09PSBjb2x1bW4uZmllbGQgJiYgc29ydE9yZGVyID09PSAtMVxcXCI+a2V5Ym9hcmRfYXJyb3dfZG93bjwvaT5cXG4gICAgICAgICAgICA8aSB2LXNob3c9XFxcInNvcnRGaWVsZCA9PT0gY29sdW1uLmZpZWxkICYmIHNvcnRPcmRlciA9PT0gMVxcXCI+a2V5Ym9hcmRfYXJyb3dfdXA8L2k+XFxuICAgICAgICAgIDwvdGg+XFxuICAgICAgPC90cj5cXG4gICAgPC90aGVhZD5cXG5cXG4gICAgPHRib2R5PlxcbiAgICAgIDx0clxcbiAgICAgICAgdi1mb3I9XFxcInJvdyBpbiBkYXRhIHwgb3JkZXJCeSBzb3J0RmllbGQgc29ydE9yZGVyIHwgbGltaXRCeSBjb21wdXRlZFJvd3NQZXJQYWdlIHJvd09mZnNldFxcXCJcXG4gICAgICAgIDp0cmFjay1ieT1cXFwiaWRQcm9wZXJ0eVxcXCJcXG4gICAgICA+XFxuICAgICAgICA8dGQgdi1pZj1cXFwic2VsZWN0aW9uTW9kZSAhPT0gJ25vbmUnXFxcIj5cXG4gICAgICAgICAgPHJhZGlvIHYtaWY9XFxcInNlbGVjdGlvbk1vZGUgPT09ICdzaW5nbGUnXFxcIiA6bW9kZWwuc3luYz1cXFwic2luZ2xlU2VsZWN0ZWRSb3dcXFwiIDp2YWx1ZT1cXFwicm93XFxcIj48L3JhZGlvPlxcbiAgICAgICAgICA8Y2hlY2tib3ggdi1lbHNlIDptb2RlbC5zeW5jPVxcXCJyb3cuX19zZWxlY3RlZFxcXCI+PC9jaGVja2JveD5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgICA8dGRcXG4gICAgICAgICAgdi1mb3I9XFxcImNvbHVtbiBpbiBjb2x1bW5zXFxcIlxcbiAgICAgICAgICB2LWlmPVxcXCIhY29sdW1uLmhpZGRlblxcXCJcXG4gICAgICAgICAgOnN0eWxlPVxcXCJjb2x1bW4uc3R5bGVcXFwiXFxuICAgICAgICAgIDpjbGFzcz1cXFwiY29sdW1uLmNsYXNzZXNcXFwiXFxuICAgICAgICA+XFxuICAgICAgICB7e2NvbHVtbi5oaWRkZW4gPT09IHRydWUgPyAnaGlkJyA6ICd2aXMnfX1cXG4gICAgICAgICAge3t7Y29sdW1uLmZvcm1hdHRlciA/IGNvbHVtbi5mb3JtYXR0ZXIocm93W2NvbHVtbi5maWVsZF0pIDogcm93W2NvbHVtbi5maWVsZF19fX1cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgPC90cj5cXG4gICAgPC90Ym9keT5cXG5cXG4gICAgPHRmb290IHYtc2hvdz1cXFwiY29tcHV0ZWRSb3dzUGVyUGFnZSA+IDEwXFxcIj5cXG4gICAgICA8dHI+XFxuICAgICAgICAgIDx0aCB2LWlmPVxcXCJzZWxlY3Rpb25Nb2RlICE9PSAnbm9uZSdcXFwiPlxcbiAgICAgICAgICAgICZuYnNwO1xcbiAgICAgICAgICA8L3RoPlxcbiAgICAgICAgICA8dGhcXG4gICAgICAgICAgICB2LWZvcj1cXFwiY29sdW1uIGluIGNvbHVtbnNcXFwiXFxuICAgICAgICAgICAgdi1zaG93PVxcXCIhY29sdW1uLmhpZGRlblxcXCJcXG4gICAgICAgICAgICBAY2xpY2s9XFxcInNvcnRCeShjb2x1bW4uZmllbGQpXFxcIlxcbiAgICAgICAgICAgIDpjbGFzcz1cXFwieydzb3J0YWJsZS1jb2x1bW4nOiBzb3J0YWJsZX1cXFwiXFxuICAgICAgICAgID5cXG4gICAgICAgICAgICB7e3tjb2x1bW4ubGFiZWx9fX1cXG4gICAgICAgICAgICA8aSB2LXNob3c9XFxcInNvcnRGaWVsZCA9PT0gY29sdW1uLmZpZWxkICYmIHNvcnRPcmRlciA9PT0gLTFcXFwiPmtleWJvYXJkX2Fycm93X2Rvd248L2k+XFxuICAgICAgICAgICAgPGkgdi1zaG93PVxcXCJzb3J0RmllbGQgPT09IGNvbHVtbi5maWVsZCAmJiBzb3J0T3JkZXIgPT09IDFcXFwiPmtleWJvYXJkX2Fycm93X3VwPC9pPlxcbiAgICAgICAgICA8L3RoPlxcbiAgICAgIDwvdHI+XFxuICAgIDwvdGZvb3Q+XFxuICA8L3RhYmxlPlxcblxcbiAgPGRpdiBjbGFzcz1cXFwiZ3JpZC1ib3R0b20tY29udHJvbHMgc20tY29sdW1uIGd0LXNtLXJvdyBpdGVtcy1jZW50ZXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJhdXRvXFxcIiB2LXNob3c9XFxcImRhdGEubGVuZ3RoID4gMFxcXCI+XFxuICAgICAgU2hvd2luZyB7e3Jvd09mZnNldCArIDF9fSB0byB7e01hdGgubWluKHJvd3NOdW1iZXIsIHJvd3NQZXJQYWdlICogcGFnZSl9fSBvZiB7e3Jvd3NOdW1iZXJ9fSBlbnRyaWVzXFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJhdXRvXFxcIiB2LWVsc2U+XFxuICAgICAge3tub0RhdGFMYWJlbH19XFxuICAgIDwvZGl2PlxcblxcbiAgICA8cGFnaW5hdGlvbiA6bW9kZWwuc3luYz1cXFwicGFnZVxcXCIgOm1heD1cXFwicGFnZXNOdW1iZXJcXFwiIHYtc2hvdz1cXFwicm93c1BlclBhZ2UgIT09IDAgJiYgcm93c051bWJlciA+IDBcXFwiPjwvcGFnaW5hdGlvbj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvZ3JpZC9ncmlkLXRhYmxlLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA2MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 62 */
/***/ function(module, exports) {

	eval("'use strict';\n\nfunction swipeLeft(event) {\n  if (event.type === 'panstart') {\n    this.swipeItem.css('z-index', '');\n  }\n\n  var delta = Math.min(\n    0,\n    Math.max(\n      -this.width,\n      this.opened ? event.deltaX - this.width : event.deltaX\n    )\n  );\n\n  if (event.type !== 'panend') {\n    this.element.css('transform', 'translateX(' + delta + 'px)');\n    return;\n  }\n\n  var changingState;\n\n  if (!this.opened) {\n    changingState = delta < -0.5 * this.width;\n    this.element.velocity(\n      {translateX: changingState ? [-this.width, delta] : [0, delta]},\n      {duration: 250}\n    );\n  }\n  else {\n    changingState = delta > -0.5 * this.width;\n    this.element.velocity(\n      {translateX: changingState ? [0, delta] : [-this.width, delta]},\n      {duration: 250}\n    );\n  }\n\n  if (changingState) {\n    this.opened = !this.opened;\n    this.swipeItem.css('z-index', this.opened ? '1' : '');\n  }\n}\n\nVue.directive('swipe-item', {\n  bind: function() {\n    this.element = $(this.el);\n    this.opened = false;\n    this.swipeItem = this.element.siblings('.item-swipe');\n    this.width = this.swipeItem.width();\n\n    this.hammer = Hammer(this.el) // eslint-disable-line\n      .set({direction: Hammer.DIRECTION_HORIZONTAL})\n      .on('panstart pan panend', swipeLeft.bind(this));\n  },\n  unbind: function() {\n    this.hammer.off('pan panend');\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL2xpc3QvbGlzdC5qcz85ODUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sOERBQThEO0FBQ3JFLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyw4REFBOEQ7QUFDckUsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLHVDQUF1QztBQUNuRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBzd2lwZUxlZnQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50LnR5cGUgPT09ICdwYW5zdGFydCcpIHtcbiAgICB0aGlzLnN3aXBlSXRlbS5jc3MoJ3otaW5kZXgnLCAnJyk7XG4gIH1cblxuICB2YXIgZGVsdGEgPSBNYXRoLm1pbihcbiAgICAwLFxuICAgIE1hdGgubWF4KFxuICAgICAgLXRoaXMud2lkdGgsXG4gICAgICB0aGlzLm9wZW5lZCA/IGV2ZW50LmRlbHRhWCAtIHRoaXMud2lkdGggOiBldmVudC5kZWx0YVhcbiAgICApXG4gICk7XG5cbiAgaWYgKGV2ZW50LnR5cGUgIT09ICdwYW5lbmQnKSB7XG4gICAgdGhpcy5lbGVtZW50LmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoJyArIGRlbHRhICsgJ3B4KScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGFuZ2luZ1N0YXRlO1xuXG4gIGlmICghdGhpcy5vcGVuZWQpIHtcbiAgICBjaGFuZ2luZ1N0YXRlID0gZGVsdGEgPCAtMC41ICogdGhpcy53aWR0aDtcbiAgICB0aGlzLmVsZW1lbnQudmVsb2NpdHkoXG4gICAgICB7dHJhbnNsYXRlWDogY2hhbmdpbmdTdGF0ZSA/IFstdGhpcy53aWR0aCwgZGVsdGFdIDogWzAsIGRlbHRhXX0sXG4gICAgICB7ZHVyYXRpb246IDI1MH1cbiAgICApO1xuICB9XG4gIGVsc2Uge1xuICAgIGNoYW5naW5nU3RhdGUgPSBkZWx0YSA+IC0wLjUgKiB0aGlzLndpZHRoO1xuICAgIHRoaXMuZWxlbWVudC52ZWxvY2l0eShcbiAgICAgIHt0cmFuc2xhdGVYOiBjaGFuZ2luZ1N0YXRlID8gWzAsIGRlbHRhXSA6IFstdGhpcy53aWR0aCwgZGVsdGFdfSxcbiAgICAgIHtkdXJhdGlvbjogMjUwfVxuICAgICk7XG4gIH1cblxuICBpZiAoY2hhbmdpbmdTdGF0ZSkge1xuICAgIHRoaXMub3BlbmVkID0gIXRoaXMub3BlbmVkO1xuICAgIHRoaXMuc3dpcGVJdGVtLmNzcygnei1pbmRleCcsIHRoaXMub3BlbmVkID8gJzEnIDogJycpO1xuICB9XG59XG5cblZ1ZS5kaXJlY3RpdmUoJ3N3aXBlLWl0ZW0nLCB7XG4gIGJpbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZWxlbWVudCA9ICQodGhpcy5lbCk7XG4gICAgdGhpcy5vcGVuZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN3aXBlSXRlbSA9IHRoaXMuZWxlbWVudC5zaWJsaW5ncygnLml0ZW0tc3dpcGUnKTtcbiAgICB0aGlzLndpZHRoID0gdGhpcy5zd2lwZUl0ZW0ud2lkdGgoKTtcblxuICAgIHRoaXMuaGFtbWVyID0gSGFtbWVyKHRoaXMuZWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIC5zZXQoe2RpcmVjdGlvbjogSGFtbWVyLkRJUkVDVElPTl9IT1JJWk9OVEFMfSlcbiAgICAgIC5vbigncGFuc3RhcnQgcGFuIHBhbmVuZCcsIHN3aXBlTGVmdC5iaW5kKHRoaXMpKTtcbiAgfSxcbiAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmhhbW1lci5vZmYoJ3BhbiBwYW5lbmQnKTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9saXN0L2xpc3QuanNcbiAqKiBtb2R1bGUgaWQgPSA2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 63 */
/***/ function(module, exports) {

	eval("'use strict';\n\nVue.component('quasar-video', {\n  template: '<div class=\"video\"><iframe :src=\"source\" frameborder=\"0\" allowfullscreen></iframe></div>',\n  props: ['source']\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL21lZGlhL21lZGlhLmpzPzliZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI2My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuVnVlLmNvbXBvbmVudCgncXVhc2FyLXZpZGVvJywge1xuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ2aWRlb1wiPjxpZnJhbWUgOnNyYz1cInNvdXJjZVwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT48L2Rpdj4nLFxuICBwcm9wczogWydzb3VyY2UnXVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9tZWRpYS9tZWRpYS5qc1xuICoqIG1vZHVsZSBpZCA9IDYzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  target = $('#quasar-app'),\n  template = __webpack_require__(65),\n  duration = 300\n  ;\n\nfunction Modal(vmObject) {\n  var vm = $.extend({}, vmObject);\n\n  if (!vm) {\n    throw new Error('Modal needs a VM.');\n  }\n  if (!vm.template) {\n    throw new Error('Modal needs a template.');\n  }\n\n  var self = this;\n\n  this.$el = $(template).appendTo(target);\n  this.$backdrop = this.$el.find('> .modal-backdrop');\n  this.$content = this.$el.find('> .modal-content');\n\n  $.extend(true, vm, {\n    el: self.$content[0],\n    replace: false,\n    methods: {\n      close: self.close.bind(self)\n    }\n  });\n\n  this.vm = new Vue(vm);\n  this.__onShowHandlers = [];\n  this.__onCloseHandlers = [];\n  this.selfDestroy = true;\n}\n\nModal.prototype.show = function(onShow) {\n  if (this.$el.closest('html').length === 0) {\n    throw new Error('Modal was previously destroyed. Create another one.');\n  }\n\n  if (this.minimized && this.maximized) {\n    throw new Error('Modal cannot be minimized & maximized simultaneous.');\n  }\n\n  this.$content.removeClass('minimized maximized');\n  if (this.minimized) {\n    this.$content.addClass('minimized');\n  }\n  if (this.maximized) {\n    this.$content.addClass('maximized');\n  }\n\n  var\n    effect,\n    self = this,\n    options = {\n      duration: duration,\n      complete: function() {\n        self.__onShowHandlers.forEach(function(handler) {\n          handler();\n        });\n        if (typeof onShow === 'function') {\n          onShow();\n        }\n      }\n    };\n\n  if (this.transitionIn) {\n    effect = this.transitionIn;\n  }\n  else if (!this.minimized && (this.maximized || $(window).width() <= 600)) {\n    effect = {translateX: [0, '101%']};\n  }\n  else {\n    effect = quasar.runs.on.ios ? 'transition.shrinkIn' : 'transition.slideUpIn';\n  }\n\n  this.$el.removeClass('hidden');\n  this.$content.velocity(effect, options);\n  if (!this.maximized) {\n    this.$backdrop.addClass('active');\n  }\n  return this;\n};\n\nModal.prototype.close = function(onClose) {\n  var\n    effect,\n    self = this,\n    options = {\n      duration: duration,\n      complete: function() {\n        if (self.selfDestroy) {\n          self.destroy();\n        }\n        self.__onCloseHandlers.forEach(function(handler) {\n          handler();\n        });\n        if (typeof onClose === 'function') {\n          onClose();\n        }\n      }\n    };\n\n  if (this.transitionOut) {\n    effect = this.transitionOut;\n  }\n  else if (!this.minimized && (this.maximized || $(window).width() <= 600)) {\n    effect = {translateX: ['101%', 0]};\n  }\n  else {\n    effect = quasar.runs.on.ios ? 'transition.shrinkOut' : 'transition.slideDownOut';\n  }\n\n  this.$backdrop.removeClass('active');\n  this.$content.velocity(effect, options);\n};\n\n['onShow', 'onClose'].forEach(function(event) {\n  Modal.prototype[event] = function(handler) {\n    if (typeof handler !== 'function') {\n      throw new Error('Modal ' + event + ' handler must be a function.');\n    }\n\n    this['__' + event + 'Handlers'].push(handler);\n    return this;\n  };\n});\n\nModal.prototype.set = function(properties) {\n  if (properties !== Object(properties)) {\n    throw new Error('Modal.set() needs an object as parameter.');\n  }\n\n  Object.keys(properties).forEach(function(property) {\n    this[property] = properties[property];\n  }.bind(this));\n\n  return this;\n};\n\nModal.prototype.css = function(properties) {\n  if (properties !== Object(properties)) {\n    throw new Error('Modal.css() needs an object as parameter.');\n  }\n\n  this.$content.css(properties);\n  return this;\n};\n\nModal.prototype.destroy = function() {\n  if (this.vm) {\n    this.vm.$destroy();\n  }\n  this.$el.remove();\n};\n\nquasar.Modal = Modal;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL21vZGFsL21vZGFsLmpzP2ZkZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyXG4gIHRhcmdldCA9ICQoJyNxdWFzYXItYXBwJyksXG4gIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vbW9kYWwuaHRtbCcpLFxuICBkdXJhdGlvbiA9IDMwMFxuICA7XG5cbmZ1bmN0aW9uIE1vZGFsKHZtT2JqZWN0KSB7XG4gIHZhciB2bSA9ICQuZXh0ZW5kKHt9LCB2bU9iamVjdCk7XG5cbiAgaWYgKCF2bSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTW9kYWwgbmVlZHMgYSBWTS4nKTtcbiAgfVxuICBpZiAoIXZtLnRlbXBsYXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNb2RhbCBuZWVkcyBhIHRlbXBsYXRlLicpO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMuJGVsID0gJCh0ZW1wbGF0ZSkuYXBwZW5kVG8odGFyZ2V0KTtcbiAgdGhpcy4kYmFja2Ryb3AgPSB0aGlzLiRlbC5maW5kKCc+IC5tb2RhbC1iYWNrZHJvcCcpO1xuICB0aGlzLiRjb250ZW50ID0gdGhpcy4kZWwuZmluZCgnPiAubW9kYWwtY29udGVudCcpO1xuXG4gICQuZXh0ZW5kKHRydWUsIHZtLCB7XG4gICAgZWw6IHNlbGYuJGNvbnRlbnRbMF0sXG4gICAgcmVwbGFjZTogZmFsc2UsXG4gICAgbWV0aG9kczoge1xuICAgICAgY2xvc2U6IHNlbGYuY2xvc2UuYmluZChzZWxmKVxuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy52bSA9IG5ldyBWdWUodm0pO1xuICB0aGlzLl9fb25TaG93SGFuZGxlcnMgPSBbXTtcbiAgdGhpcy5fX29uQ2xvc2VIYW5kbGVycyA9IFtdO1xuICB0aGlzLnNlbGZEZXN0cm95ID0gdHJ1ZTtcbn1cblxuTW9kYWwucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbihvblNob3cpIHtcbiAgaWYgKHRoaXMuJGVsLmNsb3Nlc3QoJ2h0bWwnKS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01vZGFsIHdhcyBwcmV2aW91c2x5IGRlc3Ryb3llZC4gQ3JlYXRlIGFub3RoZXIgb25lLicpO1xuICB9XG5cbiAgaWYgKHRoaXMubWluaW1pemVkICYmIHRoaXMubWF4aW1pemVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNb2RhbCBjYW5ub3QgYmUgbWluaW1pemVkICYgbWF4aW1pemVkIHNpbXVsdGFuZW91cy4nKTtcbiAgfVxuXG4gIHRoaXMuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoJ21pbmltaXplZCBtYXhpbWl6ZWQnKTtcbiAgaWYgKHRoaXMubWluaW1pemVkKSB7XG4gICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnbWluaW1pemVkJyk7XG4gIH1cbiAgaWYgKHRoaXMubWF4aW1pemVkKSB7XG4gICAgdGhpcy4kY29udGVudC5hZGRDbGFzcygnbWF4aW1pemVkJyk7XG4gIH1cblxuICB2YXJcbiAgICBlZmZlY3QsXG4gICAgc2VsZiA9IHRoaXMsXG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5fX29uU2hvd0hhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2Ygb25TaG93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25TaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIGlmICh0aGlzLnRyYW5zaXRpb25Jbikge1xuICAgIGVmZmVjdCA9IHRoaXMudHJhbnNpdGlvbkluO1xuICB9XG4gIGVsc2UgaWYgKCF0aGlzLm1pbmltaXplZCAmJiAodGhpcy5tYXhpbWl6ZWQgfHwgJCh3aW5kb3cpLndpZHRoKCkgPD0gNjAwKSkge1xuICAgIGVmZmVjdCA9IHt0cmFuc2xhdGVYOiBbMCwgJzEwMSUnXX07XG4gIH1cbiAgZWxzZSB7XG4gICAgZWZmZWN0ID0gcXVhc2FyLnJ1bnMub24uaW9zID8gJ3RyYW5zaXRpb24uc2hyaW5rSW4nIDogJ3RyYW5zaXRpb24uc2xpZGVVcEluJztcbiAgfVxuXG4gIHRoaXMuJGVsLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgdGhpcy4kY29udGVudC52ZWxvY2l0eShlZmZlY3QsIG9wdGlvbnMpO1xuICBpZiAoIXRoaXMubWF4aW1pemVkKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuTW9kYWwucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24ob25DbG9zZSkge1xuICB2YXJcbiAgICBlZmZlY3QsXG4gICAgc2VsZiA9IHRoaXMsXG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNlbGYuc2VsZkRlc3Ryb3kpIHtcbiAgICAgICAgICBzZWxmLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLl9fb25DbG9zZUhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2Ygb25DbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgaWYgKHRoaXMudHJhbnNpdGlvbk91dCkge1xuICAgIGVmZmVjdCA9IHRoaXMudHJhbnNpdGlvbk91dDtcbiAgfVxuICBlbHNlIGlmICghdGhpcy5taW5pbWl6ZWQgJiYgKHRoaXMubWF4aW1pemVkIHx8ICQod2luZG93KS53aWR0aCgpIDw9IDYwMCkpIHtcbiAgICBlZmZlY3QgPSB7dHJhbnNsYXRlWDogWycxMDElJywgMF19O1xuICB9XG4gIGVsc2Uge1xuICAgIGVmZmVjdCA9IHF1YXNhci5ydW5zLm9uLmlvcyA/ICd0cmFuc2l0aW9uLnNocmlua091dCcgOiAndHJhbnNpdGlvbi5zbGlkZURvd25PdXQnO1xuICB9XG5cbiAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICB0aGlzLiRjb250ZW50LnZlbG9jaXR5KGVmZmVjdCwgb3B0aW9ucyk7XG59O1xuXG5bJ29uU2hvdycsICdvbkNsb3NlJ10uZm9yRWFjaChmdW5jdGlvbihldmVudCkge1xuICBNb2RhbC5wcm90b3R5cGVbZXZlbnRdID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb2RhbCAnICsgZXZlbnQgKyAnIGhhbmRsZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHRoaXNbJ19fJyArIGV2ZW50ICsgJ0hhbmRsZXJzJ10ucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn0pO1xuXG5Nb2RhbC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24ocHJvcGVydGllcykge1xuICBpZiAocHJvcGVydGllcyAhPT0gT2JqZWN0KHByb3BlcnRpZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNb2RhbC5zZXQoKSBuZWVkcyBhbiBvYmplY3QgYXMgcGFyYW1ldGVyLicpO1xuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHRoaXNbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gIH0uYmluZCh0aGlzKSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Nb2RhbC5wcm90b3R5cGUuY3NzID0gZnVuY3Rpb24ocHJvcGVydGllcykge1xuICBpZiAocHJvcGVydGllcyAhPT0gT2JqZWN0KHByb3BlcnRpZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNb2RhbC5jc3MoKSBuZWVkcyBhbiBvYmplY3QgYXMgcGFyYW1ldGVyLicpO1xuICB9XG5cbiAgdGhpcy4kY29udGVudC5jc3MocHJvcGVydGllcyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuTW9kYWwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudm0pIHtcbiAgICB0aGlzLnZtLiRkZXN0cm95KCk7XG4gIH1cbiAgdGhpcy4kZWwucmVtb3ZlKCk7XG59O1xuXG5xdWFzYXIuTW9kYWwgPSBNb2RhbDtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL21vZGFsL21vZGFsLmpzXG4gKiogbW9kdWxlIGlkID0gNjRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 65 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"modal hidden fullscreen flex items-center justify-center\\\">\\n  <div class=\\\"modal-backdrop backdrop\\\"></div>\\n  <div class=\\\"modal-content\\\"></div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL21vZGFsL21vZGFsLmh0bWw/OTdjMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbCBoaWRkZW4gZnVsbHNjcmVlbiBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1iYWNrZHJvcCBiYWNrZHJvcFxcXCI+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIj48L2Rpdj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL21vZGFsL21vZGFsLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA2NVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 66 */
/***/ function(module, exports) {

	eval("'use strict';\n\nvar\n  notifyNode = $('<div id=\"__quasar_notifiers\" class=\"column\">'),\n  dismissers = [],\n  types = [\n    {\n      name: 'positive',\n      defaults: {icon: 'check'}\n    },\n    {\n      name: 'negative',\n      defaults: {icon: 'whatshot'}\n    },\n    {\n      name: 'info',\n      defaults: {icon: 'info'}\n    },\n    {\n      name: 'warning',\n      defaults: {icon: 'warning'}\n    }\n  ];\n\n$('body').append(notifyNode);\n\n\nfunction dismissAll() {\n  dismissers.forEach(function(dismiss) {\n    dismiss();\n  });\n}\n\nfunction Notify(options) {\n  var dismiss = function() {\n    this.dismiss();\n  }.bind(this);\n\n  $.extend(true,\n    this,\n    {\n      timeout: 7000,\n      onDismiss: options.onDismiss || $.noop,\n      vm: {\n        methods: {\n          ____pan: function(event) {\n            var\n              el = $(this.$el),\n              delta = event.deltaX,\n              opacity = .9 - Math.abs(delta) / 180\n              ;\n\n            el.velocity('stop');\n\n            if (opacity < .05) {\n              el.css('opacity', '0');\n              dismiss();\n              return;\n            }\n\n            if (event.isFinal) {\n              el.velocity({\n                translateX: [0, delta],\n                opacity: .9\n              });\n              return;\n            }\n\n            el.css({\n              transform: 'translateX(' + delta + 'px)',\n              opacity: opacity\n            });\n          }\n        }\n      }\n    },\n    options\n  );\n\n  this.node = $('<div class=\"quasar-notifier row items-center justify-between nowrap non-selectable\" v-touch:pan=\"____pan\">');\n\n  this.node.append(\n    (this.icon ? '<i>' + this.icon + '</i> ' : '') +\n    (this.image ? '<img src=\"' + this.image + '\">' : '') +\n    '<div class=\"auto\">' + this.html + '</div>'\n  );\n\n  if (this.button) {\n    var button = $('<a>' + this.button.label + '</a>');\n\n    this.node.append(button);\n    button.click(function() {\n      this.dismiss();\n      if (typeof this.button.handler === 'function') {\n        this.button.handler();\n      }\n    }.bind(this));\n  }\n\n  $('<a class=\"quasar-notifier-dismiss-all\"><i>delete</i></a>')\n    .click(dismissAll)\n    .appendTo(this.node);\n\n  if (this.timeout > 0) {\n    this.timer = setTimeout(function() {\n      this.dismiss();\n    }.bind(this), this.timeout);\n  }\n\n  this.vm.el = this.node[0];\n  this.vm = new Vue(this.vm);\n\n  quasar.events.trigger('app:notify', this.html);\n  this.node.css('display', 'none').appendTo(notifyNode).slideToggle();\n\n  if (dismissers.length > 5) {\n    dismissers.shift()();\n  }\n  dismissers.push(this.dismiss.bind(this));\n\n  return {\n    node: this.node,\n    dismiss: this.dismiss.bind(this),\n    vm: this.vm\n  };\n}\n\nNotify.prototype.dismiss = function() {\n  if (this.dismissed) {\n    return;\n  }\n\n  if (this.timer) {\n    clearTimeout(this.timer);\n  }\n\n  this.node.slideToggle(200, function() {\n    this.vm.$destroy(true);\n    this.onDismiss();\n  }.bind(this));\n\n  this.dismissed = true;\n\n  dismissers = dismissers.filter(function(item) {\n    return item !== this.dismiss;\n  }.bind(this));\n};\n\n\nfunction notify(options, defaults) {\n  if (!options) {\n    throw new Error('Missing notify options.');\n  }\n\n  if (typeof options === 'string') {\n    options = {html: options};\n  }\n\n  $.extend(true, options, defaults);\n\n  if (!options.html) {\n    throw new Error('Missing notify content/HTML.');\n  }\n\n  return new Notify(options);\n}\n\n\nquasar.notify = notify;\ntypes.forEach(function(type) {\n  quasar.notify[type.name] = function(opts) {\n    return notify(opts, type.defaults);\n  };\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL25vdGlmeS9ub3RpZnkuanM/MTA1ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhclxuICBub3RpZnlOb2RlID0gJCgnPGRpdiBpZD1cIl9fcXVhc2FyX25vdGlmaWVyc1wiIGNsYXNzPVwiY29sdW1uXCI+JyksXG4gIGRpc21pc3NlcnMgPSBbXSxcbiAgdHlwZXMgPSBbXG4gICAge1xuICAgICAgbmFtZTogJ3Bvc2l0aXZlJyxcbiAgICAgIGRlZmF1bHRzOiB7aWNvbjogJ2NoZWNrJ31cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICduZWdhdGl2ZScsXG4gICAgICBkZWZhdWx0czoge2ljb246ICd3aGF0c2hvdCd9XG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnaW5mbycsXG4gICAgICBkZWZhdWx0czoge2ljb246ICdpbmZvJ31cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICd3YXJuaW5nJyxcbiAgICAgIGRlZmF1bHRzOiB7aWNvbjogJ3dhcm5pbmcnfVxuICAgIH1cbiAgXTtcblxuJCgnYm9keScpLmFwcGVuZChub3RpZnlOb2RlKTtcblxuXG5mdW5jdGlvbiBkaXNtaXNzQWxsKCkge1xuICBkaXNtaXNzZXJzLmZvckVhY2goZnVuY3Rpb24oZGlzbWlzcykge1xuICAgIGRpc21pc3MoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIE5vdGlmeShvcHRpb25zKSB7XG4gIHZhciBkaXNtaXNzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kaXNtaXNzKCk7XG4gIH0uYmluZCh0aGlzKTtcblxuICAkLmV4dGVuZCh0cnVlLFxuICAgIHRoaXMsXG4gICAge1xuICAgICAgdGltZW91dDogNzAwMCxcbiAgICAgIG9uRGlzbWlzczogb3B0aW9ucy5vbkRpc21pc3MgfHwgJC5ub29wLFxuICAgICAgdm06IHtcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgIF9fX19wYW46IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXJcbiAgICAgICAgICAgICAgZWwgPSAkKHRoaXMuJGVsKSxcbiAgICAgICAgICAgICAgZGVsdGEgPSBldmVudC5kZWx0YVgsXG4gICAgICAgICAgICAgIG9wYWNpdHkgPSAuOSAtIE1hdGguYWJzKGRlbHRhKSAvIDE4MFxuICAgICAgICAgICAgICA7XG5cbiAgICAgICAgICAgIGVsLnZlbG9jaXR5KCdzdG9wJyk7XG5cbiAgICAgICAgICAgIGlmIChvcGFjaXR5IDwgLjA1KSB7XG4gICAgICAgICAgICAgIGVsLmNzcygnb3BhY2l0eScsICcwJyk7XG4gICAgICAgICAgICAgIGRpc21pc3MoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXZlbnQuaXNGaW5hbCkge1xuICAgICAgICAgICAgICBlbC52ZWxvY2l0eSh7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlWDogWzAsIGRlbHRhXSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAuOVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5jc3Moe1xuICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCcgKyBkZWx0YSArICdweCknLFxuICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcblxuICB0aGlzLm5vZGUgPSAkKCc8ZGl2IGNsYXNzPVwicXVhc2FyLW5vdGlmaWVyIHJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIG5vd3JhcCBub24tc2VsZWN0YWJsZVwiIHYtdG91Y2g6cGFuPVwiX19fX3BhblwiPicpO1xuXG4gIHRoaXMubm9kZS5hcHBlbmQoXG4gICAgKHRoaXMuaWNvbiA/ICc8aT4nICsgdGhpcy5pY29uICsgJzwvaT4gJyA6ICcnKSArXG4gICAgKHRoaXMuaW1hZ2UgPyAnPGltZyBzcmM9XCInICsgdGhpcy5pbWFnZSArICdcIj4nIDogJycpICtcbiAgICAnPGRpdiBjbGFzcz1cImF1dG9cIj4nICsgdGhpcy5odG1sICsgJzwvZGl2PidcbiAgKTtcblxuICBpZiAodGhpcy5idXR0b24pIHtcbiAgICB2YXIgYnV0dG9uID0gJCgnPGE+JyArIHRoaXMuYnV0dG9uLmxhYmVsICsgJzwvYT4nKTtcblxuICAgIHRoaXMubm9kZS5hcHBlbmQoYnV0dG9uKTtcbiAgICBidXR0b24uY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRpc21pc3MoKTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5idXR0b24uaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmJ1dHRvbi5oYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gICQoJzxhIGNsYXNzPVwicXVhc2FyLW5vdGlmaWVyLWRpc21pc3MtYWxsXCI+PGk+ZGVsZXRlPC9pPjwvYT4nKVxuICAgIC5jbGljayhkaXNtaXNzQWxsKVxuICAgIC5hcHBlbmRUbyh0aGlzLm5vZGUpO1xuXG4gIGlmICh0aGlzLnRpbWVvdXQgPiAwKSB7XG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRpc21pc3MoKTtcbiAgICB9LmJpbmQodGhpcyksIHRoaXMudGltZW91dCk7XG4gIH1cblxuICB0aGlzLnZtLmVsID0gdGhpcy5ub2RlWzBdO1xuICB0aGlzLnZtID0gbmV3IFZ1ZSh0aGlzLnZtKTtcblxuICBxdWFzYXIuZXZlbnRzLnRyaWdnZXIoJ2FwcDpub3RpZnknLCB0aGlzLmh0bWwpO1xuICB0aGlzLm5vZGUuY3NzKCdkaXNwbGF5JywgJ25vbmUnKS5hcHBlbmRUbyhub3RpZnlOb2RlKS5zbGlkZVRvZ2dsZSgpO1xuXG4gIGlmIChkaXNtaXNzZXJzLmxlbmd0aCA+IDUpIHtcbiAgICBkaXNtaXNzZXJzLnNoaWZ0KCkoKTtcbiAgfVxuICBkaXNtaXNzZXJzLnB1c2godGhpcy5kaXNtaXNzLmJpbmQodGhpcykpO1xuXG4gIHJldHVybiB7XG4gICAgbm9kZTogdGhpcy5ub2RlLFxuICAgIGRpc21pc3M6IHRoaXMuZGlzbWlzcy5iaW5kKHRoaXMpLFxuICAgIHZtOiB0aGlzLnZtXG4gIH07XG59XG5cbk5vdGlmeS5wcm90b3R5cGUuZGlzbWlzcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5kaXNtaXNzZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy50aW1lcikge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgfVxuXG4gIHRoaXMubm9kZS5zbGlkZVRvZ2dsZSgyMDAsIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudm0uJGRlc3Ryb3kodHJ1ZSk7XG4gICAgdGhpcy5vbkRpc21pc3MoKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLmRpc21pc3NlZCA9IHRydWU7XG5cbiAgZGlzbWlzc2VycyA9IGRpc21pc3NlcnMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSAhPT0gdGhpcy5kaXNtaXNzO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuXG5mdW5jdGlvbiBub3RpZnkob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIG5vdGlmeSBvcHRpb25zLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSB7aHRtbDogb3B0aW9uc307XG4gIH1cblxuICAkLmV4dGVuZCh0cnVlLCBvcHRpb25zLCBkZWZhdWx0cyk7XG5cbiAgaWYgKCFvcHRpb25zLmh0bWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgbm90aWZ5IGNvbnRlbnQvSFRNTC4nKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgTm90aWZ5KG9wdGlvbnMpO1xufVxuXG5cbnF1YXNhci5ub3RpZnkgPSBub3RpZnk7XG50eXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpIHtcbiAgcXVhc2FyLm5vdGlmeVt0eXBlLm5hbWVdID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHJldHVybiBub3RpZnkob3B0cywgdHlwZS5kZWZhdWx0cyk7XG4gIH07XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL25vdGlmeS9ub3RpZnkuanNcbiAqKiBtb2R1bGUgaWQgPSA2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(68);\n\nVue.component('number', Vue.extend({\n  template: template,\n  props: {\n    model: {\n      type: Number,\n      default: 0,\n      coerce: function(value) {\n        return parseFloat(value, 10) || 0;\n      }\n    },\n    step: {\n      type: Number,\n      default: 1,\n      coerce: function(value) {\n        return parseFloat(value, 10);\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: true,\n      coerce: function(value) {\n        return value ? true : false;\n      }\n    },\n    debounce: Number,\n    min: Number,\n    max: Number\n  },\n  watch: {\n    model: function(value) {\n      if (typeof this.min === 'number' && value < this.min) {\n        this.model = this.min;\n      }\n      else if (typeof this.max === 'number' && value > this.max) {\n        this.model = this.max;\n      }\n    }\n  },\n  methods: {\n    increment: function(direction) {\n      this.model += direction * this.step;\n    }\n  },\n  compiled: function() {\n    if (!this.lazy) {\n      $(this.$el).find('input').attr('lazy', '');\n    }\n  }\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL251bWJlci9udW1iZXIuanM/ZGQyZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVtcGxhdGUgPSByZXF1aXJlKCdyYXchLi9udW1iZXIuaHRtbCcpO1xuXG5WdWUuY29tcG9uZW50KCdudW1iZXInLCBWdWUuZXh0ZW5kKHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwLFxuICAgICAgY29lcmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSwgMTApIHx8IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBzdGVwOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxLFxuICAgICAgY29lcmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGF6eToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICBjb2VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlYm91bmNlOiBOdW1iZXIsXG4gICAgbWluOiBOdW1iZXIsXG4gICAgbWF4OiBOdW1iZXJcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBtb2RlbDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5taW4gPT09ICdudW1iZXInICYmIHZhbHVlIDwgdGhpcy5taW4pIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubWluO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMubWF4ID09PSAnbnVtYmVyJyAmJiB2YWx1ZSA+IHRoaXMubWF4KSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm1heDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpbmNyZW1lbnQ6IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgdGhpcy5tb2RlbCArPSBkaXJlY3Rpb24gKiB0aGlzLnN0ZXA7XG4gICAgfVxuICB9LFxuICBjb21waWxlZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLmxhenkpIHtcbiAgICAgICQodGhpcy4kZWwpLmZpbmQoJ2lucHV0JykuYXR0cignbGF6eScsICcnKTtcbiAgICB9XG4gIH1cbn0pKTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL251bWJlci9udW1iZXIuanNcbiAqKiBtb2R1bGUgaWQgPSA2N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 68 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-number row inline items-center\\\">\\n  <i @click=\\\"increment(-1)\\\">remove</i>\\n  <input\\n    type=\\\"text\\\"\\n    v-model=\\\"model\\\"\\n    class=\\\"quasar-input-field\\\"\\n    :style=\\\"{width: (''+model).length * 11 + 15 + 'px'}\\\"\\n    :debounce=\\\"debounce\\\"\\n    lazy\\n    number\\n  >\\n  <i @click=\\\"increment(1)\\\">add</i>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL251bWJlci9udW1iZXIuaHRtbD80YWIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVOQUF1TiwwQ0FBMEMiLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLW51bWJlciByb3cgaW5saW5lIGl0ZW1zLWNlbnRlclxcXCI+XFxuICA8aSBAY2xpY2s9XFxcImluY3JlbWVudCgtMSlcXFwiPnJlbW92ZTwvaT5cXG4gIDxpbnB1dFxcbiAgICB0eXBlPVxcXCJ0ZXh0XFxcIlxcbiAgICB2LW1vZGVsPVxcXCJtb2RlbFxcXCJcXG4gICAgY2xhc3M9XFxcInF1YXNhci1pbnB1dC1maWVsZFxcXCJcXG4gICAgOnN0eWxlPVxcXCJ7d2lkdGg6ICgnJyttb2RlbCkubGVuZ3RoICogMTEgKyAxNSArICdweCd9XFxcIlxcbiAgICA6ZGVib3VuY2U9XFxcImRlYm91bmNlXFxcIlxcbiAgICBsYXp5XFxuICAgIG51bWJlclxcbiAgPlxcbiAgPGkgQGNsaWNrPVxcXCJpbmNyZW1lbnQoMSlcXFwiPmFkZDwvaT5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL251bWJlci9udW1iZXIuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDY4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(70);\n\nVue.component('pagination', {\n  template: template,\n  props: {\n    model: {\n      type: Number,\n      twoWay: true,\n      required: true,\n      coerce: function(value) {\n        return parseInt(value, 10);\n      }\n    },\n    min: {\n      type: Number,\n      default: 1\n    },\n    max: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function() {\n    return {\n      rangeMode: false,\n      newPage: ''\n    };\n  },\n  methods: {\n    changeModelByOffset: function(offset) {\n      this.model = this.normalize(this.model + offset);\n    },\n    normalize: function(value) {\n      return Math.min(this.max, Math.max(1, parseInt(value, 10)));\n    }\n  },\n  computed: {\n    inputPlaceholder: function() {\n      return this.model + ' / ' + this.max;\n    }\n  },\n  watch: {\n    newPage: function(value) {\n      if (value || value === 0) {\n        this.model = this.normalize(value);\n        this.newPage = '';\n        $(this.$els.input).blur();\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcz9lNzFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vcGFnaW5hdGlvbi5odG1sJyk7XG5cblZ1ZS5jb21wb25lbnQoJ3BhZ2luYXRpb24nLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgdHdvV2F5OiB0cnVlLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBjb2VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWluOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxXG4gICAgfSxcbiAgICBtYXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2VNb2RlOiBmYWxzZSxcbiAgICAgIG5ld1BhZ2U6ICcnXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNoYW5nZU1vZGVsQnlPZmZzZXQ6IGZ1bmN0aW9uKG9mZnNldCkge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubm9ybWFsaXplKHRoaXMubW9kZWwgKyBvZmZzZXQpO1xuICAgIH0sXG4gICAgbm9ybWFsaXplOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMubWF4LCBNYXRoLm1heCgxLCBwYXJzZUludCh2YWx1ZSwgMTApKSk7XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlucHV0UGxhY2Vob2xkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwgKyAnIC8gJyArIHRoaXMubWF4O1xuICAgIH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBuZXdQYWdlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm5vcm1hbGl6ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMubmV3UGFnZSA9ICcnO1xuICAgICAgICAkKHRoaXMuJGVscy5pbnB1dCkuYmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uanNcbiAqKiBtb2R1bGUgaWQgPSA2OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 70 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-pagination\\\">\\n  <button :class=\\\"{disabled: model === min}\\\" class=\\\"primary clear small circular\\\" @click=\\\"model = min\\\">\\n    <i>first_page</i>\\n  </button>\\n  <button :class=\\\"{disabled: model === min}\\\" class=\\\"primary clear small circular\\\" @click=\\\"changeModelByOffset(-1)\\\">\\n    <i>keyboard_arrow_left</i>\\n  </button>\\n  <input type=\\\"text\\\" v-el:input v-model=\\\"newPage\\\" number lazy :style=\\\"{width: inputPlaceholder.length * 10 + 'px'}\\\" :placeholder=\\\"inputPlaceholder\\\">\\n  <button :class=\\\"{disabled: model === max}\\\" class=\\\"primary clear small circular\\\" @click=\\\"changeModelByOffset(1)\\\">\\n    <i>keyboard_arrow_right</i>\\n  </button>\\n  <button :class=\\\"{disabled: model === max}\\\" class=\\\"primary clear small circular\\\" @click=\\\"model = max\\\">\\n    <i>last_page</i>\\n  </button>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sP2ZlMTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseUVBQXlFLHdCQUF3QiwySEFBMkgsd0JBQXdCLHdNQUF3TSwyQ0FBMkMsMkRBQTJELHdCQUF3QixnSkFBZ0osd0JBQXdCIiwiZmlsZSI6IjcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInF1YXNhci1wYWdpbmF0aW9uXFxcIj5cXG4gIDxidXR0b24gOmNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG1vZGVsID09PSBtaW59XFxcIiBjbGFzcz1cXFwicHJpbWFyeSBjbGVhciBzbWFsbCBjaXJjdWxhclxcXCIgQGNsaWNrPVxcXCJtb2RlbCA9IG1pblxcXCI+XFxuICAgIDxpPmZpcnN0X3BhZ2U8L2k+XFxuICA8L2J1dHRvbj5cXG4gIDxidXR0b24gOmNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG1vZGVsID09PSBtaW59XFxcIiBjbGFzcz1cXFwicHJpbWFyeSBjbGVhciBzbWFsbCBjaXJjdWxhclxcXCIgQGNsaWNrPVxcXCJjaGFuZ2VNb2RlbEJ5T2Zmc2V0KC0xKVxcXCI+XFxuICAgIDxpPmtleWJvYXJkX2Fycm93X2xlZnQ8L2k+XFxuICA8L2J1dHRvbj5cXG4gIDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiB2LWVsOmlucHV0IHYtbW9kZWw9XFxcIm5ld1BhZ2VcXFwiIG51bWJlciBsYXp5IDpzdHlsZT1cXFwie3dpZHRoOiBpbnB1dFBsYWNlaG9sZGVyLmxlbmd0aCAqIDEwICsgJ3B4J31cXFwiIDpwbGFjZWhvbGRlcj1cXFwiaW5wdXRQbGFjZWhvbGRlclxcXCI+XFxuICA8YnV0dG9uIDpjbGFzcz1cXFwie2Rpc2FibGVkOiBtb2RlbCA9PT0gbWF4fVxcXCIgY2xhc3M9XFxcInByaW1hcnkgY2xlYXIgc21hbGwgY2lyY3VsYXJcXFwiIEBjbGljaz1cXFwiY2hhbmdlTW9kZWxCeU9mZnNldCgxKVxcXCI+XFxuICAgIDxpPmtleWJvYXJkX2Fycm93X3JpZ2h0PC9pPlxcbiAgPC9idXR0b24+XFxuICA8YnV0dG9uIDpjbGFzcz1cXFwie2Rpc2FibGVkOiBtb2RlbCA9PT0gbWF4fVxcXCIgY2xhc3M9XFxcInByaW1hcnkgY2xlYXIgc21hbGwgY2lyY3VsYXJcXFwiIEBjbGljaz1cXFwibW9kZWwgPSBtYXhcXFwiPlxcbiAgICA8aT5sYXN0X3BhZ2U8L2k+XFxuICA8L2J1dHRvbj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sXG4gKiogbW9kdWxlIGlkID0gNzBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(72);\n\nVue.component('parallax', {\n  template: template,\n  props: {\n    src: {\n      type: String,\n      required: true\n    },\n    height: {\n      type: Number,\n      default: 500\n    }\n  },\n  data: function() {\n    return {\n      imageHasBeenLoaded: false,\n      imageOffset: 0\n    };\n  },\n  watch: {\n    src: function() {\n      this.imageHasBeenLoaded = false;\n    },\n    height: function() {\n      this.updatePosition();\n    }\n  },\n  methods: {\n    processImage: function() {\n      this.imageHasBeenLoaded = true;\n      this.processResize();\n    },\n    processResize: function() {\n      if (!this.imageHasBeenLoaded || !this.pageContainer) {\n        return;\n      }\n\n      this.image.css('min-height', Math.max(this.height, this.pageContainer.innerHeight()));\n      this.imageHeight = this.image.height();\n\n      this.updatePosition();\n    },\n    updatePosition: function() {\n      if (!this.imageHasBeenLoaded) {\n        return;\n      }\n\n      var\n        containerTop = this.pageContainer.offset().top,\n        containerHeight = this.pageContainer.innerHeight(),\n        containerBottom = containerTop + containerHeight,\n\n        top = this.container.offset().top,\n        bottom = top + this.height\n        ;\n\n      if (bottom > containerTop && top < containerBottom) {\n        this.imageOffset = Math.round(containerTop - top + (containerHeight - this.imageHeight) / 2);\n      }\n    }\n  },\n  ready: function() {\n    var self = this;\n\n    this.container = $(this.$el);\n    this.image = $(this.$els.img);\n\n    quasar.events.once('app:page:ready', function(page) {\n      self.pageName = page.name;\n      self.pageContainer = quasar.current.page.scrollContainer;\n      self.pageContainer.scroll(self.updatePosition);\n      self.processResize();\n    });\n\n    this.onPageReady = function(page) {\n      if (page.name === self.pageName) {\n        self.processResize();\n        $(window).resize(self.processResize);\n      }\n      else {\n        $(window).off('resize', self.processResize);\n      }\n    };\n    quasar.events.on('app:page:ready', this.onPageReady);\n  },\n  beforeDestroy: function() {\n    $(window).off('resize', this.processResize);\n    this.pageContainer.off('scroll', this.updatePosition);\n    quasar.events.off('app:page:ready', this.onPageReady);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4LmpzPzZkNGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJ3JhdyEuL3BhcmFsbGF4Lmh0bWwnKTtcblxuVnVlLmNvbXBvbmVudCgncGFyYWxsYXgnLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgcHJvcHM6IHtcbiAgICBzcmM6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBoZWlnaHQ6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDUwMFxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltYWdlSGFzQmVlbkxvYWRlZDogZmFsc2UsXG4gICAgICBpbWFnZU9mZnNldDogMFxuICAgIH07XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgc3JjOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaW1hZ2VIYXNCZWVuTG9hZGVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigpO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHByb2Nlc3NJbWFnZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmltYWdlSGFzQmVlbkxvYWRlZCA9IHRydWU7XG4gICAgICB0aGlzLnByb2Nlc3NSZXNpemUoKTtcbiAgICB9LFxuICAgIHByb2Nlc3NSZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLmltYWdlSGFzQmVlbkxvYWRlZCB8fCAhdGhpcy5wYWdlQ29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbWFnZS5jc3MoJ21pbi1oZWlnaHQnLCBNYXRoLm1heCh0aGlzLmhlaWdodCwgdGhpcy5wYWdlQ29udGFpbmVyLmlubmVySGVpZ2h0KCkpKTtcbiAgICAgIHRoaXMuaW1hZ2VIZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodCgpO1xuXG4gICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgfSxcbiAgICB1cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaW1hZ2VIYXNCZWVuTG9hZGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyXG4gICAgICAgIGNvbnRhaW5lclRvcCA9IHRoaXMucGFnZUNvbnRhaW5lci5vZmZzZXQoKS50b3AsXG4gICAgICAgIGNvbnRhaW5lckhlaWdodCA9IHRoaXMucGFnZUNvbnRhaW5lci5pbm5lckhlaWdodCgpLFxuICAgICAgICBjb250YWluZXJCb3R0b20gPSBjb250YWluZXJUb3AgKyBjb250YWluZXJIZWlnaHQsXG5cbiAgICAgICAgdG9wID0gdGhpcy5jb250YWluZXIub2Zmc2V0KCkudG9wLFxuICAgICAgICBib3R0b20gPSB0b3AgKyB0aGlzLmhlaWdodFxuICAgICAgICA7XG5cbiAgICAgIGlmIChib3R0b20gPiBjb250YWluZXJUb3AgJiYgdG9wIDwgY29udGFpbmVyQm90dG9tKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VPZmZzZXQgPSBNYXRoLnJvdW5kKGNvbnRhaW5lclRvcCAtIHRvcCArIChjb250YWluZXJIZWlnaHQgLSB0aGlzLmltYWdlSGVpZ2h0KSAvIDIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuY29udGFpbmVyID0gJCh0aGlzLiRlbCk7XG4gICAgdGhpcy5pbWFnZSA9ICQodGhpcy4kZWxzLmltZyk7XG5cbiAgICBxdWFzYXIuZXZlbnRzLm9uY2UoJ2FwcDpwYWdlOnJlYWR5JywgZnVuY3Rpb24ocGFnZSkge1xuICAgICAgc2VsZi5wYWdlTmFtZSA9IHBhZ2UubmFtZTtcbiAgICAgIHNlbGYucGFnZUNvbnRhaW5lciA9IHF1YXNhci5jdXJyZW50LnBhZ2Uuc2Nyb2xsQ29udGFpbmVyO1xuICAgICAgc2VsZi5wYWdlQ29udGFpbmVyLnNjcm9sbChzZWxmLnVwZGF0ZVBvc2l0aW9uKTtcbiAgICAgIHNlbGYucHJvY2Vzc1Jlc2l6ZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vblBhZ2VSZWFkeSA9IGZ1bmN0aW9uKHBhZ2UpIHtcbiAgICAgIGlmIChwYWdlLm5hbWUgPT09IHNlbGYucGFnZU5hbWUpIHtcbiAgICAgICAgc2VsZi5wcm9jZXNzUmVzaXplKCk7XG4gICAgICAgICQod2luZG93KS5yZXNpemUoc2VsZi5wcm9jZXNzUmVzaXplKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCBzZWxmLnByb2Nlc3NSZXNpemUpO1xuICAgICAgfVxuICAgIH07XG4gICAgcXVhc2FyLmV2ZW50cy5vbignYXBwOnBhZ2U6cmVhZHknLCB0aGlzLm9uUGFnZVJlYWR5KTtcbiAgfSxcbiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplJywgdGhpcy5wcm9jZXNzUmVzaXplKTtcbiAgICB0aGlzLnBhZ2VDb250YWluZXIub2ZmKCdzY3JvbGwnLCB0aGlzLnVwZGF0ZVBvc2l0aW9uKTtcbiAgICBxdWFzYXIuZXZlbnRzLm9mZignYXBwOnBhZ2U6cmVhZHknLCB0aGlzLm9uUGFnZVJlYWR5KTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9wYXJhbGxheC9wYXJhbGxheC5qc1xuICoqIG1vZHVsZSBpZCA9IDcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 72 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-parallax column items-center justify-center\\\" :style=\\\"{height: height + 'px'}\\\">\\n  <div class=\\\"quasar-parallax-image\\\">\\n    <img\\n      v-el:img\\n      :src=\\\"src\\\"\\n      @load=\\\"processImage()\\\"\\n      :class=\\\"{ready: imageHasBeenLoaded}\\\"\\n      :style=\\\"{transform: 'translate3D(-50%,' + imageOffset + 'px, 0)'}\\\">\\n  </div>\\n  <slot name=\\\"loading\\\" v-if=\\\"!imageHasBeenLoaded\\\"></slot>\\n  <slot v-else></slot>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4Lmh0bWw/YWE0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4RkFBOEYsc0JBQXNCLDRJQUE0SSwwQkFBMEIsb0JBQW9CLHdEQUF3RCIsImZpbGUiOiI3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJxdWFzYXItcGFyYWxsYXggY29sdW1uIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclxcXCIgOnN0eWxlPVxcXCJ7aGVpZ2h0OiBoZWlnaHQgKyAncHgnfVxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJxdWFzYXItcGFyYWxsYXgtaW1hZ2VcXFwiPlxcbiAgICA8aW1nXFxuICAgICAgdi1lbDppbWdcXG4gICAgICA6c3JjPVxcXCJzcmNcXFwiXFxuICAgICAgQGxvYWQ9XFxcInByb2Nlc3NJbWFnZSgpXFxcIlxcbiAgICAgIDpjbGFzcz1cXFwie3JlYWR5OiBpbWFnZUhhc0JlZW5Mb2FkZWR9XFxcIlxcbiAgICAgIDpzdHlsZT1cXFwie3RyYW5zZm9ybTogJ3RyYW5zbGF0ZTNEKC01MCUsJyArIGltYWdlT2Zmc2V0ICsgJ3B4LCAwKSd9XFxcIj5cXG4gIDwvZGl2PlxcbiAgPHNsb3QgbmFtZT1cXFwibG9hZGluZ1xcXCIgdi1pZj1cXFwiIWltYWdlSGFzQmVlbkxvYWRlZFxcXCI+PC9zbG90PlxcbiAgPHNsb3Qgdi1lbHNlPjwvc2xvdD5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3BhcmFsbGF4L3BhcmFsbGF4Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA3MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(74);\n\nVue.component('progress-bar', {\n  template: template,\n  props: {\n    model: {\n      type: Number,\n      default: 0\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3Byb2dyZXNzLWJhci9wcm9ncmVzcy1iYXIuanM/Y2M1MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI3My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vcHJvZ3Jlc3MtYmFyLmh0bWwnKTtcblxuVnVlLmNvbXBvbmVudCgncHJvZ3Jlc3MtYmFyJywge1xuICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhci5qc1xuICoqIG1vZHVsZSBpZCA9IDczXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 74 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-progress-bar\\\">\\n  <div :style=\\\"{width: model + '%'}\\\"></div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3Byb2dyZXNzLWJhci9wcm9ncmVzcy1iYXIuaHRtbD82MTVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RSxtQkFBbUIiLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLXByb2dyZXNzLWJhclxcXCI+XFxuICA8ZGl2IDpzdHlsZT1cXFwie3dpZHRoOiBtb2RlbCArICclJ31cXFwiPjwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhci5odG1sXG4gKiogbW9kdWxlIGlkID0gNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(76);\n\nVue.component('radio', {\n  template: template,\n  props: {\n    model: {\n      twoWay: true,\n      required: true\n    },\n    value: {\n      required: true\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhZGlvL3JhZGlvLmpzPzBkZTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vcmFkaW8uaHRtbCcpO1xuXG5WdWUuY29tcG9uZW50KCdyYWRpbycsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiB7XG4gICAgICB0d29XYXk6IHRydWUsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhZGlvL3JhZGlvLmpzXG4gKiogbW9kdWxlIGlkID0gNzVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 76 */
/***/ function(module, exports) {

	eval("module.exports = \"<label class=\\\"quasar-radio\\\">\\n  <input type=\\\"radio\\\" v-model=\\\"model\\\" :value=\\\"value\\\">\\n  <div></div>\\n</label>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhZGlvL3JhZGlvLmh0bWw/NDA4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bGFiZWwgY2xhc3M9XFxcInF1YXNhci1yYWRpb1xcXCI+XFxuICA8aW5wdXQgdHlwZT1cXFwicmFkaW9cXFwiIHYtbW9kZWw9XFxcIm1vZGVsXFxcIiA6dmFsdWU9XFxcInZhbHVlXFxcIj5cXG4gIDxkaXY+PC9kaXY+XFxuPC9sYWJlbD5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhZGlvL3JhZGlvLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA3NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(78);\n\nfunction modelToPosition(model, min, max, size) {\n  return (model - min) / (max - min) * 100 + '%';\n}\n\nVue.component('range', {\n  template: template,\n  props: {\n    model: {\n      type: Number,\n      twoWay: true,\n      required: true,\n      coerce: function(value) {\n        return parseInt(value, 10);\n      }\n    },\n    min: {\n      type: Number,\n      required: true,\n      coerce: function(value) {\n        return parseInt(value, 10);\n      }\n    },\n    max: {\n      type: Number,\n      required: true,\n      coerce: function(value) {\n        return parseInt(value, 10);\n      }\n    },\n    precision: {\n      type: Number,\n      coerce: function(value) {\n        return parseInt(value, 10);\n      }\n    }\n  },\n  data: function() {\n    return {\n      position: 0,\n      active: false\n    };\n  },\n  methods: {\n    pan: function(event) {\n      var\n        size = this.el.width(),\n        range = this.max - this.min,\n        value = (this.model - this.min) / range,\n        percentage = Math.min(1, Math.max(0, value + event.deltaX / size)),\n        newValue = (this.min + percentage * range).toFixed(this.precision)\n        ;\n\n      if (event.isFinal) {\n        this.model = parseFloat(newValue, 10);\n        this.active = false;\n        return;\n      }\n\n      this.position = modelToPosition(newValue, this.min, this.max, size);\n      this.active = true;\n    },\n    update: function() {\n      this.position = modelToPosition(this.model, this.min, this.max, this.el.width());\n    }\n  },\n  watch: {\n    model: function(value) {\n      Vue.nextTick(this.update);\n    },\n    min: function(value) {\n      if (this.model < value) {\n        this.model = value;\n        return;\n      }\n      Vue.nextTick(this.update);\n    },\n    max: function(value) {\n      if (this.model > value) {\n        this.model = value;\n        return;\n      }\n      Vue.nextTick(this.update);\n    }\n  },\n  ready: function() {\n    this.el = $(this.$el);\n\n    this.update = quasar.debounce(this.update, 50);\n    this.update();\n\n    this.clickHandler = function(event) {\n      if (quasar.runs.with.touch && event.eventPhase === Event.BUBBLING_PHASE) {\n        // panning already dealt with this;\n        return;\n      }\n\n      var\n        range = this.max - this.min,\n        percentage = Math.min(1, Math.max(0, event.offsetX / this.el.width()))\n        ;\n\n      this.model = parseFloat((this.min + percentage * range).toFixed(this.precision), 10);\n    }.bind(this);\n\n    this.el.click(this.clickHandler);\n  },\n  destroy: function() {\n    this.el.off('click', this.clickHandler);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhbmdlL3JhbmdlLmpzPzFkNGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vcmFuZ2UuaHRtbCcpO1xuXG5mdW5jdGlvbiBtb2RlbFRvUG9zaXRpb24obW9kZWwsIG1pbiwgbWF4LCBzaXplKSB7XG4gIHJldHVybiAobW9kZWwgLSBtaW4pIC8gKG1heCAtIG1pbikgKiAxMDAgKyAnJSc7XG59XG5cblZ1ZS5jb21wb25lbnQoJ3JhbmdlJywge1xuICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gIHByb3BzOiB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHR3b1dheTogdHJ1ZSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgY29lcmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1pbjoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBjb2VyY2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWF4OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGNvZXJjZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVjaXNpb246IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGNvZXJjZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246IDAsXG4gICAgICBhY3RpdmU6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHBhbjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhclxuICAgICAgICBzaXplID0gdGhpcy5lbC53aWR0aCgpLFxuICAgICAgICByYW5nZSA9IHRoaXMubWF4IC0gdGhpcy5taW4sXG4gICAgICAgIHZhbHVlID0gKHRoaXMubW9kZWwgLSB0aGlzLm1pbikgLyByYW5nZSxcbiAgICAgICAgcGVyY2VudGFnZSA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHZhbHVlICsgZXZlbnQuZGVsdGFYIC8gc2l6ZSkpLFxuICAgICAgICBuZXdWYWx1ZSA9ICh0aGlzLm1pbiArIHBlcmNlbnRhZ2UgKiByYW5nZSkudG9GaXhlZCh0aGlzLnByZWNpc2lvbilcbiAgICAgICAgO1xuXG4gICAgICBpZiAoZXZlbnQuaXNGaW5hbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gcGFyc2VGbG9hdChuZXdWYWx1ZSwgMTApO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9zaXRpb24gPSBtb2RlbFRvUG9zaXRpb24obmV3VmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCwgc2l6ZSk7XG4gICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IG1vZGVsVG9Qb3NpdGlvbih0aGlzLm1vZGVsLCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuZWwud2lkdGgoKSk7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIG1vZGVsOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgVnVlLm5leHRUaWNrKHRoaXMudXBkYXRlKTtcbiAgICB9LFxuICAgIG1pbjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLm1vZGVsIDwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBWdWUubmV4dFRpY2sodGhpcy51cGRhdGUpO1xuICAgIH0sXG4gICAgbWF4OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMubW9kZWwgPiB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1vZGVsID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFZ1ZS5uZXh0VGljayh0aGlzLnVwZGF0ZSk7XG4gICAgfVxuICB9LFxuICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbCA9ICQodGhpcy4kZWwpO1xuXG4gICAgdGhpcy51cGRhdGUgPSBxdWFzYXIuZGVib3VuY2UodGhpcy51cGRhdGUsIDUwKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdGhpcy5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKHF1YXNhci5ydW5zLndpdGgudG91Y2ggJiYgZXZlbnQuZXZlbnRQaGFzZSA9PT0gRXZlbnQuQlVCQkxJTkdfUEhBU0UpIHtcbiAgICAgICAgLy8gcGFubmluZyBhbHJlYWR5IGRlYWx0IHdpdGggdGhpcztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXJcbiAgICAgICAgcmFuZ2UgPSB0aGlzLm1heCAtIHRoaXMubWluLFxuICAgICAgICBwZXJjZW50YWdlID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgZXZlbnQub2Zmc2V0WCAvIHRoaXMuZWwud2lkdGgoKSkpXG4gICAgICAgIDtcblxuICAgICAgdGhpcy5tb2RlbCA9IHBhcnNlRmxvYXQoKHRoaXMubWluICsgcGVyY2VudGFnZSAqIHJhbmdlKS50b0ZpeGVkKHRoaXMucHJlY2lzaW9uKSwgMTApO1xuICAgIH0uYmluZCh0aGlzKTtcblxuICAgIHRoaXMuZWwuY2xpY2sodGhpcy5jbGlja0hhbmRsZXIpO1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmVsLm9mZignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvcmFuZ2UvcmFuZ2UuanNcbiAqKiBtb2R1bGUgaWQgPSA3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 78 */
/***/ function(module, exports) {

	eval("module.exports = \"<div\\n  class=\\\"quasar-range non-selectable\\\"\\n  :class=\\\"{active: active}\\\"\\n  v-touch:pan-x=\\\"pan\\\"\\n>\\n  <div class=\\\"quasar-range-container\\\">\\n    <div class=\\\"quasar-range-thumb\\\" :style=\\\"{left: position}\\\"></div>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhbmdlL3JhbmdlLmh0bWw/ZTNlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2RUFBNkUsZUFBZSwwSEFBMEgsZUFBZSIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2XFxuICBjbGFzcz1cXFwicXVhc2FyLXJhbmdlIG5vbi1zZWxlY3RhYmxlXFxcIlxcbiAgOmNsYXNzPVxcXCJ7YWN0aXZlOiBhY3RpdmV9XFxcIlxcbiAgdi10b3VjaDpwYW4teD1cXFwicGFuXFxcIlxcbj5cXG4gIDxkaXYgY2xhc3M9XFxcInF1YXNhci1yYW5nZS1jb250YWluZXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJxdWFzYXItcmFuZ2UtdGh1bWJcXFwiIDpzdHlsZT1cXFwie2xlZnQ6IHBvc2l0aW9ufVxcXCI+PC9kaXY+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhbmdlL3JhbmdlLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA3OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(80);\n\nVue.component('rating', {\n  template: template,\n  props: {\n    model: {\n      type: Number,\n      default: 0,\n      required: true\n    },\n    maxGrade: {\n      type: Number,\n      required: true\n    },\n    icon: {\n      type: String,\n      default: 'grade'\n    }\n  },\n  data: function() {\n    return {\n      mouseModel: 0\n    };\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhdGluZy9yYXRpbmcuanM/ZGRiOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJ3JhdyEuL3JhdGluZy5odG1sJyk7XG5cblZ1ZS5jb21wb25lbnQoJ3JhdGluZycsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIG1heEdyYWRlOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2dyYWRlJ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vdXNlTW9kZWw6IDBcbiAgICB9O1xuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhdGluZy9yYXRpbmcuanNcbiAqKiBtb2R1bGUgaWQgPSA3OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 80 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-rating\\\">\\n  <i\\n    v-for=\\\"index in maxGrade\\\"\\n    :class=\\\"{active: (!mouseModel && model > index) || (mouseModel && mouseModel > index)}\\\"\\n    @click=\\\"model = index + 1\\\"\\n    @mouseover=\\\"mouseModel = index + 1\\\"\\n    @mouseout=\\\"mouseModel = 0\\\"\\n  >{{icon}}</i>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3JhdGluZy9yYXRpbmcuaHRtbD9kYjAzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNHQUFzRyw2RUFBNkUsd0hBQXdILE1BQU0iLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLXJhdGluZ1xcXCI+XFxuICA8aVxcbiAgICB2LWZvcj1cXFwiaW5kZXggaW4gbWF4R3JhZGVcXFwiXFxuICAgIDpjbGFzcz1cXFwie2FjdGl2ZTogKCFtb3VzZU1vZGVsICYmIG1vZGVsID4gaW5kZXgpIHx8IChtb3VzZU1vZGVsICYmIG1vdXNlTW9kZWwgPiBpbmRleCl9XFxcIlxcbiAgICBAY2xpY2s9XFxcIm1vZGVsID0gaW5kZXggKyAxXFxcIlxcbiAgICBAbW91c2VvdmVyPVxcXCJtb3VzZU1vZGVsID0gaW5kZXggKyAxXFxcIlxcbiAgICBAbW91c2VvdXQ9XFxcIm1vdXNlTW9kZWwgPSAwXFxcIlxcbiAgPnt7aWNvbn19PC9pPlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvcmF0aW5nL3JhdGluZy5odG1sXG4gKiogbW9kdWxlIGlkID0gODBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  screenTemplate = __webpack_require__(82),\n  navigationTemplate = __webpack_require__(83),\n  scrollNavigationSpeed = 5 // in pixels\n  ;\n\nVue.component('screen', {\n  template: screenTemplate\n});\n\nVue.component('page', {\n  template: '<div class=\"quasar-pages\"><slot></slot></div>'\n});\n\nVue.component('screen-tabs', {\n  template: navigationTemplate,\n  data: function() {\n    var\n      tabs,\n      pages = quasar.data.manifest.pages\n      ;\n\n    tabs = Object.keys(pages).filter(function(key) {\n      return pages[key].navigation && pages[key].layout === quasar.current.layout.name;\n    });\n    tabs = tabs.map(function(tab) {\n      tab = pages[tab];\n      tab.navigation.order = tab.navigation.order || 100;\n      return tab;\n    });\n\n    tabs = tabs.sort(function(tab, secondTab) {\n      return tab.navigation.order - secondTab.navigation.order;\n    });\n\n    return {\n      page: '',\n      group: '',\n      tabs: tabs\n    };\n  },\n  methods: {\n    navigateTo: function(tab) {\n      var\n        name = tab.name,\n        route = tab.navigation.route\n        ;\n\n      quasar.navigate.to.route(\n        '#/' +\n        (name === 'index' && !route ? '' : name) +\n        (route ? (name !== 'index' ? '/' : '') + route : '')\n      );\n    },\n    update: function(context) {\n      var tabController = this.$refs.tabController;\n\n      this.page = context.name;\n      var manifest = context.manifest;\n\n      if (manifest.navigation && manifest.navigation.group) {\n        this.group = manifest.navigation.group;\n      }\n      else {\n        this.group = '';\n      }\n    }\n  },\n  ready: function() {\n    quasar.events.on('app:page:ready', this.update);\n  },\n  beforeDestroy: function() {\n    quasar.events.off('app:page:ready', this.update);\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NjcmVlbi9zY3JlZW4uanM/YzE3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyXG4gIHNjcmVlblRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vc2NyZWVuLmh0bWwnKSxcbiAgbmF2aWdhdGlvblRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vc2NyZWVuLXRhYnMuaHRtbCcpLFxuICBzY3JvbGxOYXZpZ2F0aW9uU3BlZWQgPSA1IC8vIGluIHBpeGVsc1xuICA7XG5cblZ1ZS5jb21wb25lbnQoJ3NjcmVlbicsIHtcbiAgdGVtcGxhdGU6IHNjcmVlblRlbXBsYXRlXG59KTtcblxuVnVlLmNvbXBvbmVudCgncGFnZScsIHtcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicXVhc2FyLXBhZ2VzXCI+PHNsb3Q+PC9zbG90PjwvZGl2Pidcbn0pO1xuXG5WdWUuY29tcG9uZW50KCdzY3JlZW4tdGFicycsIHtcbiAgdGVtcGxhdGU6IG5hdmlnYXRpb25UZW1wbGF0ZSxcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgdmFyXG4gICAgICB0YWJzLFxuICAgICAgcGFnZXMgPSBxdWFzYXIuZGF0YS5tYW5pZmVzdC5wYWdlc1xuICAgICAgO1xuXG4gICAgdGFicyA9IE9iamVjdC5rZXlzKHBhZ2VzKS5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gcGFnZXNba2V5XS5uYXZpZ2F0aW9uICYmIHBhZ2VzW2tleV0ubGF5b3V0ID09PSBxdWFzYXIuY3VycmVudC5sYXlvdXQubmFtZTtcbiAgICB9KTtcbiAgICB0YWJzID0gdGFicy5tYXAoZnVuY3Rpb24odGFiKSB7XG4gICAgICB0YWIgPSBwYWdlc1t0YWJdO1xuICAgICAgdGFiLm5hdmlnYXRpb24ub3JkZXIgPSB0YWIubmF2aWdhdGlvbi5vcmRlciB8fCAxMDA7XG4gICAgICByZXR1cm4gdGFiO1xuICAgIH0pO1xuXG4gICAgdGFicyA9IHRhYnMuc29ydChmdW5jdGlvbih0YWIsIHNlY29uZFRhYikge1xuICAgICAgcmV0dXJuIHRhYi5uYXZpZ2F0aW9uLm9yZGVyIC0gc2Vjb25kVGFiLm5hdmlnYXRpb24ub3JkZXI7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFnZTogJycsXG4gICAgICBncm91cDogJycsXG4gICAgICB0YWJzOiB0YWJzXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIG5hdmlnYXRlVG86IGZ1bmN0aW9uKHRhYikge1xuICAgICAgdmFyXG4gICAgICAgIG5hbWUgPSB0YWIubmFtZSxcbiAgICAgICAgcm91dGUgPSB0YWIubmF2aWdhdGlvbi5yb3V0ZVxuICAgICAgICA7XG5cbiAgICAgIHF1YXNhci5uYXZpZ2F0ZS50by5yb3V0ZShcbiAgICAgICAgJyMvJyArXG4gICAgICAgIChuYW1lID09PSAnaW5kZXgnICYmICFyb3V0ZSA/ICcnIDogbmFtZSkgK1xuICAgICAgICAocm91dGUgPyAobmFtZSAhPT0gJ2luZGV4JyA/ICcvJyA6ICcnKSArIHJvdXRlIDogJycpXG4gICAgICApO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICB2YXIgdGFiQ29udHJvbGxlciA9IHRoaXMuJHJlZnMudGFiQ29udHJvbGxlcjtcblxuICAgICAgdGhpcy5wYWdlID0gY29udGV4dC5uYW1lO1xuICAgICAgdmFyIG1hbmlmZXN0ID0gY29udGV4dC5tYW5pZmVzdDtcblxuICAgICAgaWYgKG1hbmlmZXN0Lm5hdmlnYXRpb24gJiYgbWFuaWZlc3QubmF2aWdhdGlvbi5ncm91cCkge1xuICAgICAgICB0aGlzLmdyb3VwID0gbWFuaWZlc3QubmF2aWdhdGlvbi5ncm91cDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmdyb3VwID0gJyc7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcXVhc2FyLmV2ZW50cy5vbignYXBwOnBhZ2U6cmVhZHknLCB0aGlzLnVwZGF0ZSk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgIHF1YXNhci5ldmVudHMub2ZmKCdhcHA6cGFnZTpyZWFkeScsIHRoaXMudXBkYXRlKTtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zY3JlZW4vc2NyZWVuLmpzXG4gKiogbW9kdWxlIGlkID0gODFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 82 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"screen fullscreen column full-height full-width\\\">\\n  <div class=\\\"screen-header\\\">\\n    <slot name=\\\"header\\\"></slot>\\n  </div>\\n\\n  <div class=\\\"screen-content row auto\\\">\\n    <slot></slot>\\n  </div>\\n\\n  <div class=\\\"screen-footer\\\">\\n    <slot name=\\\"footer\\\"></slot>\\n  </div>\\n\\n  <div class=\\\"screen-navigation\\\">\\n    <slot name=\\\"navigation\\\"></slot>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NjcmVlbi9zY3JlZW4uaHRtbD8wMmI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNjcmVlbiBmdWxsc2NyZWVuIGNvbHVtbiBmdWxsLWhlaWdodCBmdWxsLXdpZHRoXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcInNjcmVlbi1oZWFkZXJcXFwiPlxcbiAgICA8c2xvdCBuYW1lPVxcXCJoZWFkZXJcXFwiPjwvc2xvdD5cXG4gIDwvZGl2PlxcblxcbiAgPGRpdiBjbGFzcz1cXFwic2NyZWVuLWNvbnRlbnQgcm93IGF1dG9cXFwiPlxcbiAgICA8c2xvdD48L3Nsb3Q+XFxuICA8L2Rpdj5cXG5cXG4gIDxkaXYgY2xhc3M9XFxcInNjcmVlbi1mb290ZXJcXFwiPlxcbiAgICA8c2xvdCBuYW1lPVxcXCJmb290ZXJcXFwiPjwvc2xvdD5cXG4gIDwvZGl2PlxcblxcbiAgPGRpdiBjbGFzcz1cXFwic2NyZWVuLW5hdmlnYXRpb25cXFwiPlxcbiAgICA8c2xvdCBuYW1lPVxcXCJuYXZpZ2F0aW9uXFxcIj48L3Nsb3Q+XFxuICA8L2Rpdj5cXG48L2Rpdj5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NjcmVlbi9zY3JlZW4uaHRtbFxuICoqIG1vZHVsZSBpZCA9IDgyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 83 */
/***/ function(module, exports) {

	eval("module.exports = \"<tabs :class=\\\"{hidden: group.length === 0}\\\" v-ref:tab-controller>\\n  <tab\\n    v-for=\\\"tab in tabs\\\"\\n    :active=\\\"tab.name === page\\\"\\n    :hidden=\\\"tab.navigation.group !== group\\\"\\n    :icon=\\\"tab.icon\\\"\\n    :hide=\\\"tab.navigation.hide\\\"\\n    @click=\\\"navigateTo(tab)\\\"\\n  >\\n    {{tab.label}}\\n  </tab>\\n</tabs>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NjcmVlbi9zY3JlZW4tdGFicy5odG1sP2RlMTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDLDJCQUEyQixzUEFBc1AsV0FBVyIsImZpbGUiOiI4My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGFicyA6Y2xhc3M9XFxcIntoaWRkZW46IGdyb3VwLmxlbmd0aCA9PT0gMH1cXFwiIHYtcmVmOnRhYi1jb250cm9sbGVyPlxcbiAgPHRhYlxcbiAgICB2LWZvcj1cXFwidGFiIGluIHRhYnNcXFwiXFxuICAgIDphY3RpdmU9XFxcInRhYi5uYW1lID09PSBwYWdlXFxcIlxcbiAgICA6aGlkZGVuPVxcXCJ0YWIubmF2aWdhdGlvbi5ncm91cCAhPT0gZ3JvdXBcXFwiXFxuICAgIDppY29uPVxcXCJ0YWIuaWNvblxcXCJcXG4gICAgOmhpZGU9XFxcInRhYi5uYXZpZ2F0aW9uLmhpZGVcXFwiXFxuICAgIEBjbGljaz1cXFwibmF2aWdhdGVUbyh0YWIpXFxcIlxcbiAgPlxcbiAgICB7e3RhYi5sYWJlbH19XFxuICA8L3RhYj5cXG48L3RhYnM+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zY3JlZW4vc2NyZWVuLXRhYnMuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDgzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(85);\n\nfunction getBoolean(value) {\n  return value ? true : false;\n}\n\nVue.component('slider', {\n  template: template,\n  props: {\n    arrows: {\n      type: Boolean,\n      default: false,\n      coerce: getBoolean\n    },\n    dots: {\n      type: Boolean,\n      default: false,\n      coerce: getBoolean\n    },\n    fullscreen: {\n      type: Boolean,\n      default: false,\n      coerce: getBoolean\n    },\n    actions: {\n      type: Boolean,\n      default: false,\n      coerce: getBoolean\n    }\n  },\n  data: function() {\n    return {\n      position: 0,\n      slide: 0,\n      slidesNumber: 0,\n      inFullscreen: false\n    };\n  },\n  computed: {\n    toolbar: function() {\n      return this.dots || this.fullscreen || this.actions;\n    }\n  },\n  methods: {\n    pan: function(event) {\n      if (!this.hasOwnProperty('initialPosition')) {\n        this.initialPosition = this.position;\n        this.track.velocity('stop');\n      }\n\n      var delta = event.deltaX;\n\n      if (\n        this.slide === 0 && event.deltaX > 0 ||\n        this.slide === this.slidesNumber - 1 && event.deltaX < 0\n      ) {\n        delta = delta / 10;\n      }\n\n      this.position = this.initialPosition + delta / this.track.width() * 100;\n      this.track.css('transform', 'translateX(' + this.position + '%)');\n\n      if (event.isFinal) {\n        if (event.distance < 100) {\n          this.goToSlide(this.slide);\n        }\n        else {\n          this.goToSlide(event.deltaX < 0 ? this.slide + 1 : this.slide - 1);\n        }\n        delete this.initialPosition;\n      }\n    },\n    goToSlide: function(slide, noAnimation) {\n      this.slide = Math.min(this.slidesNumber - 1, Math.max(0, slide));\n      this.track.velocity('stop').velocity({\n        translateX: [- this.slide * 100 + '%', this.position + '%']\n      }, noAnimation ? {duration: 0} : undefined);\n      this.position = - this.slide * 100;\n    },\n    toggleFullscreen: function() {\n      this.inFullscreen = !this.inFullscreen;\n    }\n  },\n  ready: function() {\n    this.track = $(this.$els.track);\n    this.slidesNumber = this.track.children().length;\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NsaWRlci9zbGlkZXIuanM/ZDA2ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxpQkFBaUIsWUFBWTtBQUNwQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6Ijg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVtcGxhdGUgPSByZXF1aXJlKCdyYXchLi9zbGlkZXIuaHRtbCcpO1xuXG5mdW5jdGlvbiBnZXRCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHRydWUgOiBmYWxzZTtcbn1cblxuVnVlLmNvbXBvbmVudCgnc2xpZGVyJywge1xuICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gIHByb3BzOiB7XG4gICAgYXJyb3dzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICBjb2VyY2U6IGdldEJvb2xlYW5cbiAgICB9LFxuICAgIGRvdHM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGNvZXJjZTogZ2V0Qm9vbGVhblxuICAgIH0sXG4gICAgZnVsbHNjcmVlbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgY29lcmNlOiBnZXRCb29sZWFuXG4gICAgfSxcbiAgICBhY3Rpb25zOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICBjb2VyY2U6IGdldEJvb2xlYW5cbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogMCxcbiAgICAgIHNsaWRlOiAwLFxuICAgICAgc2xpZGVzTnVtYmVyOiAwLFxuICAgICAgaW5GdWxsc2NyZWVuOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgdG9vbGJhcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb3RzIHx8IHRoaXMuZnVsbHNjcmVlbiB8fCB0aGlzLmFjdGlvbnM7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcGFuOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KCdpbml0aWFsUG9zaXRpb24nKSkge1xuICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMudHJhY2sudmVsb2NpdHkoJ3N0b3AnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gZXZlbnQuZGVsdGFYO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc2xpZGUgPT09IDAgJiYgZXZlbnQuZGVsdGFYID4gMCB8fFxuICAgICAgICB0aGlzLnNsaWRlID09PSB0aGlzLnNsaWRlc051bWJlciAtIDEgJiYgZXZlbnQuZGVsdGFYIDwgMFxuICAgICAgKSB7XG4gICAgICAgIGRlbHRhID0gZGVsdGEgLyAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uICsgZGVsdGEgLyB0aGlzLnRyYWNrLndpZHRoKCkgKiAxMDA7XG4gICAgICB0aGlzLnRyYWNrLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoJyArIHRoaXMucG9zaXRpb24gKyAnJSknKTtcblxuICAgICAgaWYgKGV2ZW50LmlzRmluYWwpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRpc3RhbmNlIDwgMTAwKSB7XG4gICAgICAgICAgdGhpcy5nb1RvU2xpZGUodGhpcy5zbGlkZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5nb1RvU2xpZGUoZXZlbnQuZGVsdGFYIDwgMCA/IHRoaXMuc2xpZGUgKyAxIDogdGhpcy5zbGlkZSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLmluaXRpYWxQb3NpdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvVG9TbGlkZTogZnVuY3Rpb24oc2xpZGUsIG5vQW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLnNsaWRlID0gTWF0aC5taW4odGhpcy5zbGlkZXNOdW1iZXIgLSAxLCBNYXRoLm1heCgwLCBzbGlkZSkpO1xuICAgICAgdGhpcy50cmFjay52ZWxvY2l0eSgnc3RvcCcpLnZlbG9jaXR5KHtcbiAgICAgICAgdHJhbnNsYXRlWDogWy0gdGhpcy5zbGlkZSAqIDEwMCArICclJywgdGhpcy5wb3NpdGlvbiArICclJ11cbiAgICAgIH0sIG5vQW5pbWF0aW9uID8ge2R1cmF0aW9uOiAwfSA6IHVuZGVmaW5lZCk7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gLSB0aGlzLnNsaWRlICogMTAwO1xuICAgIH0sXG4gICAgdG9nZ2xlRnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmluRnVsbHNjcmVlbiA9ICF0aGlzLmluRnVsbHNjcmVlbjtcbiAgICB9XG4gIH0sXG4gIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyYWNrID0gJCh0aGlzLiRlbHMudHJhY2spO1xuICAgIHRoaXMuc2xpZGVzTnVtYmVyID0gdGhpcy50cmFjay5jaGlsZHJlbigpLmxlbmd0aDtcbiAgfVxufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zbGlkZXIvc2xpZGVyLmpzXG4gKiogbW9kdWxlIGlkID0gODRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 85 */
/***/ function(module, exports) {

	eval("module.exports = \"<div class=\\\"quasar-slider\\\" :class=\\\"{fullscreen: inFullscreen}\\\">\\n  <div class=\\\"quasar-slider-inner\\\">\\n    <div\\n      v-el:track\\n      class=\\\"quasar-slider-track\\\"\\n      :class=\\\"{'with-arrows': arrows, 'with-toolbar': toolbar}\\\"\\n      v-touch:pan-x=\\\"pan\\\"\\n    >\\n      <slot name=\\\"slide\\\"></slot>\\n    </div>\\n    <div\\n      v-if=\\\"arrows\\\"\\n      class=\\\"quasar-slider-left-button row items-center justify-center\\\"\\n      :class=\\\"{hidden: slide === 0}\\\"\\n    >\\n      <i @click=\\\"goToSlide(slide - 1)\\\">keyboard_arrow_left</i>\\n    </div>\\n    <div\\n      v-if=\\\"arrows\\\"\\n      class=\\\"quasar-slider-right-button row items-center justify-center\\\"\\n      :class=\\\"{hidden: slide === slidesNumber - 1}\\\"\\n      @click=\\\"goToSlide(slide + 1)\\\"\\n    >\\n      <i>keyboard_arrow_right</i>\\n    </div>\\n    <div v-if=\\\"toolbar\\\" class=\\\"quasar-slider-toolbar row items-center justify-end\\\">\\n      <div class=\\\"quasar-slider-dots auto row items-center justify-center\\\">\\n        <i v-if=\\\"dots\\\" v-for=\\\"n in slidesNumber\\\" @click=\\\"goToSlide(n)\\\">\\n          <span v-show=\\\"n !== slide\\\">panorama_fish_eye</span>\\n          <span v-else>lens</span>\\n        </i>\\n      </div>\\n      <div v-if=\\\"fullscreen || actions\\\" class=\\\"row items-center\\\">\\n        <slot name=\\\"action\\\"></slot>\\n        <i v-if=\\\"fullscreen\\\" @click=\\\"toggleFullscreen()\\\">\\n          <span v-show=\\\"!inFullscreen\\\">fullscreen</span>\\n          <span v-else>fullscreen_exit</span>\\n        </i>\\n      </div>\\n    </div>\\n    <slot></slot>\\n  </div>\\n</div>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NsaWRlci9zbGlkZXIuaHRtbD82MTZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RCx5QkFBeUIsNkhBQTZILCtDQUErQyxvTkFBb04sb0JBQW9CLHNOQUFzTixtQ0FBbUMiLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicXVhc2FyLXNsaWRlclxcXCIgOmNsYXNzPVxcXCJ7ZnVsbHNjcmVlbjogaW5GdWxsc2NyZWVufVxcXCI+XFxuICA8ZGl2IGNsYXNzPVxcXCJxdWFzYXItc2xpZGVyLWlubmVyXFxcIj5cXG4gICAgPGRpdlxcbiAgICAgIHYtZWw6dHJhY2tcXG4gICAgICBjbGFzcz1cXFwicXVhc2FyLXNsaWRlci10cmFja1xcXCJcXG4gICAgICA6Y2xhc3M9XFxcInsnd2l0aC1hcnJvd3MnOiBhcnJvd3MsICd3aXRoLXRvb2xiYXInOiB0b29sYmFyfVxcXCJcXG4gICAgICB2LXRvdWNoOnBhbi14PVxcXCJwYW5cXFwiXFxuICAgID5cXG4gICAgICA8c2xvdCBuYW1lPVxcXCJzbGlkZVxcXCI+PC9zbG90PlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdlxcbiAgICAgIHYtaWY9XFxcImFycm93c1xcXCJcXG4gICAgICBjbGFzcz1cXFwicXVhc2FyLXNsaWRlci1sZWZ0LWJ1dHRvbiByb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXFxcIlxcbiAgICAgIDpjbGFzcz1cXFwie2hpZGRlbjogc2xpZGUgPT09IDB9XFxcIlxcbiAgICA+XFxuICAgICAgPGkgQGNsaWNrPVxcXCJnb1RvU2xpZGUoc2xpZGUgLSAxKVxcXCI+a2V5Ym9hcmRfYXJyb3dfbGVmdDwvaT5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXZcXG4gICAgICB2LWlmPVxcXCJhcnJvd3NcXFwiXFxuICAgICAgY2xhc3M9XFxcInF1YXNhci1zbGlkZXItcmlnaHQtYnV0dG9uIHJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcXFwiXFxuICAgICAgOmNsYXNzPVxcXCJ7aGlkZGVuOiBzbGlkZSA9PT0gc2xpZGVzTnVtYmVyIC0gMX1cXFwiXFxuICAgICAgQGNsaWNrPVxcXCJnb1RvU2xpZGUoc2xpZGUgKyAxKVxcXCJcXG4gICAgPlxcbiAgICAgIDxpPmtleWJvYXJkX2Fycm93X3JpZ2h0PC9pPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiB2LWlmPVxcXCJ0b29sYmFyXFxcIiBjbGFzcz1cXFwicXVhc2FyLXNsaWRlci10b29sYmFyIHJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1lbmRcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInF1YXNhci1zbGlkZXItZG90cyBhdXRvIHJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcXFwiPlxcbiAgICAgICAgPGkgdi1pZj1cXFwiZG90c1xcXCIgdi1mb3I9XFxcIm4gaW4gc2xpZGVzTnVtYmVyXFxcIiBAY2xpY2s9XFxcImdvVG9TbGlkZShuKVxcXCI+XFxuICAgICAgICAgIDxzcGFuIHYtc2hvdz1cXFwibiAhPT0gc2xpZGVcXFwiPnBhbm9yYW1hX2Zpc2hfZXllPC9zcGFuPlxcbiAgICAgICAgICA8c3BhbiB2LWVsc2U+bGVuczwvc3Bhbj5cXG4gICAgICAgIDwvaT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IHYtaWY9XFxcImZ1bGxzY3JlZW4gfHwgYWN0aW9uc1xcXCIgY2xhc3M9XFxcInJvdyBpdGVtcy1jZW50ZXJcXFwiPlxcbiAgICAgICAgPHNsb3QgbmFtZT1cXFwiYWN0aW9uXFxcIj48L3Nsb3Q+XFxuICAgICAgICA8aSB2LWlmPVxcXCJmdWxsc2NyZWVuXFxcIiBAY2xpY2s9XFxcInRvZ2dsZUZ1bGxzY3JlZW4oKVxcXCI+XFxuICAgICAgICAgIDxzcGFuIHYtc2hvdz1cXFwiIWluRnVsbHNjcmVlblxcXCI+ZnVsbHNjcmVlbjwvc3Bhbj5cXG4gICAgICAgICAgPHNwYW4gdi1lbHNlPmZ1bGxzY3JlZW5fZXhpdDwvc3Bhbj5cXG4gICAgICAgIDwvaT5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxzbG90Pjwvc2xvdD5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc2xpZGVyL3NsaWRlci5odG1sXG4gKiogbW9kdWxlIGlkID0gODVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar templates = {\n  audio: __webpack_require__(87),\n  ball: __webpack_require__(88),\n  bars: __webpack_require__(89),\n  circles: __webpack_require__(90),\n  dots: __webpack_require__(91),\n  grid: __webpack_require__(92),\n  hearts: __webpack_require__(93),\n  ios: __webpack_require__(94),\n  oval: __webpack_require__(95),\n  puff: __webpack_require__(96),\n  rings: __webpack_require__(97),\n  tail: __webpack_require__(98)\n};\n\nObject.keys(templates).forEach(function(spinner) {\n  Vue.partial('quasar-partial-' + spinner, templates[spinner]);\n});\n\nVue.component('spinner', {\n  template: '<partial :name=\"partialName\"></partial>',\n  props: {\n    name: {\n      type: String,\n      default: quasar.runs.on.ios ? 'ios' : 'tail'\n    },\n    size: {\n      type: Number,\n      default: 64\n    },\n    color: {\n      type: String,\n      default: '#000'\n    }\n  },\n  computed: {\n    partialName: function() {\n      return 'quasar-partial-' + this.name;\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3Bpbm5lci5qcz84M2RhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlcyA9IHtcbiAgYXVkaW86IHJlcXVpcmUoJ3JhdyEuL3N2Zy1zcGlubmVycy9hdWRpby5zdmcnKSxcbiAgYmFsbDogcmVxdWlyZSgncmF3IS4vc3ZnLXNwaW5uZXJzL2JhbGwuc3ZnJyksXG4gIGJhcnM6IHJlcXVpcmUoJ3JhdyEuL3N2Zy1zcGlubmVycy9iYXJzLnN2ZycpLFxuICBjaXJjbGVzOiByZXF1aXJlKCdyYXchLi9zdmctc3Bpbm5lcnMvY2lyY2xlcy5zdmcnKSxcbiAgZG90czogcmVxdWlyZSgncmF3IS4vc3ZnLXNwaW5uZXJzL2RvdHMuc3ZnJyksXG4gIGdyaWQ6IHJlcXVpcmUoJ3JhdyEuL3N2Zy1zcGlubmVycy9ncmlkLnN2ZycpLFxuICBoZWFydHM6IHJlcXVpcmUoJ3JhdyEuL3N2Zy1zcGlubmVycy9oZWFydHMuc3ZnJyksXG4gIGlvczogcmVxdWlyZSgncmF3IS4vc3ZnLXNwaW5uZXJzL2lvcy5zdmcnKSxcbiAgb3ZhbDogcmVxdWlyZSgncmF3IS4vc3ZnLXNwaW5uZXJzL292YWwuc3ZnJyksXG4gIHB1ZmY6IHJlcXVpcmUoJ3JhdyEuL3N2Zy1zcGlubmVycy9wdWZmLnN2ZycpLFxuICByaW5nczogcmVxdWlyZSgncmF3IS4vc3ZnLXNwaW5uZXJzL3JpbmdzLnN2ZycpLFxuICB0YWlsOiByZXF1aXJlKCdyYXchLi9zdmctc3Bpbm5lcnMvdGFpbC5zdmcnKVxufTtcblxuT2JqZWN0LmtleXModGVtcGxhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uKHNwaW5uZXIpIHtcbiAgVnVlLnBhcnRpYWwoJ3F1YXNhci1wYXJ0aWFsLScgKyBzcGlubmVyLCB0ZW1wbGF0ZXNbc3Bpbm5lcl0pO1xufSk7XG5cblZ1ZS5jb21wb25lbnQoJ3NwaW5uZXInLCB7XG4gIHRlbXBsYXRlOiAnPHBhcnRpYWwgOm5hbWU9XCJwYXJ0aWFsTmFtZVwiPjwvcGFydGlhbD4nLFxuICBwcm9wczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IHF1YXNhci5ydW5zLm9uLmlvcyA/ICdpb3MnIDogJ3RhaWwnXG4gICAgfSxcbiAgICBzaXplOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiA2NFxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICcjMDAwJ1xuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBwYXJ0aWFsTmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ3F1YXNhci1wYXJ0aWFsLScgKyB0aGlzLm5hbWU7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3Bpbm5lci5qc1xuICoqIG1vZHVsZSBpZCA9IDg2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 87 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 55 80\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g transform=\\\"matrix(1 0 0 -1 0 80)\\\"><rect width=\\\"10\\\" height=\\\"20\\\" rx=\\\"3\\\"><animate attributeName=\\\"height\\\" begin=\\\"0s\\\" dur=\\\"4.3s\\\" values=\\\"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"15\\\" width=\\\"10\\\" height=\\\"80\\\" rx=\\\"3\\\"><animate attributeName=\\\"height\\\" begin=\\\"0s\\\" dur=\\\"2s\\\" values=\\\"80;55;33;5;75;23;73;33;12;14;60;80\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"30\\\" width=\\\"10\\\" height=\\\"50\\\" rx=\\\"3\\\"><animate attributeName=\\\"height\\\" begin=\\\"0s\\\" dur=\\\"1.4s\\\" values=\\\"50;34;78;23;56;23;34;76;80;54;21;50\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"45\\\" width=\\\"10\\\" height=\\\"30\\\" rx=\\\"3\\\"><animate attributeName=\\\"height\\\" begin=\\\"0s\\\" dur=\\\"2s\\\" values=\\\"30;45;13;80;56;72;45;76;34;23;67;30\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2F1ZGlvLnN2Zz9lMGQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFUQUFxVCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLHFMQUFxTCxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLHVMQUF1TCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLHFMQUFxTCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHIiwiZmlsZSI6Ijg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgY2xhc3M9XFxcInF1YXNhci1zcGlubmVyXFxcIiA6ZmlsbD1cXFwiY29sb3JcXFwiIDp3aWR0aD1cXFwic2l6ZVxcXCIgOmhlaWdodD1cXFwic2l6ZVxcXCIgdmlld0JveD1cXFwiMCAwIDU1IDgwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxnIHRyYW5zZm9ybT1cXFwibWF0cml4KDEgMCAwIC0xIDAgODApXFxcIj48cmVjdCB3aWR0aD1cXFwiMTBcXFwiIGhlaWdodD1cXFwiMjBcXFwiIHJ4PVxcXCIzXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJoZWlnaHRcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCI0LjNzXFxcIiB2YWx1ZXM9XFxcIjIwOzQ1OzU3OzgwOzY0OzMyOzY2OzQ1OzY0OzIzOzY2OzEzOzY0OzU2OzM0OzM0OzI7MjM7NzY7Nzk7MjBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9yZWN0PjxyZWN0IHg9XFxcIjE1XFxcIiB3aWR0aD1cXFwiMTBcXFwiIGhlaWdodD1cXFwiODBcXFwiIHJ4PVxcXCIzXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJoZWlnaHRcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIyc1xcXCIgdmFsdWVzPVxcXCI4MDs1NTszMzs1Ozc1OzIzOzczOzMzOzEyOzE0OzYwOzgwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcmVjdD48cmVjdCB4PVxcXCIzMFxcXCIgd2lkdGg9XFxcIjEwXFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiByeD1cXFwiM1xcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiaGVpZ2h0XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS40c1xcXCIgdmFsdWVzPVxcXCI1MDszNDs3ODsyMzs1NjsyMzszNDs3Njs4MDs1NDsyMTs1MFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L3JlY3Q+PHJlY3QgeD1cXFwiNDVcXFwiIHdpZHRoPVxcXCIxMFxcXCIgaGVpZ2h0PVxcXCIzMFxcXCIgcng9XFxcIjNcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImhlaWdodFxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjJzXFxcIiB2YWx1ZXM9XFxcIjMwOzQ1OzEzOzgwOzU2OzcyOzQ1Ozc2OzM0OzIzOzY3OzMwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcmVjdD48L2c+PC9zdmc+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zcGlubmVyL3N2Zy1zcGlubmVycy9hdWRpby5zdmdcbiAqKiBtb2R1bGUgaWQgPSA4N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 88 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :stroke=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 57 57\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g transform=\\\"translate(1 1)\\\" stroke-width=\\\"2\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><circle cx=\\\"5\\\" cy=\\\"50\\\" r=\\\"5\\\"><animate attributeName=\\\"cy\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" values=\\\"50;5;50;50\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"cx\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" values=\\\"5;27;49;5\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"27\\\" cy=\\\"5\\\" r=\\\"5\\\"><animate attributeName=\\\"cy\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" from=\\\"5\\\" to=\\\"5\\\" values=\\\"5;50;50;5\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"cx\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" from=\\\"27\\\" to=\\\"27\\\" values=\\\"27;49;5;27\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"49\\\" cy=\\\"50\\\" r=\\\"5\\\"><animate attributeName=\\\"cy\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" values=\\\"50;50;5;50\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"cx\\\" from=\\\"49\\\" to=\\\"49\\\" begin=\\\"0s\\\" dur=\\\"2.2s\\\" values=\\\"49;5;27;49\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2JhbGwuc3ZnP2UxY2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNFZBQTRWLEVBQUUsR0FBRyx3SEFBd0gsR0FBRyxHQUFHLHVMQUF1TCxHQUFHLEdBQUcsOElBQThJLEdBQUcsRUFBRSxzS0FBc0ssR0FBRyxFQUFFLCtJQUErSSxFQUFFLEdBQUciLCJmaWxlIjoiODguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpzdHJva2U9XFxcImNvbG9yXFxcIiA6d2lkdGg9XFxcInNpemVcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIHZpZXdCb3g9XFxcIjAgMCA1NyA1N1xcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48ZyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgxIDEpXFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PGNpcmNsZSBjeD1cXFwiNVxcXCIgY3k9XFxcIjUwXFxcIiByPVxcXCI1XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJjeVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjIuMnNcXFwiIHZhbHVlcz1cXFwiNTA7NTs1MDs1MFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJjeFxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjIuMnNcXFwiIHZhbHVlcz1cXFwiNTsyNzs0OTs1XFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjI3XFxcIiBjeT1cXFwiNVxcXCIgcj1cXFwiNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiY3lcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIyLjJzXFxcIiBmcm9tPVxcXCI1XFxcIiB0bz1cXFwiNVxcXCIgdmFsdWVzPVxcXCI1OzUwOzUwOzVcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiY3hcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIyLjJzXFxcIiBmcm9tPVxcXCIyN1xcXCIgdG89XFxcIjI3XFxcIiB2YWx1ZXM9XFxcIjI3OzQ5OzU7MjdcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiNDlcXFwiIGN5PVxcXCI1MFxcXCIgcj1cXFwiNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiY3lcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIyLjJzXFxcIiB2YWx1ZXM9XFxcIjUwOzUwOzU7NTBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiY3hcXFwiIGZyb209XFxcIjQ5XFxcIiB0bz1cXFwiNDlcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIyLjJzXFxcIiB2YWx1ZXM9XFxcIjQ5OzU7Mjc7NDlcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PC9nPjwvc3ZnPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zdmctc3Bpbm5lcnMvYmFsbC5zdmdcbiAqKiBtb2R1bGUgaWQgPSA4OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 89 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 135 140\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect y=\\\"10\\\" width=\\\"15\\\" height=\\\"120\\\" rx=\\\"6\\\"><animate attributeName=\\\"height\\\" begin=\\\"0.5s\\\" dur=\\\"1s\\\" values=\\\"120;110;100;90;80;70;60;50;40;140;120\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" begin=\\\"0.5s\\\" dur=\\\"1s\\\" values=\\\"10;15;20;25;30;35;40;45;50;0;10\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"30\\\" y=\\\"10\\\" width=\\\"15\\\" height=\\\"120\\\" rx=\\\"6\\\"><animate attributeName=\\\"height\\\" begin=\\\"0.25s\\\" dur=\\\"1s\\\" values=\\\"120;110;100;90;80;70;60;50;40;140;120\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" begin=\\\"0.25s\\\" dur=\\\"1s\\\" values=\\\"10;15;20;25;30;35;40;45;50;0;10\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"60\\\" width=\\\"15\\\" height=\\\"140\\\" rx=\\\"6\\\"><animate attributeName=\\\"height\\\" begin=\\\"0s\\\" dur=\\\"1s\\\" values=\\\"120;110;100;90;80;70;60;50;40;140;120\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" begin=\\\"0s\\\" dur=\\\"1s\\\" values=\\\"10;15;20;25;30;35;40;45;50;0;10\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"90\\\" y=\\\"10\\\" width=\\\"15\\\" height=\\\"120\\\" rx=\\\"6\\\"><animate attributeName=\\\"height\\\" begin=\\\"0.25s\\\" dur=\\\"1s\\\" values=\\\"120;110;100;90;80;70;60;50;40;140;120\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" begin=\\\"0.25s\\\" dur=\\\"1s\\\" values=\\\"10;15;20;25;30;35;40;45;50;0;10\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect><rect x=\\\"120\\\" y=\\\"10\\\" width=\\\"15\\\" height=\\\"120\\\" rx=\\\"6\\\"><animate attributeName=\\\"height\\\" begin=\\\"0.5s\\\" dur=\\\"1s\\\" values=\\\"120;110;100;90;80;70;60;50;40;140;120\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"y\\\" begin=\\\"0.5s\\\" dur=\\\"1s\\\" values=\\\"10;15;20;25;30;35;40;45;50;0;10\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></rect></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2JhcnMuc3ZnP2I5NTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMlJBQTJSLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLHlIQUF5SCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxtTUFBbU0sSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksMEhBQTBILEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLHVMQUF1TCxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSx1SEFBdUgsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsbU1BQW1NLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLDBIQUEwSCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBRSxtTUFBbU0sSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUkseUhBQXlILEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFIiwiZmlsZSI6Ijg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgY2xhc3M9XFxcInF1YXNhci1zcGlubmVyXFxcIiA6ZmlsbD1cXFwiY29sb3JcXFwiIDp3aWR0aD1cXFwic2l6ZVxcXCIgOmhlaWdodD1cXFwic2l6ZVxcXCIgdmlld0JveD1cXFwiMCAwIDEzNSAxNDBcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHJlY3QgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxNVxcXCIgaGVpZ2h0PVxcXCIxMjBcXFwiIHJ4PVxcXCI2XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJoZWlnaHRcXFwiIGJlZ2luPVxcXCIwLjVzXFxcIiBkdXI9XFxcIjFzXFxcIiB2YWx1ZXM9XFxcIjEyMDsxMTA7MTAwOzkwOzgwOzcwOzYwOzUwOzQwOzE0MDsxMjBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwieVxcXCIgYmVnaW49XFxcIjAuNXNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTA7MTU7MjA7MjU7MzA7MzU7NDA7NDU7NTA7MDsxMFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L3JlY3Q+PHJlY3QgeD1cXFwiMzBcXFwiIHk9XFxcIjEwXFxcIiB3aWR0aD1cXFwiMTVcXFwiIGhlaWdodD1cXFwiMTIwXFxcIiByeD1cXFwiNlxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiaGVpZ2h0XFxcIiBiZWdpbj1cXFwiMC4yNXNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTIwOzExMDsxMDA7OTA7ODA7NzA7NjA7NTA7NDA7MTQwOzEyMFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJ5XFxcIiBiZWdpbj1cXFwiMC4yNXNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTA7MTU7MjA7MjU7MzA7MzU7NDA7NDU7NTA7MDsxMFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L3JlY3Q+PHJlY3QgeD1cXFwiNjBcXFwiIHdpZHRoPVxcXCIxNVxcXCIgaGVpZ2h0PVxcXCIxNDBcXFwiIHJ4PVxcXCI2XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJoZWlnaHRcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxMjA7MTEwOzEwMDs5MDs4MDs3MDs2MDs1MDs0MDsxNDA7MTIwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInlcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxMDsxNTsyMDsyNTszMDszNTs0MDs0NTs1MDswOzEwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcmVjdD48cmVjdCB4PVxcXCI5MFxcXCIgeT1cXFwiMTBcXFwiIHdpZHRoPVxcXCIxNVxcXCIgaGVpZ2h0PVxcXCIxMjBcXFwiIHJ4PVxcXCI2XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJoZWlnaHRcXFwiIGJlZ2luPVxcXCIwLjI1c1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxMjA7MTEwOzEwMDs5MDs4MDs3MDs2MDs1MDs0MDsxNDA7MTIwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInlcXFwiIGJlZ2luPVxcXCIwLjI1c1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxMDsxNTsyMDsyNTszMDszNTs0MDs0NTs1MDswOzEwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcmVjdD48cmVjdCB4PVxcXCIxMjBcXFwiIHk9XFxcIjEwXFxcIiB3aWR0aD1cXFwiMTVcXFwiIGhlaWdodD1cXFwiMTIwXFxcIiByeD1cXFwiNlxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiaGVpZ2h0XFxcIiBiZWdpbj1cXFwiMC41c1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxMjA7MTEwOzEwMDs5MDs4MDs3MDs2MDs1MDs0MDsxNDA7MTIwXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInlcXFwiIGJlZ2luPVxcXCIwLjVzXFxcIiBkdXI9XFxcIjFzXFxcIiB2YWx1ZXM9XFxcIjEwOzE1OzIwOzI1OzMwOzM1OzQwOzQ1OzUwOzA7MTBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9yZWN0Pjwvc3ZnPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zdmctc3Bpbm5lcnMvYmFycy5zdmdcbiAqKiBtb2R1bGUgaWQgPSA4OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 90 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 135 135\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 67 67\\\" to=\\\"-360 67 67\\\" dur=\\\"2.5s\\\" repeatCount=\\\"indefinite\\\"/></path><path d=\\\"M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 67 67\\\" to=\\\"360 67 67\\\" dur=\\\"8s\\\" repeatCount=\\\"indefinite\\\"/></path></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2NpcmNsZXMuc3ZnP2NiOGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCIgOndpZHRoPVxcXCJzaXplXFxcIiA6aGVpZ2h0PVxcXCJzaXplXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTM1IDEzNVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48cGF0aCBkPVxcXCJNNjcuNDQ3IDU4YzUuNTIzIDAgMTAtNC40NzcgMTAtMTBzLTQuNDc3LTEwLTEwLTEwLTEwIDQuNDc3LTEwIDEwIDQuNDc3IDEwIDEwIDEwem05LjQ0OCA5LjQ0N2MwIDUuNTIzIDQuNDc3IDEwIDEwIDEwIDUuNTIyIDAgMTAtNC40NzcgMTAtMTBzLTQuNDc4LTEwLTEwLTEwYy01LjUyMyAwLTEwIDQuNDc3LTEwIDEwem0tOS40NDggOS40NDhjLTUuNTIzIDAtMTAgNC40NzctMTAgMTAgMCA1LjUyMiA0LjQ3NyAxMCAxMCAxMHMxMC00LjQ3OCAxMC0xMGMwLTUuNTIzLTQuNDc3LTEwLTEwLTEwek01OCA2Ny40NDdjMC01LjUyMy00LjQ3Ny0xMC0xMC0xMHMtMTAgNC40NzctMTAgMTAgNC40NzcgMTAgMTAgMTAgMTAtNC40NzcgMTAtMTB6XFxcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVxcXCJ0cmFuc2Zvcm1cXFwiIHR5cGU9XFxcInJvdGF0ZVxcXCIgZnJvbT1cXFwiMCA2NyA2N1xcXCIgdG89XFxcIi0zNjAgNjcgNjdcXFwiIGR1cj1cXFwiMi41c1xcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L3BhdGg+PHBhdGggZD1cXFwiTTI4LjE5IDQwLjMxYzYuNjI3IDAgMTItNS4zNzQgMTItMTIgMC02LjYyOC01LjM3My0xMi0xMi0xMi02LjYyOCAwLTEyIDUuMzcyLTEyIDEyIDAgNi42MjYgNS4zNzIgMTIgMTIgMTJ6bTMwLjcyLTE5LjgyNWM0LjY4NiA0LjY4NyAxMi4yODQgNC42ODcgMTYuOTcgMCA0LjY4Ni00LjY4NiA0LjY4Ni0xMi4yODQgMC0xNi45Ny00LjY4Ni00LjY4Ny0xMi4yODQtNC42ODctMTYuOTcgMC00LjY4NyA0LjY4Ni00LjY4NyAxMi4yODQgMCAxNi45N3ptMzUuNzQgNy43MDVjMCA2LjYyNyA1LjM3IDEyIDEyIDEyIDYuNjI2IDAgMTItNS4zNzMgMTItMTIgMC02LjYyOC01LjM3NC0xMi0xMi0xMi02LjYzIDAtMTIgNS4zNzItMTIgMTJ6bTE5LjgyMiAzMC43MmMtNC42ODYgNC42ODYtNC42ODYgMTIuMjg0IDAgMTYuOTcgNC42ODcgNC42ODYgMTIuMjg1IDQuNjg2IDE2Ljk3IDAgNC42ODctNC42ODYgNC42ODctMTIuMjg0IDAtMTYuOTctNC42ODUtNC42ODctMTIuMjgzLTQuNjg3LTE2Ljk3IDB6bS03LjcwNCAzNS43NGMtNi42MjcgMC0xMiA1LjM3LTEyIDEyIDAgNi42MjYgNS4zNzMgMTIgMTIgMTJzMTItNS4zNzQgMTItMTJjMC02LjYzLTUuMzczLTEyLTEyLTEyem0tMzAuNzIgMTkuODIyYy00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcgMC00LjY4NiA0LjY4Ny00LjY4NiAxMi4yODUgMCAxNi45NyA0LjY4NiA0LjY4NyAxMi4yODQgNC42ODcgMTYuOTcgMCA0LjY4Ny00LjY4NSA0LjY4Ny0xMi4yODMgMC0xNi45N3ptLTM1Ljc0LTcuNzA0YzAtNi42MjctNS4zNzItMTItMTItMTItNi42MjYgMC0xMiA1LjM3My0xMiAxMnM1LjM3NCAxMiAxMiAxMmM2LjYyOCAwIDEyLTUuMzczIDEyLTEyem0tMTkuODIzLTMwLjcyYzQuNjg3LTQuNjg2IDQuNjg3LTEyLjI4NCAwLTE2Ljk3LTQuNjg2LTQuNjg2LTEyLjI4NC00LjY4Ni0xNi45NyAwLTQuNjg3IDQuNjg2LTQuNjg3IDEyLjI4NCAwIDE2Ljk3IDQuNjg2IDQuNjg3IDEyLjI4NCA0LjY4NyAxNi45NyAwelxcXCI+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cXFwidHJhbnNmb3JtXFxcIiB0eXBlPVxcXCJyb3RhdGVcXFwiIGZyb209XFxcIjAgNjcgNjdcXFwiIHRvPVxcXCIzNjAgNjcgNjdcXFwiIGR1cj1cXFwiOHNcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9wYXRoPjwvc3ZnPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zdmctc3Bpbm5lcnMvY2lyY2xlcy5zdmdcbiAqKiBtb2R1bGUgaWQgPSA5MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 91 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 120 30\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"15\\\" cy=\\\"15\\\" r=\\\"15\\\"><animate attributeName=\\\"r\\\" from=\\\"15\\\" to=\\\"15\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\"15;9;15\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"fill-opacity\\\" from=\\\"1\\\" to=\\\"1\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\"1;.5;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"60\\\" cy=\\\"15\\\" r=\\\"9\\\" fill-opacity=\\\".3\\\"><animate attributeName=\\\"r\\\" from=\\\"9\\\" to=\\\"9\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\"9;15;9\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"fill-opacity\\\" from=\\\".5\\\" to=\\\".5\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\".5;1;.5\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"105\\\" cy=\\\"15\\\" r=\\\"15\\\"><animate attributeName=\\\"r\\\" from=\\\"15\\\" to=\\\"15\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\"15;9;15\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"fill-opacity\\\" from=\\\"1\\\" to=\\\"1\\\" begin=\\\"0s\\\" dur=\\\"0.8s\\\" values=\\\"1;.5;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2RvdHMuc3ZnPzFmZjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMlJBQTJSLEVBQUUsc0pBQXNKLEdBQUcsMk1BQTJNLEdBQUcsd0pBQXdKLEVBQUUsNkxBQTZMLEVBQUUsc0pBQXNKLEdBQUciLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCIgOndpZHRoPVxcXCJzaXplXFxcIiA6aGVpZ2h0PVxcXCJzaXplXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTIwIDMwXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxjaXJjbGUgY3g9XFxcIjE1XFxcIiBjeT1cXFwiMTVcXFwiIHI9XFxcIjE1XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJyXFxcIiBmcm9tPVxcXCIxNVxcXCIgdG89XFxcIjE1XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMC44c1xcXCIgdmFsdWVzPVxcXCIxNTs5OzE1XFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgZnJvbT1cXFwiMVxcXCIgdG89XFxcIjFcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIwLjhzXFxcIiB2YWx1ZXM9XFxcIjE7LjU7MVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCI2MFxcXCIgY3k9XFxcIjE1XFxcIiByPVxcXCI5XFxcIiBmaWxsLW9wYWNpdHk9XFxcIi4zXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJyXFxcIiBmcm9tPVxcXCI5XFxcIiB0bz1cXFwiOVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjAuOHNcXFwiIHZhbHVlcz1cXFwiOTsxNTs5XFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgZnJvbT1cXFwiLjVcXFwiIHRvPVxcXCIuNVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjAuOHNcXFwiIHZhbHVlcz1cXFwiLjU7MTsuNVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxMDVcXFwiIGN5PVxcXCIxNVxcXCIgcj1cXFwiMTVcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInJcXFwiIGZyb209XFxcIjE1XFxcIiB0bz1cXFwiMTVcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIwLjhzXFxcIiB2YWx1ZXM9XFxcIjE1Ozk7MTVcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBmcm9tPVxcXCIxXFxcIiB0bz1cXFwiMVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjAuOHNcXFwiIHZhbHVlcz1cXFwiMTsuNTsxXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjwvc3ZnPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zdmctc3Bpbm5lcnMvZG90cy5zdmdcbiAqKiBtb2R1bGUgaWQgPSA5MVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 92 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 105 105\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"12.5\\\" cy=\\\"12.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"12.5\\\" cy=\\\"52.5\\\" r=\\\"12.5\\\" fill-opacity=\\\".5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"100ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"52.5\\\" cy=\\\"12.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"300ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"52.5\\\" cy=\\\"52.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"600ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"92.5\\\" cy=\\\"12.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"800ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"92.5\\\" cy=\\\"52.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"400ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"12.5\\\" cy=\\\"92.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"700ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"52.5\\\" cy=\\\"92.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"500ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"92.5\\\" cy=\\\"92.5\\\" r=\\\"12.5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"200ms\\\" dur=\\\"1s\\\" values=\\\"1;.2;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2dyaWQuc3ZnP2QyZWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb1JBQW9SLEdBQUcsME1BQTBNLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUcsc0xBQXNMLEdBQUciLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCIgOndpZHRoPVxcXCJzaXplXFxcIiA6aGVpZ2h0PVxcXCJzaXplXFxcIiB2aWV3Qm94PVxcXCIwIDAgMTA1IDEwNVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48Y2lyY2xlIGN4PVxcXCIxMi41XFxcIiBjeT1cXFwiMTIuNVxcXCIgcj1cXFwiMTIuNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTsuMjsxXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjEyLjVcXFwiIGN5PVxcXCI1Mi41XFxcIiByPVxcXCIxMi41XFxcIiBmaWxsLW9wYWNpdHk9XFxcIi41XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJmaWxsLW9wYWNpdHlcXFwiIGJlZ2luPVxcXCIxMDBtc1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxOy4yOzFcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiNTIuNVxcXCIgY3k9XFxcIjEyLjVcXFwiIHI9XFxcIjEyLjVcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjMwMG1zXFxcIiBkdXI9XFxcIjFzXFxcIiB2YWx1ZXM9XFxcIjE7LjI7MVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCI1Mi41XFxcIiBjeT1cXFwiNTIuNVxcXCIgcj1cXFwiMTIuNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiNjAwbXNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTsuMjsxXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjkyLjVcXFwiIGN5PVxcXCIxMi41XFxcIiByPVxcXCIxMi41XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJmaWxsLW9wYWNpdHlcXFwiIGJlZ2luPVxcXCI4MDBtc1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxOy4yOzFcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiOTIuNVxcXCIgY3k9XFxcIjUyLjVcXFwiIHI9XFxcIjEyLjVcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjQwMG1zXFxcIiBkdXI9XFxcIjFzXFxcIiB2YWx1ZXM9XFxcIjE7LjI7MVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxMi41XFxcIiBjeT1cXFwiOTIuNVxcXCIgcj1cXFwiMTIuNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiNzAwbXNcXFwiIGR1cj1cXFwiMXNcXFwiIHZhbHVlcz1cXFwiMTsuMjsxXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjUyLjVcXFwiIGN5PVxcXCI5Mi41XFxcIiByPVxcXCIxMi41XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJmaWxsLW9wYWNpdHlcXFwiIGJlZ2luPVxcXCI1MDBtc1xcXCIgZHVyPVxcXCIxc1xcXCIgdmFsdWVzPVxcXCIxOy4yOzFcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiOTIuNVxcXCIgY3k9XFxcIjkyLjVcXFwiIHI9XFxcIjEyLjVcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjIwMG1zXFxcIiBkdXI9XFxcIjFzXFxcIiB2YWx1ZXM9XFxcIjE7LjI7MVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48L3N2Zz5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2dyaWQuc3ZnXG4gKiogbW9kdWxlIGlkID0gOTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 93 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :fill=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 140 64\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.716-6.002 11.47-7.65 17.304-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z\\\" fill-opacity=\\\".5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.4s\\\" values=\\\"0.5;1;0.5\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></path><path d=\\\"M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.593-2.32 17.308 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z\\\" fill-opacity=\\\".5\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0.7s\\\" dur=\\\"1.4s\\\" values=\\\"0.5;1;0.5\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></path><path d=\\\"M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z\\\"/></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2hlYXJ0cy5zdmc/MzFiMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtZkFBbWYsRUFBRSw4WkFBOFosRUFBRSIsImZpbGUiOiI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPVxcXCJxdWFzYXItc3Bpbm5lclxcXCIgOmZpbGw9XFxcImNvbG9yXFxcIiA6d2lkdGg9XFxcInNpemVcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIHZpZXdCb3g9XFxcIjAgMCAxNDAgNjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwiTTMwLjI2MiA1Ny4wMkw3LjE5NSA0MC43MjNjLTUuODQtMy45NzYtNy41Ni0xMi4wNi0zLjg0Mi0xOC4wNjMgMy43MTUtNiAxMS40NjctNy42NSAxNy4zMDYtMy42OGw0LjUyIDMuNzYgMi42LTUuMjc0YzMuNzE2LTYuMDAyIDExLjQ3LTcuNjUgMTcuMzA0LTMuNjggNS44NCAzLjk3IDcuNTYgMTIuMDU0IDMuODQyIDE4LjA2MkwzNC40OSA1Ni4xMThjLS44OTcgMS41MTItMi43OTMgMS45MTUtNC4yMjguOXpcXFwiIGZpbGwtb3BhY2l0eT1cXFwiLjVcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjEuNHNcXFwiIHZhbHVlcz1cXFwiMC41OzE7MC41XFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcGF0aD48cGF0aCBkPVxcXCJNMTA1LjUxMiA1Ni4xMmwtMTQuNDQtMjQuMjcyYy0zLjcxNi02LjAwOC0xLjk5Ni0xNC4wOTMgMy44NDMtMTguMDYyIDUuODM1LTMuOTcgMTMuNTg4LTIuMzIyIDE3LjMwNiAzLjY4bDIuNiA1LjI3NCA0LjUyLTMuNzZjNS44NC0zLjk3IDEzLjU5My0yLjMyIDE3LjMwOCAzLjY4IDMuNzE4IDYuMDAzIDEuOTk4IDE0LjA4OC0zLjg0MiAxOC4wNjRMMTA5Ljc0IDU3LjAyYy0xLjQzNCAxLjAxNC0zLjMzLjYxLTQuMjI4LS45elxcXCIgZmlsbC1vcGFjaXR5PVxcXCIuNVxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMC43c1xcXCIgZHVyPVxcXCIxLjRzXFxcIiB2YWx1ZXM9XFxcIjAuNTsxOzAuNVxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L3BhdGg+PHBhdGggZD1cXFwiTTY3LjQwOCA1Ny44MzRsLTIzLjAxLTI0Ljk4Yy01Ljg2NC02LjE1LTUuODY0LTE2LjEwOCAwLTIyLjI0OCA1Ljg2LTYuMTQgMTUuMzctNi4xNCAyMS4yMzQgMEw3MCAxNi4xNjhsNC4zNjgtNS41NjJjNS44NjMtNi4xNCAxNS4zNzUtNi4xNCAyMS4yMzUgMCA1Ljg2MyA2LjE0IDUuODYzIDE2LjA5OCAwIDIyLjI0N2wtMjMuMDA3IDI0Ljk4Yy0xLjQzIDEuNTU2LTMuNzU3IDEuNTU2LTUuMTg4IDB6XFxcIi8+PC9zdmc+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zcGlubmVyL3N2Zy1zcGlubmVycy9oZWFydHMuc3ZnXG4gKiogbW9kdWxlIGlkID0gOTNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 94 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 58 58\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><g transform=\\\"translate(2 1)\\\" :stroke=\\\"color\\\" stroke-width=\\\"1.5\\\"><circle cx=\\\"42.601\\\" cy=\\\"11.462\\\" r=\\\"5\\\" fill-opacity=\\\"1\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"1;0;0;0;0;0;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"49.063\\\" cy=\\\"27.063\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;1;0;0;0;0;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"42.601\\\" cy=\\\"42.663\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;1;0;0;0;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"27\\\" cy=\\\"49.125\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;0;1;0;0;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"11.399\\\" cy=\\\"42.663\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;0;0;1;0;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"4.938\\\" cy=\\\"27.063\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;0;0;0;1;0;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"11.399\\\" cy=\\\"11.462\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;0;0;0;0;1;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"27\\\" cy=\\\"5\\\" r=\\\"5\\\" fill-opacity=\\\"0\\\" :fill=\\\"color\\\"><animate attributeName=\\\"fill-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.3s\\\" values=\\\"0;0;0;0;0;0;0;1\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle></g></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL2lvcy5zdmc/NjdlYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzWkFBc1osRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUseU5BQXlOLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLHlOQUF5TixFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxxTkFBcU4sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUseU5BQXlOLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLHdOQUF3TixFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSx5TkFBeU4sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ05BQWdOLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFIiwiZmlsZSI6Ijk0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgY2xhc3M9XFxcInF1YXNhci1zcGlubmVyXFxcIiA6d2lkdGg9XFxcInNpemVcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIHZpZXdCb3g9XFxcIjAgMCA1OCA1OFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiPjxnIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDIgMSlcXFwiIDpzdHJva2U9XFxcImNvbG9yXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuNVxcXCI+PGNpcmNsZSBjeD1cXFwiNDIuNjAxXFxcIiBjeT1cXFwiMTEuNDYyXFxcIiByPVxcXCI1XFxcIiBmaWxsLW9wYWNpdHk9XFxcIjFcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS4zc1xcXCIgdmFsdWVzPVxcXCIxOzA7MDswOzA7MDswOzBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiNDkuMDYzXFxcIiBjeT1cXFwiMjcuMDYzXFxcIiByPVxcXCI1XFxcIiBmaWxsLW9wYWNpdHk9XFxcIjBcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS4zc1xcXCIgdmFsdWVzPVxcXCIwOzE7MDswOzA7MDswOzBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiNDIuNjAxXFxcIiBjeT1cXFwiNDIuNjYzXFxcIiByPVxcXCI1XFxcIiBmaWxsLW9wYWNpdHk9XFxcIjBcXFwiIDpmaWxsPVxcXCJjb2xvclxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiZmlsbC1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS4zc1xcXCIgdmFsdWVzPVxcXCIwOzA7MTswOzA7MDswOzBcXFwiIGNhbGNNb2RlPVxcXCJsaW5lYXJcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PGNpcmNsZSBjeD1cXFwiMjdcXFwiIGN5PVxcXCI0OS4xMjVcXFwiIHI9XFxcIjVcXFwiIGZpbGwtb3BhY2l0eT1cXFwiMFxcXCIgOmZpbGw9XFxcImNvbG9yXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJmaWxsLW9wYWNpdHlcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIxLjNzXFxcIiB2YWx1ZXM9XFxcIjA7MDswOzE7MDswOzA7MFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIxMS4zOTlcXFwiIGN5PVxcXCI0Mi42NjNcXFwiIHI9XFxcIjVcXFwiIGZpbGwtb3BhY2l0eT1cXFwiMFxcXCIgOmZpbGw9XFxcImNvbG9yXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJmaWxsLW9wYWNpdHlcXFwiIGJlZ2luPVxcXCIwc1xcXCIgZHVyPVxcXCIxLjNzXFxcIiB2YWx1ZXM9XFxcIjA7MDswOzA7MTswOzA7MFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCI0LjkzOFxcXCIgY3k9XFxcIjI3LjA2M1xcXCIgcj1cXFwiNVxcXCIgZmlsbC1vcGFjaXR5PVxcXCIwXFxcIiA6ZmlsbD1cXFwiY29sb3JcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjEuM3NcXFwiIHZhbHVlcz1cXFwiMDswOzA7MDswOzE7MDswXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjExLjM5OVxcXCIgY3k9XFxcIjExLjQ2MlxcXCIgcj1cXFwiNVxcXCIgZmlsbC1vcGFjaXR5PVxcXCIwXFxcIiA6ZmlsbD1cXFwiY29sb3JcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjEuM3NcXFwiIHZhbHVlcz1cXFwiMDswOzA7MDswOzA7MTswXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjI3XFxcIiBjeT1cXFwiNVxcXCIgcj1cXFwiNVxcXCIgZmlsbC1vcGFjaXR5PVxcXCIwXFxcIiA6ZmlsbD1cXFwiY29sb3JcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcImZpbGwtb3BhY2l0eVxcXCIgYmVnaW49XFxcIjBzXFxcIiBkdXI9XFxcIjEuM3NcXFwiIHZhbHVlcz1cXFwiMDswOzA7MDswOzA7MDsxXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjwvZz48L2c+PC9zdmc+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zcGlubmVyL3N2Zy1zcGlubmVycy9pb3Muc3ZnXG4gKiogbW9kdWxlIGlkID0gOTRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 95 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :stroke=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 38 38\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g transform=\\\"translate(1 1)\\\" stroke-width=\\\"2\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><circle stroke-opacity=\\\".5\\\" cx=\\\"18\\\" cy=\\\"18\\\" r=\\\"18\\\"/><path d=\\\"M36 18c0-9.94-8.06-18-18-18\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 18 18\\\" to=\\\"360 18 18\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\"/></path></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL292YWwuc3ZnPzY1NWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpzdHJva2U9XFxcImNvbG9yXFxcIiA6d2lkdGg9XFxcInNpemVcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIHZpZXdCb3g9XFxcIjAgMCAzOCAzOFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48ZyB0cmFuc2Zvcm09XFxcInRyYW5zbGF0ZSgxIDEpXFxcIiBzdHJva2Utd2lkdGg9XFxcIjJcXFwiIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCI+PGNpcmNsZSBzdHJva2Utb3BhY2l0eT1cXFwiLjVcXFwiIGN4PVxcXCIxOFxcXCIgY3k9XFxcIjE4XFxcIiByPVxcXCIxOFxcXCIvPjxwYXRoIGQ9XFxcIk0zNiAxOGMwLTkuOTQtOC4wNi0xOC0xOC0xOFxcXCI+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cXFwidHJhbnNmb3JtXFxcIiB0eXBlPVxcXCJyb3RhdGVcXFwiIGZyb209XFxcIjAgMTggMThcXFwiIHRvPVxcXCIzNjAgMTggMThcXFwiIGR1cj1cXFwiMXNcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9wYXRoPjwvZz48L3N2Zz5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL292YWwuc3ZnXG4gKiogbW9kdWxlIGlkID0gOTVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 96 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :stroke=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 44 44\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"2\\\"><circle cx=\\\"22\\\" cy=\\\"22\\\" r=\\\"1\\\"><animate attributeName=\\\"r\\\" begin=\\\"0s\\\" dur=\\\"1.8s\\\" values=\\\"1; 20\\\" calcMode=\\\"spline\\\" keyTimes=\\\"0; 1\\\" keySplines=\\\"0.165, 0.84, 0.44, 1\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-opacity\\\" begin=\\\"0s\\\" dur=\\\"1.8s\\\" values=\\\"1; 0\\\" calcMode=\\\"spline\\\" keyTimes=\\\"0; 1\\\" keySplines=\\\"0.3, 0.61, 0.355, 1\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"22\\\" cy=\\\"22\\\" r=\\\"1\\\"><animate attributeName=\\\"r\\\" begin=\\\"-0.9s\\\" dur=\\\"1.8s\\\" values=\\\"1; 20\\\" calcMode=\\\"spline\\\" keyTimes=\\\"0; 1\\\" keySplines=\\\"0.165, 0.84, 0.44, 1\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-opacity\\\" begin=\\\"-0.9s\\\" dur=\\\"1.8s\\\" values=\\\"1; 0\\\" calcMode=\\\"spline\\\" keyTimes=\\\"0; 1\\\" keySplines=\\\"0.3, 0.61, 0.355, 1\\\" repeatCount=\\\"indefinite\\\"/></circle></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL3B1ZmYuc3ZnPzdhZmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOFRBQThULHVDQUF1QyxvSkFBb0osc0NBQXNDLHNMQUFzTCx1Q0FBdUMsdUpBQXVKLHNDQUFzQyIsImZpbGUiOiI5Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIGNsYXNzPVxcXCJxdWFzYXItc3Bpbm5lclxcXCIgOnN0cm9rZT1cXFwiY29sb3JcXFwiIDp3aWR0aD1cXFwic2l6ZVxcXCIgOmhlaWdodD1cXFwic2l6ZVxcXCIgdmlld0JveD1cXFwiMCAwIDQ0IDQ0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxnIGZpbGw9XFxcIm5vbmVcXFwiIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIj48Y2lyY2xlIGN4PVxcXCIyMlxcXCIgY3k9XFxcIjIyXFxcIiByPVxcXCIxXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJyXFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS44c1xcXCIgdmFsdWVzPVxcXCIxOyAyMFxcXCIgY2FsY01vZGU9XFxcInNwbGluZVxcXCIga2V5VGltZXM9XFxcIjA7IDFcXFwiIGtleVNwbGluZXM9XFxcIjAuMTY1LCAwLjg0LCAwLjQ0LCAxXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInN0cm9rZS1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS44c1xcXCIgdmFsdWVzPVxcXCIxOyAwXFxcIiBjYWxjTW9kZT1cXFwic3BsaW5lXFxcIiBrZXlUaW1lcz1cXFwiMDsgMVxcXCIga2V5U3BsaW5lcz1cXFwiMC4zLCAwLjYxLCAwLjM1NSwgMVxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIyMlxcXCIgY3k9XFxcIjIyXFxcIiByPVxcXCIxXFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJyXFxcIiBiZWdpbj1cXFwiLTAuOXNcXFwiIGR1cj1cXFwiMS44c1xcXCIgdmFsdWVzPVxcXCIxOyAyMFxcXCIgY2FsY01vZGU9XFxcInNwbGluZVxcXCIga2V5VGltZXM9XFxcIjA7IDFcXFwiIGtleVNwbGluZXM9XFxcIjAuMTY1LCAwLjg0LCAwLjQ0LCAxXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInN0cm9rZS1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiLTAuOXNcXFwiIGR1cj1cXFwiMS44c1xcXCIgdmFsdWVzPVxcXCIxOyAwXFxcIiBjYWxjTW9kZT1cXFwic3BsaW5lXFxcIiBrZXlUaW1lcz1cXFwiMDsgMVxcXCIga2V5U3BsaW5lcz1cXFwiMC4zLCAwLjYxLCAwLjM1NSwgMVxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48L2c+PC9zdmc+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zcGlubmVyL3N2Zy1zcGlubmVycy9wdWZmLnN2Z1xuICoqIG1vZHVsZSBpZCA9IDk2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 97 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :stroke=\\\"color\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 45 45\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" transform=\\\"translate(1 1)\\\" stroke-width=\\\"2\\\"><circle cx=\\\"22\\\" cy=\\\"22\\\" r=\\\"6\\\"><animate attributeName=\\\"r\\\" begin=\\\"1.5s\\\" dur=\\\"3s\\\" values=\\\"6;22\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-opacity\\\" begin=\\\"1.5s\\\" dur=\\\"3s\\\" values=\\\"1;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-width\\\" begin=\\\"1.5s\\\" dur=\\\"3s\\\" values=\\\"2;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"22\\\" cy=\\\"22\\\" r=\\\"6\\\"><animate attributeName=\\\"r\\\" begin=\\\"3s\\\" dur=\\\"3s\\\" values=\\\"6;22\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-opacity\\\" begin=\\\"3s\\\" dur=\\\"3s\\\" values=\\\"1;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/><animate attributeName=\\\"stroke-width\\\" begin=\\\"3s\\\" dur=\\\"3s\\\" values=\\\"2;0\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle><circle cx=\\\"22\\\" cy=\\\"22\\\" r=\\\"8\\\"><animate attributeName=\\\"r\\\" begin=\\\"0s\\\" dur=\\\"1.5s\\\" values=\\\"6;1;2;3;4;5;6\\\" calcMode=\\\"linear\\\" repeatCount=\\\"indefinite\\\"/></circle></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL3JpbmdzLnN2Zz8yZGM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJWQUEyVixvSUFBb0ksaUlBQWlJLGlLQUFpSyxrSUFBa0ksK0hBQStILG1LQUFtSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUiLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDpzdHJva2U9XFxcImNvbG9yXFxcIiA6d2lkdGg9XFxcInNpemVcXFwiIDpoZWlnaHQ9XFxcInNpemVcXFwiIHZpZXdCb3g9XFxcIjAgMCA0NSA0NVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj48ZyBmaWxsPVxcXCJub25lXFxcIiBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIHRyYW5zZm9ybT1cXFwidHJhbnNsYXRlKDEgMSlcXFwiIHN0cm9rZS13aWR0aD1cXFwiMlxcXCI+PGNpcmNsZSBjeD1cXFwiMjJcXFwiIGN5PVxcXCIyMlxcXCIgcj1cXFwiNlxcXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cXFwiclxcXCIgYmVnaW49XFxcIjEuNXNcXFwiIGR1cj1cXFwiM3NcXFwiIHZhbHVlcz1cXFwiNjsyMlxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJzdHJva2Utb3BhY2l0eVxcXCIgYmVnaW49XFxcIjEuNXNcXFwiIGR1cj1cXFwiM3NcXFwiIHZhbHVlcz1cXFwiMTswXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInN0cm9rZS13aWR0aFxcXCIgYmVnaW49XFxcIjEuNXNcXFwiIGR1cj1cXFwiM3NcXFwiIHZhbHVlcz1cXFwiMjswXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjxjaXJjbGUgY3g9XFxcIjIyXFxcIiBjeT1cXFwiMjJcXFwiIHI9XFxcIjZcXFwiPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInJcXFwiIGJlZ2luPVxcXCIzc1xcXCIgZHVyPVxcXCIzc1xcXCIgdmFsdWVzPVxcXCI2OzIyXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInN0cm9rZS1vcGFjaXR5XFxcIiBiZWdpbj1cXFwiM3NcXFwiIGR1cj1cXFwiM3NcXFwiIHZhbHVlcz1cXFwiMTswXFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjxhbmltYXRlIGF0dHJpYnV0ZU5hbWU9XFxcInN0cm9rZS13aWR0aFxcXCIgYmVnaW49XFxcIjNzXFxcIiBkdXI9XFxcIjNzXFxcIiB2YWx1ZXM9XFxcIjI7MFxcXCIgY2FsY01vZGU9XFxcImxpbmVhclxcXCIgcmVwZWF0Q291bnQ9XFxcImluZGVmaW5pdGVcXFwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVxcXCIyMlxcXCIgY3k9XFxcIjIyXFxcIiByPVxcXCI4XFxcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVxcXCJyXFxcIiBiZWdpbj1cXFwiMHNcXFwiIGR1cj1cXFwiMS41c1xcXCIgdmFsdWVzPVxcXCI2OzE7MjszOzQ7NTs2XFxcIiBjYWxjTW9kZT1cXFwibGluZWFyXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvY2lyY2xlPjwvZz48L3N2Zz5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL3JpbmdzLnN2Z1xuICoqIG1vZHVsZSBpZCA9IDk3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 98 */
/***/ function(module, exports) {

	eval("module.exports = \"<svg class=\\\"quasar-spinner\\\" :width=\\\"size\\\" :height=\\\"size\\\" viewBox=\\\"0 0 38 38\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><defs><linearGradient x1=\\\"8.042%\\\" y1=\\\"0%\\\" x2=\\\"65.682%\\\" y2=\\\"23.865%\\\" id=\\\"a\\\"><stop :stop-color=\\\"color\\\" stop-opacity=\\\"0\\\" offset=\\\"0%\\\"/><stop :stop-color=\\\"color\\\" stop-opacity=\\\".631\\\" offset=\\\"63.146%\\\"/><stop :stop-color=\\\"color\\\" offset=\\\"100%\\\"/></linearGradient></defs><g transform=\\\"translate(1 1)\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><path d=\\\"M36 18c0-9.94-8.06-18-18-18\\\" stroke=\\\"url(#a)\\\" stroke-width=\\\"2\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 18 18\\\" to=\\\"360 18 18\\\" dur=\\\"0.9s\\\" repeatCount=\\\"indefinite\\\"/></path><circle :fill=\\\"color\\\" cx=\\\"36\\\" cy=\\\"18\\\" r=\\\"1\\\"><animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 18 18\\\" to=\\\"360 18 18\\\" dur=\\\"0.9s\\\" repeatCount=\\\"indefinite\\\"/></circle></g></svg>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3NwaW5uZXIvc3ZnLXNwaW5uZXJzL3RhaWwuc3ZnPzA2ODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyBjbGFzcz1cXFwicXVhc2FyLXNwaW5uZXJcXFwiIDp3aWR0aD1cXFwic2l6ZVxcXCIgOmhlaWdodD1cXFwic2l6ZVxcXCIgdmlld0JveD1cXFwiMCAwIDM4IDM4XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxkZWZzPjxsaW5lYXJHcmFkaWVudCB4MT1cXFwiOC4wNDIlXFxcIiB5MT1cXFwiMCVcXFwiIHgyPVxcXCI2NS42ODIlXFxcIiB5Mj1cXFwiMjMuODY1JVxcXCIgaWQ9XFxcImFcXFwiPjxzdG9wIDpzdG9wLWNvbG9yPVxcXCJjb2xvclxcXCIgc3RvcC1vcGFjaXR5PVxcXCIwXFxcIiBvZmZzZXQ9XFxcIjAlXFxcIi8+PHN0b3AgOnN0b3AtY29sb3I9XFxcImNvbG9yXFxcIiBzdG9wLW9wYWNpdHk9XFxcIi42MzFcXFwiIG9mZnNldD1cXFwiNjMuMTQ2JVxcXCIvPjxzdG9wIDpzdG9wLWNvbG9yPVxcXCJjb2xvclxcXCIgb2Zmc2V0PVxcXCIxMDAlXFxcIi8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PGcgdHJhbnNmb3JtPVxcXCJ0cmFuc2xhdGUoMSAxKVxcXCIgZmlsbD1cXFwibm9uZVxcXCIgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIj48cGF0aCBkPVxcXCJNMzYgMThjMC05Ljk0LTguMDYtMTgtMTgtMThcXFwiIHN0cm9rZT1cXFwidXJsKCNhKVxcXCIgc3Ryb2tlLXdpZHRoPVxcXCIyXFxcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVxcXCJ0cmFuc2Zvcm1cXFwiIHR5cGU9XFxcInJvdGF0ZVxcXCIgZnJvbT1cXFwiMCAxOCAxOFxcXCIgdG89XFxcIjM2MCAxOCAxOFxcXCIgZHVyPVxcXCIwLjlzXFxcIiByZXBlYXRDb3VudD1cXFwiaW5kZWZpbml0ZVxcXCIvPjwvcGF0aD48Y2lyY2xlIDpmaWxsPVxcXCJjb2xvclxcXCIgY3g9XFxcIjM2XFxcIiBjeT1cXFwiMThcXFwiIHI9XFxcIjFcXFwiPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9XFxcInRyYW5zZm9ybVxcXCIgdHlwZT1cXFwicm90YXRlXFxcIiBmcm9tPVxcXCIwIDE4IDE4XFxcIiB0bz1cXFwiMzYwIDE4IDE4XFxcIiBkdXI9XFxcIjAuOXNcXFwiIHJlcGVhdENvdW50PVxcXCJpbmRlZmluaXRlXFxcIi8+PC9jaXJjbGU+PC9nPjwvc3ZnPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3Bpbm5lci9zdmctc3Bpbm5lcnMvdGFpbC5zdmdcbiAqKiBtb2R1bGUgaWQgPSA5OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(100);\n\nVue.component('state', {\n  template: template,\n  props: {\n    model: {\n      type: Boolean,\n      required: true,\n      twoWay: true\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3N0YXRlL3N0YXRlLmpzPzJkYzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiI5OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlID0gcmVxdWlyZSgncmF3IS4vc3RhdGUuaHRtbCcpO1xuXG5WdWUuY29tcG9uZW50KCdzdGF0ZScsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICB0d29XYXk6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvc3RhdGUvc3RhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSA5OVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 100 */
/***/ function(module, exports) {

	eval("module.exports = \"<span>\\n  <slot v-if=\\\"!model\\\"></slot>\\n  <slot v-else name=\\\"active\\\"></slot>\\n</span>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3N0YXRlL3N0YXRlLmh0bWw/ZGE3OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHNwYW4+XFxuICA8c2xvdCB2LWlmPVxcXCIhbW9kZWxcXFwiPjwvc2xvdD5cXG4gIDxzbG90IHYtZWxzZSBuYW1lPVxcXCJhY3RpdmVcXFwiPjwvc2xvdD5cXG48L3NwYW4+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2xpYi93ZWItY29tcG9uZW50cy9zdGF0ZS9zdGF0ZS5odG1sXG4gKiogbW9kdWxlIGlkID0gMTAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar\n  scrollNavigationSpeed = 5, // in pixels\n  debounceDelay = 50, // in ms\n  template = $(__webpack_require__(102))\n  ;\n\nVue.component('tabs', {\n  template: template.find('#tabs').html(),\n  methods: {\n    redraw: function() {\n      var\n        scrollPosition = 0,\n        scroller = this.scroller[0]\n        ;\n\n      if (this.scroller.width() === 0 && scroller.scrollWidth === 0) {\n        return;\n      }\n      if (this.scrollable) {\n        scrollPosition = scroller.scrollLeft;\n        this.nav.removeClass('scrollable');\n        this.scrollable = false;\n      }\n      if (this.scroller.width() < scroller.scrollWidth) {\n        this.nav.addClass('scrollable');\n        scroller.scrollLeft = scrollPosition;\n        this.scrollable = true;\n        this.updateScrollIndicator();\n      }\n    },\n    updateScrollIndicator: function() {\n      if (!quasar.runs.on.desktop || !this.scrollable) {\n        return;\n      }\n\n      var scroller = this.scroller[0];\n\n      this.leftScroll[scroller.scrollLeft <= 0 ? 'addClass' : 'removeClass']('disabled');\n      this.rightScroll[scroller.scrollLeft + this.scroller.innerWidth() + 5 >= scroller.scrollWidth ? 'addClass' : 'removeClass']('disabled');\n    },\n    scrollToSelectedIfNeeded: function(tab) {\n      if (tab.length === 0 || !this.scrollable) {\n        return;\n      }\n\n      var\n        scroller = this.scroller[0],\n        contentRect = scroller.getBoundingClientRect(),\n        tabRect = tab[0].getBoundingClientRect(),\n        tabWidth = tabRect.width,\n        offset = tabRect.left - contentRect.left\n        ;\n\n      if (offset < 0) {\n        this.animScrollTo(scroller.scrollLeft + offset);\n      }\n      else {\n        offset += tabWidth - scroller.offsetWidth;\n        /* istanbul ignore else */\n        if (offset > 0) {\n          this.animScrollTo(scroller.scrollLeft + offset);\n        }\n      }\n    },\n    animScrollTo: function(value) {\n      if (this.scrollTimer) {\n        clearInterval(this.scrollTimer);\n      }\n\n      this.scrollTowards(value);\n      this.scrollTimer = setInterval(function() {\n        if (this.scrollTowards(value)) {\n          clearInterval(this.scrollTimer);\n        }\n      }.bind(this), 5);\n    },\n    scrollTowards: function(value) {\n      var\n        scroller = this.scroller[0],\n        scrollPosition = scroller.scrollLeft,\n        direction = value < scrollPosition ? -1 : 1,\n        done = false\n        ;\n\n      scrollPosition += direction * scrollNavigationSpeed;\n\n      if (scrollPosition < 0) {\n        done = true;\n        scrollPosition = 0;\n      }\n      else if (direction === -1 && scrollPosition <= value || direction === 1 && scrollPosition >= value) {\n        done = true;\n        scrollPosition = value;\n      }\n\n      scroller.scrollLeft = scrollPosition;\n      return done;\n    }\n  },\n  events: {\n    selected: function(tab, tabNode) {\n      this.content.css('display', 'none');\n      $(tab.target).css('display', '');\n\n      this.$broadcast('blur', tab);\n\n      setTimeout(function() {\n        this.scrollToSelectedIfNeeded(tabNode);\n      }.bind(this), debounceDelay * 4);\n    },\n    hidden: function() {\n      this.redraw();\n    }\n  },\n  ready: function() {\n    var self = this;\n\n    this.scrollTimer = null;\n    this.scrollable = false;\n\n    this.nav = $(this.$el);\n    this.scroller = this.nav.find('.tabs-scroller');\n    this.leftScroll = this.nav.find('.left-scroll');\n    this.rightScroll = this.nav.find('.right-scroll');\n    this.tabs = this.scroller.find('.tab');\n\n    // debounce some costly methods;\n    // debouncing here because debounce needs to be per instance\n    this.redraw = quasar.debounce(this.redraw, debounceDelay);\n    this.updateScrollIndicator = quasar.debounce(this.updateScrollIndicator, debounceDelay);\n\n    this.content = $(this.$children.filter(function($child) {\n      return $child.target;\n    }).map(function($child) {\n      return $child.target;\n    }).join(','));\n    this.content.css('display', 'none');\n\n    this.scroller.scroll(this.updateScrollIndicator);\n    $(window).resize(this.redraw);\n\n    // let browser drawing stabilize then\n    setTimeout(function() {\n      self.redraw();\n      quasar.events.on('app:page:ready', self.redraw);\n    }, debounceDelay);\n\n    if (quasar.runs.on.desktop) {\n      var scrollEvents = {\n        start: [],\n        stop: []\n      };\n\n      scrollEvents.start.push('mousedown');\n      scrollEvents.stop.push('mouseup');\n\n      if (quasar.runs.with.touch) {\n        scrollEvents.start.push('touchstart');\n        scrollEvents.stop.push('touchend');\n      }\n\n      this.leftScroll.bind(scrollEvents.start.join(' '), function() {\n        self.animScrollTo(0);\n      });\n      this.leftScroll.bind(scrollEvents.stop.join(' '), function() {\n        clearInterval(self.scrollTimer);\n      });\n      this.rightScroll.bind(scrollEvents.start.join(' '), function() {\n        self.animScrollTo(9999);\n      });\n      this.rightScroll.bind(scrollEvents.stop.join(' '), function() {\n        clearInterval(self.scrollTimer);\n      });\n    }\n\n    if (quasar.runs.with.touch) {\n      this.tabs.each(function() {\n        var hammer = $(this).hammer().getHammer();\n        var lastOffset = 0;\n\n        hammer.on('panmove', function(ev) {\n          self.scroller[0].scrollLeft += lastOffset - ev.deltaX;\n          lastOffset = ev.deltaX;\n        });\n        hammer.on('panend', function() {\n          lastOffset = 0;\n        });\n      });\n    }\n  },\n  beforeDestroy: function() {\n    if (this.scrollTimer) {\n      clearInterval(this.scrollTimer);\n    }\n    this.scroller.off('scroll', this.updateScrollIndicator);\n    $(window).off('resize', this.redraw);\n    quasar.events.off('app:page:ready', this.redraw);\n    if (quasar.runs.with.touch) {\n      this.tabs.each(function() {\n        $(this).getHammer().destroy();\n      });\n    }\n    this.leftScroll.off();\n    this.rightScroll.off();\n  }\n});\n\nVue.component('tab', {\n  template: template.find('#tab').html(),\n  props: ['active', 'hidden', 'disabled', 'hide', 'icon', 'label', 'target'],\n  methods: {\n    activate: function() {\n      if (this.disabled) {\n        return;\n      }\n      this.active = true;\n    }\n  },\n  events: {\n    blur: function(tab) {\n      if (tab === this) {\n        return;\n      }\n      this.active = false;\n    }\n  },\n  watch: {\n    active: function(value) {\n      if (this.disabled) {\n        return;\n      }\n      if (value) {\n        this.$dispatch('selected', this, $(this.$el));\n      }\n    },\n    hidden: function(value) {\n      this.$dispatch('hidden');\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 102 */
/***/ function(module, exports) {

	eval("module.exports = \"<templates>\\n  <template id=\\\"tabs\\\">\\n    <div class=\\\"tabs row items-center\\\">\\n      <div class=\\\"row items-center justify-center left-scroll\\\">\\n        <i>chevron_left</i>\\n      </div>\\n      <div class=\\\"tabs-scroller row auto\\\">\\n        <div class=\\\"spacer\\\"></div>\\n        <slot></slot>\\n        <div class=\\\"spacer\\\"></div>\\n      </div>\\n      <div class=\\\"row items-center justify-center right-scroll\\\">\\n        <i>chevron_right</i>\\n      </div>\\n    </div>\\n  </template>\\n\\n  <template id=\\\"tab\\\">\\n    <div\\n      class=\\\"tab items-center justify-center\\\"\\n      :class=\\\"{active: active, hidden: hidden, disabled: disabled, hideIcon: hide === 'icon', hideLabel: hide === 'label'}\\\"\\n      @click=\\\"activate()\\\"\\n    >\\n        <i v-if=\\\"icon\\\" class=\\\"tabs-icon\\\">{{icon}}</i>\\n        <span class=\\\"tabs-label\\\"><slot></slot></span>\\n    </div>\\n  </template>\\n</templates>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RhYnMvdGFicy5odG1sPzgxY2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa21CQUFrbUIsMkdBQTJHLHVGQUF1RixNQUFNIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGVzPlxcbiAgPHRlbXBsYXRlIGlkPVxcXCJ0YWJzXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGFicyByb3cgaXRlbXMtY2VudGVyXFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJyb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGxlZnQtc2Nyb2xsXFxcIj5cXG4gICAgICAgIDxpPmNoZXZyb25fbGVmdDwvaT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJ0YWJzLXNjcm9sbGVyIHJvdyBhdXRvXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNwYWNlclxcXCI+PC9kaXY+XFxuICAgICAgICA8c2xvdD48L3Nsb3Q+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGFjZXJcXFwiPjwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInJvdyBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgcmlnaHQtc2Nyb2xsXFxcIj5cXG4gICAgICAgIDxpPmNoZXZyb25fcmlnaHQ8L2k+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgPC90ZW1wbGF0ZT5cXG5cXG4gIDx0ZW1wbGF0ZSBpZD1cXFwidGFiXFxcIj5cXG4gICAgPGRpdlxcbiAgICAgIGNsYXNzPVxcXCJ0YWIgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXFxcIlxcbiAgICAgIDpjbGFzcz1cXFwie2FjdGl2ZTogYWN0aXZlLCBoaWRkZW46IGhpZGRlbiwgZGlzYWJsZWQ6IGRpc2FibGVkLCBoaWRlSWNvbjogaGlkZSA9PT0gJ2ljb24nLCBoaWRlTGFiZWw6IGhpZGUgPT09ICdsYWJlbCd9XFxcIlxcbiAgICAgIEBjbGljaz1cXFwiYWN0aXZhdGUoKVxcXCJcXG4gICAgPlxcbiAgICAgICAgPGkgdi1pZj1cXFwiaWNvblxcXCIgY2xhc3M9XFxcInRhYnMtaWNvblxcXCI+e3tpY29ufX08L2k+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwidGFicy1sYWJlbFxcXCI+PHNsb3Q+PC9zbG90Pjwvc3Bhbj5cXG4gICAgPC9kaXY+XFxuICA8L3RlbXBsYXRlPlxcbjwvdGVtcGxhdGVzPlxcblwiXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vcmF3LWxvYWRlciEuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvdGFicy90YWJzLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAxMDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar template = __webpack_require__(104);\n\nVue.component('toggle', {\n  template: template,\n  props: {\n    model: {\n      type: Boolean,\n      twoWay: true,\n      required: true\n    }\n  },\n  methods: {\n    toggle: function(event) {\n      if (\n        event.isFinal &&\n        (this.model && event.deltaX < 0 || !this.model && event.deltaX > 0)\n      ) {\n        $(this.$el).find('input').click();\n      }\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RvZ2dsZS90b2dnbGUuanM/OGFhZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxMDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJ3JhdyEuL3RvZ2dsZS5odG1sJyk7XG5cblZ1ZS5jb21wb25lbnQoJ3RvZ2dsZScsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdHdvV2F5OiB0cnVlLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50LmlzRmluYWwgJiZcbiAgICAgICAgKHRoaXMubW9kZWwgJiYgZXZlbnQuZGVsdGFYIDwgMCB8fCAhdGhpcy5tb2RlbCAmJiBldmVudC5kZWx0YVggPiAwKVxuICAgICAgKSB7XG4gICAgICAgICQodGhpcy4kZWwpLmZpbmQoJ2lucHV0JykuY2xpY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvdG9nZ2xlL3RvZ2dsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDEwM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 104 */
/***/ function(module, exports) {

	eval("module.exports = \"<label class=\\\"quasar-toggle\\\" v-touch:pan-x=\\\"toggle\\\">\\n  <input type=\\\"checkbox\\\" v-model=\\\"model\\\">\\n  <div></div>\\n</label>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RvZ2dsZS90b2dnbGUuaHRtbD81MWRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bGFiZWwgY2xhc3M9XFxcInF1YXNhci10b2dnbGVcXFwiIHYtdG91Y2g6cGFuLXg9XFxcInRvZ2dsZVxcXCI+XFxuICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIHYtbW9kZWw9XFxcIm1vZGVsXFxcIj5cXG4gIDxkaXY+PC9kaXY+XFxuPC9sYWJlbD5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RvZ2dsZS90b2dnbGUuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDEwNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar templates = $(__webpack_require__(106));\n\nVue.component('tree-item', {\n  template: templates.find('#tree-item').html(),\n  props: ['model', 'contract-html', 'expand-html'],\n  methods: {\n    toggle: function() {\n      if (this.isExpandable) {\n        this.model.expanded = !this.model.expanded;\n        return;\n      }\n\n      if (typeof this.model.handler === 'function') {\n        this.model.handler(this.model);\n      }\n    }\n  },\n  computed: {\n    isExpandable: function() {\n      return this.model.children && this.model.children.length;\n    }\n  }\n});\n\nVue.component('tree', {\n  template: templates.find('#tree').html(),\n  props: {\n    model: {\n      type: Array,\n      required: true\n    },\n    contractHtml: {\n      type: String,\n      required: true\n    },\n    expandHtml: {\n      type: String,\n      required: true\n    }\n  }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RyZWUvdHJlZS5qcz83YjE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjEwNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHRlbXBsYXRlcyA9ICQocmVxdWlyZSgncmF3IS4vdHJlZS5odG1sJykpO1xuXG5WdWUuY29tcG9uZW50KCd0cmVlLWl0ZW0nLCB7XG4gIHRlbXBsYXRlOiB0ZW1wbGF0ZXMuZmluZCgnI3RyZWUtaXRlbScpLmh0bWwoKSxcbiAgcHJvcHM6IFsnbW9kZWwnLCAnY29udHJhY3QtaHRtbCcsICdleHBhbmQtaHRtbCddLFxuICBtZXRob2RzOiB7XG4gICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmlzRXhwYW5kYWJsZSkge1xuICAgICAgICB0aGlzLm1vZGVsLmV4cGFuZGVkID0gIXRoaXMubW9kZWwuZXhwYW5kZWQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLm1vZGVsLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5oYW5kbGVyKHRoaXMubW9kZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBpc0V4cGFuZGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY2hpbGRyZW4gJiYgdGhpcy5tb2RlbC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfVxuICB9XG59KTtcblxuVnVlLmNvbXBvbmVudCgndHJlZScsIHtcbiAgdGVtcGxhdGU6IHRlbXBsYXRlcy5maW5kKCcjdHJlZScpLmh0bWwoKSxcbiAgcHJvcHM6IHtcbiAgICBtb2RlbDoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgY29udHJhY3RIdG1sOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgZXhwYW5kSHRtbDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9saWIvd2ViLWNvbXBvbmVudHMvdHJlZS90cmVlLmpzXG4gKiogbW9kdWxlIGlkID0gMTA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 106 */
/***/ function(module, exports) {

	eval("module.exports = \"<templates>\\n  <template id=\\\"tree-item\\\">\\n    <li class=\\\"quasar-tree-item\\\">\\n      <div\\n        :class=\\\"{'quasar-tree-expandable-item': isExpandable, 'quasar-tree-link': model.handler}\\\"\\n        @click=\\\"toggle\\\"\\n      >\\n        <i v-if=\\\"model.icon\\\">{{model.icon}}</i>\\n        <span class=\\\"quasar-tree-label\\\">{{model.title}}</span>\\n        <span v-if=\\\"isExpandable\\\">{{{model.expanded ? contractHtml : expandHtml}}}</span>\\n      </div>\\n      <ul v-show=\\\"model.expanded\\\" v-if=\\\"isExpandable\\\" transition=\\\"slide\\\">\\n        <tree-item v-for=\\\"item in model.children\\\" :model=\\\"item\\\" :contract-html=\\\"contractHtml\\\" :expand-html=\\\"expandHtml\\\"></tree-item>\\n      </ul>\\n    </li>\\n  </template>\\n\\n  <template id=\\\"tree\\\">\\n    <div class=\\\"quasar-tree\\\">\\n      <ul>\\n        <tree-item\\n          v-for=\\\"item in model\\\"\\n          :model=\\\"item\\\"\\n          :contract-html=\\\"contractHtml\\\"\\n          :expand-html=\\\"expandHtml\\\"\\n        ></tree-item>\\n      </ul>\\n    </div>\\n  </template>\\n</templates>\\n\"\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RyZWUvdHJlZS5odG1sPzE2MjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUlBQWlJLCtFQUErRSx5RUFBeUUsWUFBWSxrREFBa0QsYUFBYSxnREFBZ0QsNkNBQTZDIiwiZmlsZSI6IjEwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGVzPlxcbiAgPHRlbXBsYXRlIGlkPVxcXCJ0cmVlLWl0ZW1cXFwiPlxcbiAgICA8bGkgY2xhc3M9XFxcInF1YXNhci10cmVlLWl0ZW1cXFwiPlxcbiAgICAgIDxkaXZcXG4gICAgICAgIDpjbGFzcz1cXFwieydxdWFzYXItdHJlZS1leHBhbmRhYmxlLWl0ZW0nOiBpc0V4cGFuZGFibGUsICdxdWFzYXItdHJlZS1saW5rJzogbW9kZWwuaGFuZGxlcn1cXFwiXFxuICAgICAgICBAY2xpY2s9XFxcInRvZ2dsZVxcXCJcXG4gICAgICA+XFxuICAgICAgICA8aSB2LWlmPVxcXCJtb2RlbC5pY29uXFxcIj57e21vZGVsLmljb259fTwvaT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJxdWFzYXItdHJlZS1sYWJlbFxcXCI+e3ttb2RlbC50aXRsZX19PC9zcGFuPlxcbiAgICAgICAgPHNwYW4gdi1pZj1cXFwiaXNFeHBhbmRhYmxlXFxcIj57e3ttb2RlbC5leHBhbmRlZCA/IGNvbnRyYWN0SHRtbCA6IGV4cGFuZEh0bWx9fX08L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPHVsIHYtc2hvdz1cXFwibW9kZWwuZXhwYW5kZWRcXFwiIHYtaWY9XFxcImlzRXhwYW5kYWJsZVxcXCIgdHJhbnNpdGlvbj1cXFwic2xpZGVcXFwiPlxcbiAgICAgICAgPHRyZWUtaXRlbSB2LWZvcj1cXFwiaXRlbSBpbiBtb2RlbC5jaGlsZHJlblxcXCIgOm1vZGVsPVxcXCJpdGVtXFxcIiA6Y29udHJhY3QtaHRtbD1cXFwiY29udHJhY3RIdG1sXFxcIiA6ZXhwYW5kLWh0bWw9XFxcImV4cGFuZEh0bWxcXFwiPjwvdHJlZS1pdGVtPlxcbiAgICAgIDwvdWw+XFxuICAgIDwvbGk+XFxuICA8L3RlbXBsYXRlPlxcblxcbiAgPHRlbXBsYXRlIGlkPVxcXCJ0cmVlXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwicXVhc2FyLXRyZWVcXFwiPlxcbiAgICAgIDx1bD5cXG4gICAgICAgIDx0cmVlLWl0ZW1cXG4gICAgICAgICAgdi1mb3I9XFxcIml0ZW0gaW4gbW9kZWxcXFwiXFxuICAgICAgICAgIDptb2RlbD1cXFwiaXRlbVxcXCJcXG4gICAgICAgICAgOmNvbnRyYWN0LWh0bWw9XFxcImNvbnRyYWN0SHRtbFxcXCJcXG4gICAgICAgICAgOmV4cGFuZC1odG1sPVxcXCJleHBhbmRIdG1sXFxcIlxcbiAgICAgICAgPjwvdHJlZS1pdGVtPlxcbiAgICAgIDwvdWw+XFxuICAgIDwvZGl2PlxcbiAgPC90ZW1wbGF0ZT5cXG48L3RlbXBsYXRlcz5cXG5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jhdy1sb2FkZXIhLi9zcmMvbGliL3dlYi1jb21wb25lbnRzL3RyZWUvdHJlZS5odG1sXG4gKiogbW9kdWxlIGlkID0gMTA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,
